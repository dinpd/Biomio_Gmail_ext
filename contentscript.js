var MAX_FILE_SIZE = 150000;
var gmail_scripts = ['gmail.js', 'gmail_executor.js'];
var gmail_scripts_urls = [];

for (var i = 0; i < gmail_scripts.length; i++) {
    gmail_scripts_urls.push(chrome.extension.getURL(gmail_scripts[i]));
}
var pgpContext = new e2e.openpgp.ContextImpl();
pgpContext.setKeyRingPassphrase('');
pgpContext.setArmorHeader(
    'Version',
    'BioMio v1.0');
var uid = 'Autogenerated Key (Biomio) <test@mail.com>';
window.onload = function () {
    $('body').append('<div id="biomio_elements"></div>');
    var biomio_elems = $('#biomio_elements');
    biomio_elems.load(chrome.extension.getURL('additional_html.html'), function () {
        for (i = 0; i < gmail_scripts_urls.length; i++) {
            biomio_elems.append('<script src="' + gmail_scripts_urls[i] + '"></script>');
        }
    });
};


window.addEventListener("message", function (event) {
    if (event.data.type && (event.data.type == "encrypt_sign")) {
        encryptMessage(event.data.data);
    } else if (event.data.type && (event.data.type == "decryptMessage")) {
        decryptMessage(event.data.data);
    }
}, false);

function encryptMessage(data) {
    console.log('Encrypt: ', data);
    prepareEncryptParameters(data);
    var keys = [];
    var sender_private_key = pgpContext.searchPrivateKey(uid).result_[0];
    for(var i = 0; i < data.recipients.length; i++){
        var pub_key = pgpContext.searchPublicKey(uid);
        if(pub_key.result_){
            $.extend(keys, pub_key.result_);
        }
    }
    if(data.hasOwnProperty('encryptObject') && data.encryptObject == 'file'){
        data.content = encryptFile(data, keys, sender_private_key);
    }else{
        data.content = _encryptMessage(data.content, keys, sender_private_key);
    }
    data.completedAction = 'encrypt_only';
    sendResponse(data);
}

function _encryptMessage(content, keys, sender_key){
    var encrypted_content = pgpContext.encryptSign(content, [], keys, [], sender_key);
    return encrypted_content.result_;
}

function decryptMessage(data) {
    console.log('Decrypt: ', data);
    var decrypted_text = pgpContext.verifyDecrypt(function(){}, data.content);
    decrypted_text = e2e.byteArrayToStringAsync(decrypted_text.result_.decrypt.data, decrypted_text.result_.decrypt.options.charset);
    data.content = decrypted_text.result_;
    data.completedAction = 'decrypt_verify';
    sendResponse(data);
}

function sendResponse(message) {
    console.log(message);
    window.postMessage(message, '*');
}

function prepareEncryptParameters(data){
    var recipients_arr = data.recipients;
    for (var i = 0; i < recipients_arr.length; i++) {
        var recipient = recipients_arr[i].split(' ');
        recipients_arr[i] = recipient[recipient.length - 1];
    }
    data.recipients = recipients_arr;
    data.currentUser = '<' + data.currentUser + '>';
}

function encryptFile(data, public_keys, sender_key){
    var fileContent = data.content;
    var fileParts = [];
    var encryptedFileParts = [];
    if (fileContent.length >= MAX_FILE_SIZE) {
        for (var i = 0; i < fileContent.length; i += MAX_FILE_SIZE) {
            if (fileContent.length <= i + MAX_FILE_SIZE) {
                fileParts.push(fileContent.substring(i, fileContent.length));
                break;
            }
            fileParts.push(fileContent.substring(i, i + MAX_FILE_SIZE));
        }
    } else {
        fileParts = [fileContent];
    }
    for (var k = 0; k < fileParts.length; k++) {
        encryptedFileParts.push(_encryptMessage(fileParts[k], public_keys, sender_key));
    }
    return encryptedFileParts.join('<br>');
}