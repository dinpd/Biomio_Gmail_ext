// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Bootstrap for the Google JS Library (Closure).
 *
 * In uncompiled mode base.js will write out Closure's deps file, unless the
 * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to
 * include their own deps file(s) from different locations.
 *
 * @author arv@google.com (Erik Arvidsson)
 *
 * @provideGoog
 */


/**
 * @define {boolean} Overridden to true by the compiler when --closure_pass
 *     or --mark_as_compiled is specified.
 */
var COMPILED = false;


/**
 * Base namespace for the Closure library.  Checks to see goog is already
 * defined in the current scope before assigning to prevent clobbering if
 * base.js is loaded more than once.
 *
 * @const
 */
var goog = goog || {};


/**
 * Reference to the global context.  In most cases this will be 'window'.
 */
goog.global = this;


/**
 * A hook for overriding the define values in uncompiled mode.
 *
 * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before
 * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},
 * {@code goog.define} will use the value instead of the default value.  This
 * allows flags to be overwritten without compilation (this is normally
 * accomplished with the compiler's "define" flag).
 *
 * Example:
 * <pre>
 *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};
 * </pre>
 *
 * @type {Object.<string, (string|number|boolean)>|undefined}
 */
goog.global.CLOSURE_UNCOMPILED_DEFINES;


/**
 * A hook for overriding the define values in uncompiled or compiled mode,
 * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In
 * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.
 *
 * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or
 * string literals or the compiler will emit an error.
 *
 * While any @define value may be set, only those set with goog.define will be
 * effective for uncompiled code.
 *
 * Example:
 * <pre>
 *   var CLOSURE_DEFINES = {'goog.DEBUG': false};
 * </pre>
 *
 * @type {Object.<string, (string|number|boolean)>|undefined}
 */
goog.global.CLOSURE_DEFINES;


/**
 * Returns true if the specified value is not undefined.
 * WARNING: Do not use this to test if an object has a property. Use the in
 * operator instead.
 *
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is defined.
 */
goog.isDef = function(val) {
  // void 0 always evaluates to undefined and hence we do not need to depend on
  // the definition of the global variable named 'undefined'.
  return val !== void 0;
};


/**
 * Builds an object structure for the provided namespace path, ensuring that
 * names that already exist are not overwritten. For example:
 * "a.b.c" -> a = {};a.b={};a.b.c={};
 * Used by goog.provide and goog.exportSymbol.
 * @param {string} name name of the object that this file defines.
 * @param {*=} opt_object the object to expose at the end of the path.
 * @param {Object=} opt_objectToExportTo The object to add the path to; default
 *     is |goog.global|.
 * @private
 */
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split('.');
  var cur = opt_objectToExportTo || goog.global;

  // Internet Explorer exhibits strange behavior when throwing errors from
  // methods externed in this manner.  See the testExportSymbolExceptions in
  // base_test.html for an example.
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript('var ' + parts[0]);
  }

  // Certain browsers cannot parse code in the form for((a in b); c;);
  // This pattern is produced by the JSCompiler when it collapses the
  // statement above into the conditional loop below. To prevent this from
  // happening, use a for-loop and reserve the init logic as below.

  // Parentheses added to eliminate strict JS warning in Firefox.
  for (var part; parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      // last part and we have an object; use it
      cur[part] = opt_object;
    } else if (cur[part]) {
      cur = cur[part];
    } else {
      cur = cur[part] = {};
    }
  }
};


/**
 * Defines a named value. In uncompiled mode, the value is retreived from
 * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and
 * has the property specified, and otherwise used the defined defaultValue.
 * When compiled the default can be overridden using the compiler
 * options or the value set in the CLOSURE_DEFINES object.
 *
 * @param {string} name The distinguished name to provide.
 * @param {string|number|boolean} defaultValue
 */
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&
        Object.prototype.hasOwnProperty.call(
            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else if (goog.global.CLOSURE_DEFINES &&
        Object.prototype.hasOwnProperty.call(
            goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};


/**
 * @define {boolean} DEBUG is provided as a convenience so that debugging code
 * that should not be included in a production js_binary can be easily stripped
 * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most
 * toString() methods should be declared inside an "if (goog.DEBUG)" conditional
 * because they are generally used for debugging purposes and it is difficult
 * for the JSCompiler to statically determine whether they are used.
 */
goog.DEBUG = true;


/**
 * @define {string} LOCALE defines the locale being used for compilation. It is
 * used to select locale specific data to be compiled in js binary. BUILD rule
 * can specify this value by "--define goog.LOCALE=<locale_name>" as JSCompiler
 * option.
 *
 * Take into account that the locale code format is important. You should use
 * the canonical Unicode format with hyphen as a delimiter. Language must be
 * lowercase, Language Script - Capitalized, Region - UPPERCASE.
 * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.
 *
 * See more info about locale codes here:
 * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers
 *
 * For language codes you should use values defined by ISO 693-1. See it here
 * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from
 * this rule: the Hebrew language. For legacy reasons the old code (iw) should
 * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.
 */
goog.define('goog.LOCALE', 'en');  // default to en


/**
 * @define {boolean} Whether this code is running on trusted sites.
 *
 * On untrusted sites, several native functions can be defined or overridden by
 * external libraries like Prototype, Datejs, and JQuery and setting this flag
 * to false forces closure to use its own implementations when possible.
 *
 * If your JavaScript can be loaded by a third party site and you are wary about
 * relying on non-standard implementations, specify
 * "--define goog.TRUSTED_SITE=false" to the JSCompiler.
 */
goog.define('goog.TRUSTED_SITE', true);


/**
 * @define {boolean} Whether a project is expected to be running in strict mode.
 *
 * This define can be used to trigger alternate implementations compatible with
 * running in EcmaScript Strict mode or warn about unavailable functionality.
 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode
 */
goog.define('goog.STRICT_MODE_COMPATIBLE', false);


/**
 * Creates object stubs for a namespace.  The presence of one or more
 * goog.provide() calls indicate that the file defines the given
 * objects/namespaces.  Provided objects must not be null or undefined.
 * Build tools also scan for provide/require statements
 * to discern dependencies, build dependency files (see deps.js), etc.
 * @see goog.require
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part".
 */
goog.provide = function(name) {
  if (!COMPILED) {
    // Ensure that the same namespace isn't provided twice.
    // A goog.module/goog.provide maps a goog.require to a specific file
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }

  goog.constructNamespace_(name);
};


/**
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part".
 * @param {Object=} opt_obj The object to embed in the namespace.
 */
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];

    var namespace = name;
    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }

  goog.exportPath_(name, opt_obj);
};


/**
 * goog.module serves two purposes:
 * - marks a file that must be loaded as a module
 * - reserves a namespace (it can not also be goog.provided)
 * and has three requirements:
 * - goog.module may not be used in the same file as goog.provide.
 * - goog.module must be the first statement in the file.
 * - only one goog.module is allowed per file.
 * When a goog.module annotated file is loaded, it is loaded enclosed in
 * a strict function closure. This means that:
 * - any variable declared in a goog.module file are private to the file,
 * not global. Although the compiler is expected to inline the module.
 * - The code must obey all the rules of "strict" JavaScript.
 * - the file will be marked as "use strict"
 *
 * NOTE: unlike goog.provide, goog.module does not declare any symbols by
 * itself.
 *
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part", is expected but not required.
 */
goog.module = function(name) {
  if (!goog.isString(name) || !name) {
    throw Error('Invalid module identifier');
  }
  if (!goog.isInModuleLoader_()) {
    throw Error('Module ' + name + ' has been loaded incorrectly.');
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error('goog.module may only be called once per module.');
  }

  // Store the module name for the loader.
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    // Ensure that the same namespace isn't provided twice.
    // A goog.module/goog.provide maps a goog.require to a specific file
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};


/**
 * @param {string} name The module identifier.
 * @return {?} The module exports for an already loaded module or null.
 *
 * Note: This is not an alternative to goog.require, it does not
 * indicate a hard dependency, instead it is used to indicate
 * an optional dependency or to access the exports of a module
 * that has already been loaded.
 */
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};


/**
 * @param {string} name The module identifier.
 * @return {?} The module exports for an already loaded module or null.
 * @private
 */
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      // goog.require only return a value with-in goog.module files.
      return name in goog.loadedModules_ ?
          goog.loadedModules_[name] :
          goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};


/**
 * @private {{
 *     moduleName:(string|undefined),
 *     declareTestMethods:boolean}|null}}
 */
goog.moduleLoaderState_ = null;


/**
 * @private
 * @return {boolean} Whether a goog.module is currently being initialized.
 */
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};


/**
 * Indicate that a module's exports that are known test methods should
 * be copied to the global object.  This makes the test methods visible to
 * test runners that inspect the global object.
 *
 * TODO(johnlenz): Make the test framework aware of goog.module so
 * that this isn't necessary. Alternately combine this with goog.setTestOnly
 * to minimize boiler plate.
 */
goog.module.declareTestMethods = function() {
  if (!goog.isInModuleLoader_()) {
    throw new Error('goog.module.declareTestMethods must be called from ' +
        'within a goog.module');
  }
  goog.moduleLoaderState_.declareTestMethods = true;
};


/**
 * Indicate that a module's exports that are known test methods should
 * be copied to the global object.  This makes the test methods visible to
 * test runners that inspect the global object.
 *
 * TODO(johnlenz): Make the test framework aware of goog.module so
 * that this isn't necessary. Alternately combine this with goog.setTestOnly
 * to minimize boiler plate.
 */
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error('goog.module.declareLegacyNamespace must be called from ' +
        'within a goog.module');
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error('goog.module must be called prior to ' + 
        'goog.module.declareLegacyNamespace.');
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
}


/**
 * Marks that the current file should only be used for testing, and never for
 * live code in production.
 *
 * In the case of unit tests, the message may optionally be an exact namespace
 * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra
 * provide (if not explicitly defined in the code).
 *
 * @param {string=} opt_message Optional message to add to the error that's
 *     raised when used in production code.
 */
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || '';
    throw Error('Importing test-only code into non-debug environment' +
                (opt_message ? ': ' + opt_message : '.'));
  }
};


/**
 * Forward declares a symbol. This is an indication to the compiler that the
 * symbol may be used in the source yet is not required and may not be provided
 * in compilation.
 *
 * The most common usage of forward declaration is code that takes a type as a
 * function parameter but does not need to require it. By forward declaring
 * instead of requiring, no hard dependency is made, and (if not required
 * elsewhere) the namespace may never be required and thus, not be pulled
 * into the JavaScript binary. If it is required elsewhere, it will be type
 * checked as normal.
 *
 *
 * @param {string} name The namespace to forward declare in the form of
 *     "goog.package.part".
 */
goog.forwardDeclare = function(name) {};


if (!COMPILED) {

  /**
   * Check if the given name has been goog.provided. This will return false for
   * names that are available only as implicit namespaces.
   * @param {string} name name of the object to look for.
   * @return {boolean} Whether the name has been provided.
   * @private
   */
  goog.isProvided_ = function(name) {
    return (name in goog.loadedModules_) ||
        (!goog.implicitNamespaces_[name] &&
            goog.isDefAndNotNull(goog.getObjectByName(name)));
  };

  /**
   * Namespaces implicitly defined by goog.provide. For example,
   * goog.provide('goog.events.Event') implicitly declares that 'goog' and
   * 'goog.events' must be namespaces.
   *
   * @type {Object.<string, (boolean|undefined)>}
   * @private
   */
  goog.implicitNamespaces_ = {'goog.module': true};

  // NOTE: We add goog.module as an implicit namespace as goog.module is defined
  // here and because the existing module package has not been moved yet out of
  // the goog.module namespace. This satisifies both the debug loader and
  // ahead-of-time dependency management.
}


/**
 * Returns an object based on its fully qualified external name.  The object
 * is not found if null or undefined.  If you are using a compilation pass that
 * renames property names beware that using this function will not find renamed
 * properties.
 *
 * @param {string} name The fully qualified name.
 * @param {Object=} opt_obj The object within which to look; default is
 *     |goog.global|.
 * @return {?} The value (object or primitive) or, if not found, null.
 */
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split('.');
  var cur = opt_obj || goog.global;
  for (var part; part = parts.shift(); ) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};


/**
 * Globalizes a whole namespace, such as goog or goog.lang.
 *
 * @param {Object} obj The namespace to globalize.
 * @param {Object=} opt_global The object to add the properties to.
 * @deprecated Properties may be explicitly exported to the global scope, but
 *     this should no longer be done in bulk.
 */
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};


/**
 * Adds a dependency from a file to the files it requires.
 * @param {string} relPath The path to the js file.
 * @param {Array.<string>} provides An array of strings with
 *     the names of the objects this file provides.
 * @param {Array.<string>} requires An array of strings with
 *     the names of the objects this file requires.
 * @param {boolean=} opt_isModule Whether this dependency must be loaded as
 *     a module as declared by goog.module.
 */
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, '/');
    var deps = goog.dependencies_;
    for (var i = 0; provide = provides[i]; i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0; require = requires[j]; j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};




// NOTE(nnaze): The debug DOM loader was included in base.js as an original way
// to do "debug-mode" development.  The dependency system can sometimes be
// confusing, as can the debug DOM loader's asynchronous nature.
//
// With the DOM loader, a call to goog.require() is not blocking -- the script
// will not load until some point after the current script.  If a namespace is
// needed at runtime, it needs to be defined in a previous script, or loaded via
// require() with its registered dependencies.
// User-defined namespaces may need their own deps file.  See http://go/js_deps,
// http://go/genjsdeps, or, externally, DepsWriter.
// https://developers.google.com/closure/library/docs/depswriter
//
// Because of legacy clients, the DOM loader can't be easily removed from
// base.js.  Work is being done to make it disableable or replaceable for
// different environments (DOM-less JavaScript interpreters like Rhino or V8,
// for example). See bootstrap/ for more information.


/**
 * @define {boolean} Whether to enable the debug loader.
 *
 * If enabled, a call to goog.require() will attempt to load the namespace by
 * appending a script tag to the DOM (if the namespace has been registered).
 *
 * If disabled, goog.require() will simply assert that the namespace has been
 * provided (and depend on the fact that some outside tool correctly ordered
 * the script).
 */
goog.define('goog.ENABLE_DEBUG_LOADER', true);


/**
 * @param {string} msg
 * @private
 */
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console['error'](msg);
  }
};


/**
 * Implements a system for the dynamic resolution of dependencies that works in
 * parallel with the BUILD system. Note that all calls to goog.require will be
 * stripped by the JSCompiler when the --closure_pass option is used.
 * @see goog.provide
 * @param {string} name Namespace to include (as was given in goog.provide()) in
 *     the form "goog.package.part".
 * @return {?} If called within a goog.module file, the associated namespace or
 *     module otherwise null.
 */
goog.require = function(name) {

  // If the object already exists we do not need do do anything.
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }

    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return null;
      }
    }

    var errorMessage = 'goog.require could not find: ' + name;
    goog.logToConsole_(errorMessage);

    throw Error(errorMessage);
  }
};


/**
 * Path for included scripts.
 * @type {string}
 */
goog.basePath = '';


/**
 * A hook for overriding the base path.
 * @type {string|undefined}
 */
goog.global.CLOSURE_BASE_PATH;


/**
 * Whether to write out Closure's deps file. By default, the deps are written.
 * @type {boolean|undefined}
 */
goog.global.CLOSURE_NO_DEPS;


/**
 * A function to import a single script. This is meant to be overridden when
 * Closure is being run in non-HTML contexts, such as web workers. It's defined
 * in the global scope so that it can be set before base.js is loaded, which
 * allows deps.js to be imported properly.
 *
 * The function is passed the script source, which is a relative URI. It should
 * return true if the script was imported, false otherwise.
 * @type {(function(string): boolean)|undefined}
 */
goog.global.CLOSURE_IMPORT_SCRIPT;


/**
 * Null function used for default values of callbacks, etc.
 * @return {void} Nothing.
 */
goog.nullFunction = function() {};


/**
 * The identity function. Returns its first argument.
 *
 * @param {*=} opt_returnValue The single value that will be returned.
 * @param {...*} var_args Optional trailing arguments. These are ignored.
 * @return {?} The first argument. We can't know the type -- just pass it along
 *      without type.
 * @deprecated Use goog.functions.identity instead.
 */
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};


/**
 * When defining a class Foo with an abstract method bar(), you can do:
 * Foo.prototype.bar = goog.abstractMethod
 *
 * Now if a subclass of Foo fails to override bar(), an error will be thrown
 * when bar() is invoked.
 *
 * Note: This does not take the name of the function to override as an argument
 * because that would make it more difficult to obfuscate our JavaScript code.
 *
 * @type {!Function}
 * @throws {Error} when invoked to indicate the method should be overridden.
 */
goog.abstractMethod = function() {
  throw Error('unimplemented abstract method');
};


/**
 * Adds a {@code getInstance} static method that always returns the same
 * instance object.
 * @param {!Function} ctor The constructor for the class to add the static
 *     method to.
 */
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      // NOTE: JSCompiler can't optimize away Array#push.
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};


/**
 * All singleton classes that have been instantiated, for testing. Don't read
 * it directly, use the {@code goog.testing.singleton} module. The compiler
 * removes this variable if unused.
 * @type {!Array.<!Function>}
 * @private
 */
goog.instantiatedSingletons_ = [];


/**
 * @define {boolean} Whether to load goog.modules using {@code eval} when using
 * the debug loader.  This provides a better debugging experience as the
 * source is unmodified and can be edited using Chrome Workspaces or
 * similiar.  However in some environments the use of {@code eval} is banned
 * so we provide an alternative.
 */
goog.define('goog.LOAD_MODULE_USING_EVAL', true);


/**
 * @define {boolean} Whether the exports of goog.modules should be sealed when
 * possible.
 */
goog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);


/**
 * The registry of initialized modules:
 * the module identifier to module exports map.
 * @private @const {Object.<string, ?>}
 */
goog.loadedModules_ = {};


/**
 * True if goog.dependencies_ is available.
 * @const {boolean}
 */
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;


if (goog.DEPENDENCIES_ENABLED) {
  /**
   * Object used to keep track of urls that have already been added. This record
   * allows the prevention of circular dependencies.
   * @type {Object}
   * @private
   */
  goog.included_ = {};


  /**
   * This object is used to keep track of dependencies and other data that is
   * used for loading scripts.
   * @private
   * @type {Object}
   */
  goog.dependencies_ = {
    pathIsModule: {}, // 1 to 1
    nameToPath: {}, // many to 1
    requires: {}, // 1 to many
    // Used when resolving dependencies to prevent us from visiting file twice.
    visited: {},
    written: {} // Used to keep track of script files we have written.
  };


  /**
   * Tries to detect whether is in the context of an HTML document.
   * @return {boolean} True if it looks like HTML document.
   * @private
   */
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != 'undefined' &&
           'write' in doc;  // XULDocument misses write.
  };


  /**
   * Tries to detect the base path of base.js script that bootstraps Closure.
   * @private
   */
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else if (!goog.inHtmlDocument_()) {
      return;
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName('script');
    // Search backwards since the current script is in almost all cases the one
    // that has base.js.
    for (var i = scripts.length - 1; i >= 0; --i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf('?');
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == 'base.js') {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };


  /**
   * Imports a script if, and only if, that script hasn't already been imported.
   * (Must be called at execution time)
   * @param {string} src Script source.
   * @param {string=} opt_sourceText The optionally source text to evaluate
   * @private
   */
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||
        goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };


  /** @const @private {boolean} */
  goog.IS_OLD_IE_ = goog.global.document &&
      goog.global.document.all && !goog.global.atob;


  /**
   * Given a URL initiate retrieval and execution of the module.
   * @param {string} src Script source URL.
   * @private
   */
  goog.importModule_ = function(src) {
    // In an attempt to keep browsers from timing out loading scripts using
    // synchronous XHRs, put each load in its own script block.
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';

    if (goog.importScript_('', bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };


  /** @private {Array.<string>} */
  goog.queuedModules_ = [];


  /**
   * Retrieve and execute a module.
   * @param {string} src Script source URL.
   * @private
   */
  goog.retrieveAndExecModule_ = function(src) {
    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging
    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.
    var separator;
    while ((separator = src.indexOf('/./')) != -1) {
      src = src.substr(0, separator) + src.substr(separator + '/.'.length);
    }
    while ((separator = src.indexOf('/../')) != -1) {
      var previousComponent = src.lastIndexOf('/', separator - 1);
      src = src.substr(0, previousComponent) +
          src.substr(separator + '/..'.length);
    }

    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||
        goog.writeScriptTag_;

    var scriptText = null;

    var xhr = new goog.global['XMLHttpRequest']();

    /** @this {Object} */
    xhr.onload = function() {
      scriptText = this.responseText;
    };
    xhr.open('get', src, false);
    xhr.send();

    scriptText = xhr.responseText;

    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.queuedModules_.push(execModuleScript);
      } else {
        importScript(src, execModuleScript);
      }
      goog.dependencies_.written[src] = true;
    } else {
      throw new Error('load of ' + src + 'failed');
    }
  };


  /**
   * Return an appropriate module text. Suitable to insert into
   * a script tag (that is unescaped).
   * @param {string} srcUrl
   * @param {string} scriptText
   * @return {string}
   * @private
   */
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return '' +
          'goog.loadModule(function(exports) {' +
          '"use strict";' +
          scriptText +
          '\n' + // terminate any trailing single line comment.
          ';return exports' +
          '});' +
          '\n//# sourceURL=' + srcUrl + '\n';
    } else {
      return '' +
          'goog.loadModule(' +
          goog.global.JSON.stringify(
              scriptText + '\n//# sourceURL=' + srcUrl + '\n') +
          ');';
    }
  };


  /**
   * Load any deferred goog.module loads.
   * @private
   */
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0; i < count; i++) {
        var entry = queue[i];
        goog.globalEval(entry);
      }
    }
  };


  /**
   * @param {function(?):?|string} moduleDef The module definition.
   */
  goog.loadModule = function(moduleDef) {
    // NOTE: we allow function definitions to be either in the from
    // of a string to eval (which keeps the original source intact) or
    // in a eval forbidden environment (CSP) we allow a function definition
    // which in its body must call {@code goog.module}, and return the exports
    // of the module.
    try {
      goog.moduleLoaderState_ = {
          moduleName: undefined, declareTestMethods: false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else if (goog.isString(moduleDef)) {
        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
      } else {
        throw Error('Invalid module definition');
      }

      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name \"' + moduleName + '\"');
      }

      // Don't seal legacy namespaces as they may be uses as a parent of
      // another namespace
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
        Object.seal(exports);
      }

      goog.loadedModules_[moduleName] = exports;
      if (goog.moduleLoaderState_.declareTestMethods) {
        for (var entry in exports) {
          if (entry.indexOf('test', 0) === 0 ||
              entry == 'tearDown' ||
              entry == 'setup') {
            goog.global[entry] = exports[entry];
          }
        }
      }
    } finally {
      goog.moduleLoaderState_ = null;
    }
  };


  /**
   * @private @const {function(string):?}
   */
  goog.loadModuleFromSource_ = function() {
    // NOTE: we avoid declaring parameters or local variables here to avoid
    // masking globals or leaking values into the module definition.
    'use strict';
    var exports = {};
    eval(arguments[0]);
    return exports;
  };


  /**
   * The default implementation of the import function. Writes a script tag to
   * import the script.
   *
   * @param {string} src The script url.
   * @param {string=} opt_sourceText The optionally source text to evaluate
   * @return {boolean} True if the script was imported, false otherwise.
   * @private
   */
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;

      // If the user tries to require a new symbol after document load,
      // something has gone terribly wrong. Doing a document.write would
      // wipe out the page.
      if (doc.readyState == 'complete') {
        // Certain test frameworks load base.js multiple times, which tries
        // to write deps.js each time. If that happens, just fail silently.
        // These frameworks wipe the page between each load of base.js, so this
        // is OK.
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }

      var isOldIE = goog.IS_OLD_IE_;

      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          doc.write(
              '<script type="text/javascript" src="' +
                  src + '"></' + 'script>');
        } else {
          var state = " onreadystatechange='goog.onScriptLoad_(this, " +
              ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write(
              '<script type="text/javascript" src="' +
                  src + '"' + state + '></' + 'script>');
        }
      } else {
        doc.write(
            '<script type="text/javascript">' +
            opt_sourceText +
            '</' + 'script>');
      }
      return true;
    } else {
      return false;
    }
  };


  /** @private {number} */
  goog.lastNonModuleScriptIndex_ = 0;


  /**
   * A readystatechange handler for legacy IE
   * @param {HTMLScriptElement} script
   * @param {number} scriptIndex
   * @return {boolean}
   * @private
   */
  goog.onScriptLoad_ = function(script, scriptIndex) {
    // for now load the modules when we reach the last script,
    // later allow more inter-mingling.
    if (script.readyState == 'complete' &&
        goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };

  /**
   * Resolves dependencies based on the dependencies added using addDependency
   * and calls importScript_ in the correct order.
   * @private
   */
  goog.writeScripts_ = function() {
    // The scripts we need to write this time.
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;

    function visitNode(path) {
      if (path in deps.written) {
        return;
      }

      // We have already visited this one. We can get here if we have cyclic
      // dependencies.
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }

      deps.visited[path] = true;

      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          // If the required name is defined, we assume that it was already
          // bootstrapped by other means.
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error('Undefined nameToPath for ' + requireName);
            }
          }
        }
      }

      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }

    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }

    // record that we are going to load all these scripts.
    for (var i = 0; i < scripts.length; i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }

    // If a module is loaded synchronously then we need to
    // clear the current inModuleLoader value, and restore it when we are
    // done loading the current "requires".
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;

    var loadingModule = false;
    for (var i = 0; i < scripts.length; i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          loadingModule = true;
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error('Undefined script input');
      }
    }

    // restore the current "module loading state"
    goog.moduleLoaderState_ = moduleState;
  };


  /**
   * Looks at the dependency rules and tries to determine the script file that
   * fulfills a particular rule.
   * @param {string} rule In the form goog.namespace.Class or project.script.
   * @return {?string} Url corresponding to the rule, or null.
   * @private
   */
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };

  goog.findBasePath_();

  // Allow projects to manage the deps files themselves.
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + 'deps.js');
  }
}



//==============================================================================
// Language Enhancements
//==============================================================================


/**
 * This is a "fixed" version of the typeof operator.  It differs from the typeof
 * operator in such a way that null returns 'null' and arrays return 'array'.
 * @param {*} value The value to get the type of.
 * @return {string} The name of the type.
 */
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == 'object') {
    if (value) {
      // Check these first, so we can avoid calling Object.prototype.toString if
      // possible.
      //
      // IE improperly marshals tyepof across execution contexts, but a
      // cross-context object will still return false for "instanceof Object".
      if (value instanceof Array) {
        return 'array';
      } else if (value instanceof Object) {
        return s;
      }

      // HACK: In order to use an Object prototype method on the arbitrary
      //   value, the compiler requires the value be cast to type Object,
      //   even though the ECMA spec explicitly allows it.
      var className = Object.prototype.toString.call(
          /** @type {Object} */ (value));
      // In Firefox 3.6, attempting to access iframe window objects' length
      // property throws an NS_ERROR_FAILURE, so we need to special-case it
      // here.
      if (className == '[object Window]') {
        return 'object';
      }

      // We cannot always use constructor == Array or instanceof Array because
      // different frames have different Array objects. In IE6, if the iframe
      // where the array was created is destroyed, the array loses its
      // prototype. Then dereferencing val.splice here throws an exception, so
      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'
      // so that will work. In this case, this function will return false and
      // most array functions will still work because the array is still
      // array-like (supports length and []) even though it has lost its
      // prototype.
      // Mark Miller noticed that Object.prototype.toString
      // allows access to the unforgeable [[Class]] property.
      //  15.2.4.2 Object.prototype.toString ( )
      //  When the toString method is called, the following steps are taken:
      //      1. Get the [[Class]] property of this object.
      //      2. Compute a string value by concatenating the three strings
      //         "[object ", Result(1), and "]".
      //      3. Return Result(2).
      // and this behavior survives the destruction of the execution context.
      if ((className == '[object Array]' ||
           // In IE all non value types are wrapped as objects across window
           // boundaries (not iframe though) so we have to do object detection
           // for this edge case.
           typeof value.length == 'number' &&
           typeof value.splice != 'undefined' &&
           typeof value.propertyIsEnumerable != 'undefined' &&
           !value.propertyIsEnumerable('splice')

          )) {
        return 'array';
      }
      // HACK: There is still an array case that fails.
      //     function ArrayImpostor() {}
      //     ArrayImpostor.prototype = [];
      //     var impostor = new ArrayImpostor;
      // this can be fixed by getting rid of the fast path
      // (value instanceof Array) and solely relying on
      // (value && Object.prototype.toString.vall(value) === '[object Array]')
      // but that would require many more function calls and is not warranted
      // unless closure code is receiving objects from untrusted sources.

      // IE in cross-window calls does not correctly marshal the function type
      // (it appears just as an object) so we cannot use just typeof val ==
      // 'function'. However, if the object has a call property, it is a
      // function.
      if ((className == '[object Function]' ||
          typeof value.call != 'undefined' &&
          typeof value.propertyIsEnumerable != 'undefined' &&
          !value.propertyIsEnumerable('call'))) {
        return 'function';
      }

    } else {
      return 'null';
    }

  } else if (s == 'function' && typeof value.call == 'undefined') {
    // In Safari typeof nodeList returns 'function', and on Firefox typeof
    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We
    // would like to return object for those and we can detect an invalid
    // function by making sure that the function object has a call method.
    return 'object';
  }
  return s;
};


/**
 * Returns true if the specified value is null.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is null.
 */
goog.isNull = function(val) {
  return val === null;
};


/**
 * Returns true if the specified value is defined and not null.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is defined and not null.
 */
goog.isDefAndNotNull = function(val) {
  // Note that undefined == null.
  return val != null;
};


/**
 * Returns true if the specified value is an array.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is an array.
 */
goog.isArray = function(val) {
  return goog.typeOf(val) == 'array';
};


/**
 * Returns true if the object looks like an array. To qualify as array like
 * the value needs to be either a NodeList or an object with a Number length
 * property.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is an array.
 */
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == 'array' || type == 'object' && typeof val.length == 'number';
};


/**
 * Returns true if the object looks like a Date. To qualify as Date-like the
 * value needs to be an object and have a getFullYear() function.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a like a Date.
 */
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == 'function';
};


/**
 * Returns true if the specified value is a string.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a string.
 */
goog.isString = function(val) {
  return typeof val == 'string';
};


/**
 * Returns true if the specified value is a boolean.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is boolean.
 */
goog.isBoolean = function(val) {
  return typeof val == 'boolean';
};


/**
 * Returns true if the specified value is a number.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a number.
 */
goog.isNumber = function(val) {
  return typeof val == 'number';
};


/**
 * Returns true if the specified value is a function.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a function.
 */
goog.isFunction = function(val) {
  return goog.typeOf(val) == 'function';
};


/**
 * Returns true if the specified value is an object.  This includes arrays and
 * functions.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is an object.
 */
goog.isObject = function(val) {
  var type = typeof val;
  return type == 'object' && val != null || type == 'function';
  // return Object(val) === val also works, but is slower, especially if val is
  // not an object.
};


/**
 * Gets a unique ID for an object. This mutates the object so that further calls
 * with the same object as a parameter returns the same value. The unique ID is
 * guaranteed to be unique across the current session amongst objects that are
 * passed into {@code getUid}. There is no guarantee that the ID is unique or
 * consistent across sessions. It is unsafe to generate unique ID for function
 * prototypes.
 *
 * @param {Object} obj The object to get the unique ID for.
 * @return {number} The unique ID for the object.
 */
goog.getUid = function(obj) {
  // TODO(arv): Make the type stricter, do not accept null.

  // In Opera window.hasOwnProperty exists but always returns false so we avoid
  // using it. As a consequence the unique ID generated for BaseClass.prototype
  // and SubClass.prototype will be the same.
  return obj[goog.UID_PROPERTY_] ||
      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};


/**
 * Whether the given object is alreay assigned a unique ID.
 *
 * This does not modify the object.
 *
 * @param {Object} obj The object to check.
 * @return {boolean} Whether there an assigned unique id for the object.
 */
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};


/**
 * Removes the unique ID from an object. This is useful if the object was
 * previously mutated using {@code goog.getUid} in which case the mutation is
 * undone.
 * @param {Object} obj The object to remove the unique ID field from.
 */
goog.removeUid = function(obj) {
  // TODO(arv): Make the type stricter, do not accept null.

  // In IE, DOM nodes are not instances of Object and throw an exception if we
  // try to delete.  Instead we try to use removeAttribute.
  if ('removeAttribute' in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  /** @preserveTry */
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};


/**
 * Name for unique ID property. Initialized in a way to help avoid collisions
 * with other closure JavaScript on the same page.
 * @type {string}
 * @private
 */
goog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);


/**
 * Counter for UID.
 * @type {number}
 * @private
 */
goog.uidCounter_ = 0;


/**
 * Adds a hash code field to an object. The hash code is unique for the
 * given object.
 * @param {Object} obj The object to get the hash code for.
 * @return {number} The hash code for the object.
 * @deprecated Use goog.getUid instead.
 */
goog.getHashCode = goog.getUid;


/**
 * Removes the hash code field from an object.
 * @param {Object} obj The object to remove the field from.
 * @deprecated Use goog.removeUid instead.
 */
goog.removeHashCode = goog.removeUid;


/**
 * Clones a value. The input may be an Object, Array, or basic type. Objects and
 * arrays will be cloned recursively.
 *
 * WARNINGS:
 * <code>goog.cloneObject</code> does not detect reference loops. Objects that
 * refer to themselves will cause infinite recursion.
 *
 * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies
 * UIDs created by <code>getUid</code> into cloned results.
 *
 * @param {*} obj The value to clone.
 * @return {*} A clone of the input value.
 * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.
 */
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == 'object' || type == 'array') {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == 'array' ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }

  return obj;
};


/**
 * A native implementation of goog.bind.
 * @param {Function} fn A function to partially apply.
 * @param {Object|undefined} selfObj Specifies the object which this should
 *     point to when the function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function bind() was
 *     invoked as a method of.
 * @private
 * @suppress {deprecated} The compiler thinks that Function.prototype.bind is
 *     deprecated because some people have declared a pure-JS version.
 *     Only the pure-JS version is truly deprecated.
 */
goog.bindNative_ = function(fn, selfObj, var_args) {
  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));
};


/**
 * A pure-JS implementation of goog.bind.
 * @param {Function} fn A function to partially apply.
 * @param {Object|undefined} selfObj Specifies the object which this should
 *     point to when the function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function bind() was
 *     invoked as a method of.
 * @private
 */
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error();
  }

  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      // Prepend the bound arguments to the current arguments.
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };

  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};


/**
 * Partially applies this function to a particular 'this object' and zero or
 * more arguments. The result is a new function with some arguments of the first
 * function pre-filled and the value of this 'pre-specified'.
 *
 * Remaining arguments specified at call-time are appended to the pre-specified
 * ones.
 *
 * Also see: {@link #partial}.
 *
 * Usage:
 * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');
 * barMethBound('arg3', 'arg4');</pre>
 *
 * @param {?function(this:T, ...)} fn A function to partially apply.
 * @param {T} selfObj Specifies the object which this should point to when the
 *     function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function bind() was
 *     invoked as a method of.
 * @template T
 * @suppress {deprecated} See above.
 */
goog.bind = function(fn, selfObj, var_args) {
  // TODO(nicksantos): narrow the type signature.
  if (Function.prototype.bind &&
      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome
      // extension environment. This means that for Chrome extensions, they get
      // the implementation of Function.prototype.bind that calls goog.bind
      // instead of the native one. Even worse, we don't want to introduce a
      // circular dependency between goog.bind and Function.prototype.bind, so
      // we have to hack this to make sure it works correctly.
      Function.prototype.bind.toString().indexOf('native code') != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};


/**
 * Like bind(), except that a 'this object' is not required. Useful when the
 * target function is already bound.
 *
 * Usage:
 * var g = partial(f, arg1, arg2);
 * g(arg3, arg4);
 *
 * @param {Function} fn A function to partially apply.
 * @param {...*} var_args Additional arguments that are partially applied to fn.
 * @return {!Function} A partially-applied form of the function bind() was
 *     invoked as a method of.
 */
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    // Clone the array (with slice()) and append additional arguments
    // to the existing arguments.
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};


/**
 * Copies all the members of a source object to a target object. This method
 * does not work on all browsers for all objects that contain keys such as
 * toString or hasOwnProperty. Use goog.object.extend for this purpose.
 * @param {Object} target Target.
 * @param {Object} source Source.
 */
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }

  // For IE7 or lower, the for-in-loop does not contain any properties that are
  // not enumerable on the prototype object (for example, isPrototypeOf from
  // Object.prototype) but also it will not include 'replace' on objects that
  // extend String and change 'replace' (not that it is common for anyone to
  // extend anything except Object).
};


/**
 * @return {number} An integer value representing the number of milliseconds
 *     between midnight, January 1, 1970 and the current time.
 */
goog.now = (goog.TRUSTED_SITE && Date.now) || (function() {
  // Unary plus operator converts its operand to a number which in the case of
  // a date is done by calling getTime().
  return +new Date();
});


/**
 * Evals JavaScript in the global scope.  In IE this uses execScript, other
 * browsers use goog.global.eval. If goog.global.eval does not evaluate in the
 * global scope (for example, in Safari), appends a script tag instead.
 * Throws an exception if neither execScript or eval is defined.
 * @param {string} script JavaScript string.
 */
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, 'JavaScript');
  } else if (goog.global.eval) {
    // Test to see if eval works
    if (goog.evalWorksForGlobals_ == null) {
      goog.global.eval('var _et_ = 1;');
      if (typeof goog.global['_et_'] != 'undefined') {
        delete goog.global['_et_'];
        goog.evalWorksForGlobals_ = true;
      } else {
        goog.evalWorksForGlobals_ = false;
      }
    }

    if (goog.evalWorksForGlobals_) {
      goog.global.eval(script);
    } else {
      var doc = goog.global.document;
      var scriptElt = doc.createElement('script');
      scriptElt.type = 'text/javascript';
      scriptElt.defer = false;
      // Note(user): can't use .innerHTML since "t('<test>')" will fail and
      // .text doesn't work in Safari 2.  Therefore we append a text node.
      scriptElt.appendChild(doc.createTextNode(script));
      doc.body.appendChild(scriptElt);
      doc.body.removeChild(scriptElt);
    }
  } else {
    throw Error('goog.globalEval not available');
  }
};


/**
 * Indicates whether or not we can call 'eval' directly to eval code in the
 * global scope. Set to a Boolean by the first call to goog.globalEval (which
 * empirically tests whether eval works for globals). @see goog.globalEval
 * @type {?boolean}
 * @private
 */
goog.evalWorksForGlobals_ = null;


/**
 * Optional map of CSS class names to obfuscated names used with
 * goog.getCssName().
 * @type {Object|undefined}
 * @private
 * @see goog.setCssNameMapping
 */
goog.cssNameMapping_;


/**
 * Optional obfuscation style for CSS class names. Should be set to either
 * 'BY_WHOLE' or 'BY_PART' if defined.
 * @type {string|undefined}
 * @private
 * @see goog.setCssNameMapping
 */
goog.cssNameMappingStyle_;


/**
 * Handles strings that are intended to be used as CSS class names.
 *
 * This function works in tandem with @see goog.setCssNameMapping.
 *
 * Without any mapping set, the arguments are simple joined with a hyphen and
 * passed through unaltered.
 *
 * When there is a mapping, there are two possible styles in which these
 * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)
 * of the passed in css name is rewritten according to the map. In the BY_WHOLE
 * style, the full css name is looked up in the map directly. If a rewrite is
 * not specified by the map, the compiler will output a warning.
 *
 * When the mapping is passed to the compiler, it will replace calls to
 * goog.getCssName with the strings from the mapping, e.g.
 *     var x = goog.getCssName('foo');
 *     var y = goog.getCssName(this.baseClass, 'active');
 *  becomes:
 *     var x= 'foo';
 *     var y = this.baseClass + '-active';
 *
 * If one argument is passed it will be processed, if two are passed only the
 * modifier will be processed, as it is assumed the first argument was generated
 * as a result of calling goog.getCssName.
 *
 * @param {string} className The class name.
 * @param {string=} opt_modifier A modifier to be appended to the class name.
 * @return {string} The class name or the concatenation of the class name and
 *     the modifier.
 */
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };

  var renameByParts = function(cssName) {
    // Remap all the parts individually.
    var parts = cssName.split('-');
    var mapped = [];
    for (var i = 0; i < parts.length; i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join('-');
  };

  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?
        getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }

  if (opt_modifier) {
    return className + '-' + rename(opt_modifier);
  } else {
    return rename(className);
  }
};


/**
 * Sets the map to check when returning a value from goog.getCssName(). Example:
 * <pre>
 * goog.setCssNameMapping({
 *   "goog": "a",
 *   "disabled": "b",
 * });
 *
 * var x = goog.getCssName('goog');
 * // The following evaluates to: "a a-b".
 * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
 * </pre>
 * When declared as a map of string literals to string literals, the JSCompiler
 * will replace all calls to goog.getCssName() using the supplied map if the
 * --closure_pass flag is set.
 *
 * @param {!Object} mapping A map of strings to strings where keys are possible
 *     arguments to goog.getCssName() and values are the corresponding values
 *     that should be returned.
 * @param {string=} opt_style The style of css name mapping. There are two valid
 *     options: 'BY_PART', and 'BY_WHOLE'.
 * @see goog.getCssName for a description.
 */
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};


/**
 * To use CSS renaming in compiled mode, one of the input files should have a
 * call to goog.setCssNameMapping() with an object literal that the JSCompiler
 * can extract and use to replace all calls to goog.getCssName(). In uncompiled
 * mode, JavaScript code should be loaded before this base.js file that declares
 * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is
 * to ensure that the mapping is loaded before any calls to goog.getCssName()
 * are made in uncompiled mode.
 *
 * A hook for overriding the CSS name mapping.
 * @type {Object|undefined}
 */
goog.global.CLOSURE_CSS_NAME_MAPPING;


if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  // This does not call goog.setCssNameMapping() because the JSCompiler
  // requires that goog.setCssNameMapping() be called with an object literal.
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}


/**
 * Gets a localized message.
 *
 * This function is a compiler primitive. If you give the compiler a localized
 * message bundle, it will replace the string at compile-time with a localized
 * version, and expand goog.getMsg call to a concatenated string.
 *
 * Messages must be initialized in the form:
 * <code>
 * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});
 * </code>
 *
 * @param {string} str Translatable string, places holders in the form {$foo}.
 * @param {Object=} opt_values Map of place holder name to value.
 * @return {string} message with placeholders filled.
 */
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};


/**
 * Gets a localized message. If the message does not have a translation, gives a
 * fallback message.
 *
 * This is useful when introducing a new message that has not yet been
 * translated into all languages.
 *
 * This function is a compiler primitive. Must be used in the form:
 * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
 * where MSG_A and MSG_B were initialized with goog.getMsg.
 *
 * @param {string} a The preferred message.
 * @param {string} b The fallback message.
 * @return {string} The best translated message.
 */
goog.getMsgWithFallback = function(a, b) {
  return a;
};


/**
 * Exposes an unobfuscated global namespace path for the given object.
 * Note that fields of the exported object *will* be obfuscated, unless they are
 * exported in turn via this function or goog.exportProperty.
 *
 * Also handy for making public items that are defined in anonymous closures.
 *
 * ex. goog.exportSymbol('public.path.Foo', Foo);
 *
 * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);
 *     public.path.Foo.staticFunction();
 *
 * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
 *                       Foo.prototype.myMethod);
 *     new public.path.Foo().myMethod();
 *
 * @param {string} publicPath Unobfuscated name to export.
 * @param {*} object Object the name should point to.
 * @param {Object=} opt_objectToExportTo The object to add the path to; default
 *     is goog.global.
 */
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};


/**
 * Exports a property unobfuscated into the object's namespace.
 * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
 * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);
 * @param {Object} object Object whose static property is being exported.
 * @param {string} publicName Unobfuscated name to export.
 * @param {*} symbol Object the name should point to.
 */
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * Usage:
 * <pre>
 * function ParentClass(a, b) { }
 * ParentClass.prototype.foo = function(a) { };
 *
 * function ChildClass(a, b, c) {
 *   ChildClass.base(this, 'constructor', a, b);
 * }
 * goog.inherits(ChildClass, ParentClass);
 *
 * var child = new ChildClass('a', 'b', 'see');
 * child.foo(); // This works.
 * </pre>
 *
 * @param {Function} childCtor Child class.
 * @param {Function} parentCtor Parent class.
 */
goog.inherits = function(childCtor, parentCtor) {
  /** @constructor */
  function tempCtor() {};
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor();
  /** @override */
  childCtor.prototype.constructor = childCtor;

  /**
   * Calls superclass constructor/method.
   *
   * This function is only available if you use goog.inherits to
   * express inheritance relationships between classes.
   *
   * NOTE: This is a replacement for goog.base and for superClass_
   * property defined in childCtor.
   *
   * @param {!Object} me Should always be "this".
   * @param {string} methodName The method name to call. Calling
   *     superclass constructor can be done with the special string
   *     'constructor'.
   * @param {...*} var_args The arguments to pass to superclass
   *     method/constructor.
   * @return {*} The return value of the superclass method/constructor.
   */
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};


/**
 * Call up to the superclass.
 *
 * If this is called from a constructor, then this calls the superclass
 * constructor with arguments 1-N.
 *
 * If this is called from a prototype method, then you must pass the name of the
 * method as the second argument to this function. If you do not, you will get a
 * runtime error. This calls the superclass' method with arguments 2-N.
 *
 * This function only works if you use goog.inherits to express inheritance
 * relationships between your classes.
 *
 * This function is a compiler primitive. At compile-time, the compiler will do
 * macro expansion to remove a lot of the extra overhead that this function
 * introduces. The compiler will also enforce a lot of the assumptions that this
 * function makes, and treat it as a compiler error if you break them.
 *
 * @param {!Object} me Should always be "this".
 * @param {*=} opt_methodName The method name if calling a super method.
 * @param {...*} var_args The rest of the arguments.
 * @return {*} The return value of the superclass method.
 * @suppress {es5Strict} This method can not be used in strict mode, but
 *     all Closure Library consumers must depend on this file.
 */
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;

  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {
    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +
                'with strict mode code. See ' +
                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');
  }

  if (caller.superClass_) {
    // This is a constructor. Call the superclass constructor.
    return caller.superClass_.constructor.apply(
        me, Array.prototype.slice.call(arguments, 1));
  }

  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;
       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else if (foundCaller) {
      return ctor.prototype[opt_methodName].apply(me, args);
    }
  }

  // If we did not find the caller in the prototype chain, then one of two
  // things happened:
  // 1) The caller is an instance method.
  // 2) This method was not called by the right caller.
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error(
        'goog.base called from a method of one name ' +
        'to a method of a different name');
  }
};


/**
 * Allow for aliasing within scope functions.  This function exists for
 * uncompiled code - in compiled code the calls will be inlined and the aliases
 * applied.  In uncompiled code the function is simply run since the aliases as
 * written are valid JavaScript.
 *
 *
 * @param {function()} fn Function to call.  This function can contain aliases
 *     to namespaces (e.g. "var dom = goog.dom") or classes
 *     (e.g. "var Timer = goog.Timer").
 */
goog.scope = function(fn) {
  fn.call(goog.global);
};


/*
 * To support uncompiled, strict mode bundles that use eval to divide source
 * like so:
 *    eval('someSource;//# sourceUrl sourcefile.js');
 * We need to export the globally defined symbols "goog" and "COMPILED".
 * Exporting "goog" breaks the compiler optimizations, so we required that
 * be defined externally.
 * NOTE: We don't use goog.exportSymbol here because we don't want to trigger
 * extern generation when that compiler option is enabled.
 */
if (!COMPILED) {
  goog.global['COMPILED'] = COMPILED;
}



//==============================================================================
// goog.defineClass implementation
//==============================================================================

/**
 * Creates a restricted form of a Closure "class":
 *   - from the compiler's perspective, the instance returned from the
 *     constructor is sealed (no new properties may be added).  This enables
 *     better checks.
 *   - the compiler will rewrite this definition to a form that is optimal
 *     for type checking and optimization (initially this will be a more
 *     traditional form).
 *
 * @param {Function} superClass The superclass, Object or null.
 * @param {goog.defineClass.ClassDescriptor} def
 *     An object literal describing the
 *     the class.  It may have the following properties:
 *     "constructor": the constructor function
 *     "statics": an object literal containing methods to add to the constructor
 *        as "static" methods or a function that will receive the constructor
 *        function as its only parameter to which static properties can
 *        be added.
 *     all other properties are added to the prototype.
 * @return {!Function} The class constructor.
 */
goog.defineClass = function(superClass, def) {
  // TODO(johnlenz): consider making the superClass an optional parameter.
  var constructor = def.constructor;
  var statics = def.statics;
  // Wrap the constructor prior to setting up the prototype and static methods.
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error('cannot instantiate an interface (no constructor defined).');
    };
  }

  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }

  // Remove all the properties that should not be copied to the prototype.
  delete def.constructor;
  delete def.statics;

  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }

  return cls;
};


/**
 * @typedef {
 *     !Object|
 *     {constructor:!Function}|
 *     {constructor:!Function, statics:(Object|function(Function):void)}}
 */
goog.defineClass.ClassDescriptor;


/**
 * @define {boolean} Whether the instances returned by
 * goog.defineClass should be sealed when possible.
 */
goog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);


/**
 * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is
 * defined, this function will wrap the constructor in a function that seals the
 * results of the provided constructor function.
 *
 * @param {!Function} ctr The constructor whose results maybe be sealed.
 * @param {Function} superClass The superclass constructor.
 * @return {!Function} The replacement constructor.
 * @private
 */
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES &&
      Object.seal instanceof Function) {
    // Don't seal subclasses of unsealable-tagged legacy classes.
    if (superClass && superClass.prototype &&
        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    /** @this {*} */
    var wrappedCtr = function() {
      // Don't seal an instance of a subclass when it calls the constructor of
      // its super class as there is most likely still setup to do.
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};


// TODO(johnlenz): share these values with the goog.object
/**
 * The names of the fields that are defined on Object.prototype.
 * @type {!Array.<string>}
 * @private
 * @const
 */
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


// TODO(johnlenz): share this function with the goog.object
/**
 * @param {!Object} target The object to add properties to.
 * @param {!Object} source The object to copy properites from.
 * @private
 */
goog.defineClass.applyProperties_ = function(target, source) {
  // TODO(johnlenz): update this to support ES5 getters/setters

  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }

  // For IE the for-in-loop does not contain any properties that are not
  // enumerable on the prototype object (for example isPrototypeOf from
  // Object.prototype) and it will also not include 'replace' on objects that
  // extend String and change 'replace' (not that it is common for anyone to
  // extend anything except Object).
  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};


/**
 * Sealing classes breaks the older idiom of assigning properties on the
 * prototype rather than in the constructor.  As such, goog.defineClass
 * must not seal subclasses of these old-style classes until they are fixed.
 * Until then, this marks a class as "broken", instructing defineClass
 * not to seal subclasses.
 * @param {!Function} ctr The legacy constructor to tag as unsealable.
 */
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};


/**
 * Name for unsealable tag property.
 * @const @private {string}
 */
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Definition of goog.dom.NodeType.
 */

goog.provide('goog.dom.NodeType');


/**
 * Constants for the nodeType attribute in the Node interface.
 *
 * These constants match those specified in the Node interface. These are
 * usually present on the Node object in recent browsers, but not in older
 * browsers (specifically, early IEs) and thus are given here.
 *
 * In some browsers (early IEs), these are not defined on the Node object,
 * so they are provided here.
 *
 * See http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247
 * @enum {number}
 */
goog.dom.NodeType = {
  ELEMENT: 1,
  ATTRIBUTE: 2,
  TEXT: 3,
  CDATA_SECTION: 4,
  ENTITY_REFERENCE: 5,
  ENTITY: 6,
  PROCESSING_INSTRUCTION: 7,
  COMMENT: 8,
  DOCUMENT: 9,
  DOCUMENT_TYPE: 10,
  DOCUMENT_FRAGMENT: 11,
  NOTATION: 12
};

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a base class for custom Error objects such that the
 * stack is correctly maintained.
 *
 * You should never need to throw goog.debug.Error(msg) directly, Error(msg) is
 * sufficient.
 *
 */

goog.provide('goog.debug.Error');



/**
 * Base class for custom error objects.
 * @param {*=} opt_msg The message associated with the error.
 * @constructor
 * @extends {Error}
 */
goog.debug.Error = function(opt_msg) {

  // Attempt to ensure there is a stack trace.
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = new Error().stack;
    if (stack) {
      this.stack = stack;
    }
  }

  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);


/** @override */
goog.debug.Error.prototype.name = 'CustomError';

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for string manipulation.
 * @author arv@google.com (Erik Arvidsson)
 */


/**
 * Namespace for string utilities
 */
goog.provide('goog.string');
goog.provide('goog.string.Unicode');


/**
 * @define {boolean} Enables HTML escaping of lowercase letter "e" which helps
 * with detection of double-escaping as this letter is frequently used.
 */
goog.define('goog.string.DETECT_DOUBLE_ESCAPING', false);


/**
 * Common Unicode string characters.
 * @enum {string}
 */
goog.string.Unicode = {
  NBSP: '\xa0'
};


/**
 * Fast prefix-checker.
 * @param {string} str The string to check.
 * @param {string} prefix A string to look for at the start of {@code str}.
 * @return {boolean} True if {@code str} begins with {@code prefix}.
 */
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};


/**
 * Fast suffix-checker.
 * @param {string} str The string to check.
 * @param {string} suffix A string to look for at the end of {@code str}.
 * @return {boolean} True if {@code str} ends with {@code suffix}.
 */
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};


/**
 * Case-insensitive prefix-checker.
 * @param {string} str The string to check.
 * @param {string} prefix  A string to look for at the end of {@code str}.
 * @return {boolean} True if {@code str} begins with {@code prefix} (ignoring
 *     case).
 */
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(
      prefix, str.substr(0, prefix.length)) == 0;
};


/**
 * Case-insensitive suffix-checker.
 * @param {string} str The string to check.
 * @param {string} suffix A string to look for at the end of {@code str}.
 * @return {boolean} True if {@code str} ends with {@code suffix} (ignoring
 *     case).
 */
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(
      suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};


/**
 * Case-insensitive equality checker.
 * @param {string} str1 First string to check.
 * @param {string} str2 Second string to check.
 * @return {boolean} True if {@code str1} and {@code str2} are the same string,
 *     ignoring case.
 */
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};


/**
 * Does simple python-style string substitution.
 * subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog".
 * @param {string} str The string containing the pattern.
 * @param {...*} var_args The items to substitute into the pattern.
 * @return {string} A copy of {@code str} in which each occurrence of
 *     {@code %s} has been replaced an argument from {@code var_args}.
 */
goog.string.subs = function(str, var_args) {
  var splitParts = str.split('%s');
  var returnString = '';

  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length &&
         // Replace up to the last split part. We are inserting in the
         // positions between split parts.
         splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }

  return returnString + splitParts.join('%s'); // Join unused '%s'
};


/**
 * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines
 * and tabs) to a single space, and strips leading and trailing whitespace.
 * @param {string} str Input string.
 * @return {string} A copy of {@code str} with collapsed whitespace.
 */
goog.string.collapseWhitespace = function(str) {
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return str.replace(/[\s\xa0]+/g, ' ').replace(/^\s+|\s+$/g, '');
};


/**
 * Checks if a string is empty or contains only whitespaces.
 * @param {string} str The string to check.
 * @return {boolean} True if {@code str} is empty or whitespace only.
 */
goog.string.isEmpty = function(str) {
  // testing length == 0 first is actually slower in all browsers (about the
  // same in Opera).
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return /^[\s\xa0]*$/.test(str);
};


/**
 * Checks if a string is null, undefined, empty or contains only whitespaces.
 * @param {*} str The string to check.
 * @return {boolean} True if{@code str} is null, undefined, empty, or
 *     whitespace only.
 */
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};


/**
 * Checks if a string is all breaking whitespace.
 * @param {string} str The string to check.
 * @return {boolean} Whether the string is all breaking whitespace.
 */
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};


/**
 * Checks if a string contains all letters.
 * @param {string} str string to check.
 * @return {boolean} True if {@code str} consists entirely of letters.
 */
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};


/**
 * Checks if a string contains only numbers.
 * @param {*} str string to check. If not a string, it will be
 *     casted to one.
 * @return {boolean} True if {@code str} is numeric.
 */
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};


/**
 * Checks if a string contains only numbers or letters.
 * @param {string} str string to check.
 * @return {boolean} True if {@code str} is alphanumeric.
 */
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};


/**
 * Checks if a character is a space character.
 * @param {string} ch Character to check.
 * @return {boolean} True if {code ch} is a space.
 */
goog.string.isSpace = function(ch) {
  return ch == ' ';
};


/**
 * Checks if a character is a valid unicode character.
 * @param {string} ch Character to check.
 * @return {boolean} True if {code ch} is a valid unicode character.
 */
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= ' ' && ch <= '~' ||
         ch >= '\u0080' && ch <= '\uFFFD';
};


/**
 * Takes a string and replaces newlines with a space. Multiple lines are
 * replaced with a single space.
 * @param {string} str The string from which to strip newlines.
 * @return {string} A copy of {@code str} stripped of newlines.
 */
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, ' ');
};


/**
 * Replaces Windows and Mac new lines with unix style: \r or \r\n with \n.
 * @param {string} str The string to in which to canonicalize newlines.
 * @return {string} {@code str} A copy of {@code} with canonicalized newlines.
 */
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, '\n');
};


/**
 * Normalizes whitespace in a string, replacing all whitespace chars with
 * a space.
 * @param {string} str The string in which to normalize whitespace.
 * @return {string} A copy of {@code str} with all whitespace normalized.
 */
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, ' ');
};


/**
 * Normalizes spaces in a string, replacing all consecutive spaces and tabs
 * with a single space. Replaces non-breaking space with a space.
 * @param {string} str The string in which to normalize spaces.
 * @return {string} A copy of {@code str} with all consecutive spaces and tabs
 *    replaced with a single space.
 */
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, ' ');
};


/**
 * Removes the breaking spaces from the left and right of the string and
 * collapses the sequences of breaking spaces in the middle into single spaces.
 * The original and the result strings render the same way in HTML.
 * @param {string} str A string in which to collapse spaces.
 * @return {string} Copy of the string with normalized breaking spaces.
 */
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, ' ').replace(
      /^[\t\r\n ]+|[\t\r\n ]+$/g, '');
};


/**
 * Trims white spaces to the left and right of a string.
 * @param {string} str The string to trim.
 * @return {string} A trimmed copy of {@code str}.
 */
goog.string.trim = (goog.TRUSTED_SITE && String.prototype.trim) ?
    function(str) {
      return str.trim();
    } :
    function(str) {
      // Since IE doesn't include non-breaking-space (0xa0) in their \s
      // character class (as required by section 7.2 of the ECMAScript spec),
      // we explicitly include it in the regexp to enforce consistent
      // cross-browser behavior.
      return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, '');
    };


/**
 * Trims whitespaces at the left end of a string.
 * @param {string} str The string to left trim.
 * @return {string} A trimmed copy of {@code str}.
 */
goog.string.trimLeft = function(str) {
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return str.replace(/^[\s\xa0]+/, '');
};


/**
 * Trims whitespaces at the right end of a string.
 * @param {string} str The string to right trim.
 * @return {string} A trimmed copy of {@code str}.
 */
goog.string.trimRight = function(str) {
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return str.replace(/[\s\xa0]+$/, '');
};


/**
 * A string comparator that ignores case.
 * -1 = str1 less than str2
 *  0 = str1 equals str2
 *  1 = str1 greater than str2
 *
 * @param {string} str1 The string to compare.
 * @param {string} str2 The string to compare {@code str1} to.
 * @return {number} The comparator result, as described above.
 */
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();

  if (test1 < test2) {
    return -1;
  } else if (test1 == test2) {
    return 0;
  } else {
    return 1;
  }
};


/**
 * Regular expression used for splitting a string into substrings of fractional
 * numbers, integers, and non-numeric characters.
 * @type {RegExp}
 * @private
 */
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;


/**
 * String comparison function that handles numbers in a way humans might expect.
 * Using this function, the string "File 2.jpg" sorts before "File 10.jpg". The
 * comparison is mostly case-insensitive, though strings that are identical
 * except for case are sorted with the upper-case strings before lower-case.
 *
 * This comparison function is significantly slower (about 500x) than either
 * the default or the case-insensitive compare. It should not be used in
 * time-critical code, but should be fast enough to sort several hundred short
 * strings (like filenames) with a reasonable delay.
 *
 * @param {string} str1 The string to compare in a numerically sensitive way.
 * @param {string} str2 The string to compare {@code str1} to.
 * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than
 *     0 if str1 > str2.
 */
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }

  // Using match to split the entire string ahead of time turns out to be faster
  // for most inputs than using RegExp.exec or iterating over each character.
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);

  var count = Math.min(tokens1.length, tokens2.length);

  for (var i = 0; i < count; i++) {
    var a = tokens1[i];
    var b = tokens2[i];

    // Compare pairs of tokens, returning if one token sorts before the other.
    if (a != b) {

      // Only if both tokens are integers is a special comparison required.
      // Decimal numbers are sorted as strings (e.g., '.09' < '.1').
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }

  // If one string is a substring of the other, the shorter string sorts first.
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }

  // The two strings must be equivalent except for case (perfect equality is
  // tested at the head of the function.) Revert to default ASCII-betical string
  // comparison to stablize the sort.
  return str1 < str2 ? -1 : 1;
};


/**
 * URL-encodes a string
 * @param {*} str The string to url-encode.
 * @return {string} An encoded copy of {@code str} that is safe for urls.
 *     Note that '#', ':', and other characters used to delimit portions
 *     of URLs *will* be encoded.
 */
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};


/**
 * URL-decodes the string. We need to specially handle '+'s because
 * the javascript library doesn't convert them to spaces.
 * @param {string} str The string to url decode.
 * @return {string} The decoded {@code str}.
 */
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, ' '));
};


/**
 * Converts \n to <br>s or <br />s.
 * @param {string} str The string in which to convert newlines.
 * @param {boolean=} opt_xml Whether to use XML compatible tags.
 * @return {string} A copy of {@code str} with converted newlines.
 */
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? '<br />' : '<br>');
};


/**
 * Escapes double quote '"' and single quote '\'' characters in addition to
 * '&', '<', and '>' so that a string can be included in an HTML tag attribute
 * value within double or single quotes.
 *
 * It should be noted that > doesn't need to be escaped for the HTML or XML to
 * be valid, but it has been decided to escape it for consistency with other
 * implementations.
 *
 * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the
 * lowercase letter "e".
 *
 * NOTE(user):
 * HtmlEscape is often called during the generation of large blocks of HTML.
 * Using statics for the regular expressions and strings is an optimization
 * that can more than half the amount of time IE spends in this function for
 * large apps, since strings and regexes both contribute to GC allocations.
 *
 * Testing for the presence of a character before escaping increases the number
 * of function calls, but actually provides a speed increase for the average
 * case -- since the average case often doesn't require the escaping of all 4
 * characters and indexOf() is much cheaper than replace().
 * The worst case does suffer slightly from the additional calls, therefore the
 * opt_isLikelyToContainHtmlChars option has been included for situations
 * where all 4 HTML entities are very likely to be present and need escaping.
 *
 * Some benchmarks (times tended to fluctuate +-0.05ms):
 *                                     FireFox                     IE6
 * (no chars / average (mix of cases) / all 4 chars)
 * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80
 * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84
 * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85
 *
 * An additional advantage of checking if replace actually needs to be called
 * is a reduction in the number of object allocations, so as the size of the
 * application grows the difference between the various methods would increase.
 *
 * @param {string} str string to be escaped.
 * @param {boolean=} opt_isLikelyToContainHtmlChars Don't perform a check to see
 *     if the character needs replacing - use this option if you expect each of
 *     the characters to appear often. Leave false if you expect few html
 *     characters to occur in your strings, such as if you are escaping HTML.
 * @return {string} An escaped copy of {@code str}.
 */
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {

  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, '&amp;')
          .replace(goog.string.LT_RE_, '&lt;')
          .replace(goog.string.GT_RE_, '&gt;')
          .replace(goog.string.QUOT_RE_, '&quot;')
          .replace(goog.string.SINGLE_QUOTE_RE_, '&#39;')
          .replace(goog.string.NULL_RE_, '&#0;');
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, '&#101;');
    }
    return str;

  } else {
    // quick test helps in the case when there are no chars to replace, in
    // worst case this makes barely a difference to the time taken
    if (!goog.string.ALL_RE_.test(str)) return str;

    // str.indexOf is faster than regex.test in this case
    if (str.indexOf('&') != -1) {
      str = str.replace(goog.string.AMP_RE_, '&amp;');
    }
    if (str.indexOf('<') != -1) {
      str = str.replace(goog.string.LT_RE_, '&lt;');
    }
    if (str.indexOf('>') != -1) {
      str = str.replace(goog.string.GT_RE_, '&gt;');
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, '&quot;');
    }
    if (str.indexOf('\'') != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, '&#39;');
    }
    if (str.indexOf('\x00') != -1) {
      str = str.replace(goog.string.NULL_RE_, '&#0;');
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf('e') != -1) {
      str = str.replace(goog.string.E_RE_, '&#101;');
    }
    return str;
  }
};


/**
 * Regular expression that matches an ampersand, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.AMP_RE_ = /&/g;


/**
 * Regular expression that matches a less than sign, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.LT_RE_ = /</g;


/**
 * Regular expression that matches a greater than sign, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.GT_RE_ = />/g;


/**
 * Regular expression that matches a double quote, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.QUOT_RE_ = /"/g;


/**
 * Regular expression that matches a single quote, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.SINGLE_QUOTE_RE_ = /'/g;


/**
 * Regular expression that matches null character, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.NULL_RE_ = /\x00/g;


/**
 * Regular expression that matches a lowercase letter "e", for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.E_RE_ = /e/g;


/**
 * Regular expression that matches any character that needs to be escaped.
 * @const {!RegExp}
 * @private
 */
goog.string.ALL_RE_ = (goog.string.DETECT_DOUBLE_ESCAPING ?
    /[\x00&<>"'e]/ :
    /[\x00&<>"']/);


/**
 * Unescapes an HTML string.
 *
 * @param {string} str The string to unescape.
 * @return {string} An unescaped copy of {@code str}.
 */
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, '&')) {
    // We are careful not to use a DOM if we do not have one. We use the []
    // notation so that the JSCompiler will not complain about these objects and
    // fields in the case where we have no DOM.
    if ('document' in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      // Fall back on pure XML entities
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};


/**
 * Unescapes a HTML string using the provided document.
 *
 * @param {string} str The string to unescape.
 * @param {!Document} document A document to use in escaping the string.
 * @return {string} An unescaped copy of {@code str}.
 */
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, '&')) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};


/**
 * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric
 * entities. This function is XSS-safe and whitespace-preserving.
 * @private
 * @param {string} str The string to unescape.
 * @param {Document=} opt_document An optional document to use for creating
 *     elements. If this is not specified then the default window.document
 *     will be used.
 * @return {string} The unescaped {@code str} string.
 */
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement('div');
  } else {
    div = goog.global.document.createElement('div');
  }
  // Match as many valid entity characters as possible. If the actual entity
  // happens to be shorter, it will still work as innerHTML will return the
  // trailing characters unchanged. Since the entity characters do not include
  // open angle bracket, there is no chance of XSS from the innerHTML use.
  // Since no whitespace is passed to innerHTML, whitespace is preserved.
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    // Check for cached entity.
    var value = seen[s];
    if (value) {
      return value;
    }
    // Check for numeric entity.
    if (entity.charAt(0) == '#') {
      // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.
      var n = Number('0' + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    // Fall back to innerHTML otherwise.
    if (!value) {
      // Append a non-entity character to avoid a bug in Webkit that parses
      // an invalid entity at the end of innerHTML text as the empty string.
      div.innerHTML = s + ' ';
      // Then remove the trailing character from the result.
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    // Cache and return.
    return seen[s] = value;
  });
};


/**
 * Unescapes XML entities.
 * @private
 * @param {string} str The string to unescape.
 * @return {string} An unescaped copy of {@code str}.
 */
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch (entity) {
      case 'amp':
        return '&';
      case 'lt':
        return '<';
      case 'gt':
        return '>';
      case 'quot':
        return '"';
      default:
        if (entity.charAt(0) == '#') {
          // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex.
          var n = Number('0' + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        // For invalid entities we just return the entity
        return s;
    }
  });
};


/**
 * Regular expression that matches an HTML entity.
 * See also HTML5: Tokenization / Tokenizing character references.
 * @private
 * @type {!RegExp}
 */
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;


/**
 * Do escaping of whitespace to preserve spatial formatting. We use character
 * entity #160 to make it safer for xml.
 * @param {string} str The string in which to escape whitespace.
 * @param {boolean=} opt_xml Whether to use XML compatible tags.
 * @return {string} An escaped copy of {@code str}.
 */
goog.string.whitespaceEscape = function(str, opt_xml) {
  // This doesn't use goog.string.preserveSpaces for backwards compatibility.
  return goog.string.newLineToBr(str.replace(/  /g, ' &#160;'), opt_xml);
};


/**
 * Preserve spaces that would be otherwise collapsed in HTML by replacing them
 * with non-breaking space Unicode characters.
 * @param {string} str The string in which to preserve whitespace.
 * @return {string} A copy of {@code str} with preserved whitespace.
 */
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, '$1' + goog.string.Unicode.NBSP);
};


/**
 * Strip quote characters around a string.  The second argument is a string of
 * characters to treat as quotes.  This can be a single character or a string of
 * multiple character and in that case each of those are treated as possible
 * quote characters. For example:
 *
 * <pre>
 * goog.string.stripQuotes('"abc"', '"`') --> 'abc'
 * goog.string.stripQuotes('`abc`', '"`') --> 'abc'
 * </pre>
 *
 * @param {string} str The string to strip.
 * @param {string} quoteChars The quote characters to strip.
 * @return {string} A copy of {@code str} without the quotes.
 */
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0; i < length; i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};


/**
 * Truncates a string to a certain length and adds '...' if necessary.  The
 * length also accounts for the ellipsis, so a maximum length of 10 and a string
 * 'Hello World!' produces 'Hello W...'.
 * @param {string} str The string to truncate.
 * @param {number} chars Max number of characters.
 * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped
 *     characters from being cut off in the middle.
 * @return {string} The truncated {@code str} string.
 */
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }

  if (str.length > chars) {
    str = str.substring(0, chars - 3) + '...';
  }

  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }

  return str;
};


/**
 * Truncate a string in the middle, adding "..." if necessary,
 * and favoring the beginning of the string.
 * @param {string} str The string to truncate the middle of.
 * @param {number} chars Max number of characters.
 * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped
 *     characters from being cutoff in the middle.
 * @param {number=} opt_trailingChars Optional number of trailing characters to
 *     leave at the end of the string, instead of truncating as close to the
 *     middle as possible.
 * @return {string} A truncated copy of {@code str}.
 */
goog.string.truncateMiddle = function(str, chars,
    opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }

  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + '...' + str.substring(endPoint);
  } else if (str.length > chars) {
    // Favor the beginning of the string:
    var half = Math.floor(chars / 2);
    var endPos = str.length - half;
    half += chars % 2;
    str = str.substring(0, half) + '...' + str.substring(endPos);
  }

  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }

  return str;
};


/**
 * Special chars that need to be escaped for goog.string.quote.
 * @private
 * @type {Object}
 */
goog.string.specialEscapeChars_ = {
  '\0': '\\0',
  '\b': '\\b',
  '\f': '\\f',
  '\n': '\\n',
  '\r': '\\r',
  '\t': '\\t',
  '\x0B': '\\x0B', // '\v' is not supported in JScript
  '"': '\\"',
  '\\': '\\\\'
};


/**
 * Character mappings used internally for goog.string.escapeChar.
 * @private
 * @type {Object}
 */
goog.string.jsEscapeCache_ = {
  '\'': '\\\''
};


/**
 * Encloses a string in double quotes and escapes characters so that the
 * string is a valid JS string.
 * @param {string} s The string to quote.
 * @return {string} A copy of {@code s} surrounded by double quotes.
 */
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0; i < s.length; i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] ||
          ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join('');
  }
};


/**
 * Takes a string and returns the escaped string for that character.
 * @param {string} str The string to escape.
 * @return {string} An escaped string representing {@code str}.
 */
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0; i < str.length; i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join('');
};


/**
 * Takes a character and returns the escaped string for that character. For
 * example escapeChar(String.fromCharCode(15)) -> "\\x0E".
 * @param {string} c The character to escape.
 * @return {string} An escaped string representing {@code c}.
 */
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }

  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }

  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    // tab is 9 but handled above
    if (cc < 256) {
      rv = '\\x';
      if (cc < 16 || cc > 256) {
        rv += '0';
      }
    } else {
      rv = '\\u';
      if (cc < 4096) { // \u1000
        rv += '0';
      }
    }
    rv += cc.toString(16).toUpperCase();
  }

  return goog.string.jsEscapeCache_[c] = rv;
};


/**
 * Determines whether a string contains a substring.
 * @param {string} str The string to search.
 * @param {string} subString The substring to search for.
 * @return {boolean} Whether {@code str} contains {@code subString}.
 */
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};


/**
 * Determines whether a string contains a substring, ignoring case.
 * @param {string} str The string to search.
 * @param {string} subString The substring to search for.
 * @return {boolean} Whether {@code str} contains {@code subString}.
 */
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};


/**
 * Returns the non-overlapping occurrences of ss in s.
 * If either s or ss evalutes to false, then returns zero.
 * @param {string} s The string to look in.
 * @param {string} ss The string to look for.
 * @return {number} Number of occurrences of ss in s.
 */
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};


/**
 * Removes a substring of a specified length at a specific
 * index in a string.
 * @param {string} s The base string from which to remove.
 * @param {number} index The index at which to remove the substring.
 * @param {number} stringLength The length of the substring to remove.
 * @return {string} A copy of {@code s} with the substring removed or the full
 *     string if nothing is removed or the input is invalid.
 */
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  // If the index is greater or equal to 0 then remove substring
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) +
        s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};


/**
 *  Removes the first occurrence of a substring from a string.
 *  @param {string} s The base string from which to remove.
 *  @param {string} ss The string to remove.
 *  @return {string} A copy of {@code s} with {@code ss} removed or the full
 *      string if nothing is removed.
 */
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), '');
  return s.replace(re, '');
};


/**
 *  Removes all occurrences of a substring from a string.
 *  @param {string} s The base string from which to remove.
 *  @param {string} ss The string to remove.
 *  @return {string} A copy of {@code s} with {@code ss} removed or the full
 *      string if nothing is removed.
 */
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), 'g');
  return s.replace(re, '');
};


/**
 * Escapes characters in the string that are not safe to use in a RegExp.
 * @param {*} s The string to escape. If not a string, it will be casted
 *     to one.
 * @return {string} A RegExp safe, escaped copy of {@code s}.
 */
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
      replace(/\x08/g, '\\x08');
};


/**
 * Repeats a string n times.
 * @param {string} string The string to repeat.
 * @param {number} length The number of times to repeat.
 * @return {string} A string containing {@code length} repetitions of
 *     {@code string}.
 */
goog.string.repeat = function(string, length) {
  return new Array(length + 1).join(string);
};


/**
 * Pads number to given length and optionally rounds it to a given precision.
 * For example:
 * <pre>padNumber(1.25, 2, 3) -> '01.250'
 * padNumber(1.25, 2) -> '01.25'
 * padNumber(1.25, 2, 1) -> '01.3'
 * padNumber(1.25, 0) -> '1.25'</pre>
 *
 * @param {number} num The number to pad.
 * @param {number} length The desired length.
 * @param {number=} opt_precision The desired precision.
 * @return {string} {@code num} as a string with the given options.
 */
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf('.');
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat('0', Math.max(0, length - index)) + s;
};


/**
 * Returns a string representation of the given object, with
 * null and undefined being returned as the empty string.
 *
 * @param {*} obj The object to convert.
 * @return {string} A string representation of the {@code obj}.
 */
goog.string.makeSafe = function(obj) {
  return obj == null ? '' : String(obj);
};


/**
 * Concatenates string expressions. This is useful
 * since some browsers are very inefficient when it comes to using plus to
 * concat strings. Be careful when using null and undefined here since
 * these will not be included in the result. If you need to represent these
 * be sure to cast the argument to a String first.
 * For example:
 * <pre>buildString('a', 'b', 'c', 'd') -> 'abcd'
 * buildString(null, undefined) -> ''
 * </pre>
 * @param {...*} var_args A list of strings to concatenate. If not a string,
 *     it will be casted to one.
 * @return {string} The concatenation of {@code var_args}.
 */
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, '');
};


/**
 * Returns a string with at least 64-bits of randomness.
 *
 * Doesn't trust Javascript's random function entirely. Uses a combination of
 * random and current timestamp, and then encodes the string in base-36 to
 * make it shorter.
 *
 * @return {string} A random string, e.g. sn1s7vb4gcic.
 */
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) +
         Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};


/**
 * Compares two version numbers.
 *
 * @param {string|number} version1 Version of first item.
 * @param {string|number} version2 Version of second item.
 *
 * @return {number}  1 if {@code version1} is higher.
 *                   0 if arguments are equal.
 *                  -1 if {@code version2} is higher.
 */
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  // Trim leading and trailing whitespace and split the versions into
  // subversions.
  var v1Subs = goog.string.trim(String(version1)).split('.');
  var v2Subs = goog.string.trim(String(version2)).split('.');
  var subCount = Math.max(v1Subs.length, v2Subs.length);

  // Iterate over the subversions, as long as they appear to be equivalent.
  for (var subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {
    var v1Sub = v1Subs[subIdx] || '';
    var v2Sub = v2Subs[subIdx] || '';

    // Split the subversions into pairs of numbers and qualifiers (like 'b').
    // Two different RegExp objects are needed because they are both using
    // the 'g' flag.
    var v1CompParser = new RegExp('(\\d*)(\\D*)', 'g');
    var v2CompParser = new RegExp('(\\d*)(\\D*)', 'g');
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ['', '', ''];
      var v2Comp = v2CompParser.exec(v2Sub) || ['', '', ''];
      // Break if there are no more matches.
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }

      // Parse the numeric part of the subversion. A missing number is
      // equivalent to 0.
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);

      // Compare the subversion components. The number has the highest
      // precedence. Next, if the numbers are equal, a subversion without any
      // qualifier is always higher than a subversion with any qualifier. Next,
      // the qualifiers are compared as strings.
      order = goog.string.compareElements_(v1CompNum, v2CompNum) ||
          goog.string.compareElements_(v1Comp[2].length == 0,
              v2Comp[2].length == 0) ||
          goog.string.compareElements_(v1Comp[2], v2Comp[2]);
      // Stop as soon as an inequality is discovered.
    } while (order == 0);
  }

  return order;
};


/**
 * Compares elements of a version number.
 *
 * @param {string|number|boolean} left An element from a version number.
 * @param {string|number|boolean} right An element from a version number.
 *
 * @return {number}  1 if {@code left} is higher.
 *                   0 if arguments are equal.
 *                  -1 if {@code right} is higher.
 * @private
 */
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else if (left > right) {
    return 1;
  }
  return 0;
};


/**
 * Maximum value of #goog.string.hashCode, exclusive. 2^32.
 * @type {number}
 * @private
 */
goog.string.HASHCODE_MAX_ = 0x100000000;


/**
 * String hash function similar to java.lang.String.hashCode().
 * The hash code for a string is computed as
 * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
 * where s[i] is the ith character of the string and n is the length of
 * the string. We mod the result to make it between 0 (inclusive) and 2^32
 * (exclusive).
 * @param {string} str A string.
 * @return {number} Hash value for {@code str}, between 0 (inclusive) and 2^32
 *  (exclusive). The empty string returns 0.
 */
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0; i < str.length; ++i) {
    result = 31 * result + str.charCodeAt(i);
    // Normalize to 4 byte range, 0 ... 2^32.
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};


/**
 * The most recent unique ID. |0 is equivalent to Math.floor in this case.
 * @type {number}
 * @private
 */
goog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;


/**
 * Generates and returns a string which is unique in the current document.
 * This is useful, for example, to create unique IDs for DOM elements.
 * @return {string} A unique id.
 */
goog.string.createUniqueString = function() {
  return 'goog_' + goog.string.uniqueStringCounter_++;
};


/**
 * Converts the supplied string to a number, which may be Infinity or NaN.
 * This function strips whitespace: (toNumber(' 123') === 123)
 * This function accepts scientific notation: (toNumber('1e1') === 10)
 *
 * This is better than Javascript's built-in conversions because, sadly:
 *     (Number(' ') === 0) and (parseFloat('123a') === 123)
 *
 * @param {string} str The string to convert.
 * @return {number} The number the supplied string represents, or NaN.
 */
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};


/**
 * Returns whether the given string is lower camel case (e.g. "isFooBar").
 *
 * Note that this assumes the string is entirely letters.
 * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms
 *
 * @param {string} str String to test.
 * @return {boolean} Whether the string is lower camel case.
 */
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};


/**
 * Returns whether the given string is upper camel case (e.g. "FooBarBaz").
 *
 * Note that this assumes the string is entirely letters.
 * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms
 *
 * @param {string} str String to test.
 * @return {boolean} Whether the string is upper camel case.
 */
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};


/**
 * Converts a string from selector-case to camelCase (e.g. from
 * "multi-part-string" to "multiPartString"), useful for converting
 * CSS selectors and HTML dataset keys to their equivalent JS properties.
 * @param {string} str The string in selector-case form.
 * @return {string} The string in camelCase form.
 */
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};


/**
 * Converts a string from camelCase to selector-case (e.g. from
 * "multiPartString" to "multi-part-string"), useful for converting JS
 * style and dataset properties to equivalent CSS selectors and HTML keys.
 * @param {string} str The string in camelCase form.
 * @return {string} The string in selector-case form.
 */
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, '-$1').toLowerCase();
};


/**
 * Converts a string into TitleCase. First character of the string is always
 * capitalized in addition to the first letter of every subsequent word.
 * Words are delimited by one or more whitespaces by default. Custom delimiters
 * can optionally be specified to replace the default, which doesn't preserve
 * whitespace delimiters and instead must be explicitly included if needed.
 *
 * Default delimiter => " ":
 *    goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'
 *    goog.string.toTitleCase('one two three')  => 'One Two Three'
 *    goog.string.toTitleCase('  one   two   ') => '  One   Two   '
 *    goog.string.toTitleCase('one_two_three')  => 'One_two_three'
 *    goog.string.toTitleCase('one-two-three')  => 'One-two-three'
 *
 * Custom delimiter => "_-.":
 *    goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'
 *    goog.string.toTitleCase('one two three', '_-.')     => 'One two three'
 *    goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '
 *    goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'
 *    goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'
 *    goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'
 *    goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'
 *    goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'
 *
 * @param {string} str String value in camelCase form.
 * @param {string=} opt_delimiters Custom delimiter character set used to
 *      distinguish words in the string value. Each character represents a
 *      single delimiter. When provided, default whitespace delimiter is
 *      overridden and must be explicitly included if needed.
 * @return {string} String value in TitleCase form.
 */
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ?
      goog.string.regExpEscape(opt_delimiters) : '\\s';

  // For IE8, we need to prevent using an empty character set. Otherwise,
  // incorrect matching will occur.
  delimiters = delimiters ? '|[' + delimiters + ']+' : '';

  var regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};


/**
 * Parse a string in decimal or hexidecimal ('0xFFFF') form.
 *
 * To parse a particular radix, please use parseInt(string, radix) directly. See
 * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt
 *
 * This is a wrapper for the built-in parseInt function that will only parse
 * numbers as base 10 or base 16.  Some JS implementations assume strings
 * starting with "0" are intended to be octal. ES3 allowed but discouraged
 * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.
 *
 * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj
 *
 * @param {string|number|null|undefined} value The value to be parsed.
 * @return {number} The number, parsed. If the string failed to parse, this
 *     will be NaN.
 */
goog.string.parseInt = function(value) {
  // Force finite numbers to strings.
  if (isFinite(value)) {
    value = String(value);
  }

  if (goog.isString(value)) {
    // If the string starts with '0x' or '-0x', parse as hex.
    return /^\s*-?0x/i.test(value) ?
        parseInt(value, 16) : parseInt(value, 10);
  }

  return NaN;
};


/**
 * Splits a string on a separator a limited number of times.
 *
 * This implementation is more similar to Python or Java, where the limit
 * parameter specifies the maximum number of splits rather than truncating
 * the number of results.
 *
 * See http://docs.python.org/2/library/stdtypes.html#str.split
 * See JavaDoc: http://goo.gl/F2AsY
 * See Mozilla reference: http://goo.gl/dZdZs
 *
 * @param {string} str String to split.
 * @param {string} separator The separator.
 * @param {number} limit The limit to the number of splits. The resulting array
 *     will have a maximum length of limit+1.  Negative numbers are the same
 *     as zero.
 * @return {!Array.<string>} The string, split.
 */

goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];

  // Only continue doing this while we haven't hit the limit and we have
  // parts left.
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }

  // If there are remaining parts, append them to the end.
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }

  return returnVal;
};

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities to check the preconditions, postconditions and
 * invariants runtime.
 *
 * Methods in this package should be given special treatment by the compiler
 * for type-inference. For example, <code>goog.asserts.assert(foo)</code>
 * will restrict <code>foo</code> to a truthy value.
 *
 * The compiler has an option to disable asserts. So code like:
 * <code>
 * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());
 * </code>
 * will be transformed into:
 * <code>
 * var x = foo();
 * </code>
 * The compiler will leave in foo() (because its return value is used),
 * but it will remove bar() because it assumes it does not have side-effects.
 *
 * @author agrieve@google.com (Andrew Grieve)
 */

goog.provide('goog.asserts');
goog.provide('goog.asserts.AssertionError');

goog.require('goog.debug.Error');
goog.require('goog.dom.NodeType');
goog.require('goog.string');


/**
 * @define {boolean} Whether to strip out asserts or to leave them in.
 */
goog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);



/**
 * Error object for failed assertions.
 * @param {string} messagePattern The pattern that was used to form message.
 * @param {!Array.<*>} messageArgs The items to substitute into the pattern.
 * @constructor
 * @extends {goog.debug.Error}
 * @final
 */
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  // Remove the messagePattern afterwards to avoid permenantly modifying the
  // passed in array.
  messageArgs.shift();

  /**
   * The message pattern used to format the error message. Error handlers can
   * use this to uniquely identify the assertion.
   * @type {string}
   */
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);


/** @override */
goog.asserts.AssertionError.prototype.name = 'AssertionError';


/**
 * The default error handler.
 * @param {!goog.asserts.AssertionError} e The exception to be handled.
 */
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) { throw e; };


/**
 * The handler responsible for throwing or logging assertion errors.
 * @private {function(!goog.asserts.AssertionError)}
 */
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;


/**
 * Throws an exception with the given message and "Assertion failed" prefixed
 * onto it.
 * @param {string} defaultMessage The message to use if givenMessage is empty.
 * @param {Array.<*>} defaultArgs The substitution arguments for defaultMessage.
 * @param {string|undefined} givenMessage Message supplied by the caller.
 * @param {Array.<*>} givenArgs The substitution arguments for givenMessage.
 * @throws {goog.asserts.AssertionError} When the value is not a number.
 * @private
 */
goog.asserts.doAssertFailure_ =
    function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = 'Assertion failed';
  if (givenMessage) {
    message += ': ' + givenMessage;
    var args = givenArgs;
  } else if (defaultMessage) {
    message += ': ' + defaultMessage;
    args = defaultArgs;
  }
  // The '' + works around an Opera 10 bug in the unit tests. Without it,
  // a stack trace is added to var message above. With this, a stack trace is
  // not added until this line (it causes the extra garbage to be added after
  // the assertion message instead of in the middle of it).
  var e = new goog.asserts.AssertionError('' + message, args || []);
  goog.asserts.errorHandler_(e);
};


/**
 * Sets a custom error handler that can be used to customize the behavior of
 * assertion failures, for example by turning all assertion failures into log
 * messages.
 * @param {function(goog.asserts.AssertionError)} errorHandler
 */
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};


/**
 * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is
 * true.
 * @template T
 * @param {T} condition The condition to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!T} The value of the condition.
 * @throws {goog.asserts.AssertionError} When the condition evaluates to false.
 */
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_('', null, opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};


/**
 * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case
 * when we want to add a check in the unreachable area like switch-case
 * statement:
 *
 * <pre>
 *  switch(type) {
 *    case FOO: doSomething(); break;
 *    case BAR: doSomethingElse(); break;
 *    default: goog.assert.fail('Unrecognized type: ' + type);
 *      // We have only 2 types - "default:" section is unreachable code.
 *  }
 * </pre>
 *
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @throws {goog.asserts.AssertionError} Failure.
 */
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError(
        'Failure' + (opt_message ? ': ' + opt_message : ''),
        Array.prototype.slice.call(arguments, 1)));
  }
};


/**
 * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {number} The value, guaranteed to be a number when asserts enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a number.
 */
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_('Expected number but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {number} */ (value);
};


/**
 * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {string} The value, guaranteed to be a string when asserts enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a string.
 */
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_('Expected string but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {string} */ (value);
};


/**
 * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Function} The value, guaranteed to be a function when asserts
 *     enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a function.
 */
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_('Expected function but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Function} */ (value);
};


/**
 * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Object} The value, guaranteed to be a non-null object.
 * @throws {goog.asserts.AssertionError} When the value is not an object.
 */
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_('Expected object but got %s: %s.',
        [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Object} */ (value);
};


/**
 * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Array.<?>} The value, guaranteed to be a non-null array.
 * @throws {goog.asserts.AssertionError} When the value is not an array.
 */
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_('Expected array but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Array.<?>} */ (value);
};


/**
 * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {boolean} The value, guaranteed to be a boolean when asserts are
 *     enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a boolean.
 */
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_('Expected boolean but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {boolean} */ (value);
};


/**
 * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Element} The value, likely to be a DOM Element when asserts are
 *     enabled.
 * @throws {goog.asserts.AssertionError} When the value is not a boolean.
 */
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) ||
      value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_('Expected Element but got %s: %s.',
        [goog.typeOf(value), value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Element} */ (value);
};


/**
 * Checks if the value is an instance of the user-defined type if
 * goog.asserts.ENABLE_ASSERTS is true.
 *
 * The compiler may tighten the type returned by this function.
 *
 * @param {*} value The value to check.
 * @param {function(new: T, ...)} type A user-defined constructor.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @throws {goog.asserts.AssertionError} When the value is not an instance of
 *     type.
 * @return {!T}
 * @template T
 */
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_('instanceof check failed.', null,
        opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};


/**
 * Checks that no enumerable keys are present in Object.prototype. Such keys
 * would break most code that use {@code for (var ... in ...)} loops.
 */
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + ' should not be enumerable in Object.prototype.');
  }
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Type definitions for cipher keys.
 */

/** @suppress {extraProvide} provide the whole namespace for simplicity */
goog.provide('e2e.algorithm.AsymmetricKey');
goog.provide('e2e.algorithm.KeyLocations');
/** @suppress {extraProvide} provide the whole namespace for simplicity */
goog.provide('e2e.cipher.key');
goog.provide('e2e.cipher.key.Ecdh');
goog.provide('e2e.cipher.key.ElGamal');
goog.provide('e2e.cipher.key.Key');
goog.provide('e2e.cipher.key.Rsa');
goog.provide('e2e.cipher.key.SymmetricKey');
/** @suppress {extraProvide} provide the whole namespace for simplicity */
goog.provide('e2e.signer.key');
goog.provide('e2e.signer.key.Dsa');
goog.provide('e2e.signer.key.Ecdsa');
goog.provide('e2e.signer.key.Key');
goog.provide('e2e.signer.key.Rsa');


/**
 * Enum of various possible locations for keys. Each key is in exactly one of
 * these.
 * This currently means that each key needs a loc field, which is hackish.
 * This file would be somewhat more maintainable if we added the KeyLocations
 * field to AsymmetricKey, but then that type and all references in it would
 * have another layer of indirection, which would make the rest of the code
 * more complicated.
 * TODO(user): Figure out a better way to handle this issue.
 * @enum {string}
 */
e2e.algorithm.KeyLocations = {
  JAVASCRIPT: 'JAVASCRIPT',
  WEB_CRYPTO: 'WEB_CRYPTO',
  HARDWARE: 'HARDWARE'
};

/**
 * @typedef {(e2e.signer.key.DsaPublicKey|e2e.signer.key.DsaPrivateKey)}
 */
e2e.signer.key.Dsa;


/**
 * @typedef {?{p: !e2e.ByteArray, q: !e2e.ByteArray,
 *     g: !e2e.ByteArray, x: (!e2e.ByteArray|undefined),
 *     y: !e2e.ByteArray, loc: (undefined|!e2e.algorithm.KeyLocations)}}
 */
e2e.signer.key.DsaPublicKey;


/**
 * @typedef {?{p: !e2e.ByteArray, q: !e2e.ByteArray,
 *     g: !e2e.ByteArray, x: !e2e.ByteArray, y: (!e2e.ByteArray|undefined),
 *     loc: (undefined|!e2e.algorithm.KeyLocations)}}
 */
e2e.signer.key.DsaPrivateKey;


/**
 * @typedef {?{curve: ?e2e.ecc.PrimeCurveOid,
 *     pubKey: !e2e.ByteArray,
 *     privKey: ?e2e.ByteArray,
 *     loc: (undefined|!e2e.algorithm.KeyLocations)}}
 */
e2e.signer.key.Ecdsa;


/**
 * @typedef {?{d: (e2e.ByteArray|undefined), e: !e2e.ByteArray,
 *     n: !e2e.ByteArray, p: (e2e.ByteArray|undefined),
 *     q: (e2e.ByteArray|undefined),
 *     loc: (undefined|!e2e.algorithm.KeyLocations)}}
 */
e2e.signer.key.Rsa;


/**
 * @typedef {e2e.signer.key.Dsa|e2e.signer.key.DsaPublicKey|
 *     e2e.signer.key.Ecdsa|e2e.signer.key.Rsa|null}
 */
e2e.signer.key.Key;


/**
 * @typedef {?{d: (e2e.ByteArray|undefined), e: !e2e.ByteArray,
 *     n: !e2e.ByteArray, p: (e2e.ByteArray|undefined),
 *     q: (e2e.ByteArray|undefined),
 *     loc: (undefined|!e2e.algorithm.KeyLocations)}}
 */
e2e.cipher.key.Rsa;


/**
 * @typedef {?{curve: ?e2e.ecc.PrimeCurveOid,
 *     kdfInfo: !e2e.ByteArray,
 *     pubKey: !e2e.ByteArray,
 *     fingerprint: !e2e.ByteArray,
 *     privKey: ?e2e.ByteArray,
 *     loc: (undefined|!e2e.algorithm.KeyLocations)}}
 */
e2e.cipher.key.Ecdh;


/**
  * @typedef {?{p: !e2e.ByteArray, y: !e2e.ByteArray,
  *     g: !e2e.ByteArray, x: !e2e.ByteArray,
  *     loc: (undefined|!e2e.algorithm.KeyLocations)}}
 */
e2e.cipher.key.ElGamal;


/**
 * Used to store the algorithm identifier, including things like name, key size,
 * public exponent (for RSA), etc.
 * @typedef {*}
 */
e2e.algorithm.WebCryptoAID;

/**
 * @typedef {!{algorithm: !e2e.algorithm.WebCryptoAID, extractable: boolean,
 *           type:string, usages: !Array.<string>}}
 */
e2e.algorithm.WebCryptoKey;

/**
 * @typedef {!{privateKey: (e2e.algorithm.WebCryptoKey|undefined),
 *             publicKey: e2e.algorithm.WebCryptoKey}}
 */
e2e.algorithm.WebCryptoKeyPair;

/**
 * @typedef {e2e.cipher.key.ElGamal|e2e.cipher.key.Ecdh|
 *     e2e.cipher.key.Rsa|e2e.signer.key.Key|null}
 */
e2e.algorithm.AsymmetricKey;


/**
 * @typedef {?{key: !e2e.ByteArray}}
 */
e2e.cipher.key.SymmetricKey;


/**
 * @typedef {e2e.algorithm.AsymmetricKey|
 *     e2e.cipher.key.SymmetricKey|
 *     {passphrase: !e2e.ByteArray}|null}
 */
e2e.cipher.key.Key;

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for manipulating arrays.
 *
 * @author arv@google.com (Erik Arvidsson)
 */


goog.provide('goog.array');
goog.provide('goog.array.ArrayLike');

goog.require('goog.asserts');


/**
 * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should
 * rely on Array.prototype functions, if available.
 *
 * The Array.prototype functions can be defined by external libraries like
 * Prototype and setting this flag to false forces closure to use its own
 * goog.array implementation.
 *
 * If your javascript can be loaded by a third party site and you are wary about
 * relying on the prototype functions, specify
 * "--define goog.NATIVE_ARRAY_PROTOTYPES=false" to the JSCompiler.
 *
 * Setting goog.TRUSTED_SITE to false will automatically set
 * NATIVE_ARRAY_PROTOTYPES to false.
 */
goog.define('goog.NATIVE_ARRAY_PROTOTYPES', goog.TRUSTED_SITE);


/**
 * @define {boolean} If true, JSCompiler will use the native implementation of
 * array functions where appropriate (e.g., {@code Array#filter}) and remove the
 * unused pure JS implementation.
 */
goog.define('goog.array.ASSUME_NATIVE_FUNCTIONS', false);


/**
 * @typedef {Array|NodeList|Arguments|{length: number}}
 */
goog.array.ArrayLike;


/**
 * Returns the last element in an array without removing it.
 * Same as goog.array.last.
 * @param {Array.<T>|goog.array.ArrayLike} array The array.
 * @return {T} Last item in array.
 * @template T
 */
goog.array.peek = function(array) {
  return array[array.length - 1];
};


/**
 * Returns the last element in an array without removing it.
 * Same as goog.array.peek.
 * @param {Array.<T>|goog.array.ArrayLike} array The array.
 * @return {T} Last item in array.
 * @template T
 */
goog.array.last = goog.array.peek;


/**
 * Reference to the original {@code Array.prototype}.
 * @private
 */
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;


// NOTE(arv): Since most of the array functions are generic it allows you to
// pass an array-like object. Strings have a length and are considered array-
// like. However, the 'in' operator does not work on strings so we cannot just
// use the array path even if the browser supports indexing into strings. We
// therefore end up splitting the string.


/**
 * Returns the index of the first element of an array with a specified value, or
 * -1 if the element is not present in the array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr The array to be searched.
 * @param {T} obj The object for which we are searching.
 * @param {number=} opt_fromIndex The index at which to start the search. If
 *     omitted the search starts at index 0.
 * @return {number} The index of the first matching array element.
 * @template T
 */
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
                     (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                      goog.array.ARRAY_PROTOTYPE_.indexOf) ?
    function(arr, obj, opt_fromIndex) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
    } :
    function(arr, obj, opt_fromIndex) {
      var fromIndex = opt_fromIndex == null ?
          0 : (opt_fromIndex < 0 ?
               Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex);

      if (goog.isString(arr)) {
        // Array.prototype.indexOf uses === so only strings should be found.
        if (!goog.isString(obj) || obj.length != 1) {
          return -1;
        }
        return arr.indexOf(obj, fromIndex);
      }

      for (var i = fromIndex; i < arr.length; i++) {
        if (i in arr && arr[i] === obj)
          return i;
      }
      return -1;
    };


/**
 * Returns the index of the last element of an array with a specified value, or
 * -1 if the element is not present in the array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}
 *
 * @param {!Array.<T>|!goog.array.ArrayLike} arr The array to be searched.
 * @param {T} obj The object for which we are searching.
 * @param {?number=} opt_fromIndex The index at which to start the search. If
 *     omitted the search starts at the end of the array.
 * @return {number} The index of the last matching array element.
 * @template T
 */
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
                         (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                          goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ?
    function(arr, obj, opt_fromIndex) {
      goog.asserts.assert(arr.length != null);

      // Firefox treats undefined and null as 0 in the fromIndex argument which
      // leads it to always return -1
      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
      return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
    } :
    function(arr, obj, opt_fromIndex) {
      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;

      if (fromIndex < 0) {
        fromIndex = Math.max(0, arr.length + fromIndex);
      }

      if (goog.isString(arr)) {
        // Array.prototype.lastIndexOf uses === so only strings should be found.
        if (!goog.isString(obj) || obj.length != 1) {
          return -1;
        }
        return arr.lastIndexOf(obj, fromIndex);
      }

      for (var i = fromIndex; i >= 0; i--) {
        if (i in arr && arr[i] === obj)
          return i;
      }
      return -1;
    };


/**
 * Calls a function for each element in an array. Skips holes in the array.
 * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array like object over
 *     which to iterate.
 * @param {?function(this: S, T, number, ?): ?} f The function to call for every
 *     element. This function takes 3 arguments (the element, the index and the
 *     array). The return value is ignored.
 * @param {S=} opt_obj The object to be used as the value of 'this' within f.
 * @template T,S
 */
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES &&
                     (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                      goog.array.ARRAY_PROTOTYPE_.forEach) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2) {
          f.call(opt_obj, arr2[i], i, arr);
        }
      }
    };


/**
 * Calls a function for each element in an array, starting from the last
 * element rather than the first.
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this: S, T, number, ?): ?} f The function to call for every
 *     element. This function
 *     takes 3 arguments (the element, the index and the array). The return
 *     value is ignored.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @template T,S
 */
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;  // must be fixed during loop... see docs
  var arr2 = goog.isString(arr) ? arr.split('') : arr;
  for (var i = l - 1; i >= 0; --i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};


/**
 * Calls a function for each element in an array, and if the function returns
 * true adds the element to a new array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?):boolean} f The function to call for
 *     every element. This function
 *     takes 3 arguments (the element, the index and the array) and must
 *     return a Boolean. If the return value is true the element is added to the
 *     result array. If it is false the element is not included.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {!Array.<T>} a new array in which only elements that passed the test
 *     are present.
 * @template T,S
 */
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES &&
                    (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                     goog.array.ARRAY_PROTOTYPE_.filter) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var res = [];
      var resLength = 0;
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2) {
          var val = arr2[i];  // in case f mutates arr2
          if (f.call(opt_obj, val, i, arr)) {
            res[resLength++] = val;
          }
        }
      }
      return res;
    };


/**
 * Calls a function for each element in an array and inserts the result into a
 * new array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-map}
 *
 * @param {Array.<VALUE>|goog.array.ArrayLike} arr Array or array like object
 *     over which to iterate.
 * @param {function(this:THIS, VALUE, number, ?): RESULT} f The function to call
 *     for every element. This function takes 3 arguments (the element,
 *     the index and the array) and should return something. The result will be
 *     inserted into a new array.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.
 * @return {!Array.<RESULT>} a new array with the results from f.
 * @template THIS, VALUE, RESULT
 */
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES &&
                 (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                  goog.array.ARRAY_PROTOTYPE_.map) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var res = new Array(l);
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2) {
          res[i] = f.call(opt_obj, arr2[i], i, arr);
        }
      }
      return res;
    };


/**
 * Passes every element of an array into a function and accumulates the result.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}
 *
 * For example:
 * var a = [1, 2, 3, 4];
 * goog.array.reduce(a, function(r, v, i, arr) {return r + v;}, 0);
 * returns 10
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, R, T, number, ?) : R} f The function to call for
 *     every element. This function
 *     takes 4 arguments (the function's previous result or the initial value,
 *     the value of the current array element, the current array index, and the
 *     array itself)
 *     function(previousValue, currentValue, index, array).
 * @param {?} val The initial value to pass into the function on the first call.
 * @param {S=} opt_obj  The object to be used as the value of 'this'
 *     within f.
 * @return {R} Result of evaluating f repeatedly across the values of the array.
 * @template T,S,R
 */
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES &&
                    (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                     goog.array.ARRAY_PROTOTYPE_.reduce) ?
    function(arr, f, val, opt_obj) {
      goog.asserts.assert(arr.length != null);
      if (opt_obj) {
        f = goog.bind(f, opt_obj);
      }
      return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
    } :
    function(arr, f, val, opt_obj) {
      var rval = val;
      goog.array.forEach(arr, function(val, index) {
        rval = f.call(opt_obj, rval, val, index, arr);
      });
      return rval;
    };


/**
 * Passes every element of an array into a function and accumulates the result,
 * starting from the last element and working towards the first.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}
 *
 * For example:
 * var a = ['a', 'b', 'c'];
 * goog.array.reduceRight(a, function(r, v, i, arr) {return r + v;}, '');
 * returns 'cba'
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, R, T, number, ?) : R} f The function to call for
 *     every element. This function
 *     takes 4 arguments (the function's previous result or the initial value,
 *     the value of the current array element, the current array index, and the
 *     array itself)
 *     function(previousValue, currentValue, index, array).
 * @param {?} val The initial value to pass into the function on the first call.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {R} Object returned as a result of evaluating f repeatedly across the
 *     values of the array.
 * @template T,S,R
 */
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES &&
                         (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                          goog.array.ARRAY_PROTOTYPE_.reduceRight) ?
    function(arr, f, val, opt_obj) {
      goog.asserts.assert(arr.length != null);
      if (opt_obj) {
        f = goog.bind(f, opt_obj);
      }
      return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
    } :
    function(arr, f, val, opt_obj) {
      var rval = val;
      goog.array.forEachRight(arr, function(val, index) {
        rval = f.call(opt_obj, rval, val, index, arr);
      });
      return rval;
    };


/**
 * Calls f for each element of an array. If any call returns true, some()
 * returns true (without checking the remaining elements). If all calls
 * return false, some() returns false.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-some}
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj  The object to be used as the value of 'this'
 *     within f.
 * @return {boolean} true if any element passes the test.
 * @template T,S
 */
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES &&
                  (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                   goog.array.ARRAY_PROTOTYPE_.some) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
          return true;
        }
      }
      return false;
    };


/**
 * Call f for each element of an array. If all calls return true, every()
 * returns true. If any call returns false, every() returns false and
 * does not continue to check the remaining elements.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-every}
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {boolean} false if any element fails the test.
 * @template T,S
 */
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES &&
                   (goog.array.ASSUME_NATIVE_FUNCTIONS ||
                    goog.array.ARRAY_PROTOTYPE_.every) ?
    function(arr, f, opt_obj) {
      goog.asserts.assert(arr.length != null);

      return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      var l = arr.length;  // must be fixed during loop... see docs
      var arr2 = goog.isString(arr) ? arr.split('') : arr;
      for (var i = 0; i < l; i++) {
        if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
          return false;
        }
      }
      return true;
    };


/**
 * Counts the array elements that fulfill the predicate, i.e. for which the
 * callback function returns true. Skips holes in the array.
 *
 * @param {!(Array.<T>|goog.array.ArrayLike)} arr Array or array like object
 *     over which to iterate.
 * @param {function(this: S, T, number, ?): boolean} f The function to call for
 *     every element. Takes 3 arguments (the element, the index and the array).
 * @param {S=} opt_obj The object to be used as the value of 'this' within f.
 * @return {number} The number of the matching elements.
 * @template T,S
 */
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};


/**
 * Search an array for the first element that satisfies a given condition and
 * return that element.
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {?T} The first array element that passes the test, or null if no
 *     element is found.
 * @template T,S
 */
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};


/**
 * Search an array for the first element that satisfies a given condition and
 * return its index.
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {number} The index of the first array element that passes the test,
 *     or -1 if no element is found.
 * @template T,S
 */
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;  // must be fixed during loop... see docs
  var arr2 = goog.isString(arr) ? arr.split('') : arr;
  for (var i = 0; i < l; i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};


/**
 * Search an array (in reverse order) for the last element that satisfies a
 * given condition and return that element.
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {?T} The last array element that passes the test, or null if no
 *     element is found.
 * @template T,S
 */
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};


/**
 * Search an array (in reverse order) for the last element that satisfies a
 * given condition and return its index.
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {Object=} opt_obj An optional "this" context for the function.
 * @return {number} The index of the last array element that passes the test,
 *     or -1 if no element is found.
 * @template T,S
 */
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;  // must be fixed during loop... see docs
  var arr2 = goog.isString(arr) ? arr.split('') : arr;
  for (var i = l - 1; i >= 0; i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};


/**
 * Whether the array contains the given object.
 * @param {goog.array.ArrayLike} arr The array to test for the presence of the
 *     element.
 * @param {*} obj The object for which to test.
 * @return {boolean} true if obj is present.
 */
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};


/**
 * Whether the array is empty.
 * @param {goog.array.ArrayLike} arr The array to test.
 * @return {boolean} true if empty.
 */
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};


/**
 * Clears the array.
 * @param {goog.array.ArrayLike} arr Array or array like object to clear.
 */
goog.array.clear = function(arr) {
  // For non real arrays we don't have the magic length so we delete the
  // indices.
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1; i >= 0; i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};


/**
 * Pushes an item into an array, if it's not already in the array.
 * @param {Array.<T>} arr Array into which to insert the item.
 * @param {T} obj Value to add.
 * @template T
 */
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};


/**
 * Inserts an object at the given index of the array.
 * @param {goog.array.ArrayLike} arr The array to modify.
 * @param {*} obj The object to insert.
 * @param {number=} opt_i The index at which to insert the object. If omitted,
 *      treated as 0. A negative index is counted from the end of the array.
 */
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};


/**
 * Inserts at the given index of the array, all elements of another array.
 * @param {goog.array.ArrayLike} arr The array to modify.
 * @param {goog.array.ArrayLike} elementsToAdd The array of elements to add.
 * @param {number=} opt_i The index at which to insert the object. If omitted,
 *      treated as 0. A negative index is counted from the end of the array.
 */
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};


/**
 * Inserts an object into an array before a specified object.
 * @param {Array.<T>} arr The array to modify.
 * @param {T} obj The object to insert.
 * @param {T=} opt_obj2 The object before which obj should be inserted. If obj2
 *     is omitted or not found, obj is inserted at the end of the array.
 * @template T
 */
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};


/**
 * Removes the first occurrence of a particular value from an array.
 * @param {Array.<T>|goog.array.ArrayLike} arr Array from which to remove
 *     value.
 * @param {T} obj Object to remove.
 * @return {boolean} True if an element was removed.
 * @template T
 */
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if ((rv = i >= 0)) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};


/**
 * Removes from an array the element at index i
 * @param {goog.array.ArrayLike} arr Array or array like object from which to
 *     remove value.
 * @param {number} i The index to remove.
 * @return {boolean} True if an element was removed.
 */
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);

  // use generic form of splice
  // splice returns the removed items and if successful the length of that
  // will be 1
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};


/**
 * Removes the first value that satisfies the given condition.
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {boolean} True if an element was removed.
 * @template T,S
 */
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};


/**
 * Removes all values that satisfy the given condition.
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {number} The number of items removed
 * @template T,S
 */
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};


/**
 * Returns a new array that is the result of joining the arguments.  If arrays
 * are passed then their items are added, however, if non-arrays are passed they
 * will be added to the return array as is.
 *
 * Note that ArrayLike objects will be added as is, rather than having their
 * items added.
 *
 * goog.array.concat([1, 2], [3, 4]) -> [1, 2, 3, 4]
 * goog.array.concat(0, [1, 2]) -> [0, 1, 2]
 * goog.array.concat([1, 2], null) -> [1, 2, null]
 *
 * There is bug in all current versions of IE (6, 7 and 8) where arrays created
 * in an iframe become corrupted soon (not immediately) after the iframe is
 * destroyed. This is common if loading data via goog.net.IframeIo, for example.
 * This corruption only affects the concat method which will start throwing
 * Catastrophic Errors (#-2147418113).
 *
 * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.
 *
 * Internally goog.array should use this, so that all methods will continue to
 * work on these broken array objects.
 *
 * @param {...*} var_args Items to concatenate.  Arrays will have each item
 *     added, while primitives and objects will be added as is.
 * @return {!Array.<?>} The new resultant array.
 */
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(
      goog.array.ARRAY_PROTOTYPE_, arguments);
};


/**
 * Returns a new array that contains the contents of all the arrays passed.
 * @param {...!Array.<T>} var_args
 * @return {!Array.<T>}
 * @template T
 */
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(
      goog.array.ARRAY_PROTOTYPE_, arguments);
};


/**
 * Converts an object to an array.
 * @param {Array.<T>|goog.array.ArrayLike} object  The object to convert to an
 *     array.
 * @return {!Array.<T>} The object converted into an array. If object has a
 *     length property, every property indexed with a non-negative number
 *     less than length will be included in the result. If object does not
 *     have a length property, an empty array will be returned.
 * @template T
 */
goog.array.toArray = function(object) {
  var length = object.length;

  // If length is not a number the following it false. This case is kept for
  // backwards compatibility since there are callers that pass objects that are
  // not array like.
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0; i < length; i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};


/**
 * Does a shallow copy of an array.
 * @param {Array.<T>|goog.array.ArrayLike} arr  Array or array-like object to
 *     clone.
 * @return {!Array.<T>} Clone of the input array.
 * @template T
 */
goog.array.clone = goog.array.toArray;


/**
 * Extends an array with another array, element, or "array like" object.
 * This function operates 'in-place', it does not create a new Array.
 *
 * Example:
 * var a = [];
 * goog.array.extend(a, [0, 1]);
 * a; // [0, 1]
 * goog.array.extend(a, 2);
 * a; // [0, 1, 2]
 *
 * @param {Array.<VALUE>} arr1  The array to modify.
 * @param {...(Array.<VALUE>|VALUE)} var_args The elements or arrays of elements
 *     to add to arr1.
 * @template VALUE
 */
goog.array.extend = function(arr1, var_args) {
  for (var i = 1; i < arguments.length; i++) {
    var arr2 = arguments[i];
    // If we have an Array or an Arguments object we can just call push
    // directly.
    var isArrayLike;
    if (goog.isArray(arr2) ||
        // Detect Arguments. ES5 says that the [[Class]] of an Arguments object
        // is "Arguments" but only V8 and JSC/Safari gets this right. We instead
        // detect Arguments by checking for array like and presence of "callee".
        (isArrayLike = goog.isArrayLike(arr2)) &&
            // The getter for callee throws an exception in strict mode
            // according to section 10.6 in ES5 so check for presence instead.
            Object.prototype.hasOwnProperty.call(arr2, 'callee')) {
      arr1.push.apply(arr1, arr2);
    } else if (isArrayLike) {
      // Otherwise loop over arr2 to prevent copying the object.
      var len1 = arr1.length;
      var len2 = arr2.length;
      for (var j = 0; j < len2; j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};


/**
 * Adds or removes elements from an array. This is a generic version of Array
 * splice. This means that it might work on other objects similar to arrays,
 * such as the arguments object.
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr The array to modify.
 * @param {number|undefined} index The index at which to start changing the
 *     array. If not defined, treated as 0.
 * @param {number} howMany How many elements to remove (0 means no removal. A
 *     value below 0 is treated as zero and so is any other non number. Numbers
 *     are floored).
 * @param {...T} var_args Optional, additional elements to insert into the
 *     array.
 * @return {!Array.<T>} the removed elements.
 * @template T
 */
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);

  return goog.array.ARRAY_PROTOTYPE_.splice.apply(
      arr, goog.array.slice(arguments, 1));
};


/**
 * Returns a new array from a segment of an array. This is a generic version of
 * Array slice. This means that it might work on other objects similar to
 * arrays, such as the arguments object.
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr The array from
 * which to copy a segment.
 * @param {number} start The index of the first element to copy.
 * @param {number=} opt_end The index after the last element to copy.
 * @return {!Array.<T>} A new array containing the specified segment of the
 *     original array.
 * @template T
 */
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);

  // passing 1 arg to slice is not the same as passing 2 where the second is
  // null or undefined (in that case the second argument is treated as 0).
  // we could use slice on the arguments object and then use apply instead of
  // testing the length
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};


/**
 * Removes all duplicates from an array (retaining only the first
 * occurrence of each array element).  This function modifies the
 * array in place and doesn't change the order of the non-duplicate items.
 *
 * For objects, duplicates are identified as having the same unique ID as
 * defined by {@link goog.getUid}.
 *
 * Alternatively you can specify a custom hash function that returns a unique
 * value for each item in the array it should consider unique.
 *
 * Runtime: N,
 * Worstcase space: 2N (no dupes)
 *
 * @param {Array.<T>|goog.array.ArrayLike} arr The array from which to remove
 *     duplicates.
 * @param {Array=} opt_rv An optional array in which to return the results,
 *     instead of performing the removal inplace.  If specified, the original
 *     array will remain unchanged.
 * @param {function(T):string=} opt_hashFn An optional function to use to
 *     apply to every item in the array. This function should return a unique
 *     value for each item in the array it should consider unique.
 * @template T
 */
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    // Prefix each type with a single character representing the type to
    // prevent conflicting keys (e.g. true and 'true').
    return goog.isObject(current) ? 'o' + goog.getUid(current) :
        (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;

  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};


/**
 * Searches the specified array for the specified target using the binary
 * search algorithm.  If no opt_compareFn is specified, elements are compared
 * using <code>goog.array.defaultCompare</code>, which compares the elements
 * using the built in < and > operators.  This will produce the expected
 * behavior for homogeneous arrays of String(s) and Number(s). The array
 * specified <b>must</b> be sorted in ascending order (as defined by the
 * comparison function).  If the array is not sorted, results are undefined.
 * If the array contains multiple instances of the specified target value, any
 * of these instances may be found.
 *
 * Runtime: O(log n)
 *
 * @param {Array.<VALUE>|goog.array.ArrayLike} arr The array to be searched.
 * @param {TARGET} target The sought value.
 * @param {function(TARGET, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {number} Lowest index of the target value if found, otherwise
 *     (-(insertion point) - 1). The insertion point is where the value should
 *     be inserted into arr to preserve the sorted property.  Return value >= 0
 *     iff target is found.
 * @template TARGET, VALUE
 */
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr,
      opt_compareFn || goog.array.defaultCompare, false /* isEvaluator */,
      target);
};


/**
 * Selects an index in the specified array using the binary search algorithm.
 * The evaluator receives an element and determines whether the desired index
 * is before, at, or after it.  The evaluator must be consistent (formally,
 * goog.array.map(goog.array.map(arr, evaluator, opt_obj), goog.math.sign)
 * must be monotonically non-increasing).
 *
 * Runtime: O(log n)
 *
 * @param {Array.<VALUE>|goog.array.ArrayLike} arr The array to be searched.
 * @param {function(this:THIS, VALUE, number, ?): number} evaluator
 *     Evaluator function that receives 3 arguments (the element, the index and
 *     the array). Should return a negative number, zero, or a positive number
 *     depending on whether the desired index is before, at, or after the
 *     element passed to it.
 * @param {THIS=} opt_obj The object to be used as the value of 'this'
 *     within evaluator.
 * @return {number} Index of the leftmost element matched by the evaluator, if
 *     such exists; otherwise (-(insertion point) - 1). The insertion point is
 *     the index of the first element for which the evaluator returns negative,
 *     or arr.length if no such element exists. The return value is non-negative
 *     iff a match is found.
 * @template THIS, VALUE
 */
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true /* isEvaluator */,
      undefined /* opt_target */, opt_obj);
};


/**
 * Implementation of a binary search algorithm which knows how to use both
 * comparison functions and evaluators. If an evaluator is provided, will call
 * the evaluator with the given optional data object, conforming to the
 * interface defined in binarySelect. Otherwise, if a comparison function is
 * provided, will call the comparison function against the given data object.
 *
 * This implementation purposefully does not use goog.bind or goog.partial for
 * performance reasons.
 *
 * Runtime: O(log n)
 *
 * @param {Array.<VALUE>|goog.array.ArrayLike} arr The array to be searched.
 * @param {function(TARGET, VALUE): number|
 *         function(this:THIS, VALUE, number, ?): number} compareFn Either an
 *     evaluator or a comparison function, as defined by binarySearch
 *     and binarySelect above.
 * @param {boolean} isEvaluator Whether the function is an evaluator or a
 *     comparison function.
 * @param {TARGET=} opt_target If the function is a comparison function, then
 *     this is the target to binary search for.
 * @param {THIS=} opt_selfObj If the function is an evaluator, this is an
  *    optional this object for the evaluator.
 * @return {number} Lowest index of the target value if found, otherwise
 *     (-(insertion point) - 1). The insertion point is where the value should
 *     be inserted into arr to preserve the sorted property.  Return value >= 0
 *     iff target is found.
 * @template THIS, VALUE, TARGET
 * @private
 */
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target,
    opt_selfObj) {
  var left = 0;  // inclusive
  var right = arr.length;  // exclusive
  var found;
  while (left < right) {
    var middle = (left + right) >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      // We are looking for the lowest index so we can't return immediately.
      found = !compareResult;
    }
  }
  // left is the index if found, or the insertion point otherwise.
  // ~left is a shorthand for -left - 1.
  return found ? left : ~left;
};


/**
 * Sorts the specified array into ascending order.  If no opt_compareFn is
 * specified, elements are compared using
 * <code>goog.array.defaultCompare</code>, which compares the elements using
 * the built in < and > operators.  This will produce the expected behavior
 * for homogeneous arrays of String(s) and Number(s), unlike the native sort,
 * but will give unpredictable results for heterogenous lists of strings and
 * numbers with different numbers of digits.
 *
 * This sort is not guaranteed to be stable.
 *
 * Runtime: Same as <code>Array.prototype.sort</code>
 *
 * @param {Array.<T>} arr The array to be sorted.
 * @param {?function(T,T):number=} opt_compareFn Optional comparison
 *     function by which the
 *     array is to be ordered. Should take 2 arguments to compare, and return a
 *     negative number, zero, or a positive number depending on whether the
 *     first argument is less than, equal to, or greater than the second.
 * @template T
 */
goog.array.sort = function(arr, opt_compareFn) {
  // TODO(arv): Update type annotation since null is not accepted.
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};


/**
 * Sorts the specified array into ascending order in a stable way.  If no
 * opt_compareFn is specified, elements are compared using
 * <code>goog.array.defaultCompare</code>, which compares the elements using
 * the built in < and > operators.  This will produce the expected behavior
 * for homogeneous arrays of String(s) and Number(s).
 *
 * Runtime: Same as <code>Array.prototype.sort</code>, plus an additional
 * O(n) overhead of copying the array twice.
 *
 * @param {Array.<T>} arr The array to be sorted.
 * @param {?function(T, T): number=} opt_compareFn Optional comparison function
 *     by which the array is to be ordered. Should take 2 arguments to compare,
 *     and return a negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template T
 */
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0; i < arr.length; i++) {
    arr[i] = {index: i, value: arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  };
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0; i < arr.length; i++) {
    arr[i] = arr[i].value;
  }
};


/**
 * Sort the specified array into ascending order based on item keys
 * returned by the specified key function.
 * If no opt_compareFn is specified, the keys are compared in ascending order
 * using <code>goog.array.defaultCompare</code>.
 *
 * Runtime: O(S(f(n)), where S is runtime of <code>goog.array.sort</code>
 * and f(n) is runtime of the key function.
 *
 * @param {Array.<T>} arr The array to be sorted.
 * @param {function(T): K} keyFn Function taking array element and returning
 *     a key used for sorting this element.
 * @param {?function(K, K): number=} opt_compareFn Optional comparison function
 *     by which the keys are to be ordered. Should take 2 arguments to compare,
 *     and return a negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template T
 * @template K
 */
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};


/**
 * Sorts an array of objects by the specified object key and compare
 * function. If no compare function is provided, the key values are
 * compared in ascending order using <code>goog.array.defaultCompare</code>.
 * This won't work for keys that get renamed by the compiler. So use
 * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.
 * @param {Array.<Object>} arr An array of objects to sort.
 * @param {string} key The object key to sort by.
 * @param {Function=} opt_compareFn The function to use to compare key
 *     values.
 */
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr,
      function(obj) { return obj[key]; },
      opt_compareFn);
};


/**
 * Tells if the array is sorted.
 * @param {!Array.<T>} arr The array.
 * @param {?function(T,T):number=} opt_compareFn Function to compare the
 *     array elements.
 *     Should take 2 arguments to compare, and return a negative number, zero,
 *     or a positive number depending on whether the first argument is less
 *     than, equal to, or greater than the second.
 * @param {boolean=} opt_strict If true no equal elements are allowed.
 * @return {boolean} Whether the array is sorted.
 * @template T
 */
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1; i < arr.length; i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};


/**
 * Compares two arrays for equality. Two arrays are considered equal if they
 * have the same length and their corresponding elements are equal according to
 * the comparison function.
 *
 * @param {goog.array.ArrayLike} arr1 The first array to compare.
 * @param {goog.array.ArrayLike} arr2 The second array to compare.
 * @param {Function=} opt_equalsFn Optional comparison function.
 *     Should take 2 arguments to compare, and return true if the arguments
 *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which
 *     compares the elements using the built-in '===' operator.
 * @return {boolean} Whether the two arrays are equal.
 */
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||
      arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0; i < l; i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};


/**
 * 3-way array compare function.
 * @param {!Array.<VALUE>|!goog.array.ArrayLike} arr1 The first array to
 *     compare.
 * @param {!Array.<VALUE>|!goog.array.ArrayLike} arr2 The second array to
 *     compare.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is to be ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {number} Negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template VALUE
 */
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0; i < l; i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};


/**
 * Compares its two arguments for order, using the built in < and >
 * operators.
 * @param {VALUE} a The first object to be compared.
 * @param {VALUE} b The second object to be compared.
 * @return {number} A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 * @template VALUE
 */
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};


/**
 * Compares its two arguments for equality, using the built in === operator.
 * @param {*} a The first object to compare.
 * @param {*} b The second object to compare.
 * @return {boolean} True if the two arguments are equal, false otherwise.
 */
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};


/**
 * Inserts a value into a sorted array. The array is not modified if the
 * value is already present.
 * @param {Array.<VALUE>|goog.array.ArrayLike} array The array to modify.
 * @param {VALUE} value The object to insert.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {boolean} True if an element was inserted.
 * @template VALUE
 */
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};


/**
 * Removes a value from a sorted array.
 * @param {!Array.<VALUE>|!goog.array.ArrayLike} array The array to modify.
 * @param {VALUE} value The object to remove.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {boolean} True if an element was removed.
 * @template VALUE
 */
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return (index >= 0) ? goog.array.removeAt(array, index) : false;
};


/**
 * Splits an array into disjoint buckets according to a splitting function.
 * @param {Array.<T>} array The array.
 * @param {function(this:S, T,number,Array.<T>):?} sorter Function to call for
 *     every element.  This takes 3 arguments (the element, the index and the
 *     array) and must return a valid object key (a string, number, etc), or
 *     undefined, if that object should not be placed in a bucket.
 * @param {S=} opt_obj The object to be used as the value of 'this' within
 *     sorter.
 * @return {!Object} An object, with keys being all of the unique return values
 *     of sorter, and values being arrays containing the items for
 *     which the splitter returned that key.
 * @template T,S
 */
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};

  for (var i = 0; i < array.length; i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      // Push the value to the right bucket, creating it if necessary.
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }

  return buckets;
};


/**
 * Creates a new object built from the provided array and the key-generation
 * function.
 * @param {Array.<T>|goog.array.ArrayLike} arr Array or array like object over
 *     which to iterate whose elements will be the values in the new object.
 * @param {?function(this:S, T, number, ?) : string} keyFunc The function to
 *     call for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a string that will be used as the
 *     key for the element in the new object. If the function returns the same
 *     key for more than one element, the value for that key is
 *     implementation-defined.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within keyFunc.
 * @return {!Object.<T>} The new object.
 * @template T,S
 */
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};


/**
 * Creates a range of numbers in an arithmetic progression.
 *
 * Range takes 1, 2, or 3 arguments:
 * <pre>
 * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]
 * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]
 * range(-2, -5, -1) produces [-2, -3, -4]
 * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.
 * </pre>
 *
 * @param {number} startOrEnd The starting value of the range if an end argument
 *     is provided. Otherwise, the start value is 0, and this is the end value.
 * @param {number=} opt_end The optional end value of the range.
 * @param {number=} opt_step The step size between range values. Defaults to 1
 *     if opt_step is undefined or 0.
 * @return {!Array.<number>} An array of numbers for the requested range. May be
 *     an empty array if adding the step would not converge toward the end
 *     value.
 */
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }

  if (step * (end - start) < 0) {
    // Sign mismatch: start + step will never reach the end value.
    return [];
  }

  if (step > 0) {
    for (var i = start; i < end; i += step) {
      array.push(i);
    }
  } else {
    for (var i = start; i > end; i += step) {
      array.push(i);
    }
  }
  return array;
};


/**
 * Returns an array consisting of the given value repeated N times.
 *
 * @param {VALUE} value The value to repeat.
 * @param {number} n The repeat count.
 * @return {!Array.<VALUE>} An array with the repeated value.
 * @template VALUE
 */
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0; i < n; i++) {
    array[i] = value;
  }
  return array;
};


/**
 * Returns an array consisting of every argument with all arrays
 * expanded in-place recursively.
 *
 * @param {...*} var_args The values to flatten.
 * @return {!Array.<?>} An array containing the flattened values.
 */
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0; i < arguments.length; i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};


/**
 * Rotates an array in-place. After calling this method, the element at
 * index i will be the element previously at index (i - n) %
 * array.length, for all values of i between 0 and array.length - 1,
 * inclusive.
 *
 * For example, suppose list comprises [t, a, n, k, s]. After invoking
 * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].
 *
 * @param {!Array.<T>} array The array to rotate.
 * @param {number} n The amount to rotate.
 * @return {!Array.<T>} The array.
 * @template T
 */
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);

  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else if (n < 0) {
      goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
    }
  }
  return array;
};


/**
 * Moves one item of an array to a new position keeping the order of the rest
 * of the items. Example use case: keeping a list of JavaScript objects
 * synchronized with the corresponding list of DOM elements after one of the
 * elements has been dragged to a new position.
 * @param {!(Array|Arguments|{length:number})} arr The array to modify.
 * @param {number} fromIndex Index of the item to move between 0 and
 *     {@code arr.length - 1}.
 * @param {number} toIndex Target index between 0 and {@code arr.length - 1}.
 */
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  // Remove 1 item at fromIndex.
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  // Insert the removed item at toIndex.
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
  // We don't use goog.array.insertAt and goog.array.removeAt, because they're
  // significantly slower than splice.
};


/**
 * Creates a new array for which the element at position i is an array of the
 * ith element of the provided arrays.  The returned array will only be as long
 * as the shortest array provided; additional values are ignored.  For example,
 * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].
 *
 * This is similar to the zip() function in Python.  See {@link
 * http://docs.python.org/library/functions.html#zip}
 *
 * @param {...!goog.array.ArrayLike} var_args Arrays to be combined.
 * @return {!Array.<!Array.<?>>} A new array of arrays created from
 *     provided arrays.
 */
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  for (var i = 0; true; i++) {
    var value = [];
    for (var j = 0; j < arguments.length; j++) {
      var arr = arguments[j];
      // If i is larger than the array length, this is the shortest array.
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};


/**
 * Shuffles the values in the specified array using the Fisher-Yates in-place
 * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()
 * and so resets the state of that random number generator. Similarly, may reset
 * the state of the any other specified random number generator.
 *
 * Runtime: O(n)
 *
 * @param {!Array.<?>} arr The array to be shuffled.
 * @param {function():number=} opt_randFn Optional random function to use for
 *     shuffling.
 *     Takes no arguments, and returns a random number on the interval [0, 1).
 *     Defaults to Math.random() using JavaScript's built-in Math library.
 */
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;

  for (var i = arr.length - 1; i > 0; i--) {
    // Choose a random array index in [0, i] (inclusive with i).
    var j = Math.floor(randFn() * (i + 1));

    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for manipulating objects/maps/hashes.
 * @author arv@google.com (Erik Arvidsson)
 */

goog.provide('goog.object');

goog.require('goog.array');


/**
 * Calls a function for each element in an object/map/hash.
 *
 * @param {Object.<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,Object.<K,V>):?} f The function to call
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the object) and the return value is ignored.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @template T,K,V
 */
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};


/**
 * Calls a function for each element in an object/map/hash. If that call returns
 * true, adds the element to a new object.
 *
 * @param {Object.<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,Object.<K,V>):boolean} f The function to call
 *     for every element. This
 *     function takes 3 arguments (the element, the index and the object)
 *     and should return a boolean. If the return value is true the
 *     element is added to the result object. If it is false the
 *     element is not included.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {!Object.<K,V>} a new object in which only elements that passed the
 *     test are present.
 * @template T,K,V
 */
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};


/**
 * For every element in an object/map/hash calls a function and inserts the
 * result into a new object.
 *
 * @param {Object.<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,Object.<K,V>):R} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the object)
 *     and should return something. The result will be inserted
 *     into a new object.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {!Object.<K,R>} a new object with the results from f.
 * @template T,K,V,R
 */
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};


/**
 * Calls a function for each element in an object/map/hash. If any
 * call returns true, returns true (without checking the rest). If
 * all calls return false, returns false.
 *
 * @param {Object.<K,V>} obj The object to check.
 * @param {function(this:T,V,?,Object.<K,V>):boolean} f The function to
 *     call for every element. This function
 *     takes 3 arguments (the element, the index and the object) and should
 *     return a boolean.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {boolean} true if any element passes the test.
 * @template T,K,V
 */
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};


/**
 * Calls a function for each element in an object/map/hash. If
 * all calls return true, returns true. If any call returns false, returns
 * false at this point and does not continue to check the remaining elements.
 *
 * @param {Object.<K,V>} obj The object to check.
 * @param {?function(this:T,V,?,Object.<K,V>):boolean} f The function to
 *     call for every element. This function
 *     takes 3 arguments (the element, the index and the object) and should
 *     return a boolean.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {boolean} false if any element fails the test.
 * @template T,K,V
 */
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};


/**
 * Returns the number of key-value pairs in the object map.
 *
 * @param {Object} obj The object for which to get the number of key-value
 *     pairs.
 * @return {number} The number of key-value pairs in the object map.
 */
goog.object.getCount = function(obj) {
  // JS1.5 has __count__ but it has been deprecated so it raises a warning...
  // in other words do not use. Also __count__ only includes the fields on the
  // actual object and not in the prototype chain.
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};


/**
 * Returns one key from the object map, if any exists.
 * For map literals the returned key will be the first one in most of the
 * browsers (a know exception is Konqueror).
 *
 * @param {Object} obj The object to pick a key from.
 * @return {string|undefined} The key or undefined if the object is empty.
 */
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};


/**
 * Returns one value from the object map, if any exists.
 * For map literals the returned value will be the first one in most of the
 * browsers (a know exception is Konqueror).
 *
 * @param {Object.<K,V>} obj The object to pick a value from.
 * @return {V|undefined} The value or undefined if the object is empty.
 * @template K,V
 */
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};


/**
 * Whether the object/hash/map contains the given object as a value.
 * An alias for goog.object.containsValue(obj, val).
 *
 * @param {Object.<K,V>} obj The object in which to look for val.
 * @param {V} val The object for which to check.
 * @return {boolean} true if val is present.
 * @template K,V
 */
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};


/**
 * Returns the values of the object/map/hash.
 *
 * @param {Object.<K,V>} obj The object from which to get the values.
 * @return {!Array.<V>} The values in the object/map/hash.
 * @template K,V
 */
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};


/**
 * Returns the keys of the object/map/hash.
 *
 * @param {Object} obj The object from which to get the keys.
 * @return {!Array.<string>} Array of property keys.
 */
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};


/**
 * Get a value from an object multiple levels deep.  This is useful for
 * pulling values from deeply nested objects, such as JSON responses.
 * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)
 *
 * @param {!Object} obj An object to get the value from.  Can be array-like.
 * @param {...(string|number|!Array.<number|string>)} var_args A number of keys
 *     (as strings, or numbers, for array-like objects).  Can also be
 *     specified as a single array of keys.
 * @return {*} The resulting value.  If, at any point, the value for a key
 *     is undefined, returns undefined.
 */
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;

  // Start with the 2nd parameter for the variable parameters syntax.
  for (var i = isArrayLike ? 0 : 1; i < keys.length; i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }

  return obj;
};


/**
 * Whether the object/map/hash contains the given key.
 *
 * @param {Object} obj The object in which to look for key.
 * @param {*} key The key for which to check.
 * @return {boolean} true If the map contains the key.
 */
goog.object.containsKey = function(obj, key) {
  return key in obj;
};


/**
 * Whether the object/map/hash contains the given value. This is O(n).
 *
 * @param {Object.<K,V>} obj The object in which to look for val.
 * @param {V} val The value for which to check.
 * @return {boolean} true If the map contains the value.
 * @template K,V
 */
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};


/**
 * Searches an object for an element that satisfies the given condition and
 * returns its key.
 * @param {Object.<K,V>} obj The object to search in.
 * @param {function(this:T,V,string,Object.<K,V>):boolean} f The
 *      function to call for every element. Takes 3 arguments (the value,
 *     the key and the object) and should return a boolean.
 * @param {T=} opt_this An optional "this" context for the function.
 * @return {string|undefined} The key of an element for which the function
 *     returns true or undefined if no such element is found.
 * @template T,K,V
 */
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};


/**
 * Searches an object for an element that satisfies the given condition and
 * returns its value.
 * @param {Object.<K,V>} obj The object to search in.
 * @param {function(this:T,V,string,Object.<K,V>):boolean} f The function
 *     to call for every element. Takes 3 arguments (the value, the key
 *     and the object) and should return a boolean.
 * @param {T=} opt_this An optional "this" context for the function.
 * @return {V} The value of an element for which the function returns true or
 *     undefined if no such element is found.
 * @template T,K,V
 */
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};


/**
 * Whether the object/map/hash is empty.
 *
 * @param {Object} obj The object to test.
 * @return {boolean} true if obj is empty.
 */
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};


/**
 * Removes all key value pairs from the object/map/hash.
 *
 * @param {Object} obj The object to clear.
 */
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};


/**
 * Removes a key-value pair based on the key.
 *
 * @param {Object} obj The object from which to remove the key.
 * @param {*} key The key to remove.
 * @return {boolean} Whether an element was removed.
 */
goog.object.remove = function(obj, key) {
  var rv;
  if ((rv = key in obj)) {
    delete obj[key];
  }
  return rv;
};


/**
 * Adds a key-value pair to the object. Throws an exception if the key is
 * already in use. Use set if you want to change an existing pair.
 *
 * @param {Object.<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} val The value to add.
 * @template K,V
 */
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};


/**
 * Returns the value for the given key.
 *
 * @param {Object.<K,V>} obj The object from which to get the value.
 * @param {string} key The key for which to get the value.
 * @param {R=} opt_val The value to return if no item is found for the given
 *     key (default is undefined).
 * @return {V|R|undefined} The value for the given key.
 * @template K,V,R
 */
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};


/**
 * Adds a key-value pair to the object/map/hash.
 *
 * @param {Object.<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} value The value to add.
 * @template K,V
 */
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};


/**
 * Adds a key-value pair to the object/map/hash if it doesn't exist yet.
 *
 * @param {Object.<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} value The value to add if the key wasn't present.
 * @return {V} The value of the entry at the end of the function.
 * @template K,V
 */
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : (obj[key] = value);
};


/**
 * Compares two objects for equality using === on the values.
 *
 * @param {!Object.<K,V>} a
 * @param {!Object.<K,V>} b
 * @return {boolean}
 * @template K,V
 */
goog.object.equals = function(a, b) {
  if (!goog.array.equals(goog.object.getKeys(a), goog.object.getKeys(b))) {
    return false;
  }
  for (var k in a) {
    if (a[k] !== b[k]) {
      return false;
    }
  }
  return true;
};


/**
 * Does a flat clone of the object.
 *
 * @param {Object.<K,V>} obj Object to clone.
 * @return {!Object.<K,V>} Clone of the input object.
 * @template K,V
 */
goog.object.clone = function(obj) {
  // We cannot use the prototype trick because a lot of methods depend on where
  // the actual key is set.

  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
  // We could also use goog.mixin but I wanted this to be independent from that.
};


/**
 * Clones a value. The input may be an Object, Array, or basic type. Objects and
 * arrays will be cloned recursively.
 *
 * WARNINGS:
 * <code>goog.object.unsafeClone</code> does not detect reference loops. Objects
 * that refer to themselves will cause infinite recursion.
 *
 * <code>goog.object.unsafeClone</code> is unaware of unique identifiers, and
 * copies UIDs created by <code>getUid</code> into cloned results.
 *
 * @param {*} obj The value to clone.
 * @return {*} A clone of the input value.
 */
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == 'object' || type == 'array') {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == 'array' ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }

  return obj;
};


/**
 * Returns a new object in which all the keys and values are interchanged
 * (keys become values and values become keys). If multiple keys map to the
 * same value, the chosen transposed value is implementation-dependent.
 *
 * @param {Object} obj The object to transpose.
 * @return {!Object} The transposed object.
 */
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};


/**
 * The names of the fields that are defined on Object.prototype.
 * @type {Array.<string>}
 * @private
 */
goog.object.PROTOTYPE_FIELDS_ = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/**
 * Extends an object with another object.
 * This operates 'in-place'; it does not create a new Object.
 *
 * Example:
 * var o = {};
 * goog.object.extend(o, {a: 0, b: 1});
 * o; // {a: 0, b: 1}
 * goog.object.extend(o, {b: 2, c: 3});
 * o; // {a: 0, b: 2, c: 3}
 *
 * @param {Object} target The object to modify. Existing properties will be
 *     overwritten if they are also present in one of the objects in
 *     {@code var_args}.
 * @param {...Object} var_args The objects from which values will be copied.
 */
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1; i < arguments.length; i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }

    // For IE the for-in-loop does not contain any properties that are not
    // enumerable on the prototype object (for example isPrototypeOf from
    // Object.prototype) and it will also not include 'replace' on objects that
    // extend String and change 'replace' (not that it is common for anyone to
    // extend anything except Object).

    for (var j = 0; j < goog.object.PROTOTYPE_FIELDS_.length; j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};


/**
 * Creates a new object built from the key-value pairs provided as arguments.
 * @param {...*} var_args If only one argument is provided and it is an array
 *     then this is used as the arguments,  otherwise even arguments are used as
 *     the property names and odd arguments are used as the property values.
 * @return {!Object} The new object.
 * @throws {Error} If there are uneven number of arguments or there is only one
 *     non array argument.
 */
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }

  if (argLength % 2) {
    throw Error('Uneven number of arguments');
  }

  var rv = {};
  for (var i = 0; i < argLength; i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};


/**
 * Creates a new object where the property names come from the arguments but
 * the value is always set to true
 * @param {...*} var_args If only one argument is provided and it is an array
 *     then this is used as the arguments,  otherwise the arguments are used
 *     as the property names.
 * @return {!Object} The new object.
 */
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }

  var rv = {};
  for (var i = 0; i < argLength; i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};


/**
 * Creates an immutable view of the underlying object, if the browser
 * supports immutable objects.
 *
 * In default mode, writes to this view will fail silently. In strict mode,
 * they will throw an error.
 *
 * @param {!Object.<K,V>} obj An object.
 * @return {!Object.<K,V>} An immutable view of that object, or the
 *     original object if this browser does not support immutables.
 * @template K,V
 */
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};


/**
 * @param {!Object} obj An object.
 * @return {boolean} Whether this is an immutable view of the object.
 */
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Base class for the implementation of a cryptographic algorithm.
 */

goog.provide('e2e.Algorithm');
goog.provide('e2e.AlgorithmImpl');

/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.cipher.key');
goog.require('goog.object');


/**
 * @interface
 */
e2e.Algorithm = function() {};


/**
 * The algorithm being implemented.
 * @type {!e2e.signer.Algorithm|!e2e.cipher.Algorithm}
 */
e2e.Algorithm.prototype.algorithm;


/**
 * @type {e2e.cipher.key.Key|e2e.signer.key.Key|null}
 * @protected
 */
e2e.Algorithm.prototype.key;


/**
 * @type {e2e.algorithm.WebCryptoKeyPair}
 * @protected
 */
e2e.Algorithm.prototype.webCryptoKey;


/**
 * @type {number}
 */
e2e.Algorithm.prototype.keySize;


/**
 * Returns a copy of the key that can be modified.
 * @return {e2e.cipher.key.Key|e2e.signer.key.Key|null} The key or null if not
 *     yet set.
 */
e2e.Algorithm.prototype.getKey;


/**
 * Changes the key of the algorithm.
 * @param {!e2e.cipher.key.Key|!e2e.signer.key.Key} key The key.
 * @param {number=} opt_keySize The key size in bytes.
 */
e2e.Algorithm.prototype.setKey;

/**
 * Changes the WebCrypto key of the algorithm.
 * @param {!e2e.algorithm.WebCryptoKeyPair} webCryptoKey The WebCrypto key
 */
e2e.Algorithm.prototype.setWebCryptoKey;

/**
 * Returns a WebCrypto key object (which we don't possess key material).
 * @return {e2e.algorithm.WebCryptoKeyPair}
 */
e2e.Algorithm.prototype.getWebCryptoKey;




/**
 * @param {!e2e.signer.Algorithm|!e2e.cipher.Algorithm} algorithm
 * @param {e2e.signer.key.Key|e2e.cipher.key.Key=} opt_key
 * @constructor
 * @implements {e2e.Algorithm}
 */
e2e.AlgorithmImpl = function(algorithm, opt_key) {
  this.algorithm = algorithm;
  if (goog.isDefAndNotNull(opt_key)) {
    this.setKey(opt_key);
  }
};


/** @override */
e2e.AlgorithmImpl.prototype.setWebCryptoKey = function(webCryptoKey) {
  this.webCryptoKey = webCryptoKey;
};


/** @override */
e2e.AlgorithmImpl.prototype.webCryptoKey;

/** @override */
e2e.AlgorithmImpl.prototype.key;


/** @override */
e2e.AlgorithmImpl.prototype.keySize;


/** @override */
e2e.AlgorithmImpl.prototype.getKey = function() {
  return /** @type {e2e.cipher.key.Key|e2e.signer.key.Key} */ (
      goog.object.clone(this.key));
};


/** @override */
e2e.AlgorithmImpl.prototype.setKey = function(key, opt_keySize) {
  this.key = key;
  if (goog.isDef(opt_keySize)) {
    this.keySize = opt_keySize;
  }
};


/** @override */
e2e.AlgorithmImpl.prototype.getWebCryptoKey = function() {
  goog.asserts.assert(goog.isDef(this.webCryptoKey));
  return this.webCryptoKey;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview All error types that the ECC module can throw.
 */

goog.provide('e2e.error.Error');
goog.provide('e2e.error.InvalidArgumentsError');
goog.provide('e2e.error.UnsupportedError');

goog.require('goog.debug.Error');


/**
 * The base class for crypto errors.
 * @param {*=} opt_msg The custom error message.
 * @constructor
 * @extends {goog.debug.Error}
 */
e2e.error.Error = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.error.Error, goog.debug.Error);


/**
 * Exception used when a function receives an invalid argument.
 * @param {string} message The message with the error details.
 * @constructor
 * @extends {e2e.error.Error}
*/
e2e.error.InvalidArgumentsError = function(message) {
  goog.base(this, message);
};
goog.inherits(e2e.error.InvalidArgumentsError,
              e2e.error.Error);


/**
 * Exception used when the client requests an unimplemented feature.
 * @param {string} message The message with the error details.
 * @constructor
 * @extends {e2e.error.Error}
*/
e2e.error.UnsupportedError = function(message) {
  goog.base(this, message);
};
goog.inherits(e2e.error.UnsupportedError,
              e2e.error.Error);

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Namespace with crypto related helper functions.
 */

goog.provide('goog.crypt');

goog.require('goog.array');
goog.require('goog.asserts');


/**
 * Turns a string into an array of bytes; a "byte" being a JS number in the
 * range 0-255.
 * @param {string} str String value to arrify.
 * @return {!Array.<number>} Array of numbers corresponding to the
 *     UCS character codes of each character in str.
 */
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    while (c > 0xff) {
      output[p++] = c & 0xff;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};


/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param {Array.<number>} bytes Array of numbers representing characters.
 * @return {string} Stringification of the array.
 */
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;

  // Special-case the simple case for speed's sake.
  if (bytes.length < CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }

  // The remaining logic splits conversion by chunks since
  // Function#apply() has a maximum parameter count.
  // See discussion: http://goo.gl/LrWmZ9

  var str = '';
  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};


/**
 * Turns an array of numbers into the hex string given by the concatenation of
 * the hex values to which the numbers correspond.
 * @param {Uint8Array|Int8Array|Array.<number>} array Array of numbers
 *     representing characters.
 * @return {string} Hex string.
 */
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : '0' + hexByte;
  }).join('');
};


/**
 * Converts a hex string into an integer array.
 * @param {string} hexString Hex string of 16-bit integers (two characters
 *     per integer).
 * @return {!Array.<number>} Array of {0,255} integers for the given string.
 */
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0,
                      'Key string length must be multiple of 2');
  var arr = [];
  for (var i = 0; i < hexString.length; i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};


/**
 * Converts a JS string to a UTF-8 "byte" array.
 * @param {string} str 16-bit unicode string.
 * @return {!Array.<number>} UTF-8 byte array.
 */
goog.crypt.stringToUtf8ByteArray = function(str) {
  // TODO(user): Use native implementations if/when available
  str = str.replace(/\r\n/g, '\n');
  var out = [], p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = (c >> 6) | 192;
      out[p++] = (c & 63) | 128;
    } else {
      out[p++] = (c >> 12) | 224;
      out[p++] = ((c >> 6) & 63) | 128;
      out[p++] = (c & 63) | 128;
    }
  }
  return out;
};


/**
 * Converts a UTF-8 byte array to JavaScript's 16-bit Unicode.
 * @param {Uint8Array|Int8Array|Array.<number>} bytes UTF-8 byte array.
 * @return {string} 16-bit Unicode string.
 */
goog.crypt.utf8ByteArrayToString = function(bytes) {
  // TODO(user): Use native implementations if/when available
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      out[c++] = String.fromCharCode(
          (c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }
  return out.join('');
};


/**
 * XOR two byte arrays.
 * @param {!ArrayBufferView|!Array.<number>} bytes1 Byte array 1.
 * @param {!ArrayBufferView|!Array.<number>} bytes2 Byte array 2.
 * @return {!Array.<number>} Resulting XOR of the two byte arrays.
 */
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(
      bytes1.length == bytes2.length,
      'XOR array lengths must match');

  var result = [];
  for (var i = 0; i < bytes1.length; i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.promise.Resolver');



/**
 * Resolver interface for promises. The resolver is a convenience interface that
 * bundles the promise and its associated resolve and reject functions together,
 * for cases where the resolver needs to be persisted internally.
 *
 * @interface
 * @template TYPE
 */
goog.promise.Resolver = function() {};


/**
 * The promise that created this resolver.
 * @const {!goog.Promise.<TYPE>}
 */
goog.promise.Resolver.prototype.promise;


/**
 * Resolves this resolver with the specified value.
 * @const {function((TYPE|goog.Promise.<TYPE>|Thenable)=)}
 */
goog.promise.Resolver.prototype.resolve;


/**
 * Rejects this resolver with the specified reason.
 * @const {function(*): void}
 */
goog.promise.Resolver.prototype.reject;

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Simple notifiers for the Closure testing framework.
 *
 * @author johnlenz@google.com (John Lenz)
 */

goog.provide('goog.testing.watchers');


/** @private {!Array.<function()>} */
goog.testing.watchers.resetWatchers_ = [];


/**
 * Fires clock reset watching functions.
 */
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0; i < watchers.length; i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};


/**
 * Enqueues a function to be called when the clock used for setTimeout is reset.
 * @param {function()} fn
 */
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};


// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A global registry for entry points into a program,
 * so that they can be instrumented. Each module should register their
 * entry points with this registry. Designed to be compiled out
 * if no instrumentation is requested.
 *
 * Entry points may be registered before or after a call to
 * goog.debug.entryPointRegistry.monitorAll. If an entry point is registered
 * later, the existing monitor will instrument the new entry point.
 *
 * @author nicksantos@google.com (Nick Santos)
 */

goog.provide('goog.debug.EntryPointMonitor');
goog.provide('goog.debug.entryPointRegistry');

goog.require('goog.asserts');



/**
 * @interface
 */
goog.debug.EntryPointMonitor = function() {};


/**
 * Instruments a function.
 *
 * @param {!Function} fn A function to instrument.
 * @return {!Function} The instrumented function.
 */
goog.debug.EntryPointMonitor.prototype.wrap;


/**
 * Try to remove an instrumentation wrapper created by this monitor.
 * If the function passed to unwrap is not a wrapper created by this
 * monitor, then we will do nothing.
 *
 * Notice that some wrappers may not be unwrappable. For example, if other
 * monitors have applied their own wrappers, then it will be impossible to
 * unwrap them because their wrappers will have captured our wrapper.
 *
 * So it is important that entry points are unwrapped in the reverse
 * order that they were wrapped.
 *
 * @param {!Function} fn A function to unwrap.
 * @return {!Function} The unwrapped function, or {@code fn} if it was not
 *     a wrapped function created by this monitor.
 */
goog.debug.EntryPointMonitor.prototype.unwrap;


/**
 * An array of entry point callbacks.
 * @type {!Array.<function(!Function)>}
 * @private
 */
goog.debug.entryPointRegistry.refList_ = [];


/**
 * Monitors that should wrap all the entry points.
 * @type {!Array.<!goog.debug.EntryPointMonitor>}
 * @private
 */
goog.debug.entryPointRegistry.monitors_ = [];


/**
 * Whether goog.debug.entryPointRegistry.monitorAll has ever been called.
 * Checking this allows the compiler to optimize out the registrations.
 * @type {boolean}
 * @private
 */
goog.debug.entryPointRegistry.monitorsMayExist_ = false;


/**
 * Register an entry point with this module.
 *
 * The entry point will be instrumented when a monitor is passed to
 * goog.debug.entryPointRegistry.monitorAll. If this has already occurred, the
 * entry point is instrumented immediately.
 *
 * @param {function(!Function)} callback A callback function which is called
 *     with a transforming function to instrument the entry point. The callback
 *     is responsible for wrapping the relevant entry point with the
 *     transforming function.
 */
goog.debug.entryPointRegistry.register = function(callback) {
  // Don't use push(), so that this can be compiled out.
  goog.debug.entryPointRegistry.refList_[
      goog.debug.entryPointRegistry.refList_.length] = callback;
  // If no one calls monitorAll, this can be compiled out.
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0; i < monitors.length; i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};


/**
 * Configures a monitor to wrap all entry points.
 *
 * Entry points that have already been registered are immediately wrapped by
 * the monitor. When an entry point is registered in the future, it will also
 * be wrapped by the monitor when it is registered.
 *
 * @param {!goog.debug.EntryPointMonitor} monitor An entry point monitor.
 */
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};


/**
 * Try to unmonitor all the entry points that have already been registered. If
 * an entry point is registered in the future, it will not be wrapped by the
 * monitor when it is registered. Note that this may fail if the entry points
 * have additional wrapping.
 *
 * @param {!goog.debug.EntryPointMonitor} monitor The last monitor to wrap
 *     the entry points.
 * @throws {Error} If the monitor is not the most recently configured monitor.
 */
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1],
      'Only the most recent monitor can be unwrapped.');
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities used by goog.labs.userAgent tools. These functions
 * should not be used outside of goog.labs.userAgent.*.
 *
 * @visibility {//closure/goog/bin/sizetests:__pkg__}
 * @visibility {//closure/goog/dom:__subpackages__}
 * @visibility {//closure/goog/style:__pkg__}
 * @visibility {//closure/goog/testing:__pkg__}
 * @visibility {//closure/goog/useragent:__subpackages__}
 * @visibility {//testing/puppet/modules:__pkg__} *
 *
 * @author nnaze@google.com (Nathan Naze)
 */

goog.provide('goog.labs.userAgent.util');

goog.require('goog.string');


/**
 * Gets the native userAgent string from navigator if it exists.
 * If navigator or navigator.userAgent string is missing, returns an empty
 * string.
 * @return {string}
 * @private
 */
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return '';
};


/**
 * Getter for the native navigator.
 * This is a separate function so it can be stubbed out in testing.
 * @return {Navigator}
 * @private
 */
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};


/**
 * A possible override for applications which wish to not check
 * navigator.userAgent but use a specified value for detection instead.
 * @private {string}
 */
goog.labs.userAgent.util.userAgent_ =
    goog.labs.userAgent.util.getNativeUserAgentString_();


/**
 * Applications may override browser detection on the built in
 * navigator.userAgent object by setting this string. Set to null to use the
 * browser object instead.
 * @param {?string=} opt_userAgent The User-Agent override.
 */
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent ||
      goog.labs.userAgent.util.getNativeUserAgentString_();
};


/**
 * @return {string} The user agent string.
 */
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};


/**
 * @param {string} str
 * @return {boolean} Whether the user agent contains the given string, ignoring
 *     case.
 */
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};


/**
 * @param {string} str
 * @return {boolean} Whether the user agent contains the given string.
 */
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};


/**
 * Parses the user agent into tuples for each section.
 * @param {string} userAgent
 * @return {!Array.<!Array.<string>>} Tuples of key, version, and the contents
 *     of the parenthetical.
 */
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  // Matches each section of a user agent string.
  // Example UA:
  // Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)
  // AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405
  // This has three version tuples: Mozilla, AppleWebKit, and Mobile.

  var versionRegExp = new RegExp(
      // Key. Note that a key may have a space.
      // (i.e. 'Mobile Safari' in 'Mobile Safari/5.0')
      '(\\w[\\w ]+)' +

      '/' +                // slash
      '([^\\s]+)' +        // version (i.e. '5.0b')
      '\\s*' +             // whitespace
      '(?:\\((.*?)\\))?',  // parenthetical info. parentheses not matched.
      'g');

  var data = [];
  var match;

  // Iterate and collect the version tuples.  Each iteration will be the
  // next regex match.
  while (match = versionRegExp.exec(userAgent)) {
    data.push([
      match[1],  // key
      match[2],  // value
      // || undefined as this is not undefined in IE7 and IE8
      match[3] || undefined  // info
    ]);
  }

  return data;
};


// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Closure user agent detection (Browser).
 * @see <a href="http://www.useragentstring.com/">User agent strings</a>
 * For more information on rendering engine, platform, or device see the other
 * sub-namespaces in goog.labs.userAgent, goog.labs.userAgent.platform,
 * goog.labs.userAgent.device respectively.)
 *
 * @author martone@google.com (Andy Martone)
 */

goog.provide('goog.labs.userAgent.browser');

goog.require('goog.array');
goog.require('goog.labs.userAgent.util');
goog.require('goog.object');
goog.require('goog.string');


/**
 * @return {boolean} Whether the user's browser is Opera.
 * @private
 */
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Opera') ||
      goog.labs.userAgent.util.matchUserAgent('OPR');
};


/**
 * @return {boolean} Whether the user's browser is IE.
 * @private
 */
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Trident') ||
      goog.labs.userAgent.util.matchUserAgent('MSIE');
};


/**
 * @return {boolean} Whether the user's browser is Firefox.
 * @private
 */
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Firefox');
};


/**
 * @return {boolean} Whether the user's browser is Safari.
 * @private
 */
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Safari') &&
      !goog.labs.userAgent.util.matchUserAgent('Chrome') &&
      !goog.labs.userAgent.util.matchUserAgent('CriOS') &&
      !goog.labs.userAgent.util.matchUserAgent('Android');
};


/**
 * @return {boolean} Whether the user's browser is Chrome.
 * @private
 */
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent('Chrome') ||
      goog.labs.userAgent.util.matchUserAgent('CriOS');
};


/**
 * @return {boolean} Whether the user's browser is the Android browser.
 * @private
 */
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  // Android can appear in the user agent string for Chrome on Android.
  // This is not the Android standalone browser if it does.
  return !goog.labs.userAgent.browser.isChrome() &&
      goog.labs.userAgent.util.matchUserAgent('Android');

};


/**
 * @return {boolean} Whether the user's browser is Opera.
 */
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;


/**
 * @return {boolean} Whether the user's browser is IE.
 */
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;


/**
 * @return {boolean} Whether the user's browser is Firefox.
 */
goog.labs.userAgent.browser.isFirefox =
    goog.labs.userAgent.browser.matchFirefox_;


/**
 * @return {boolean} Whether the user's browser is Safari.
 */
goog.labs.userAgent.browser.isSafari =
    goog.labs.userAgent.browser.matchSafari_;


/**
 * @return {boolean} Whether the user's browser is Chrome.
 */
goog.labs.userAgent.browser.isChrome =
    goog.labs.userAgent.browser.matchChrome_;


/**
 * @return {boolean} Whether the user's browser is the Android browser.
 */
goog.labs.userAgent.browser.isAndroidBrowser =
    goog.labs.userAgent.browser.matchAndroidBrowser_;


/**
 * For more information, see:
 * http://docs.aws.amazon.com/silk/latest/developerguide/user-agent.html
 * @return {boolean} Whether the user's browser is Silk.
 */
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent('Silk');
};


/**
 * @return {string} The browser version or empty string if version cannot be
 *     determined. Note that for Internet Explorer, this returns the version of
 *     the browser, not the version of the rendering engine. (IE 8 in
 *     compatibility mode will return 8.0 rather than 7.0. To determine the
 *     rendering engine version, look at document.documentMode instead. See
 *     http://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx for more
 *     details.)
 */
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  // Special case IE since IE's version is inside the parenthesis and
  // without the '/'.
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }

  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(
      userAgentString);

  // Construct a map for easy lookup.
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    // Note that the tuple is of length three, but we only care about the
    // first two.
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });

  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);

  // Gives the value with the first key it finds, otherwise empty string.
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || '';
  }

  // Check Opera before Chrome since Opera 15+ has "Chrome" in the string.
  // See
  // http://my.opera.com/ODIN/blog/2013/07/15/opera-user-agent-strings-opera-15-and-beyond
  if (goog.labs.userAgent.browser.isOpera()) {
    // Opera 10 has Version/10.0 but Opera/9.8, so look for "Version" first.
    // Opera uses 'OPR' for more recent UAs.
    return lookUpValueWithKeys(['Version', 'Opera', 'OPR']);
  }

  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(['Chrome', 'CriOS']);
  }

  // Usually products browser versions are in the third tuple after "Mozilla"
  // and the engine.
  var tuple = versionTuples[2];
  return tuple && tuple[1] || '';
};


/**
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the browser version is higher or the same as the
 *     given version.
 */
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(),
                                     version) >= 0;
};


/**
 * Determines IE version. More information:
 * http://msdn.microsoft.com/en-us/library/ie/bg182625(v=vs.85).aspx#uaString
 * http://msdn.microsoft.com/en-us/library/hh869301(v=vs.85).aspx
 * http://blogs.msdn.com/b/ie/archive/2010/03/23/introducing-ie9-s-user-agent-string.aspx
 * http://blogs.msdn.com/b/ie/archive/2009/01/09/the-internet-explorer-8-user-agent-string-updated-edition.aspx
 *
 * @param {string} userAgent the User-Agent.
 * @return {string}
 * @private
 */
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  // IE11 may identify itself as MSIE 9.0 or MSIE 10.0 due to an IE 11 upgrade
  // bug. Example UA:
  // Mozilla/5.0 (MSIE 9.0; Windows NT 6.1; WOW64; Trident/7.0; rv:11.0)
  // like Gecko.
  // See http://www.whatismybrowser.com/developers/unknown-user-agent-fragments.
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }

  var version = '';
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    // IE in compatibility mode usually identifies itself as MSIE 7.0; in this
    // case, use the Trident version to determine the version of IE. For more
    // details, see the links above.
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == '7.0') {
      if (tridentVersion && tridentVersion[1]) {
        switch (tridentVersion[1]) {
          case '4.0':
            version = '8.0';
            break;
          case '5.0':
            version = '9.0';
            break;
          case '6.0':
            version = '10.0';
            break;
          case '7.0':
            version = '11.0';
            break;
        }
      } else {
        version = '7.0';
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utilities for creating functions. Loosely inspired by the
 * java classes: http://goo.gl/GM0Hmu and http://goo.gl/6k7nI8.
 *
 * @author nicksantos@google.com (Nick Santos)
 */


goog.provide('goog.functions');


/**
 * Creates a function that always returns the same value.
 * @param {T} retValue The value to return.
 * @return {function():T} The new function.
 * @template T
 */
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};


/**
 * Always returns false.
 * @type {function(...): boolean}
 */
goog.functions.FALSE = goog.functions.constant(false);


/**
 * Always returns true.
 * @type {function(...): boolean}
 */
goog.functions.TRUE = goog.functions.constant(true);


/**
 * Always returns NULL.
 * @type {function(...): null}
 */
goog.functions.NULL = goog.functions.constant(null);


/**
 * A simple function that returns the first argument of whatever is passed
 * into it.
 * @param {T=} opt_returnValue The single value that will be returned.
 * @param {...*} var_args Optional trailing arguments. These are ignored.
 * @return {T} The first argument passed in, or undefined if nothing was passed.
 * @template T
 */
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};


/**
 * Creates a function that always throws an error with the given message.
 * @param {string} message The error message.
 * @return {!Function} The error-throwing function.
 */
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};


/**
 * Creates a function that throws the given object.
 * @param {*} err An object to be thrown.
 * @return {!Function} The error-throwing function.
 */
goog.functions.fail = function(err) {
  return function() {
    throw err;
  }
};


/**
 * Given a function, create a function that keeps opt_numArgs arguments and
 * silently discards all additional arguments.
 * @param {Function} f The original function.
 * @param {number=} opt_numArgs The number of arguments to keep. Defaults to 0.
 * @return {!Function} A version of f that only keeps the first opt_numArgs
 *     arguments.
 */
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};


/**
 * Creates a function that returns its nth argument.
 * @param {number} n The position of the return argument.
 * @return {!Function} A new function.
 */
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};


/**
 * Given a function, create a new function that swallows its return value
 * and replaces it with a new one.
 * @param {Function} f A function.
 * @param {T} retValue A new return value.
 * @return {function(...[?]):T} A new function.
 * @template T
 */
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};


/**
 * Creates the composition of the functions passed in.
 * For example, (goog.functions.compose(f, g))(a) is equivalent to f(g(a)).
 * @param {function(...[?]):T} fn The final function.
 * @param {...Function} var_args A list of functions.
 * @return {function(...[?]):T} The composition of all inputs.
 * @template T
 */
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }

    for (var i = length - 2; i >= 0; i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};


/**
 * Creates a function that calls the functions passed in in sequence, and
 * returns the value of the last function. For example,
 * (goog.functions.sequence(f, g))(x) is equivalent to f(x),g(x).
 * @param {...Function} var_args A list of functions.
 * @return {!Function} A function that calls all inputs in sequence.
 */
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0; i < length; i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};


/**
 * Creates a function that returns true if each of its components evaluates
 * to true. The components are evaluated in order, and the evaluation will be
 * short-circuited as soon as a function returns false.
 * For example, (goog.functions.and(f, g))(x) is equivalent to f(x) && g(x).
 * @param {...Function} var_args A list of functions.
 * @return {function(...[?]):boolean} A function that ANDs its component
 *      functions.
 */
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0; i < length; i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};


/**
 * Creates a function that returns true if any of its components evaluates
 * to true. The components are evaluated in order, and the evaluation will be
 * short-circuited as soon as a function returns true.
 * For example, (goog.functions.or(f, g))(x) is equivalent to f(x) || g(x).
 * @param {...Function} var_args A list of functions.
 * @return {function(...[?]):boolean} A function that ORs its component
 *    functions.
 */
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0; i < length; i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};


/**
 * Creates a function that returns the Boolean opposite of a provided function.
 * For example, (goog.functions.not(f))(x) is equivalent to !f(x).
 * @param {!Function} f The original function.
 * @return {function(...[?]):boolean} A function that delegates to f and returns
 * opposite.
 */
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};


/**
 * Generic factory function to construct an object given the constructor
 * and the arguments. Intended to be bound to create object factories.
 *
 * Callers should cast the result to the appropriate type for proper type
 * checking by the compiler.
 * @param {!Function} constructor The constructor for the Object.
 * @param {...*} var_args The arguments to be passed to the constructor.
 * @return {!Object} A new instance of the class given in {@code constructor}.
 */
goog.functions.create = function(constructor, var_args) {
  /**
 * @constructor
 * @final
 */
  var temp = function() {};
  temp.prototype = constructor.prototype;

  // obj will have constructor's prototype in its chain and
  // 'obj instanceof constructor' will be true.
  var obj = new temp();

  // obj is initialized by constructor.
  // arguments is only array-like so lacks shift(), but can be used with
  // the Array prototype function.
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};


/**
 * @define {boolean} Whether the return value cache should be used.
 *    This should only be used to disable caches when testing.
 */
goog.define('goog.functions.CACHE_RETURN_VALUE', true);


/**
 * Gives a wrapper function that caches the return value of a parameterless
 * function when first called.
 *
 * When called for the first time, the given function is called and its
 * return value is cached (thus this is only appropriate for idempotent
 * functions).  Subsequent calls will return the cached return value. This
 * allows the evaluation of expensive functions to be delayed until first used.
 *
 * To cache the return values of functions with parameters, see goog.memoize.
 *
 * @param {!function():T} fn A function to lazily evaluate.
 * @return {!function():T} A wrapped version the function.
 * @template T
 */
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;

  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }

    if (!called) {
      value = fn();
      called = true;
    }

    return value;
  }
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a function to schedule running a function as soon
 * as possible after the current JS execution stops and yields to the event
 * loop.
 *
 */

goog.provide('goog.async.nextTick');
goog.provide('goog.async.throwException');

goog.require('goog.debug.entryPointRegistry');
goog.require('goog.functions');
goog.require('goog.labs.userAgent.browser');


/**
 * Throw an item without interrupting the current execution context.  For
 * example, if processing a group of items in a loop, sometimes it is useful
 * to report an error while still allowing the rest of the batch to be
 * processed.
 * @param {*} exception
 */
goog.async.throwException = function(exception) {
  // Each throw needs to be in its own context.
  goog.global.setTimeout(function() { throw exception; }, 0);
};


/**
 * Fires the provided callbacks as soon as possible after the current JS
 * execution context. setTimeout(…, 0) takes at least 4ms when called from
 * within another setTimeout(…, 0) for legacy reasons.
 *
 * This will not schedule the callback as a microtask (i.e. a task that can
 * preempt user input or networking callbacks). It is meant to emulate what
 * setTimeout(_, 0) would do if it were not throttled. If you desire microtask
 * behavior, use {@see goog.Promise} instead.
 *
 * @param {function(this:SCOPE)} callback Callback function to fire as soon as
 *     possible.
 * @param {SCOPE=} opt_context Object in whose scope to call the listener.
 * @template SCOPE
 */
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  // window.setImmediate was introduced and currently only supported by IE10+,
  // but due to a bug in the implementation it is not guaranteed that
  // setImmediate is faster than setTimeout nor that setImmediate N is before
  // setImmediate N+1. That is why we do not use the native version if
  // available. We do, however, call setImmediate if it is a normal function
  // because that indicates that it has been replaced by goog.testing.MockClock
  // which we do want to support.
  // See
  // http://connect.microsoft.com/IE/feedback/details/801823/setimmediate-and-messagechannel-are-broken-in-ie10
  if (goog.isFunction(goog.global.setImmediate) && (!goog.global.Window ||
      goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  // Look for and cache the custom fallback version of setImmediate.
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ =
        goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};


/**
 * Cache for the setImmediate implementation.
 * @type {function(function())}
 * @private
 */
goog.async.nextTick.setImmediate_;


/**
 * Determines the best possible implementation to run a function as soon as
 * the JS event loop is idle.
 * @return {function(function())} The "setImmediate" implementation.
 * @private
 */
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  // Create a private message channel and use it to postMessage empty messages
  // to ourselves.
  var Channel = goog.global['MessageChannel'];
  // If MessageChannel is not available and we are in a browser, implement
  // an iframe based polyfill in browsers that have postMessage and
  // document.addEventListener. The latter excludes IE8 because it has a
  // synchronous postMessage implementation.
  if (typeof Channel === 'undefined' && typeof window !== 'undefined' &&
      window.postMessage && window.addEventListener) {
    /** @constructor */
    Channel = function() {
      // Make an empty, invisible iframe.
      var iframe = document.createElement('iframe');
      iframe.style.display = 'none';
      iframe.src = '';
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write('');
      doc.close();
      // Do not post anything sensitive over this channel, as the workaround for
      // pages with file: origin could allow that information to be modified or
      // intercepted.
      var message = 'callImmediate' + Math.random();
      // The same origin policy rejects attempts to postMessage from file: urls
      // unless the origin is '*'.
      // TODO(b/16335441): Use '*' origin for data: and other similar protocols.
      var origin = win.location.protocol == 'file:' ?
          '*' : win.location.protocol + '//' + win.location.host;
      var onmessage = goog.bind(function(e) {
        // Validate origin and message to make sure that this message was
        // intended for us.
        if (e.origin != origin && e.data != message) {
          return;
        }
        this['port1'].onmessage();
      }, this);
      win.addEventListener('message', onmessage, false);
      this['port1'] = {};
      this['port2'] = {
        postMessage: function() {
          win.postMessage(message, origin);
        }
      };
    };
  }
  if (typeof Channel !== 'undefined' &&
      // Exclude all of IE due to
      // http://codeforhire.com/2013/09/21/setimmediate-and-messagechannel-broken-on-internet-explorer-10/
      // which allows starving postMessage with a busy setTimeout loop.
      // This currently affects IE10 and IE11 which would otherwise be able
      // to use the postMessage based fallbacks.
      !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel();
    // Use a fifo linked list to call callbacks in the right order.
    var head = {};
    var tail = head;
    channel['port1'].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {
        cb: cb
      };
      tail = tail.next;
      channel['port2'].postMessage(0);
    };
  }
  // Implementation for IE6+: Script elements fire an asynchronous
  // onreadystatechange event when inserted into the DOM.
  if (typeof document !== 'undefined' && 'onreadystatechange' in
      document.createElement('script')) {
    return function(cb) {
      var script = document.createElement('script');
      script.onreadystatechange = function() {
        // Clean up and call the callback.
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  // Fall back to setTimeout with 0. In browsers this creates a delay of 5ms
  // or more.
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};


/**
 * Helper function that is overrided to protect callbacks with entry point
 * monitor if the application monitors entry points.
 * @param {function()} callback Callback function to fire as soon as possible.
 * @return {function()} The wrapped callback.
 * @private
 */
goog.async.nextTick.wrapCallback_ = goog.functions.identity;


// Register the callback function as an entry point, so that it can be
// monitored for exception handling, etc. This has to be done in this file
// since it requires special code to handle all browsers.
goog.debug.entryPointRegistry.register(
    /**
     * @param {function(!Function): !Function} transformer The transforming
     *     function.
     */
    function(transformer) {
      goog.async.nextTick.wrapCallback_ = transformer;
    });

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.async.run');

goog.require('goog.async.nextTick');
goog.require('goog.async.throwException');
goog.require('goog.testing.watchers');


/**
 * Fires the provided callback just before the current callstack unwinds, or as
 * soon as possible after the current JS execution context.
 * @param {function(this:THIS)} callback
 * @param {THIS=} opt_context Object to use as the "this value" when calling
 *     the provided function.
 * @template THIS
 */
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    // Nothing is currently scheduled, schedule it now.
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }

  goog.async.run.workQueue_.push(
      new goog.async.run.WorkItem_(callback, opt_context));
};


/**
 * Initializes the function to use to process the work queue.
 * @private
 */
goog.async.run.initializeRunner_ = function() {
  // If native Promises are available in the browser, just schedule the callback
  // on a fulfilled promise, which is specified to be async, but as fast as
  // possible.
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve();
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};


/**
 * Forces goog.async.run to use nextTick instead of Promise.
 *
 * This should only be done in unit tests. It's useful because MockClock
 * replaces nextTick, but not the browser Promise implementation, so it allows
 * Promise-based code to be tested with MockClock.
 */
goog.async.run.forceNextTick = function() {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
  };
};


/**
 * The function used to schedule work asynchronousely.
 * @private {function()}
 */
goog.async.run.schedule_;


/** @private {boolean} */
goog.async.run.workQueueScheduled_ = false;


/** @private {!Array.<!goog.async.run.WorkItem_>} */
goog.async.run.workQueue_ = [];


if (goog.DEBUG) {
  /**
   * Reset the event queue.
   * @private
   */
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = [];
  };

  // If there is a clock implemenation in use for testing
  // and it is reset, reset the queue.
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}


/**
 * Run any pending goog.async.run work items. This function is not intended
 * for general use, but for use by entry point handlers to run items ahead of
 * goog.async.nextTick.
 */
goog.async.run.processWorkQueue = function() {
  // NOTE: additional work queue items may be pushed while processing.
  while (goog.async.run.workQueue_.length) {
    // Don't let the work queue grow indefinitely.
    var workItems = goog.async.run.workQueue_;
    goog.async.run.workQueue_ = [];
    for (var i = 0; i < workItems.length; i++) {
      var workItem = workItems[i];
      try {
        workItem.fn.call(workItem.scope);
      } catch (e) {
        goog.async.throwException(e);
      }
    }
  }

  // There are no more work items, reset the work queue.
  goog.async.run.workQueueScheduled_ = false;
};



/**
 * @constructor
 * @final
 * @struct
 * @private
 *
 * @param {function()} fn
 * @param {Object|null|undefined} scope
 */
goog.async.run.WorkItem_ = function(fn, scope) {
  /** @const */ this.fn = fn;
  /** @const */ this.scope = scope;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.Thenable');



/**
 * Provides a more strict interface for Thenables in terms of
 * http://promisesaplus.com for interop with {@see goog.Promise}.
 *
 * @interface
 * @extends {IThenable.<TYPE>}
 * @template TYPE
 */
goog.Thenable = function() {};


/**
 * Adds callbacks that will operate on the result of the Thenable, returning a
 * new child Promise.
 *
 * If the Thenable is fulfilled, the {@code onFulfilled} callback will be
 * invoked with the fulfillment value as argument, and the child Promise will
 * be fulfilled with the return value of the callback. If the callback throws
 * an exception, the child Promise will be rejected with the thrown value
 * instead.
 *
 * If the Thenable is rejected, the {@code onRejected} callback will be invoked
 * with the rejection reason as argument, and the child Promise will be rejected
 * with the return value of the callback or thrown value.
 *
 * @param {?(function(this:THIS, TYPE):
 *             (RESULT|IThenable.<RESULT>|Thenable))=} opt_onFulfilled A
 *     function that will be invoked with the fulfillment value if the Promise
 *     is fullfilled.
 * @param {?(function(this:THIS, *): *)=} opt_onRejected A function that will
 *     be invoked with the rejection reason if the Promise is rejected.
 * @param {THIS=} opt_context An optional context object that will be the
 *     execution context for the callbacks. By default, functions are executed
 *     with the default this.
 * @return {!goog.Promise.<RESULT>} A new Promise that will receive the result
 *     of the fulfillment or rejection callback.
 * @template RESULT,THIS
 */
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected,
    opt_context) {};


/**
 * An expando property to indicate that an object implements
 * {@code goog.Thenable}.
 *
 * {@see addImplementation}.
 *
 * @const
 */
goog.Thenable.IMPLEMENTED_BY_PROP = '$goog_Thenable';


/**
 * Marks a given class (constructor) as an implementation of Thenable, so
 * that we can query that fact at runtime. The class must have already
 * implemented the interface.
 * Exports a 'then' method on the constructor prototype, so that the objects
 * also implement the extern {@see goog.Thenable} interface for interop with
 * other Promise implementations.
 * @param {function(new:goog.Thenable,...[?])} ctor The class constructor. The
 *     corresponding class must have already implemented the interface.
 */
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, 'then', ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    // Avoids dictionary access in uncompiled mode.
    ctor.prototype.$goog_Thenable = true;
  }
};


/**
 * @param {*} object
 * @return {boolean} Whether a given instance implements {@code goog.Thenable}.
 *     The class/superclass of the instance must call {@code addImplementation}.
 */
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    // Property access seems to be forbidden.
    return false;
  }
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.Promise');

goog.require('goog.Thenable');
goog.require('goog.asserts');
goog.require('goog.async.run');
goog.require('goog.async.throwException');
goog.require('goog.debug.Error');
goog.require('goog.promise.Resolver');



/**
 * Promises provide a result that may be resolved asynchronously. A Promise may
 * be resolved by being fulfilled or rejected with a value, which will be known
 * as the fulfillment value or the rejection reason. Whether fulfilled or
 * rejected, the Promise result is immutable once it is set.
 *
 * Promises may represent results of any type, including undefined. Rejection
 * reasons are typically Errors, but may also be of any type. Closure Promises
 * allow for optional type annotations that enforce that fulfillment values are
 * of the appropriate types at compile time.
 *
 * The result of a Promise is accessible by calling {@code then} and registering
 * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
 * resolves, the relevant callbacks are invoked with the fulfillment value or
 * rejection reason as argument. Callbacks are always invoked in the order they
 * were registered, even when additional {@code then} calls are made from inside
 * another callback. A callback is always run asynchronously sometime after the
 * scope containing the registering {@code then} invocation has returned.
 *
 * If a Promise is resolved with another Promise, the first Promise will block
 * until the second is resolved, and then assumes the same result as the second
 * Promise. This allows Promises to depend on the results of other Promises,
 * linking together multiple asynchronous operations.
 *
 * This implementation is compatible with the Promises/A+ specification and
 * passes that specification's conformance test suite. A Closure Promise may be
 * resolved with a Promise instance (or sufficiently compatible Promise-like
 * object) created by other Promise implementations. From the specification,
 * Promise-like objects are known as "Thenables".
 *
 * @see http://promisesaplus.com/
 *
 * @param {function(
 *             this:RESOLVER_CONTEXT,
 *             function((TYPE|IThenable.<TYPE>|Thenable)=),
 *             function(*)): void} resolver
 *     Initialization function that is invoked immediately with {@code resolve}
 *     and {@code reject} functions as arguments. The Promise is resolved or
 *     rejected with the first argument passed to either function.
 * @param {RESOLVER_CONTEXT=} opt_context An optional context for executing the
 *     resolver function. If unspecified, the resolver function will be executed
 *     in the default scope.
 * @constructor
 * @struct
 * @final
 * @implements {goog.Thenable.<TYPE>}
 * @template TYPE,RESOLVER_CONTEXT
 */
goog.Promise = function(resolver, opt_context) {
  /**
   * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or
   * BLOCKED.
   * @private {goog.Promise.State_}
   */
  this.state_ = goog.Promise.State_.PENDING;

  /**
   * The resolved result of the Promise. Immutable once set with either a
   * fulfillment value or rejection reason.
   * @private {*}
   */
  this.result_ = undefined;

  /**
   * For Promises created by calling {@code then()}, the originating parent.
   * @private {goog.Promise}
   */
  this.parent_ = null;

  /**
   * The list of {@code onFulfilled} and {@code onRejected} callbacks added to
   * this Promise by calls to {@code then()}.
   * @private {Array.<goog.Promise.CallbackEntry_>}
   */
  this.callbackEntries_ = null;

  /**
   * Whether the Promise is in the queue of Promises to execute.
   * @private {boolean}
   */
  this.executing_ = false;

  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    /**
     * A timeout ID used when the {@code UNHANDLED_REJECTION_DELAY} is greater
     * than 0 milliseconds. The ID is set when the Promise is rejected, and
     * cleared only if an {@code onRejected} callback is invoked for the
     * Promise (or one of its descendants) before the delay is exceeded.
     *
     * If the rejection is not handled before the timeout completes, the
     * rejection reason is passed to the unhandled rejection handler.
     * @private {number}
     */
    this.unhandledRejectionId_ = 0;
  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
    /**
     * When the {@code UNHANDLED_REJECTION_DELAY} is set to 0 milliseconds, a
     * boolean that is set if the Promise is rejected, and reset to false if an
     * {@code onRejected} callback is invoked for the Promise (or one of its
     * descendants). If the rejection is not handled before the next timestep,
     * the rejection reason is passed to the unhandled rejection handler.
     * @private {boolean}
     */
    this.hadUnhandledRejection_ = false;
  }

  if (goog.Promise.LONG_STACK_TRACES) {
    /**
     * A list of stack trace frames pointing to the locations where this Promise
     * was created or had callbacks added to it. Saved to add additional context
     * to stack traces when an exception is thrown.
     * @private {!Array.<string>}
     */
    this.stack_ = [];
    this.addStackTrace_(new Error('created'));

    /**
     * Index of the most recently executed stack frame entry.
     * @private {number}
     */
    this.currentStep_ = 0;
  }

  try {
    var self = this;
    resolver.call(
        opt_context,
        function(value) {
          self.resolve_(goog.Promise.State_.FULFILLED, value);
        },
        function(reason) {
          if (goog.DEBUG &&
              !(reason instanceof goog.Promise.CancellationError)) {
            try {
              // Promise was rejected. Step up one call frame to see why.
              if (reason instanceof Error) {
                throw reason;
              } else {
                throw new Error('Promise rejected.');
              }
            } catch (e) {
              // Only thrown so browser dev tools can catch rejections of
              // promises when the option to break on caught exceptions is
              // activated.
            }
          }
          self.resolve_(goog.Promise.State_.REJECTED, reason);
        });
  } catch (e) {
    this.resolve_(goog.Promise.State_.REJECTED, e);
  }
};


/**
 * @define {boolean} Whether traces of {@code then} calls should be included in
 * exceptions thrown
 */
goog.define('goog.Promise.LONG_STACK_TRACES', false);


/**
 * @define {number} The delay in milliseconds before a rejected Promise's reason
 * is passed to the rejection handler. By default, the rejection handler
 * rethrows the rejection reason so that it appears in the developer console or
 * {@code window.onerror} handler.
 *
 * Rejections are rethrown as quickly as possible by default. A negative value
 * disables rejection handling entirely.
 */
goog.define('goog.Promise.UNHANDLED_REJECTION_DELAY', 0);


/**
 * The possible internal states for a Promise. These states are not directly
 * observable to external callers.
 * @enum {number}
 * @private
 */
goog.Promise.State_ = {
  /** The Promise is waiting for resolution. */
  PENDING: 0,

  /** The Promise is blocked waiting for the result of another Thenable. */
  BLOCKED: 1,

  /** The Promise has been resolved with a fulfillment value. */
  FULFILLED: 2,

  /** The Promise has been resolved with a rejection reason. */
  REJECTED: 3
};


/**
 * Typedef for entries in the callback chain. Each call to {@code then},
 * {@code thenCatch}, or {@code thenAlways} creates an entry containing the
 * functions that may be invoked once the Promise is resolved.
 *
 * @typedef {{
 *   child: goog.Promise,
 *   onFulfilled: function(*),
 *   onRejected: function(*)
 * }}
 * @private
 */
goog.Promise.CallbackEntry_;


/**
 * @param {(TYPE|goog.Thenable.<TYPE>|Thenable)=} opt_value
 * @return {!goog.Promise.<TYPE>} A new Promise that is immediately resolved
 *     with the given value.
 * @template TYPE
 */
goog.Promise.resolve = function(opt_value) {
  return new goog.Promise(function(resolve, reject) {
    resolve(opt_value);
  });
};


/**
 * @param {*=} opt_reason
 * @return {!goog.Promise} A new Promise that is immediately rejected with the
 *     given reason.
 */
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};


/**
 * @param {!Array.<!(goog.Thenable.<TYPE>|Thenable)>} promises
 * @return {!goog.Promise.<TYPE>} A Promise that receives the result of the
 *     first Promise (or Promise-like) input to complete.
 * @template TYPE
 */
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise; promise = promises[i]; i++) {
      promise.then(resolve, reject);
    }
  });
};


/**
 * @param {!Array.<!(goog.Thenable.<TYPE>|Thenable)>} promises
 * @return {!goog.Promise.<!Array.<TYPE>>} A Promise that receives a list of
 *     every fulfilled value once every input Promise (or Promise-like) is
 *     successfully fulfilled, or is rejected by the first rejection result.
 * @template TYPE
 */
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];

    if (!toFulfill) {
      resolve(values);
      return;
    }

    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };

    var onReject = function(reason) {
      reject(reason);
    };

    for (var i = 0, promise; promise = promises[i]; i++) {
      promise.then(goog.partial(onFulfill, i), onReject);
    }
  });
};


/**
 * @param {!Array.<!(goog.Thenable.<TYPE>|Thenable)>} promises
 * @return {!goog.Promise.<TYPE>} A Promise that receives the value of the first
 *     input to be fulfilled, or is rejected with a list of every rejection
 *     reason if all inputs are rejected.
 * @template TYPE
 */
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];

    if (!toReject) {
      resolve(undefined);
      return;
    }

    var onFulfill = function(value) {
      resolve(value);
    };

    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };

    for (var i = 0, promise; promise = promises[i]; i++) {
      promise.then(onFulfill, goog.partial(onReject, i));
    }
  });
};


/**
 * @return {!goog.promise.Resolver.<TYPE>} Resolver wrapping the promise and its
 *     resolve / reject functions. Resolving or rejecting the resolver
 *     resolves or rejects the promise.
 * @template TYPE
 */
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};


/**
 * Adds callbacks that will operate on the result of the Promise, returning a
 * new child Promise.
 *
 * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked
 * with the fulfillment value as argument, and the child Promise will be
 * fulfilled with the return value of the callback. If the callback throws an
 * exception, the child Promise will be rejected with the thrown value instead.
 *
 * If the Promise is rejected, the {@code onRejected} callback will be invoked
 * with the rejection reason as argument, and the child Promise will be resolved
 * with the return value or rejected with the thrown value of the callback.
 *
 * @override
 */
goog.Promise.prototype.then = function(
    opt_onFulfilled, opt_onRejected, opt_context) {

  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled,
        'opt_onFulfilled should be a function.');
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected,
        'opt_onRejected should be a function. Did you pass opt_context ' +
        'as the second argument instead of the third?');
  }

  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error('then'));
  }

  return this.addChildPromise_(
      goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null,
      goog.isFunction(opt_onRejected) ? opt_onRejected : null,
      opt_context);
};
goog.Thenable.addImplementation(goog.Promise);


/**
 * Adds a callback that will be invoked whether the Promise is fulfilled or
 * rejected. The callback receives no argument, and no new child Promise is
 * created. This is useful for ensuring that cleanup takes place after certain
 * asynchronous operations. Callbacks added with {@code thenAlways} will be
 * executed in the same order with other calls to {@code then},
 * {@code thenAlways}, or {@code thenCatch}.
 *
 * Since it does not produce a new child Promise, cancellation propagation is
 * not prevented by adding callbacks with {@code thenAlways}. A Promise that has
 * a cleanup handler added with {@code thenAlways} will be canceled if all of
 * its children created by {@code then} (or {@code thenCatch}) are canceled.
 *
 * @param {function(this:THIS): void} onResolved A function that will be invoked
 *     when the Promise is resolved.
 * @param {THIS=} opt_context An optional context object that will be the
 *     execution context for the callbacks. By default, functions are executed
 *     in the global scope.
 * @return {!goog.Promise.<TYPE>} This Promise, for chaining additional calls.
 * @template THIS
 */
goog.Promise.prototype.thenAlways = function(onResolved, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error('thenAlways'));
  }

  var callback = function() {
    try {
      // Ensure that no arguments are passed to onResolved.
      onResolved.call(opt_context);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  };

  this.addCallbackEntry_({
    child: null,
    onRejected: callback,
    onFulfilled: callback
  });
  return this;
};


/**
 * Adds a callback that will be invoked only if the Promise is rejected. This
 * is equivalent to {@code then(null, onRejected)}.
 *
 * @param {!function(this:THIS, *): *} onRejected A function that will be
 *     invoked with the rejection reason if the Promise is rejected.
 * @param {THIS=} opt_context An optional context object that will be the
 *     execution context for the callbacks. By default, functions are executed
 *     in the global scope.
 * @return {!goog.Promise} A new Promise that will receive the result of the
 *     callback.
 * @template THIS
 */
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error('thenCatch'));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};


/**
 * Cancels the Promise if it is still pending by rejecting it with a cancel
 * Error. No action is performed if the Promise is already resolved.
 *
 * All child Promises of the canceled Promise will be rejected with the same
 * cancel error, as with normal Promise rejection. If the Promise to be canceled
 * is the only child of a pending Promise, the parent Promise will also be
 * canceled. Cancellation may propagate upward through multiple generations.
 *
 * @param {string=} opt_message An optional debugging message for describing the
 *     cancellation reason.
 */
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};


/**
 * Cancels this Promise with the given error.
 *
 * @param {!Error} err The cancellation error.
 * @private
 */
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      // Cancel the Promise and remove it from the parent's child list.
      this.parent_.cancelChild_(this, err);
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};


/**
 * Cancels a child Promise from the list of callback entries. If the Promise has
 * not already been resolved, reject it with a cancel error. If there are no
 * other children in the list of callback entries, propagate the cancellation
 * by canceling this Promise as well.
 *
 * @param {!goog.Promise} childPromise The Promise to cancel.
 * @param {!Error} err The cancel error to use for rejecting the Promise.
 * @private
 */
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childIndex = -1;

  // Find the callback entry for the childPromise, and count whether there are
  // additional child Promises.
  for (var i = 0, entry; entry = this.callbackEntries_[i]; i++) {
    var child = entry.child;
    if (child) {
      childCount++;
      if (child == childPromise) {
        childIndex = i;
      }
      if (childIndex >= 0 && childCount > 1) {
        break;
      }
    }
  }

  // If the child Promise was the only child, cancel this Promise as well.
  // Otherwise, reject only the child Promise with the cancel error.
  if (childIndex >= 0) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];
      this.executeCallback_(
          callbackEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};


/**
 * Adds a callback entry to the current Promise, and schedules callback
 * execution if the Promise has already been resolved.
 *
 * @param {goog.Promise.CallbackEntry_} callbackEntry Record containing
 *     {@code onFulfilled} and {@code onRejected} callbacks to execute after
 *     the Promise is resolved.
 * @private
 */
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if ((!this.callbackEntries_ || !this.callbackEntries_.length) &&
      (this.state_ == goog.Promise.State_.FULFILLED ||
       this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  if (!this.callbackEntries_) {
    this.callbackEntries_ = [];
  }
  this.callbackEntries_.push(callbackEntry);
};


/**
 * Creates a child Promise and adds it to the callback entry list. The result of
 * the child Promise is determined by the state of the parent Promise and the
 * result of the {@code onFulfilled} or {@code onRejected} callbacks as
 * specified in the Promise resolution procedure.
 *
 * @see http://promisesaplus.com/#the__method
 *
 * @param {?function(this:THIS, TYPE):
 *          (RESULT|goog.Promise.<RESULT>|Thenable)} onFulfilled A callback that
 *     will be invoked if the Promise is fullfilled, or null.
 * @param {?function(this:THIS, *): *} onRejected A callback that will be
 *     invoked if the Promise is rejected, or null.
 * @param {THIS=} opt_context An optional execution context for the callbacks.
 *     in the default calling context.
 * @return {!goog.Promise} The child Promise.
 * @template RESULT,THIS
 * @private
 */
goog.Promise.prototype.addChildPromise_ = function(
    onFulfilled, onRejected, opt_context) {

  var callbackEntry = {
    child: null,
    onFulfilled: null,
    onRejected: null
  };

  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    // Invoke onFulfilled, or resolve with the parent's value if absent.
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;

    // Invoke onRejected, or reject with the parent's reason if absent.
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) &&
            reason instanceof goog.Promise.CancellationError) {
          // Propagate cancellation to children if no other result is returned.
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });

  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(
      /** @type {goog.Promise.CallbackEntry_} */ (callbackEntry));
  return callbackEntry.child;
};


/**
 * Unblocks the Promise and fulfills it with the given value.
 *
 * @param {TYPE} value
 * @private
 */
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};


/**
 * Unblocks the Promise and rejects it with the given rejection reason.
 *
 * @param {*} reason
 * @private
 */
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};


/**
 * Attempts to resolve a Promise with a given resolution state and value. This
 * is a no-op if the given Promise has already been resolved.
 *
 * If the given result is a Thenable (such as another Promise), the Promise will
 * be resolved with the same state and result as the Thenable once it is itself
 * resolved.
 *
 * If the given result is not a Thenable, the Promise will be fulfilled or
 * rejected with that result based on the given state.
 *
 * @see http://promisesaplus.com/#the_promise_resolution_procedure
 *
 * @param {goog.Promise.State_} state
 * @param {*} x The result to apply to the Promise.
 * @private
 */
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }

  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError('Promise cannot resolve to itself');

  } else if (goog.Thenable.isImplementedBy(x)) {
    x = /** @type {!goog.Thenable} */ (x);
    this.state_ = goog.Promise.State_.BLOCKED;
    x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);
    return;

  } else if (goog.isObject(x)) {
    try {
      var then = x['then'];
      if (goog.isFunction(then)) {
        this.tryThen_(x, then);
        return;
      }
    } catch (e) {
      state = goog.Promise.State_.REJECTED;
      x = e;
    }
  }

  this.result_ = x;
  this.state_ = state;
  this.scheduleCallbacks_();

  if (state == goog.Promise.State_.REJECTED &&
      !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};


/**
 * Attempts to call the {@code then} method on an object in the hopes that it is
 * a Promise-compatible instance. This allows interoperation between different
 * Promise implementations, however a non-compliant object may cause a Promise
 * to hang indefinitely. If the {@code then} method throws an exception, the
 * dependent Promise will be rejected with the thrown value.
 *
 * @see http://promisesaplus.com/#point-70
 *
 * @param {Thenable} thenable An object with a {@code then} method that may be
 *     compatible with the Promise/A+ specification.
 * @param {!Function} then The {@code then} method of the Thenable object.
 * @private
 */
goog.Promise.prototype.tryThen_ = function(thenable, then) {
  this.state_ = goog.Promise.State_.BLOCKED;
  var promise = this;
  var called = false;

  var resolve = function(value) {
    if (!called) {
      called = true;
      promise.unblockAndFulfill_(value);
    }
  };

  var reject = function(reason) {
    if (!called) {
      called = true;
      promise.unblockAndReject_(reason);
    }
  };

  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};


/**
 * Executes the pending callbacks of a resolved Promise after a timeout.
 *
 * Section 2.2.4 of the Promises/A+ specification requires that Promise
 * callbacks must only be invoked from a call stack that only contains Promise
 * implementation code, which we accomplish by invoking callback execution after
 * a timeout. If {@code startExecution_} is called multiple times for the same
 * Promise, the callback chain will be evaluated only once. Additional callbacks
 * may be added during the evaluation phase, and will be executed in the same
 * event loop.
 *
 * All Promises added to the waiting list during the same browser event loop
 * will be executed in one batch to avoid using a separate timeout per Promise.
 *
 * @private
 */
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};


/**
 * Executes all pending callbacks for this Promise.
 *
 * @private
 */
goog.Promise.prototype.executeCallbacks_ = function() {
  while (this.callbackEntries_ && this.callbackEntries_.length) {
    var entries = this.callbackEntries_;
    this.callbackEntries_ = [];

    for (var i = 0; i < entries.length; i++) {
      if (goog.Promise.LONG_STACK_TRACES) {
        this.currentStep_++;
      }
      this.executeCallback_(entries[i], this.state_, this.result_);
    }
  }
  this.executing_ = false;
};


/**
 * Executes a pending callback for this Promise. Invokes an {@code onFulfilled}
 * or {@code onRejected} callback based on the resolved state of the Promise.
 *
 * @param {!goog.Promise.CallbackEntry_} callbackEntry An entry containing the
 *     onFulfilled and/or onRejected callbacks for this step.
 * @param {goog.Promise.State_} state The resolution status of the Promise,
 *     either FULFILLED or REJECTED.
 * @param {*} result The resolved result of the Promise.
 * @private
 */
goog.Promise.prototype.executeCallback_ = function(
    callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled(result);
  } else {
    this.removeUnhandledRejection_();
    callbackEntry.onRejected(result);
  }
};


/**
 * Records a stack trace entry for functions that call {@code then} or the
 * Promise constructor. May be disabled by unsetting {@code LONG_STACK_TRACES}.
 *
 * @param {!Error} err An Error object created by the calling function for
 *     providing a stack trace.
 * @private
 */
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    // Extract the third line of the stack trace, which is the entry for the
    // user function that called into Promise code.
    var trace = err.stack.split('\n', 4)[3];
    var message = err.message;

    // Pad the message to align the traces.
    message += Array(11 - message.length).join(' ');
    this.stack_.push(message + trace);
  }
};


/**
 * Adds extra stack trace information to an exception for the list of
 * asynchronous {@code then} calls that have been run for this Promise. Stack
 * trace information is recorded in {@see #addStackTrace_}, and appended to
 * rethrown errors when {@code LONG_STACK_TRACES} is enabled.
 *
 * @param {*} err An unhandled exception captured during callback execution.
 * @private
 */
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES &&
      err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ['Promise trace:'];

    for (var promise = this; promise; promise = promise.parent_) {
      for (var i = this.currentStep_; i >= 0; i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push('Value: ' +
          '[' + (promise.state_ == goog.Promise.State_.REJECTED ?
              'REJECTED' : 'FULFILLED') + '] ' +
          '<' + String(promise.result_) + '>');
    }
    err.stack += '\n\n' + longTrace.join('\n');
  }
};


/**
 * Marks this rejected Promise as having being handled. Also marks any parent
 * Promises in the rejected state as handled. The rejection handler will no
 * longer be invoked for this Promise (if it has not been called already).
 *
 * @private
 */
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this; p && p.unhandledRejectionId_; p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
    for (var p = this; p && p.hadUnhandledRejection_; p = p.parent_) {
      p.hadUnhandledRejection_ = false;
    }
  }
};


/**
 * Marks this rejected Promise as unhandled. If no {@code onRejected} callback
 * is called for this Promise before the {@code UNHANDLED_REJECTION_DELAY}
 * expires, the reason will be passed to the unhandled rejection handler. The
 * handler typically rethrows the rejection reason so that it becomes visible in
 * the developer console.
 *
 * @param {!goog.Promise} promise The rejected Promise.
 * @param {*} reason The Promise rejection reason.
 * @private
 */
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);

  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
    promise.hadUnhandledRejection_ = true;
    goog.async.run(function() {
      if (promise.hadUnhandledRejection_) {
        promise.appendLongStack_(reason);
        goog.Promise.handleRejection_.call(null, reason);
      }
    });
  }
};


/**
 * A method that is invoked with the rejection reasons for Promises that are
 * rejected but have no {@code onRejected} callbacks registered yet.
 * @type {function(*)}
 * @private
 */
goog.Promise.handleRejection_ = goog.async.throwException;


/**
 * Sets a handler that will be called with reasons from unhandled rejected
 * Promises. If the rejected Promise (or one of its descendants) has an
 * {@code onRejected} callback registered, the rejection will be considered
 * handled, and the rejection handler will not be called.
 *
 * By default, unhandled rejections are rethrown so that the error may be
 * captured by the developer console or a {@code window.onerror} handler.
 *
 * @param {function(*)} handler A function that will be called with reasons from
 *     rejected Promises. Defaults to {@code goog.async.throwException}.
 */
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};



/**
 * Error used as a rejection reason for canceled Promises.
 *
 * @param {string=} opt_message
 * @constructor
 * @extends {goog.debug.Error}
 * @final
 */
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, 'constructor', opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);


/** @override */
goog.Promise.CancellationError.prototype.name = 'cancel';



/**
 * Internal implementation of the resolver interface.
 *
 * @param {!goog.Promise.<TYPE>} promise
 * @param {function((TYPE|goog.Promise.<TYPE>|Thenable)=)} resolve
 * @param {function(*): void} reject
 * @implements {goog.promise.Resolver.<TYPE>}
 * @final @struct
 * @constructor
 * @private
 * @template TYPE
 */
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  /** @const */
  this.promise = promise;

  /** @const */
  this.resolve = resolve;

  /** @const */
  this.reject = reject;
};

// Copyright 2007 Bob Ippolito. All Rights Reserved.
// Modifications Copyright 2009 The Closure Library Authors. All Rights
// Reserved.

/**
 * @license Portions of this code are from MochiKit, received by
 * The Closure Authors under the MIT license. All other code is Copyright
 * 2005-2009 The Closure Authors. All Rights Reserved.
 */

/**
 * @fileoverview Classes for tracking asynchronous operations and handling the
 * results. The Deferred object here is patterned after the Deferred object in
 * the Twisted python networking framework.
 *
 * See: http://twistedmatrix.com/projects/core/documentation/howto/defer.html
 *
 * Based on the Dojo code which in turn is based on the MochiKit code.
 *
 * @author arv@google.com (Erik Arvidsson)
 * @author brenneman@google.com (Shawn Brenneman)
 */

goog.provide('goog.async.Deferred');
goog.provide('goog.async.Deferred.AlreadyCalledError');
goog.provide('goog.async.Deferred.CanceledError');

goog.require('goog.Promise');
goog.require('goog.Thenable');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.debug.Error');



/**
 * A Deferred represents the result of an asynchronous operation. A Deferred
 * instance has no result when it is created, and is "fired" (given an initial
 * result) by calling {@code callback} or {@code errback}.
 *
 * Once fired, the result is passed through a sequence of callback functions
 * registered with {@code addCallback} or {@code addErrback}. The functions may
 * mutate the result before it is passed to the next function in the sequence.
 *
 * Callbacks and errbacks may be added at any time, including after the Deferred
 * has been "fired". If there are no pending actions in the execution sequence
 * of a fired Deferred, any new callback functions will be called with the last
 * computed result. Adding a callback function is the only way to access the
 * result of the Deferred.
 *
 * If a Deferred operation is canceled, an optional user-provided cancellation
 * function is invoked which may perform any special cleanup, followed by firing
 * the Deferred's errback sequence with a {@code CanceledError}. If the
 * Deferred has already fired, cancellation is ignored.
 *
 * Deferreds may be templated to a specific type they produce using generics
 * with syntax such as:
 * <code>
 *   /** @type {goog.async.Deferred.<string>} *&#47;
 *   var d = new goog.async.Deferred();
 *   // Compiler can infer that foo is a string.
 *   d.addCallback(function(foo) {...});
 *   d.callback('string');  // Checked to be passed a string
 * </code>
 * Since deferreds are often used to produce different values across a chain,
 * the type information is not propagated across chains, but rather only
 * associated with specifically cast objects.
 *
 * @param {Function=} opt_onCancelFunction A function that will be called if the
 *     Deferred is canceled. If provided, this function runs before the
 *     Deferred is fired with a {@code CanceledError}.
 * @param {Object=} opt_defaultScope The default object context to call
 *     callbacks and errbacks in.
 * @constructor
 * @implements {goog.Thenable.<VALUE>}
 * @template VALUE
 */
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  /**
   * Entries in the sequence are arrays containing a callback, an errback, and
   * an optional scope. The callback or errback in an entry may be null.
   * @type {!Array.<!Array>}
   * @private
   */
  this.sequence_ = [];

  /**
   * Optional function that will be called if the Deferred is canceled.
   * @type {Function|undefined}
   * @private
   */
  this.onCancelFunction_ = opt_onCancelFunction;

  /**
   * The default scope to execute callbacks and errbacks in.
   * @type {Object}
   * @private
   */
  this.defaultScope_ = opt_defaultScope || null;

  /**
   * Whether the Deferred has been fired.
   * @type {boolean}
   * @private
   */
  this.fired_ = false;

  /**
   * Whether the last result in the execution sequence was an error.
   * @type {boolean}
   * @private
   */
  this.hadError_ = false;

  /**
   * The current Deferred result, updated as callbacks and errbacks are
   * executed.
   * @type {*}
   * @private
   */
  this.result_ = undefined;

  /**
   * Whether the Deferred is blocked waiting on another Deferred to fire. If a
   * callback or errback returns a Deferred as a result, the execution sequence
   * is blocked until that Deferred result becomes available.
   * @type {boolean}
   * @private
   */
  this.blocked_ = false;

  /**
   * Whether this Deferred is blocking execution of another Deferred. If this
   * instance was returned as a result in another Deferred's execution
   * sequence,that other Deferred becomes blocked until this instance's
   * execution sequence completes. No additional callbacks may be added to a
   * Deferred once it is blocking another instance.
   * @type {boolean}
   * @private
   */
  this.blocking_ = false;

  /**
   * Whether the Deferred has been canceled without having a custom cancel
   * function.
   * @type {boolean}
   * @private
   */
  this.silentlyCanceled_ = false;

  /**
   * If an error is thrown during Deferred execution with no errback to catch
   * it, the error is rethrown after a timeout. Reporting the error after a
   * timeout allows execution to continue in the calling context (empty when
   * no error is scheduled).
   * @type {number}
   * @private
   */
  this.unhandledErrorId_ = 0;

  /**
   * If this Deferred was created by branch(), this will be the "parent"
   * Deferred.
   * @type {goog.async.Deferred}
   * @private
   */
  this.parent_ = null;

  /**
   * The number of Deferred objects that have been branched off this one. This
   * will be decremented whenever a branch is fired or canceled.
   * @type {number}
   * @private
   */
  this.branches_ = 0;

  if (goog.async.Deferred.LONG_STACK_TRACES) {
    /**
     * Holds the stack trace at time of deferred creation if the JS engine
     * provides the Error.captureStackTrace API.
     * @private {?string}
     */
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = { stack: '' };
      Error.captureStackTrace(target, goog.async.Deferred);
      // Check if Error.captureStackTrace worked. It fails in gjstest.
      if (typeof target.stack == 'string') {
        // Remove first line and force stringify to prevent memory leak due to
        // holding on to actual stack frames.
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, '');
      }
    }
  }
};


/**
 * @define {boolean} Whether unhandled errors should always get rethrown to the
 * global scope. Defaults to the value of goog.DEBUG.
 */
goog.define('goog.async.Deferred.STRICT_ERRORS', false);


/**
 * @define {boolean} Whether to attempt to make stack traces long.  Defaults to
 * the value of goog.DEBUG.
 */
goog.define('goog.async.Deferred.LONG_STACK_TRACES', false);


/**
 * Cancels a Deferred that has not yet been fired, or is blocked on another
 * deferred operation. If this Deferred is waiting for a blocking Deferred to
 * fire, the blocking Deferred will also be canceled.
 *
 * If this Deferred was created by calling branch() on a parent Deferred with
 * opt_propagateCancel set to true, the parent may also be canceled. If
 * opt_deepCancel is set, cancel() will be called on the parent (as well as any
 * other ancestors if the parent is also a branch). If one or more branches were
 * created with opt_propagateCancel set to true, the parent will be canceled if
 * cancel() is called on all of those branches.
 *
 * @param {boolean=} opt_deepCancel If true, cancels this Deferred's parent even
 *     if cancel() hasn't been called on some of the parent's branches. Has no
 *     effect on a branch without opt_propagateCancel set to true.
 */
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      // Get rid of the parent reference before potentially running the parent's
      // canceler function to ensure that this cancellation isn't
      // double-counted.
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }

    if (this.onCancelFunction_) {
      // Call in user-specified scope.
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else if (this.result_ instanceof goog.async.Deferred) {
    this.result_.cancel();
  }
};


/**
 * Handle a single branch being canceled. Once all branches are canceled, this
 * Deferred will be canceled as well.
 *
 * @private
 */
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};


/**
 * Called after a blocking Deferred fires. Unblocks this Deferred and resumes
 * its execution sequence.
 *
 * @param {boolean} isSuccess Whether the result is a success or an error.
 * @param {*} res The result of the blocking Deferred.
 * @private
 */
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};


/**
 * Updates the current result based on the success or failure of the last action
 * in the execution sequence.
 *
 * @param {boolean} isSuccess Whether the new result is a success or an error.
 * @param {*} res The result.
 * @private
 */
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};


/**
 * Verifies that the Deferred has not yet been fired.
 *
 * @private
 * @throws {Error} If this has already been fired.
 */
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};


/**
 * Fire the execution sequence for this Deferred by passing the starting result
 * to the first registered callback.
 * @param {VALUE=} opt_result The starting result.
 */
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true /* isSuccess */, opt_result);
};


/**
 * Fire the execution sequence for this Deferred by passing the starting error
 * result to the first registered errback.
 * @param {*=} opt_result The starting error.
 */
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false /* isSuccess */, opt_result);
};


/**
 * Attempt to make the error's stack trace be long in that it contains the
 * stack trace from the point where the deferred was created on top of the
 * current stack trace to give additional context.
 * @param {*} error
 * @private
 */
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack &&
      // Stack looks like it was system generated. See
      // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
      (/^[^\n]+(\n   [^\n]+)+/).test(error.stack)) {
    error.stack = error.stack + '\nDEFERRED OPERATION:\n' +
        this.constructorStack_;
  }
};


/**
 * Asserts that an object is not a Deferred.
 * @param {*} obj The object to test.
 * @throws {Error} Throws an exception if the object is a Deferred.
 * @private
 */
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(
      !(obj instanceof goog.async.Deferred),
      'An execution sequence may not be initiated with a blocking Deferred.');
};


/**
 * Register a callback function to be called with a successful result. If no
 * value is returned by the callback function, the result value is unchanged. If
 * a new value is returned, it becomes the Deferred result and will be passed to
 * the next callback in the execution sequence.
 *
 * If the function throws an error, the error becomes the new result and will be
 * passed to the next errback in the execution chain.
 *
 * If the function returns a Deferred, the execution sequence will be blocked
 * until that Deferred fires. Its result will be passed to the next callback (or
 * errback if it is an error result) in this Deferred's execution sequence.
 *
 * @param {!function(this:T,VALUE):?} cb The function to be called with a
 *     successful result.
 * @param {T=} opt_scope An optional scope to call the callback in.
 * @return {!goog.async.Deferred} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};


/**
 * Register a callback function to be called with an error result. If no value
 * is returned by the function, the error result is unchanged. If a new error
 * value is returned or thrown, that error becomes the Deferred result and will
 * be passed to the next errback in the execution sequence.
 *
 * If the errback function handles the error by returning a non-error value,
 * that result will be passed to the next normal callback in the sequence.
 *
 * If the function returns a Deferred, the execution sequence will be blocked
 * until that Deferred fires. Its result will be passed to the next callback (or
 * errback if it is an error result) in this Deferred's execution sequence.
 *
 * @param {!function(this:T,?):?} eb The function to be called on an
 *     unsuccessful result.
 * @param {T=} opt_scope An optional scope to call the errback in.
 * @return {!goog.async.Deferred.<VALUE>} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};


/**
 * Registers one function as both a callback and errback.
 *
 * @param {!function(this:T,?):?} f The function to be called on any result.
 * @param {T=} opt_scope An optional scope to call the function in.
 * @return {!goog.async.Deferred} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};


/**
 * Registers a callback function and an errback function at the same position
 * in the execution sequence. Only one of these functions will execute,
 * depending on the error state during the execution sequence.
 *
 * NOTE: This is not equivalent to {@code def.addCallback().addErrback()}! If
 * the callback is invoked, the errback will be skipped, and vice versa.
 *
 * @param {(function(this:T,VALUE):?)|null} cb The function to be called on a
 *     successful result.
 * @param {(function(this:T,?):?)|null} eb The function to be called on an
 *     unsuccessful result.
 * @param {T=} opt_scope An optional scope to call the functions in.
 * @return {!goog.async.Deferred} This Deferred.
 * @template T
 */
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, 'Blocking Deferreds can not be re-used');
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};


/**
 * Implements {@see goog.Thenable} for seamless integration with
 * {@see goog.Promise}.
 * Deferred results are mutable and may represent multiple values over
 * their lifetime. Calling {@code then} on a Deferred returns a Promise
 * with the result of the Deferred at that point in its callback chain.
 * Note that if the Deferred result is never mutated, and only
 * {@code then} calls are made, the Deferred will behave like a Promise.
 *
 * @override
 */
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected,
    opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    // Copying resolvers to outer scope, so that they are available when the
    // deferred callback fires (which may be synchronous).
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);


/**
 * Links another Deferred to the end of this Deferred's execution sequence. The
 * result of this execution sequence will be passed as the starting result for
 * the chained Deferred, invoking either its first callback or errback.
 *
 * @param {!goog.async.Deferred} otherDeferred The Deferred to chain.
 * @return {!goog.async.Deferred} This Deferred.
 */
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(
      otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};


/**
 * Makes this Deferred wait for another Deferred's execution sequence to
 * complete before continuing.
 *
 * This is equivalent to adding a callback that returns {@code otherDeferred},
 * but doesn't prevent additional callbacks from being added to
 * {@code otherDeferred}.
 *
 * @param {!goog.async.Deferred|!goog.Thenable} otherDeferred The Deferred
 *     to wait for.
 * @return {!goog.async.Deferred} This Deferred.
 */
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    // The Thenable case.
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};


/**
 * Creates a branch off this Deferred's execution sequence, and returns it as a
 * new Deferred. The branched Deferred's starting result will be shared with the
 * parent at the point of the branch, even if further callbacks are added to the
 * parent.
 *
 * All branches at the same stage in the execution sequence will receive the
 * same starting value.
 *
 * @param {boolean=} opt_propagateCancel If cancel() is called on every child
 *     branch created with opt_propagateCancel, the parent will be canceled as
 *     well.
 * @return {!goog.async.Deferred.<VALUE>} A Deferred that will be started with
 *     the computed result from this stage in the execution sequence.
 */
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred();
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};


/**
 * @return {boolean} Whether the execution sequence has been started on this
 *     Deferred by invoking {@code callback} or {@code errback}.
 */
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};


/**
 * @param {*} res The latest result in the execution sequence.
 * @return {boolean} Whether the current result is an error that should cause
 *     the next errback to fire. May be overridden by subclasses to handle
 *     special error types.
 * @protected
 */
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};


/**
 * @return {boolean} Whether an errback exists in the remaining sequence.
 * @private
 */
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    // The errback is the second element in the array.
    return goog.isFunction(sequenceRow[1]);
  });
};


/**
 * Exhausts the execution sequence while a result is available. The result may
 * be modified by callbacks or errbacks, and execution will block if the
 * returned result is an incomplete Deferred.
 *
 * @private
 */
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    // It is possible to add errbacks after the Deferred has fired. If a new
    // errback is added immediately after the Deferred encountered an unhandled
    // error, but before that error is rethrown, the error is unscheduled.
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }

  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }

  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;

  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();

    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];

    var f = this.hadError_ ? errback : callback;
    if (f) {
      /** @preserveTry */
      try {
        var ret = f.call(scope || this.defaultScope_, res);

        // If no result, then use previous result.
        if (goog.isDef(ret)) {
          // Bubble up the error as long as the return value hasn't changed.
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }

        if (goog.Thenable.isImplementedBy(res)) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }

      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);

        if (!this.hasErrback_()) {
          // If an error is thrown with no additional errbacks in the queue,
          // prepare to rethrow the error.
          unhandledException = true;
        }
      }
    }
  }

  this.result_ = res;

  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true /* isSuccess */);
    var onErrback = goog.bind(this.continue_, this, false /* isSuccess */);

    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) &&
      !(res instanceof goog.async.Deferred.CanceledError)) {
    this.hadError_ = true;
    unhandledException = true;
  }

  if (unhandledException) {
    // Rethrow the unhandled error after a timeout. Execution will continue, but
    // the error will be seen by global handlers and the user. The throw will
    // be canceled if another errback is appended before the timeout executes.
    // The error's original stack trace is preserved where available.
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};


/**
 * Creates a Deferred that has an initial result.
 *
 * @param {*=} opt_result The result.
 * @return {!goog.async.Deferred} The new Deferred.
 */
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred();
  d.callback(opt_result);
  return d;
};


/**
 * Creates a Deferred that fires when the given promise resolves.
 * Use only during migration to Promises.
 *
 * @param {!goog.Promise.<T>} promise
 * @return {!goog.async.Deferred.<T>} The new Deferred.
 * @template T
 */
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred();
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};


/**
 * Creates a Deferred that has an initial error result.
 *
 * @param {*} res The error result.
 * @return {!goog.async.Deferred} The new Deferred.
 */
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred();
  d.errback(res);
  return d;
};


/**
 * Creates a Deferred that has already been canceled.
 *
 * @return {!goog.async.Deferred} The new Deferred.
 */
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred();
  d.cancel();
  return d;
};


/**
 * Normalizes values that may or may not be Deferreds.
 *
 * If the input value is a Deferred, the Deferred is branched (so the original
 * execution sequence is not modified) and the input callback added to the new
 * branch. The branch is returned to the caller.
 *
 * If the input value is not a Deferred, the callback will be executed
 * immediately and an already firing Deferred will be returned to the caller.
 *
 * In the following (contrived) example, if <code>isImmediate</code> is true
 * then 3 is alerted immediately, otherwise 6 is alerted after a 2-second delay.
 *
 * <pre>
 * var value;
 * if (isImmediate) {
 *   value = 3;
 * } else {
 *   value = new goog.async.Deferred();
 *   setTimeout(function() { value.callback(6); }, 2000);
 * }
 *
 * var d = goog.async.Deferred.when(value, alert);
 * </pre>
 *
 * @param {*} value Deferred or normal value to pass to the callback.
 * @param {!function(this:T, ?):?} callback The callback to execute.
 * @param {T=} opt_scope An optional scope to call the callback in.
 * @return {!goog.async.Deferred} A new Deferred that will call the input
 *     callback with the input value.
 * @template T
 */
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};



/**
 * An error sub class that is used when a Deferred has already been called.
 * @param {!goog.async.Deferred} deferred The Deferred.
 *
 * @constructor
 * @extends {goog.debug.Error}
 */
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);

  /**
   * The Deferred that raised this error.
   * @type {goog.async.Deferred}
   */
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);


/** @override */
goog.async.Deferred.AlreadyCalledError.prototype.message =
    'Deferred has already fired';


/** @override */
goog.async.Deferred.AlreadyCalledError.prototype.name = 'AlreadyCalledError';



/**
 * An error sub class that is used when a Deferred is canceled.
 *
 * @param {!goog.async.Deferred} deferred The Deferred object.
 * @constructor
 * @extends {goog.debug.Error}
 */
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);

  /**
   * The Deferred that raised this error.
   * @type {goog.async.Deferred}
   */
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);


/** @override */
goog.async.Deferred.CanceledError.prototype.message = 'Deferred was canceled';


/** @override */
goog.async.Deferred.CanceledError.prototype.name = 'CanceledError';



/**
 * Wrapper around errors that are scheduled to be thrown by failing deferreds
 * after a timeout.
 *
 * @param {*} error Error from a failing deferred.
 * @constructor
 * @final
 * @private
 * @struct
 */
goog.async.Deferred.Error_ = function(error) {
  /** @const @private {number} */
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);

  /** @const @private {*} */
  this.error_ = error;
};


/**
 * Actually throws the error and removes it from the list of pending
 * deferred errors.
 */
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_],
      'Cannot throw an error that is not scheduled.');
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};


/**
 * Resets the error throw timer.
 */
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};


/**
 * Map of unhandled errors scheduled to be rethrown in a future timestep.
 * @private {!Object.<number|string, goog.async.Deferred.Error_>}
 */
goog.async.Deferred.errorMap_ = {};


/**
 * Schedules an error to be thrown after a delay.
 * @param {*} error Error from a failing deferred.
 * @return {number} Id of the error.
 * @private
 */
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};


/**
 * Unschedules an error from being thrown.
 * @param {number} id Id of the deferred error to unschedule.
 * @private
 */
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};


/**
 * Asserts that there are no pending deferred errors. If there are any
 * scheduled errors, one will be thrown immediately to make this function fail.
 */
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Extension of goog.async.Deferred.
 */

goog.provide('e2e.async.Result');

goog.require('goog.async.Deferred');


/**
 * @param {Function=} opt_onCancelFunction A function that will be called if the
 *     Deferred is cancelled. If provided, this function runs before the
 *     Deferred is fired with a {@code CancelledError}.
 * @param {Object=} opt_defaultScope The default object context to call
 *     callbacks and errbacks in.
 * @constructor
 * @template T
 * @extends {goog.async.Deferred.<T>}
 */
e2e.async.Result = function(opt_onCancelFunction, opt_defaultScope) {
  goog.base(this, opt_onCancelFunction, opt_defaultScope);
};
goog.inherits(e2e.async.Result, goog.async.Deferred);


/**
 * @override
 * @return {!e2e.async.Result}
 */
e2e.async.Result.prototype.addCallback;


/**
 * @override
 * @return {!e2e.async.Result}
 */
e2e.async.Result.prototype.addErrback;


/**
 * Obtains the value if available.
 * @param {e2e.async.Result.<T>} result The result.
 * @return {T} The value.
 * @template T
 */
e2e.async.Result.getValue = function(result) {
  if (result.hasFired()) {
    var ret, fired = false;
    result.addCallback(function(value) {
      ret = value;
      fired = true;
    }).addErrback(function(e) {
      throw e;
    });
    if (fired)
      return ret;
    throw new Error('Fired result didnt return synchronously.');
  }
  throw new Error('Result is still pending.');
};


/**
 * Converts a value to a result.
 * @param {T} value The value to wrap as a result.
 * @return {!e2e.async.Result.<T>} The value as a result.
 * @template T
 */
e2e.async.Result.toResult = function(value) {
  return /** @type {!e2e.async.Result} */(
      goog.async.Deferred.succeed(value));
};


/**
 * Converts a value to a (failed) result.
 * @param {T} value The value to wrap as a result.
 * @return {!e2e.async.Result.<T>} The value as a result.
 * @template T
 */
e2e.async.Result.toError = function(value) {
  return /** @type {!e2e.async.Result} */(
      goog.async.Deferred.fail(value));
};


/**
 * Converts a value to a result that is resolved asynchronously.
 * @param {T} value The value to wrap as a result.
 * @return {!e2e.async.Result.<T>} The value as a result.
 * @template T
 */
e2e.async.Result.toAsynchronousResult = function(value) {
  var result = new e2e.async.Result;
  setTimeout(function() {
    result.callback(value);
  }, 0);
  return result;
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Crypto related helper functions.
 * @author evn@google.com (Eduardo Vela)
 */


goog.provide('e2e');
goog.provide('e2e.ByteArray');
goog.provide('e2e.DwordArray');

goog.require('e2e.async.Result');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('goog.array');
goog.require('goog.crypt');


/**
 * DwordArray is an array of 32 bits long big endian numbers.
 * @typedef {Array.<number>}
 */
e2e.DwordArray;


/**
 * ByteArray is an array of 8 bits long numbers.
 * @typedef {Array.<number>}
 */
e2e.ByteArray;


/**
 * Turns a 64-bit value into a ByteArray.
 * @param {!goog.math.Long} value 64-bit value. long is a reserved word.
 * @return {!e2e.ByteArray} ByteArray of 4 bytes.
 */
e2e.longToByteArray = function(value) {
  return e2e.dwordArrayToByteArray([
      value.getHighBits(), value.getLowBitsUnsigned()]);
};


/**
 * Converts a non-negative number into a big-endian ByteArray.
 * @param {!number} value The number to convert.
 * @return {!e2e.ByteArray} The number as a big-endian ByteArray.
 */
e2e.numberToByteArray = function(value) {
  if (value < 0) {
    throw new e2e.error.InvalidArgumentsError(
        'Cannot convert negative number to a byte array.');
  }

  var byteArray = [];
  do {
    byteArray.unshift(value & 0xff);
    value >>>= 8;
  } while (value > 0);
  return byteArray;
};


/**
 * Turns an array of big endian 32 bits numbers into a byte array.
 * @see #byteArrayToDwordArray
 * @param {!e2e.DwordArray} dwords DwordArray to transform to ByteArray.
 * @return {!e2e.ByteArray} ByteArray with a length divisible by 4.
 */
e2e.dwordArrayToByteArray = function(dwords) {
  var byteArray = [];
  goog.array.forEach(dwords, function(dword) {
    byteArray.push((dword >>> 24) & 0xff);
    byteArray.push((dword >>> 16) & 0xff);
    byteArray.push((dword >>> 8) & 0xff);
    byteArray.push((dword) & 0xff);
  });
  return byteArray;
};


/**
 * Turns an array of numbers into a big endian 32 bit numbers array.
 * @see #dwordArrayToByteArray
 * @param {!e2e.ByteArray} bytes ByteArray with a length divisible by 4.
 * @return {!e2e.DwordArray} The resulting dword array.
 */
e2e.byteArrayToDwordArray = function(bytes) {
  var dwordArray = [];
  for (var i = 0; i < bytes.length; i += 4) {
    dwordArray.push((bytes[i + 3] |
                     (bytes[i + 2] << 8) |
                     (bytes[i + 1] << 16) |
                     (bytes[i] << 24)) >>> 0);
  }
  return dwordArray;
};


/**
 * Turns an two-octet array into a big endian 16 bit number.
 * @param {!e2e.ByteArray} bytes ByteArray with a length of 2.
 * @return {number} The resulting word.
 */
e2e.byteArrayToWord = function(bytes) {
  return (bytes[0] << 8 | bytes[1]);
};


/**
 * Converts a big-endian byte array into a number. Due to memory limits of the
 * bitwise operators and number type, the byte array should be at most 4 bytes.
 * @param {!e2e.ByteArray} bytes A big-endian byte array.
 * @return {number} The resulting number.
 */
e2e.byteArrayToNumber = function(bytes) {
  if (bytes.length > 4) {
    throw new e2e.error.InvalidArgumentsError(
        'Cannot convert byte array exceeding 4 bytes to a number.');
  }

  var result = 0;
  for (var i = 0; i < bytes.length; i++) {
    result <<= 8;
    result |= bytes[i];
  }
  return result;
};


/**
 * Turns a 16-bit value into a byte array.
 * @param {number} word The 16-bit number.
 * @return {!e2e.ByteArray} The resulting byte array.
 */
e2e.wordToByteArray = function(word) {
  var byteArray = [];
  byteArray.push((word >>> 8) & 0xff);
  byteArray.push(word & 0xff);
  return byteArray;
};


/**
 * Whether to use Text decoder to decode byte arrays (check crbug.com/243354).
 * @const {boolean}
 */
e2e.USE_TEXT_DECODER = 'TextDecoder' in goog.global;


/**
 * Converts a byte array into a JS string.
 * @param {!e2e.ByteArray|!Uint8Array} bytes The bytes to convert.
 * @param {string=} opt_charset The charset to try (defaults to UTF-8).
 * @return {string} The string representation of bytes.
 */
e2e.byteArrayToString = function(bytes, opt_charset) {
  if (e2e.USE_TEXT_DECODER) {
    var td = /** @type {{decode: function(Uint8Array):string}} */ (
        new goog.global['TextDecoder'](opt_charset || 'utf-8'));
    return td.decode(new Uint8Array(bytes));
  } else {
    return goog.crypt.utf8ByteArrayToString(bytes);
  }
};


/**
 * Converts a byte array into a JS string asynchronously.
 * @param {!e2e.ByteArray} bytes The bytes to convert.
 * @param {string=} opt_charset The charset to try (defaults to UTF-8).
 * @return {!e2e.async.Result.<string>} The string representation of bytes.
 */
e2e.byteArrayToStringAsync = function(bytes, opt_charset) {
  if (e2e.USE_TEXT_DECODER) {
    return e2e.async.Result.toResult(
        e2e.byteArrayToString(bytes, opt_charset));
  } else {
    var res = new e2e.async.Result;
    var fr = new FileReader;
    fr.onload = function() {
      res.callback(fr.result);
    };
    fr.onerror = function(e) {
      res.errback(new Error(String(e)));
    };
    fr.readAsText(
        new Blob([new Uint8Array(bytes)]), opt_charset || 'utf-8');
    return res;
  }
};


/**
 * Converts a string into a UTF-8 encoded byte array.
 * @param {string} stringInput The string to convert.
 * @return {!e2e.ByteArray} The UTF-8 byte representation of the string.
 */
e2e.stringToByteArray = function(stringInput) {
  // We don't use the Closure implementation as it normalizes line ends to \n.
  var out = [], p = 0;
  for (var i = 0; i < stringInput.length; i++) {
    var c = stringInput.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = (c >> 6) | 192;
      out[p++] = (c & 63) | 128;
    } else {
      out[p++] = (c >> 12) | 224;
      out[p++] = ((c >> 6) & 63) | 128;
      out[p++] = (c & 63) | 128;
    }
  }
  return out;
};


/**
 * Returns whether the number is a valid 'byte' (0-255 no decimals).
 * @param {number} b The number to test.
 * @return {boolean} If the send number is a byte.
 */
e2e.isByte = function(b) {
    return (typeof b == 'number' &&
        b >= 0 &&
        b <= 255 &&
        b - Math.floor(b) == 0);
};


/**
 * Verifies a given ByteArray is indeed made of bytes.
 * @param {!e2e.ByteArray} bytes The bytearray to test.
 * @return {boolean} If the array if a byteArray.
 */
e2e.isByteArray = function(bytes) {
  var yes = 1;
  for (var i = 0; i < bytes.length; i++) {
    yes &= e2e.isByte(bytes[i]) | 0;
  }
  return yes == 1;
};


/**
 * Does near constant time ByteArray comparison.
 * @param {!e2e.ByteArray} ba1 The first bytearray to check.
 * @param {!e2e.ByteArray} ba2 The second bytearray to check.
 * @return {boolean} If the array are equal.
 */
e2e.compareByteArray = function(ba1, ba2) {
  if (ba1.length !== ba2.length) {
    return false;
  }
  if (!e2e.isByteArray(ba1) || !e2e.isByteArray(ba2)) {
    return false;
  }
  var yes = 1;
  for (var i = 0; i < ba1.length; i++) {
    yes &= !(ba1[i] ^ ba2[i]) | 0;
  }
  return yes == 1;
};


/**
 * Asserts that a given expression evaluates to true.
 * Does *not* get removed during compilation.
 * @template T
 * @param {?T} cond The expression to check.
 * @param {string=} opt_msg The message to throw.
 * @param {!function(new:Error,string)=} opt_error The error type to throw.
 * @return {!T} The result of the conditional expression.
 */
e2e.assert = function(cond, opt_msg, opt_error) {
  if (!cond) {
    throw new (opt_error || Error)(opt_msg || 'Assertion failed.');
  }
  return cond;
};


/**
 * Increments (++ByteArray) an unsigned big endian in a ByteArray.
 * @template T
 * @param {T} n The number to increment.
 * @return {T} The incremented array.
 */
e2e.incrementByteArray = function(n) {
  /**
   * Inner function to allow static type checking.
   * @param {(!e2e.ByteArray|!Uint8Array)} n The number to increment.
   * @return {(!e2e.ByteArray|!Uint8Array)} The incremented array.
   */
  var fn = function(n) {
    var carry = 1;  // initial increment
    for (var i = n.length - 1; i >= 0; --i) {
      n[i] += carry;
      carry = (n[i] & 0x100) >>> 8;
      n[i] &= 0xff;
    }
    return n;
  };
  return fn(n);
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Fixed-timing utility functions.
 * @author thaidn@google.com (Thai Duong).
 */

goog.provide('e2e.fixedtiming');

goog.require('goog.asserts');



/**
 * Selects a if bit is 1; otherwise selects b.
 * Copied from "Fast Elliptic Curve Cryptography in OpenSSL".
 * @param {number} a
 * @param {number} b
 * @param {number} bit
 * @return {number}
 */
e2e.fixedtiming.select = function(a, b, bit) {
  goog.asserts.assert(bit === 0 || bit === 1, 'Wrong bit.');
  /* -0 = 0, -1 = 0xff....ff */
  var mask = (-bit) | 0;
  var ret = mask & (a ^ b);
  ret = ret ^ b;
  return ret;
};


/**
 * Returns a if a > b; otherwise b;
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
e2e.fixedtiming.max = function(a, b) {
  return e2e.fixedtiming.select(a, b, (a > b) | 0);
};

// Copyright 2011 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 *
 * @fileoverview Basic arithmetic operations for big numbers.
 * @author thaidn@google.com (Thai Duong).
 */

goog.provide('e2e.BigNum');

goog.require('e2e');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('e2e.fixedtiming');
goog.require('goog.array');
goog.require('goog.asserts');


/**
 * Non-negative arbitrary-precision integers.
 * @param {(!e2e.ByteArray|!Uint8Array)=} opt_value The value of the BigNum in
 *     big endian.
 * @constructor
 */
e2e.BigNum = function(opt_value) {
  /**
   * The internal representation of this BigNum. It's an array of 24-bit numbers
   * in little endian.
   * @type {!Array.<number>}
   */
  this.n = [];
  if (goog.isDef(opt_value)) {
    if (!(
          goog.isFunction(goog.global.Uint8Array) &&
          opt_value instanceof Uint8Array
        ) && !e2e.isByteArray(/** @type {!e2e.ByteArray} */ (opt_value))) {
      throw new e2e.error.InvalidArgumentsError(
          'Input should be a byte array.');
    }
    this.n = e2e.BigNum.bigEndianToInternal_(opt_value);
  }

  /**
   * The length in bits of this BigNum. Calculate only when needed.
   * @private {number}
   */
  this.bitLength_ = 0;
};


/**
 * @const {number} The length in bits of radix.
 */
e2e.BigNum.BASE_LEN = 24;


/**
 * @const {number} Radix used to calculate multiplications.
 */
e2e.BigNum.BASE = 1 << e2e.BigNum.BASE_LEN;


/**
 * @const {number} Bit mask of the radix.
 */
e2e.BigNum.BASE_MASK = e2e.BigNum.BASE - 1;


/**
 * A factory method to create a BigNum of a predefined size.
 * @param {number} n The size of the BigNum. Must be larger than 0.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.createBigNumOfSize = function(n) {
  var bignum = new e2e.BigNum();
  bignum.n.length = n;
  return bignum;
};


/**
 * For internal use only.  Creates a BigNum from a little-endian array
 * of 24-bit numbers, which is the internal format of a BigNum.
 *
 * @param {Array.<number>} array An array of 24-bit integers
 * @return {!e2e.BigNum} a new bignum.
 */
e2e.BigNum.fromInternalArray = function(array) {
  var bignum = new e2e.BigNum();
  bignum.n = goog.array.clone(array);
  return bignum;
};


/**
 * A factory method to create a BigNum from a 32-bit non-negative integer
 * @param {number} value a non-negative 32-bit integer
 * @return {!e2e.BigNum}
 */
e2e.BigNum.fromInteger = function(value) {
  if (value < 0 || value > 0x1000000000000  /* 2^48 */) {
    throw new e2e.error.InvalidArgumentsError(
        'Argument must be a valid integer.');
  }
  var bignum = new e2e.BigNum();
  do {
    bignum.n.push(value & e2e.BigNum.BASE_MASK);
    value = Math.floor(value / e2e.BigNum.BASE);
  } while (value > 0);
  return bignum;
};


/**
 * Converts big endian byte array to internal format.
 * @param {(!e2e.ByteArray|!Uint8Array)} input The big endian number.
 * @return {!Array.<number>}
 * @private
 */
e2e.BigNum.bigEndianToInternal_ = function(input) {
  var i = input.length;
  var pw = new Array(((i + 2) / 3) | 0);
  var j = 0;
  for (; i >= 0; i -= 3) {
    pw[j++] = (input[i - 1] & 255) |
              ((input[i - 2] & 255) << 8) |
              ((input[i - 3] & 255) << 16);
  }
  return pw;
};


/**
 * Selects conditionally. Returns a if bit is 1, b if bit is 0.
 * @param {!e2e.BigNum} a
 * @param {!e2e.BigNum} b
 * @param {number} bit
 * @return {!e2e.BigNum}
 */
e2e.BigNum.select = function(a, b, bit) {
  var mask = (-bit) | 0;
  var maxLen = e2e.fixedtiming.max(a.n.length, b.n.length);
  var ret = e2e.BigNum.createBigNumOfSize(maxLen);
  for (var i = 0; i < maxLen; ++i) {
    ret.n[i] = mask & (a.n[i] ^ b.n[i]);
  }
  for (var i = 0; i < maxLen; ++i) {
    ret.n[i] = ret.n[i] ^ b.n[i];
  }
  return ret;
};


/**
 * Converts this to big endian byte array. Drop leading zeros.
 * @return {!e2e.ByteArray} The big endian representation.
 */
e2e.BigNum.prototype.toByteArray = function() {
  var i = this.n.length;
  var j = 0;
  var r = new Array(3 * i);

  for (; i > 0; --i) {
    r[j++] = (this.n[i - 1] >>> 16) & 255;
    r[j++] = (this.n[i - 1] >>> 8) & 255;
    r[j++] = (this.n[i - 1] & 255);
  }

  // Drops leading zeros.
  var n = 0;
  var z = 0;
  for (var m = 0; m < r.length; ++m) {
    z |= r[m]; // All zeros so far?
    n += !z & (!r[m]);
  }
  return r.slice(n - (1 & !z));
};


/**
 * Converts this to a base 16 little-endian representation in which "digit"
 * is in the range [-7, 8]. Needed to perform scalar multiplications in ECC.
 * @return {!Array.<number>} The little endian signed-nybble representation.
 */
e2e.BigNum.prototype.toSignedNybbleArray = function() {
  var result = [];
  var carry = 0;
  for (var word = 0; word < this.n.length; word++) {
    // We add 0x777777 to the word as a whole, then subtract 7 from each of
    // the resulting nybbles.
    var value = this.n[word] + carry + 0x777777;
    carry = value >> e2e.BigNum.BASE_LEN;
    for (var offset = 0; offset < e2e.BigNum.BASE_LEN; offset += 4) {
      result.push(((value >> offset) & 0xF) - 7);
    }
  }
  result.push(carry);
  return result;
};


/** @override */
e2e.BigNum.prototype.toString = function() {
  var result = [];
  var current = this;
  var divisor = e2e.BigNum.fromInteger(1000 * 1000);
  do {
    var qr = current.divmod(divisor);
    var remainder = qr.remainder;
    result.unshift(remainder.n[0]);
    current = qr.quotient;
    current.dropLeadingZeros();
  } while (!current.isEqual(e2e.BigNum.ZERO));
  return result.map(function(element, index) {
    // pad all but the first element to be six digits
    if (index == 0 || element > 1000 * 1000) {
      return '' + element;
    } else {
      return ('000000' + element).slice(-6);
    }

  }).join('');
};



/**
 * Drops leading zeros.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.dropLeadingZeros = function() {
  // Fixed-timing up to the length of this.
  var j = 0;
  var z = 0;
  for (var i = this.n.length - 1; i > 0; --i) {
    z |= this.n[i]; // All zeros so far?
    j += !z & (!this.n[i]);
  }
  this.n.length -= j;
  return this;
};


/**
 * Returns a copy of this object.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.clone = function() {
  return e2e.BigNum.fromInternalArray(this.n);
};


/**
 * Resets the size of this BigNum by removing or adding leading zeros.
 * @param {number} n The new size.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.cloneWithSize = function(n) {
  var r = e2e.BigNum.createBigNumOfSize(n);
  for (var i = 0; i < n; i++) {
    r.n[i] = this.n[i] | 0;
  }
  return r;
};


/**
 * Resets the size of this BigNum.
 * @param {number} n The new size. Must be smaller than current size.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.setSize = function(n) {
  goog.asserts.assert(n <= this.n.length, 'Wrong size.');
  this.n.length = n;
  return this;
};


/**
 * Gets the size of this BigNum.
 * @return {number}
 */
e2e.BigNum.prototype.getSize = function() {
  return this.n.length;
};


/**
 * Returns the bit length of this.
 * @return {number}
 */
e2e.BigNum.prototype.getBitLength = function() {
  if (this.bitLength_ == 0) {
    return this.getBitLength_();
  }
  return this.bitLength_;
};


/**
 * Calculates the bit length of this.
 * @return {number}
 * @private
 */
e2e.BigNum.prototype.getBitLength_ = function() {
  var j = 0;
  var z = 0;
  for (var i = this.n.length - 1; i > 0; --i) {
    z |= this.n[i]; // All zeros so far?
    j += !z & (!this.n[i]);
  }
  var len = this.n.length - j;
  var nbits = len * e2e.BigNum.BASE_LEN;
  var msw = this.n[len - 1];
  // change [0] to [1], as they have the same length.
  // msw = 1 if msw = 0; otherwise no change.
  msw = msw | (!msw);
  while ((msw & (e2e.BigNum.BASE >> 1)) == 0) {
    msw <<= 1;
    --nbits;
  }
  this.bitLength_ = nbits;
  return nbits;
};


/**
 * Calculates this + that.
 * @param {!e2e.BigNum} that The number to add.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.add = function(that) {
  var maxLen = e2e.fixedtiming.max(this.n.length, that.n.length);
  var sum = e2e.BigNum.createBigNumOfSize(maxLen + 1);
  var accu = 0;
  for (var i = 0; i < maxLen; ++i) {
    accu += (this.n[i] | 0) + (that.n[i] | 0);
    sum.n[i] = accu & e2e.BigNum.BASE_MASK;
    accu >>= e2e.BigNum.BASE_LEN;
  }
  sum.n[maxLen] = accu;
  return sum;
};


/**
 * Calculates this - that.
 * @param {!e2e.BigNum} that The number to subtract. It must
 *     be smaller than this.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.subtract = function(that) {
  if (!this.isGreaterOrEqual(that)) {
    throw new e2e.error.InvalidArgumentsError(
        'Cannot subtract to a larger BigNum.');
  }

  var result = this.clone();
  var n = result.n.length;
  var accu = 0;
  for (var i = 0; i < result.n.length; ++i) {
    accu += result.n[i] - (that.n[i] | 0);
    result.n[i] = accu & e2e.BigNum.BASE_MASK;
    accu >>= e2e.BigNum.BASE_LEN;
  }
  return result;
};


/**
 * Subtracts conditionally: return this - that if this >= that.
 * @param {!e2e.BigNum} that Number to subtract.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.subtractIfGreaterOrEqual = function(that) {
  var maxLen = e2e.fixedtiming.max(this.n.length, that.n.length);
  var result = e2e.BigNum.createBigNumOfSize(maxLen);
  var accu = 0;
  for (var i = 0; i < maxLen; ++i) {
    accu += (this.n[i] | 0) - (that.n[i] | 0);
    result.n[i] = accu & e2e.BigNum.BASE_MASK;
    accu >>= e2e.BigNum.BASE_LEN;
  }
  var mask = accu;
  accu = 0;
  for (var i = 0; i < maxLen; ++i) {
    accu += result.n[i] + (that.n[i] & mask);
    result.n[i] = (accu) & e2e.BigNum.BASE_MASK;
    accu >>= e2e.BigNum.BASE_LEN;
  }
  return result;
};


/**
 * Calculates this * that.
 * @param {!e2e.BigNum} that The number to multiply.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.multiply = function(that) {
  var thisLen = this.n.length;
  var thatLen = that.n.length;
  var productLen = thisLen + thatLen;
  var product = e2e.BigNum.createBigNumOfSize(productLen);
  for (var i = 0; i < productLen; i++) {
    product.n[i] = 0;
  }
  for (var i = 0; i < thisLen; i++) {
    var U = 0;
    for (var j = 0; j < thatLen; j++) {
      var accu = product.n[i + j] + this.n[i] * that.n[j] + U;
      U = (accu / e2e.BigNum.BASE) | 0;
      product.n[i + j] = accu & e2e.BigNum.BASE_MASK;
    }
    product.n[i + thatLen] = U;
  }
  return product;
};


/**
 * Calculates this * this.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.square = function() {
  var m = this.n.length;
  var product = e2e.BigNum.createBigNumOfSize(2 * m);
  for (var i = 0; i < 2 * m; i++) {
    product.n[i] = 0;
  }
  for (var i = 0; i < m; i++) {
    var accu = product.n[i + i] + this.n[i] * this.n[i];
    var U = (accu / e2e.BigNum.BASE) | 0;
    product.n[i + i] = accu & e2e.BigNum.BASE_MASK;
    for (var j = i + 1; j < m; j++) {
      accu = product.n[i + j] + 2 * this.n[i] * this.n[j] + U;
      U = (accu / e2e.BigNum.BASE) | 0;
      product.n[i + j] = accu & e2e.BigNum.BASE_MASK;
    }
    product.n[i + m] = U;
  }
  return product;
};


/**
 * Calculates this % that
 * @param {!e2e.BigNum} that
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.mod = function(that) {
  return this.divmod(that).remainder;
};


/**
 * Calculates this / that
 * @param {!e2e.BigNum} that
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.div = function(that) {
  return this.divmod(that).quotient;
};


/**
 * Calculates both quotient and remainder of this / that.
 * @param {!e2e.BigNum} that
 * @return {!{quotient:!e2e.BigNum, remainder:!e2e.BigNum}}
 */
e2e.BigNum.prototype.divmod = function(that) {
  var bitLength = that.getBitLength();
  // divisor length w/o padding
  var length = ((bitLength + e2e.BigNum.BASE_LEN - 1) /
      e2e.BigNum.BASE_LEN) | 0;
  var shift = length * e2e.BigNum.BASE_LEN - bitLength;
  // Shift the divisor that that its high bit is set.
  // Shift the dividend by the same amount.
  var divisor = that.shiftLeft(shift);
  var dividend = e2e.BigNum.select(
      this.clone(), this.shiftLeft(shift), (shift == 0) | 0);
  var quotient = e2e.BigNum.select(
      e2e.BigNum.ZERO,
      e2e.BigNum.createBigNumOfSize(dividend.n.length + 1),
      (dividend.n.length + 1 - length <= 0) | 0);
  dividend.n.push(0);

  for (var delta = dividend.n.length - length - 1; delta >= 0; delta--) {
    // ASSERT:  dividend / (divisor * b^(delta)) < b, where b = 2^24.
    // Our goal is to find q = floor(dividend / (divisor * b^delta)).
    // We can then subtract q * divisor * b^delta from the dividend and add
    // q * b ^ delta to the quotient.
    //
    // Get q, the tentative quotient digit.  This is either the right answer
    // or one too large.
    var q = this.calculateQuotient_(dividend, divisor, delta);
    // Subtract quotient * divisor
    var accu = 0;
    quotient.n[delta] = q;
    for (var i = 0; i <= length; i++) {
      accu += dividend.n[i + delta] - (divisor.n[i] | 0) * q;
      dividend.n[i + delta] = accu & e2e.BigNum.BASE_MASK;
      accu = Math.floor(accu / e2e.BigNum.BASE);
    }
    goog.asserts.assert(
        dividend.n[delta + length] == e2e.BigNum.BASE_MASK ||
        dividend.n[delta + length] == 0);
    goog.asserts.assert(accu == -1 || accu == 0);

    // If the result is negative, then q was 1 too large, and we add
    // b ^ delta * divisor back, and subtract b ^ delta from the quotient.
    var mask = accu;  //
    accu = 0;
    quotient.n[delta] += mask;
    for (var i = 0; i <= length; i++) {
      accu += dividend.n[i + delta] + (divisor.n[i] & mask);
      dividend.n[i + delta] = accu & e2e.BigNum.BASE_MASK;
      accu >>= e2e.BigNum.BASE_LEN;
    }
    goog.asserts.assert(dividend.n[delta + length] == 0);
  }
  dividend = dividend.shiftRight(shift).cloneWithSize(length);
  quotient.dropLeadingZeros();
  goog.asserts.assert(quotient.multiply(that).add(dividend).isEqual(this));
  return {quotient: quotient, remainder: dividend};
};


/**
 * Calculates the quotient digit for dividend / (divisor << (24 * delta)).
 * The resulting quotient digit is guaranteed to be either the right answer,
 * or one larger than the right answer.
 * @param {e2e.BigNum} dividend
 * @param {e2e.BigNum} divisor
 * @param {number} delta
 * @return {number}
 * @private
 */
e2e.BigNum.prototype.calculateQuotient_ = function(
    dividend, divisor, delta) {
  var length = divisor.n.length;
  goog.asserts.assert(dividend.n[length + delta] <=
      divisor.n[length - 1]);
  // Let the top three digits of the dividend be s2, s1, s0, and the top two
  // digits of the divisor be v1, v0.  Let the base be b.  Let the correct value
  // for the quotient be q.  Knuth shows that calculating
  //     qhat = floor((s2 * b + s1) / v1)
  // gives an amount such that the true quotient is qhat, qhat - 1, or qhat - 2.
  var numerator = dividend.n[length + delta] * e2e.BigNum.BASE +
      dividend.n[length + delta - 1];
  var denominator = divisor.n[length - 1];
  var qhat = Math.floor(numerator / denominator);
  var rhat = numerator - qhat * denominator;  // remainder
  // Let qtilde = floor((s2 * b^2 + s1 * b + s0) / (v1 * b + v0)
  // Knuth likewise shows that qtilde <= qhat, that the true quotient is qtilde
  // or qtilde - 1, and that the q = qtilde with very high probability.
  // But this code needs to be data-independent, so we bother to distinguish
  // only between the two cases qtilde == qhat and qtilde < qhat. From above:
  //     qhat * v1 + rhat = s2 * b + s1
  //     qhat * v1 * b  + rhat * b = s2 * b^2 + s1 * b
  //     qhat * (v1 + b + v0) + ((rhat * b + s0 - qhat * v0))
  //                   = s2 * b^2 + s1 * b + s0
  // The quantity marked by ((...)) looks like a remainder in calculating
  // qtilde.  So we have
  //             ((...)) >= 0  if  qtilde == qhat
  //             ((...)) < 0   if  qtilde < qhat.
  // NB: HAC points out that the algorithm works fine with non-zero 1-word
  // divisors, as long as negative indices are treated as 0.

  // If this is true, then it has to be the case that qhat is too large,
  // and the real quotient must be qhat - 1 or qhat - 2.
  var decrement1 = (qhat == e2e.BigNum.BASE);
  // If this is true, then per above, qtilde < qhat, so that the real
  // quotient must be qhat - 1 or qhat - 2.
  var decrement2 = qhat * (divisor.n[length - 2] | 0) >
      rhat * e2e.BigNum.BASE + (dividend.n[length + delta - 2] | 0);
  return qhat - (decrement1 | decrement2);
};


/**
 * Divides this by a small, one-word divisor.
 * @param  {number} divisor The one-word divisor.
 * @return {!{quotient:!e2e.BigNum, remainder:number}}
 */
e2e.BigNum.prototype.divmodInt = function(divisor) {
  goog.asserts.assert(0 <= divisor && divisor < e2e.BigNum.BASE);
  var dividend = this.clone();

  var tmp, remainder = 0;
  for (var i = dividend.n.length - 1; i >= 0; --i) {
    tmp = remainder * (e2e.BigNum.BASE) + dividend.n[i];
    dividend.n[i] = (tmp / divisor) | 0;
    remainder = tmp % divisor;
  }
  return {quotient: dividend, remainder: remainder};
};


/**
 * Return true if a < this < b.
 * @param {e2e.BigNum} a The lower bound.
 * @param {e2e.BigNum} b The upper bound.
 * @return {boolean}
 */
e2e.BigNum.prototype.isBetween = function(a, b) {
  return this.compare(a) > 0 && this.compare(b) < 0;
};


/**
 * Returns true if this = that.
 * @param {e2e.BigNum} that The number to compare.
 * @return {boolean}
 */
e2e.BigNum.prototype.isEqual = function(that) {
  return this.compare(that) == 0;
};


/**
 * Returns true if this < that.
 * @param {e2e.BigNum} that The number to compare.
 * @return {boolean}
 */
e2e.BigNum.prototype.isLess = function(that) {
  return this.compare(that) < 0;
};


/**
 * Returns true if this >= that.
 * @param {e2e.BigNum} that The number to compare.
 * @return {boolean}
 */
e2e.BigNum.prototype.isGreaterOrEqual = function(that) {
  return this.compare(that) >= 0;
};


/**
 * Compares this to another number. Return a negative, zero, and a positive
 * number when this is smaller than, equal to, or bigger than the other BigNum
 * respectively.
 * This is fixed-timing, thanks to quannguyen@.
 * @param {e2e.BigNum} that The number to compare.
 * @return {number}
 */
e2e.BigNum.prototype.compare = function(that) {
  var greater = 0;
  var previousLesser = 0;
  var previousGreater = 0;
  var lesser = 0;
  var maxLen = e2e.fixedtiming.max(this.n.length, that.n.length);
  for (var i = maxLen - 1; i >= 0; --i) {
    var x = this.n[i] | 0;
    var y = that.n[i] | 0;
    previousLesser |= (x < y);
    greater |= (x > y) & !previousLesser;
    previousGreater |= (x > y);
    lesser |= (x < y) & !previousGreater;
  }
  return greater - lesser;
};


/**
 * Performs a bitwise-AND of this and that.
 * @param {e2e.BigNum} that The number to AND with.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.and = function(that) {
  var maxLen = e2e.fixedtiming.max(this.n.length, that.n.length);
  var result = e2e.BigNum.createBigNumOfSize(maxLen);
  for (var i = maxLen; i >= 0; --i) {
    var x = this.n[i] | 0;
    var y = that.n[i] | 0;
    result.n[i] = x & y;
  }
  return result;
};


/**
 * Performs a bitwise-OR of this and that.
 * @param {e2e.BigNum} that The number to XOR with.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.or = function(that) {
  var maxLen = e2e.fixedtiming.max(this.n.length, that.n.length);
  var result = e2e.BigNum.createBigNumOfSize(maxLen);
  for (var i = maxLen; i >= 0; --i) {
    var x = this.n[i] | 0;
    var y = that.n[i] | 0;
    result.n[i] = x | y;
  }
  return result;
};


/**
 * Performs a bitwise-XOR of this and that.
 * @param {e2e.BigNum} that The number to XOR with.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.xor = function(that) {
  var maxLen = e2e.fixedtiming.max(this.n.length, that.n.length);
  var result = e2e.BigNum.createBigNumOfSize(maxLen);
  for (var i = maxLen; i >= 0; --i) {
    var x = this.n[i] | 0;
    var y = that.n[i] | 0;
    result.n[i] = x ^ y;
  }
  return result;
};


/**
 * Negates this value.
 *
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.negate = function() {
  var length = this.n.length;
  var result = e2e.BigNum.createBigNumOfSize(length);
  for (var i = length - 1; i >= 0; i--) {
    result.n[i] = (~ this.n[i]) & e2e.BigNum.BASE_MASK;
  }
  return result.add(e2e.BigNum.ONE);
};


/**
 * Calculates this << shift.  Shift must be in the range 0 <= shift <= 23.
 *
 * @param {number} shift  The amount by which to shift.  0 <= shift <= 23.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.shiftLeft = function(shift) {
  if (shift < 0 || shift > 23) {
    throw new e2e.error.InvalidArgumentsError(
        'Illegal shift value.');
  }
  var length = this.n.length;
  var result = e2e.BigNum.createBigNumOfSize(length + 1);
  var mask = (1 << shift) - 1;
  var xmask = (1 << (e2e.BigNum.BASE_LEN - shift)) - 1;
  var carry = 0;
  for (var i = 0; i < length; i++) {
    // We purposely mask before shifting to ensure the result stays 32 bits.
    result.n[i] = ((this.n[i] & xmask) << shift) + carry;
    carry = (this.n[i] >> (e2e.BigNum.BASE_LEN - shift)) & mask;
  }
  result.n[length] = carry;
  return result.dropLeadingZeros();
};


/**
 * Calculates this >> shift.  Shift must be in the range 0 <= shift <= 23.
 *
 * @param {number} shift  The amount by which to shift.  0 <= shift <= 23.
 * @return {!e2e.BigNum}
 */
e2e.BigNum.prototype.shiftRight = function(shift) {
  if (shift < 0 || shift > 23) {
    throw new e2e.error.InvalidArgumentsError(
        'Illegal shift value.');
  }
  var length = this.n.length;
  var result = e2e.BigNum.createBigNumOfSize(length);
  var mask = (1 << shift) - 1;
  var carry = 0;
  for (var i = length - 1; i >= 0; i--) {
    result.n[i] = carry + (this.n[i] >> shift);
    carry = (this.n[i] & mask) << (e2e.BigNum.BASE_LEN - shift);
  }
  return result;
};


/**
 * Returns true if bit nth in the little-endian representation of this is set.
 * @param {number} n The bit number to test.
 * @return {boolean}
 */
e2e.BigNum.prototype.isBitSet = function(n) {
  // The digit where the bit lives.
  var i = (n / e2e.BigNum.BASE_LEN) | 0;
  // The position in that digit.
  var j = n % e2e.BigNum.BASE_LEN;
  // When i >= n.length returns 0.
  return (this.n[i] & (1 << j)) != 0;
};


/**
 * Returns true if this is even
 * @return {boolean}
 */
e2e.BigNum.prototype.isEven = function() {
  return (this.n[0] & 1) == 0;
};


/**
 * Returns true if this is odd
 * @return {boolean}
 */
e2e.BigNum.prototype.isOdd = function() {
  return (this.n[0] & 1) != 0;
};


// Public constants.


/**
 * BigNum constant 0.
 */
e2e.BigNum.ZERO = e2e.BigNum.fromInteger(0);


/**
 * BigNum constant 1.
 */
e2e.BigNum.ONE = e2e.BigNum.fromInteger(1);


/**
 * BigNum constant 2.
 */
e2e.BigNum.TWO = e2e.BigNum.fromInteger(2);

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Provides the type definitions of signatures.
 */

goog.provide('e2e.signer.signature.Signature');
goog.provide('e2e.signer.signature.SignatureAsync');


/**
 * @typedef {?{s: !e2e.ByteArray, r:(!e2e.ByteArray|undefined),
 *     hashValue: (!e2e.ByteArray|undefined)}}
 */
e2e.signer.signature.Signature;


/**
 * @typedef {e2e.async.Result.<!e2e.signer.signature.Signature>}
 */
e2e.signer.signature.SignatureAsync;

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Abstract cryptographic hash interface.
 *
 * See goog.crypt.Sha1 and goog.crypt.Md5 for sample implementations.
 *
 */

goog.provide('goog.crypt.Hash');



/**
 * Create a cryptographic hash instance.
 *
 * @constructor
 * @struct
 */
goog.crypt.Hash = function() {
  /**
   * The block size for the hasher.
   * @type {number}
   */
  this.blockSize = -1;
};


/**
 * Resets the internal accumulator.
 */
goog.crypt.Hash.prototype.reset = goog.abstractMethod;


/**
 * Adds a byte array (array with values in [0-255] range) or a string (might
 * only contain 8-bit, i.e., Latin1 characters) to the internal accumulator.
 *
 * Many hash functions operate on blocks of data and implement optimizations
 * when a full chunk of data is readily available. Hence it is often preferable
 * to provide large chunks of data (a kilobyte or more) than to repeatedly
 * call the update method with few tens of bytes. If this is not possible, or
 * not feasible, it might be good to provide data in multiplies of hash block
 * size (often 64 bytes). Please see the implementation and performance tests
 * of your favourite hash.
 *
 * @param {Array.<number>|Uint8Array|string} bytes Data used for the update.
 * @param {number=} opt_length Number of bytes to use.
 */
goog.crypt.Hash.prototype.update = goog.abstractMethod;


/**
 * @return {!Array.<number>} The finalized hash computed
 *     from the internal accumulator.
 */
goog.crypt.Hash.prototype.digest = goog.abstractMethod;

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

goog.provide('goog.math.Long');



/**
 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
 * values as *signed* integers.  See the from* functions below for more
 * convenient ways of constructing Longs.
 *
 * The internal representation of a long is the two given signed, 32-bit values.
 * We use 32-bit pieces because these are the size of integers on which
 * Javascript performs bit-operations.  For operations like addition and
 * multiplication, we split each number into 16-bit pieces, which can easily be
 * multiplied within Javascript's floating-point representation without overflow
 * or change in sign.
 *
 * In the algorithms below, we frequently reduce the negative case to the
 * positive case by negating the input(s) and then post-processing the result.
 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
 * a positive number, it overflows back into a negative).  Not handling this
 * case would often result in infinite recursion.
 *
 * @param {number} low  The low (signed) 32 bits of the long.
 * @param {number} high  The high (signed) 32 bits of the long.
 * @constructor
 * @final
 */
goog.math.Long = function(low, high) {
  /**
   * @type {number}
   * @private
   */
  this.low_ = low | 0;  // force into 32 signed bits.

  /**
   * @type {number}
   * @private
   */
  this.high_ = high | 0;  // force into 32 signed bits.
};


// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
// from* methods on which they depend.


/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @private
 */
goog.math.Long.IntCache_ = {};


/**
 * Returns a Long representing the given (32-bit) integer value.
 * @param {number} value The 32-bit integer in question.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }

  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};


/**
 * Returns a Long representing the given value, provided that it is a finite
 * number.  Otherwise, zero is returned.
 * @param {number} value The number in question.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
    return goog.math.Long.MIN_VALUE;
  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
    return goog.math.Long.MAX_VALUE;
  } else if (value < 0) {
    return goog.math.Long.fromNumber(-value).negate();
  } else {
    return new goog.math.Long(
        (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
        (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
  }
};


/**
 * Returns a Long representing the 64-bit integer that comes by concatenating
 * the given high and low bits.  Each is assumed to use 32 bits.
 * @param {number} lowBits The low 32-bits.
 * @param {number} highBits The high 32-bits.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};


/**
 * Returns a Long representation of the given string, written using the given
 * radix.
 * @param {string} str The textual representation of the Long.
 * @param {number=} opt_radix The radix in which the text is written.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error('number format error: empty string');
  }

  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error('radix out of range: ' + radix);
  }

  if (str.charAt(0) == '-') {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else if (str.indexOf('-') >= 0) {
    throw Error('number format error: interior "-" character: ' + str);
  }

  // Do several (8) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

  var result = goog.math.Long.ZERO;
  for (var i = 0; i < str.length; i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};


// NOTE: the compiler should inline these constant values below and then remove
// these variables, so there should be no runtime penalty for these.


/**
 * Number used repeated below in calculations.  This must appear before the
 * first call to any from* function below.
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_32_DBL_ =
    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_31_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ / 2;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_48_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_64_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_63_DBL_ =
    goog.math.Long.TWO_PWR_64_DBL_ / 2;


/** @type {!goog.math.Long} */
goog.math.Long.ZERO = goog.math.Long.fromInt(0);


/** @type {!goog.math.Long} */
goog.math.Long.ONE = goog.math.Long.fromInt(1);


/** @type {!goog.math.Long} */
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


/** @type {!goog.math.Long} */
goog.math.Long.MAX_VALUE =
    goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


/** @type {!goog.math.Long} */
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


/**
 * @type {!goog.math.Long}
 * @private
 */
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


/** @return {number} The value, assuming it is a 32-bit integer. */
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};


/** @return {number} The closest floating-point representation to this value. */
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
         this.getLowBitsUnsigned();
};


/**
 * @param {number=} opt_radix The radix in which the text should be written.
 * @return {string} The textual representation of this value.
 * @override
 */
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error('radix out of range: ' + radix);
  }

  if (this.isZero()) {
    return '0';
  }

  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      // We need to change the Long value before it can be negated, so we remove
      // the bottom-most digit in this base and then recurse to do the rest.
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return '-' + this.negate().toString(radix);
    }
  }

  // Do several (6) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

  var rem = this;
  var result = '';
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);

    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = '0' + digits;
      }
      result = '' + digits + result;
    }
  }
};


/** @return {number} The high 32-bits as a signed value. */
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};


/** @return {number} The low 32-bits as a signed value. */
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};


/** @return {number} The low 32-bits as an unsigned value. */
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return (this.low_ >= 0) ?
      this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};


/**
 * @return {number} Returns the number of bits needed to represent the absolute
 *     value of this Long.
 */
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31; bit > 0; bit--) {
      if ((val & (1 << bit)) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};


/** @return {boolean} Whether this value is zero. */
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};


/** @return {boolean} Whether this value is negative. */
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};


/** @return {boolean} Whether this value is odd. */
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long equals the other.
 */
goog.math.Long.prototype.equals = function(other) {
  return (this.high_ == other.high_) && (this.low_ == other.low_);
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long does not equal the other.
 */
goog.math.Long.prototype.notEquals = function(other) {
  return (this.high_ != other.high_) || (this.low_ != other.low_);
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is less than the other.
 */
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is less than or equal to the other.
 */
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is greater than the other.
 */
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is greater than or equal to the other.
 */
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};


/**
 * Compares this Long with the given one.
 * @param {goog.math.Long} other Long to compare against.
 * @return {number} 0 if they are the same, 1 if the this is greater, and -1
 *     if the given one is greater.
 */
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }

  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }

  // at this point, the signs are the same, so subtraction will not overflow
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};


/** @return {!goog.math.Long} The negation of this value. */
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};


/**
 * Returns the sum of this and the given Long.
 * @param {goog.math.Long} other Long to add to this one.
 * @return {!goog.math.Long} The sum of this and the given Long.
 */
goog.math.Long.prototype.add = function(other) {
  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 0xFFFF;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 0xFFFF;

  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 0xFFFF;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 0xFFFF;

  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 + b48;
  c48 &= 0xFFFF;
  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
};


/**
 * Returns the difference of this and the given Long.
 * @param {goog.math.Long} other Long to subtract from this.
 * @return {!goog.math.Long} The difference of this and the given Long.
 */
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};


/**
 * Returns the product of this and the given long.
 * @param {goog.math.Long} other Long to multiply with this.
 * @return {!goog.math.Long} The product of this and the other.
 */
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else if (other.isZero()) {
    return goog.math.Long.ZERO;
  }

  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
    return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  }

  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else if (other.isNegative()) {
    return this.multiply(other.negate()).negate();
  }

  // If both longs are small, use float multiplication
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
      other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }

  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
  // We can skip products that would overflow.

  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 0xFFFF;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 0xFFFF;

  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 0xFFFF;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 0xFFFF;

  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 0xFFFF;
  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
};


/**
 * Returns this Long divided by the given one.
 * @param {goog.math.Long} other Long by which to divide.
 * @return {!goog.math.Long} This Long divided by the given one.
 */
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error('division by zero');
  } else if (this.isZero()) {
    return goog.math.Long.ZERO;
  }

  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) ||
        other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ONE;
    } else {
      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
      var halfThis = this.shiftRight(1);
      var approx = halfThis.div(other).shiftLeft(1);
      if (approx.equals(goog.math.Long.ZERO)) {
        return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
      } else {
        var rem = this.subtract(other.multiply(approx));
        var result = approx.add(rem.div(other));
        return result;
      }
    }
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.ZERO;
  }

  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else if (other.isNegative()) {
    return this.div(other.negate()).negate();
  }

  // Repeat the following until the remainder is less than other:  find a
  // floating-point that approximates remainder / other *from below*, add this
  // into the result, and subtract it from the remainder.  It is critical that
  // the approximate value is less than or equal to the real value so that the
  // remainder never becomes negative.
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    // Approximate the result of division. This may be a little greater or
    // smaller than the actual value.
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

    // We will tweak the approximate result by changing it in the 48-th digit or
    // the smallest non-fractional digit, whichever is larger.
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

    // Decrease the approximation until it is smaller than the remainder.  Note
    // that if it is too large, the product overflows and is negative.
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }

    // We know the answer can't be zero... and actually, zero would cause
    // infinite recursion since we would make no progress.
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }

    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};


/**
 * Returns this Long modulo the given one.
 * @param {goog.math.Long} other Long by which to mod.
 * @return {!goog.math.Long} This Long modulo the given one.
 */
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};


/** @return {!goog.math.Long} The bitwise-NOT of this value. */
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};


/**
 * Returns the bitwise-AND of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to AND.
 * @return {!goog.math.Long} The bitwise-AND of this and the other.
 */
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_,
                                 this.high_ & other.high_);
};


/**
 * Returns the bitwise-OR of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to OR.
 * @return {!goog.math.Long} The bitwise-OR of this and the other.
 */
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_,
                                 this.high_ | other.high_);
};


/**
 * Returns the bitwise-XOR of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to XOR.
 * @return {!goog.math.Long} The bitwise-XOR of this and the other.
 */
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                 this.high_ ^ other.high_);
};


/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the left by the given amount.
 */
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(
          low << numBits,
          (high << numBits) | (low >>> (32 - numBits)));
    } else {
      return goog.math.Long.fromBits(0, low << (numBits - 32));
    }
  }
};


/**
 * Returns this Long with bits shifted to the right by the given amount.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the right by the given amount.
 */
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(
          (low >>> numBits) | (high << (32 - numBits)),
          high >> numBits);
    } else {
      return goog.math.Long.fromBits(
          high >> (numBits - 32),
          high >= 0 ? 0 : -1);
    }
  }
};


/**
 * Returns this Long with bits shifted to the right by the given amount, with
 * zeros placed into the new leading bits.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the right by the given amount, with
 *     zeros placed into the new leading bits.
 */
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(
          (low >>> numBits) | (high << (32 - numBits)),
          high >>> numBits);
    } else if (numBits == 32) {
      return goog.math.Long.fromBits(high, 0);
    } else {
      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
    }
  }
};

// Copyright 2014 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Base class for the 64-bit SHA-2 cryptographic hashes.
 *
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * This code borrows heavily from the 32-bit SHA2 implementation written by
 * Yue Zhang (zysxqn@).
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('goog.crypt.Sha2_64bit');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.crypt.Hash');
goog.require('goog.math.Long');



/**
 * Constructs a SHA-2 64-bit cryptographic hash.
 * This class should not be used. Rather, one should use one of its
 * subclasses.
 * @constructor
 * @param {number} numHashBlocks The size of the output in 16-byte blocks
 * @param {!Array.<number>} initHashBlocks The hash-specific initialization
 *     vector, as a sequence of sixteen 32-bit numbers.
 * @extends {goog.crypt.Hash}
 * @struct
 */
goog.crypt.Sha2_64bit = function(numHashBlocks, initHashBlocks) {
  goog.crypt.Sha2_64bit.base(this, 'constructor');

  /**
   * The number of bytes that are digested in each pass of this hasher.
   * @const {number}
   */
  this.blockSize = goog.crypt.Sha2_64bit.BLOCK_SIZE_;

  /**
   * A chunk holding the currently processed message bytes. Once the chunk has
   * {@code this.blocksize} bytes, we feed it into [@code computeChunk_}.
   * @private {!Uint8Array|Array.<number>}
   */
  this.chunk_ = goog.isDef(goog.global.Uint8Array) ?
      new Uint8Array(goog.crypt.Sha2_64bit.BLOCK_SIZE_) :
      new Array(goog.crypt.Sha2_64bit.BLOCK_SIZE_);

  /**
   * Current number of bytes in {@code this.chunk_}.
   * @private {number}
   */
  this.chunkBytes_ = 0;

  /**
   * Total number of bytes in currently processed message.
   * @private {number}
   */
  this.total_ = 0;

  /**
   * Holds the previous values of accumulated hash a-h in the
   * {@code computeChunk_} function.
   * @private {!Array.<!goog.math.Long>}
   */
  this.hash_ = [];

  /**
   * The number of blocks of output produced by this hash function, where each
   * block is eight bytes long.
   * @private {number}
   */
  this.numHashBlocks_ = numHashBlocks;

  /**
   * Temporary array used in chunk computation.  Allocate here as a
   * member rather than as a local within computeChunk_() as a
   * performance optimization to reduce the number of allocations and
   * reduce garbage collection.
   * @type {!Array.<!goog.math.Long>}
   * @private
   */
  this.w_ = [];

  /**
   * The value to which {@code this.hash_} should be reset when this
   * Hasher is reset.
   * @private @const {!Array.<!goog.math.Long>}
   */
  this.initHashBlocks_ = goog.crypt.Sha2_64bit.toLongArray_(initHashBlocks);

  /**
   * If true, we have taken the digest from this hasher, but we have not
   * yet reset it.
   *
   * @private {boolean}
   */
  this.needsReset_ = false;

  this.reset();
};
goog.inherits(goog.crypt.Sha2_64bit, goog.crypt.Hash);


/**
 * The number of bytes that are digested in each pass of this hasher.
 * @private @const {number}
 */
goog.crypt.Sha2_64bit.BLOCK_SIZE_ = 1024 / 8;


/**
 * Contains data needed to pad messages less than {@code blocksize} bytes.
 * @private {!Array.<number>}
 */
goog.crypt.Sha2_64bit.PADDING_ = goog.array.concat(
    [0x80], goog.array.repeat(0, goog.crypt.Sha2_64bit.BLOCK_SIZE_ - 1));


/**
 * Resets this hash function.
 * @override
 */
goog.crypt.Sha2_64bit.prototype.reset = function() {
  this.chunkBytes_ = 0;
  this.total_ = 0;
  this.hash_ = goog.array.clone(this.initHashBlocks_);
  this.needsReset_ = false;
};


/** @override */
goog.crypt.Sha2_64bit.prototype.update = function(message, opt_length) {
  var length = goog.isDef(opt_length) ? opt_length : message.length;

  // Make sure this hasher is usable.
  if (this.needsReset_) {
    throw Error('this hasher needs to be reset');
  }
  // Process the message from left to right up to |length| bytes.
  // When we get a 512-bit chunk, compute the hash of it and reset
  // this.chunk_. The message might not be multiple of 512 bits so we
  // might end up with a chunk that is less than 512 bits. We store
  // such partial chunk in chunk_ and it will be filled up later
  // in digest().
  var n = 0;
  var chunkBytes = this.chunkBytes_;

  // The input message could be either byte array or string.
  if (goog.isString(message)) {
    for (var i = 0; i < length; i++) {
      var b = message.charCodeAt(i);
      if (b > 255) {
        throw Error('Characters must be in range [0,255]');
      }
      this.chunk_[chunkBytes++] = b;
      if (chunkBytes == this.blockSize) {
        this.computeChunk_();
        chunkBytes = 0;
      }
    }
  } else if (goog.isArray(message)) {
    for (var i = 0; i < length; i++) {
      var b = message[i];
      // Hack:  b|0 coerces b to an integer, so the last part confirms that
      // b has no fractional part.
      if (!goog.isNumber(b) || b < 0 || b > 255 || b != (b | 0)) {
        throw Error('message must be a byte array');
      }
      this.chunk_[chunkBytes++] = b;
      if (chunkBytes == this.blockSize) {
        this.computeChunk_();
        chunkBytes = 0;
      }
    }
  } else {
    throw Error('message must be string or array');
  }

  // Record the current bytes in chunk to support partial update.
  this.chunkBytes_ = chunkBytes;

  // Record total message bytes we have processed so far.
  this.total_ += length;
};


/** @override */
goog.crypt.Sha2_64bit.prototype.digest = function() {
  if (this.needsReset_) {
    throw Error('this hasher needs to be reset');
  }
  var totalBits = this.total_ * 8;

  // Append pad 0x80 0x00* until this.chunkBytes_ == 112
  if (this.chunkBytes_ < 112) {
    this.update(goog.crypt.Sha2_64bit.PADDING_, 112 - this.chunkBytes_);
  } else {
    // the rest of this block, plus 112 bytes of next block
    this.update(goog.crypt.Sha2_64bit.PADDING_,
        this.blockSize - this.chunkBytes_ + 112);
  }

  // Append # bits in the 64-bit big-endian format.
  for (var i = 127; i >= 112; i--) {
    this.chunk_[i] = totalBits & 255;
    totalBits /= 256; // Don't use bit-shifting here!
  }
  this.computeChunk_();

  // Finally, output the result digest.
  var n = 0;
  var digest = new Array(8 * this.numHashBlocks_);
  for (var i = 0; i < this.numHashBlocks_; i++) {
    var block = this.hash_[i];
    var high = block.getHighBits();
    var low = block.getLowBits();
    for (var j = 24; j >= 0; j -= 8) {
      digest[n++] = ((high >> j) & 255);
    }
    for (var j = 24; j >= 0; j -= 8) {
      digest[n++] = ((low >> j) & 255);
    }
  }

  // The next call to this hasher must be a reset
  this.needsReset_ = true;
  return digest;
};


/**
 * Updates this hash by processing the 1024-bit message chunk in this.chunk_.
 * @private
 */
goog.crypt.Sha2_64bit.prototype.computeChunk_ = function() {
  var chunk = this.chunk_;
  var K_ = goog.crypt.Sha2_64bit.K_;

  // Divide the chunk into 16 64-bit-words.
  var w = this.w_;
  for (var i = 0; i < 16; i++) {
    var offset = i * 8;
    w[i] = new goog.math.Long(
        (chunk[offset + 4] << 24) | (chunk[offset + 5] << 16) |
            (chunk[offset + 6] << 8) | (chunk[offset + 7]),
        (chunk[offset] << 24) | (chunk[offset + 1] << 16) |
            (chunk[offset + 2] << 8) | (chunk[offset + 3]));

  }

  // Extend the w[] array to be the number of rounds.
  for (var i = 16; i < 80; i++) {
    var s0 = this.sigma0_(w[i - 15]);
    var s1 = this.sigma1_(w[i - 2]);
    w[i] = this.sum_(w[i - 16], w[i - 7], s0, s1);
  }

  var a = this.hash_[0];
  var b = this.hash_[1];
  var c = this.hash_[2];
  var d = this.hash_[3];
  var e = this.hash_[4];
  var f = this.hash_[5];
  var g = this.hash_[6];
  var h = this.hash_[7];
  for (var i = 0; i < 80; i++) {
    var S0 = this.Sigma0_(a);
    var maj = this.majority_(a, b, c);
    var t2 = S0.add(maj);
    var S1 = this.Sigma1_(e);
    var ch = this.choose_(e, f, g);
    var t1 = this.sum_(h, S1, ch, K_[i], w[i]);
    h = g;
    g = f;
    f = e;
    e = d.add(t1);
    d = c;
    c = b;
    b = a;
    a = t1.add(t2);
  }

  this.hash_[0] = this.hash_[0].add(a);
  this.hash_[1] = this.hash_[1].add(b);
  this.hash_[2] = this.hash_[2].add(c);
  this.hash_[3] = this.hash_[3].add(d);
  this.hash_[4] = this.hash_[4].add(e);
  this.hash_[5] = this.hash_[5].add(f);
  this.hash_[6] = this.hash_[6].add(g);
  this.hash_[7] = this.hash_[7].add(h);
};


/**
 * Calculates the SHA2 64-bit sigma0 function.
 * rotateRight(value, 1) ^ rotateRight(value, 8) ^ (value >>> 7)
 *
 * @private
 * @param {!goog.math.Long} value
 * @return {!goog.math.Long}
 */
goog.crypt.Sha2_64bit.prototype.sigma0_ = function(value) {
  var valueLow = value.getLowBits();
  var valueHigh = value.getHighBits();
  // Implementation note: We purposely do not use the shift operations defined
  // in goog.math.Long.  Inlining the code for specific values of shifting and
  // not generating the intermediate results doubles the speed of this code.
  var low = (valueLow >>> 1) ^ (valueHigh << 31) ^
            (valueLow >>> 8) ^ (valueHigh << 24) ^
            (valueLow >>> 7) ^ (valueHigh << 25);
  var high = (valueHigh >>> 1) ^ (valueLow << 31) ^
             (valueHigh >>> 8) ^ (valueLow << 24) ^
             (valueHigh >>> 7);
  return new goog.math.Long(low, high);
};


/**
 * Calculates the SHA2 64-bit sigma1 function.
 * rotateRight(value, 19) ^ rotateRight(value, 61) ^ (value >>> 6)
 *
 * @private
 * @param {!goog.math.Long} value
 * @return {!goog.math.Long}
 */
goog.crypt.Sha2_64bit.prototype.sigma1_ = function(value) {
  var valueLow = value.getLowBits();
  var valueHigh = value.getHighBits();
  // Implementation note:  See _sigma0() above
  var low = (valueLow >>> 19) ^ (valueHigh << 13) ^
            (valueHigh >>> 29) ^ (valueLow << 3) ^
            (valueLow >>> 6) ^ (valueHigh << 26);
  var high = (valueHigh >>> 19) ^ (valueLow << 13) ^
             (valueLow >>> 29) ^ (valueHigh << 3) ^
             (valueHigh >>> 6);
  return new goog.math.Long(low, high);
};


/**
 * Calculates the SHA2 64-bit Sigma0 function.
 * rotateRight(value, 28) ^ rotateRight(value, 34) ^ rotateRight(value, 39)
 *
 * @private
 * @param {!goog.math.Long} value
 * @return {!goog.math.Long}
 */
goog.crypt.Sha2_64bit.prototype.Sigma0_ = function(value) {
  var valueLow = value.getLowBits();
  var valueHigh = value.getHighBits();
  // Implementation note:  See _sigma0() above
  var low = (valueLow >>> 28) ^ (valueHigh << 4) ^
            (valueHigh >>> 2) ^ (valueLow << 30) ^
            (valueHigh >>> 7) ^ (valueLow << 25);
  var high = (valueHigh >>> 28) ^ (valueLow << 4) ^
             (valueLow >>> 2) ^ (valueHigh << 30) ^
             (valueLow >>> 7) ^ (valueHigh << 25);
  return new goog.math.Long(low, high);
};


/**
 * Calculates the SHA2 64-bit Sigma1 function.
 * rotateRight(value, 14) ^ rotateRight(value, 18) ^ rotateRight(value, 41)
 *
 * @private
 * @param {!goog.math.Long} value
 * @return {!goog.math.Long}
 */
goog.crypt.Sha2_64bit.prototype.Sigma1_ = function(value) {
  var valueLow = value.getLowBits();
  var valueHigh = value.getHighBits();
  // Implementation note:  See _sigma0() above
  var low = (valueLow >>> 14) ^ (valueHigh << 18) ^
            (valueLow >>> 18) ^ (valueHigh << 14) ^
            (valueHigh >>> 9) ^ (valueLow << 23);
  var high = (valueHigh >>> 14) ^ (valueLow << 18) ^
             (valueHigh >>> 18) ^ (valueLow << 14) ^
             (valueLow >>> 9) ^ (valueHigh << 23);
  return new goog.math.Long(low, high);
};


/**
 * Calculates the SHA-2 64-bit choose function.
 *
 * This function uses {@code value} as a mask to choose bits from either
 * {@code one} if the bit is set or {@code two} if the bit is not set.
 *
 * @private
 * @param {!goog.math.Long} value
 * @param {!goog.math.Long} one
 * @param {!goog.math.Long} two
 * @return {!goog.math.Long}
 */
goog.crypt.Sha2_64bit.prototype.choose_ = function(value, one, two) {
  var valueLow = value.getLowBits();
  var valueHigh = value.getHighBits();
  return new goog.math.Long(
      (valueLow & one.getLowBits()) | (~valueLow & two.getLowBits()),
      (valueHigh & one.getHighBits()) | (~valueHigh & two.getHighBits()));
};


/**
 * Calculates the SHA-2 64-bit majority function.
 * This function returns, for each bit position, the bit held by the majority
 * of its three arguments.
 *
 * @private
 * @param {!goog.math.Long} one
 * @param {!goog.math.Long} two
 * @param {!goog.math.Long} three
 * @return {!goog.math.Long}
 */
goog.crypt.Sha2_64bit.prototype.majority_ = function(one, two, three) {
  return new goog.math.Long(
      (one.getLowBits() & two.getLowBits()) |
          (two.getLowBits() & three.getLowBits()) |
          (one.getLowBits() & three.getLowBits()),
      (one.getHighBits() & two.getHighBits()) |
          (two.getHighBits() & three.getHighBits()) |
          (one.getHighBits() & three.getHighBits()));
};


/**
 * Adds two or more goog.math.Long values.
 *
 * @private
 * @param {!goog.math.Long} one first summand
 * @param {!goog.math.Long} two second summand
 * @param {...goog.math.Long} var_args more arguments to sum
 * @return {!goog.math.Long} The resulting sum.
 */
goog.crypt.Sha2_64bit.prototype.sum_ = function(one, two, var_args) {
  // The low bits may be signed, but they represent a 32-bit unsigned quantity.
  // We must be careful to normalize them.
  // This doesn't matter for the high bits.
  // Implementation note:  Performance testing shows that this method runs
  // fastest when the first two arguments are pulled out of the loop.
  var low = (one.getLowBits() ^ 0x80000000) + (two.getLowBits() ^ 0x80000000);
  var high = one.getHighBits() + two.getHighBits();
  for (var i = arguments.length - 1; i >= 2; --i) {
    low += arguments[i].getLowBits() ^ 0x80000000;
    high += arguments[i].getHighBits();
  }
  // Because of the ^0x80000000, each value we added is 0x80000000 too small.
  // Add arguments.length * 0x80000000 to the current sum.  We can do this
  // quickly by adding 0x80000000 to low when the number of arguments is
  // odd, and adding (number of arguments) >> 1 to high.
  if (arguments.length & 1) {
    low += 0x80000000;
  }
  high += arguments.length >> 1;

  // If low is outside the range [0, 0xFFFFFFFF], its overflow or underflow
  // should be added to high.  We don't actually need to modify low or
  // normalize high because the goog.math.Long constructor already does that.
  high += Math.floor(low / 0x100000000);
  return new goog.math.Long(low, high);
};


/**
 * Converts an array of 32-bit integers into an array of goog.math.Long
 * elements.
 *
 * @private
 * @param {!Array.<number>} values An array of 32-bit numbers.  Its length
 *     must be even.  Each pair of numbers represents a 64-bit integer
 *     in big-endian order
 * @return {!Array.<!goog.math.Long>}
 */
goog.crypt.Sha2_64bit.toLongArray_ = function(values) {
  goog.asserts.assert(values.length % 2 == 0);
  var result = [];
  for (var i = 0; i < values.length; i += 2) {
    result.push(new goog.math.Long(values[i + 1], values[i]));
  }
  return result;
};


/**
 * Fixed constants used in SHA-512 variants.
 *
 * These values are from Section 4.2.3 of
 * http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
 * @const
 * @private {!Array.<!goog.math.Long>}
 */
goog.crypt.Sha2_64bit.K_ = goog.crypt.Sha2_64bit.toLongArray_([
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]);

// Copyright 2014 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview SHA-384  cryptographic hash.
 *
 * Usage:
 *   var sha384 = new goog.crypt.Sha384();
 *   sha384.update(bytes);
 *   var hash = sha384.digest();
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('goog.crypt.Sha384');

goog.require('goog.crypt.Sha2_64bit');



/**
 * Constructs a SHA-384 cryptographic hash.
 *
 * @constructor
 * @extends {goog.crypt.Sha2_64bit}
 * @final
 * @struct
 */
goog.crypt.Sha384 = function() {
  goog.crypt.Sha384.base(this, 'constructor', 6  /* numHashBlocks */,
      goog.crypt.Sha384.INIT_HASH_BLOCK_);
};
goog.inherits(goog.crypt.Sha384, goog.crypt.Sha2_64bit);


/** @private {!Array.<number>} */
goog.crypt.Sha384.INIT_HASH_BLOCK_ = [
  // Section 5.3.4 of
  // csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
  0xcbbb9d5d, 0xc1059ed8,  // H0
  0x629a292a, 0x367cd507,  // H1
  0x9159015a, 0x3070dd17,  // H2
  0x152fecd8, 0xf70e5939,  // H3
  0x67332667, 0xffc00b31,  // H4
  0x8eb44a87, 0x68581511,  // H5
  0xdb0c2e0d, 0x64f98fa7,  // H6
  0x47b5481d, 0xbefa4fa4   // H7
];

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a base class to implement hashes on top.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.hash.Algorithm');
goog.provide('e2e.hash.Error');
goog.provide('e2e.hash.Hash');

goog.require('goog.crypt.Hash');
goog.require('goog.debug.Error');


/**
 * Error class used to represent errors in the hash algorithms.
 * @param {*=} opt_msg Optional message to send.
 * @extends {goog.debug.Error}
 * @constructor
 */
e2e.hash.Error = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.hash.Error, goog.debug.Error);


/**
 * List of Hash algorithms that can be implemented.
 * @enum {string}
 */
e2e.hash.Algorithm = {
  'MD5': 'MD5',
  'SHA1': 'SHA1',
  'RIPEMD': 'RIPEMD160',
  'SHA256': 'SHA256',
  'SHA384': 'SHA384',
  'SHA512': 'SHA512',
  'SHA224': 'SHA224'
};



/**
 * Wrapper around goog.crypt.Hash with some extra properties.
 * @extends {goog.crypt.Hash}
 * @constructor
 * @struct
 */
e2e.hash.Hash = function() {
  goog.base(this);
};
goog.inherits(e2e.hash.Hash, goog.crypt.Hash);


/**
 * The implemented algorithm.
 * @type {e2e.hash.Algorithm}
 */
e2e.hash.Hash.prototype.algorithm;


/**
 * The internal instance of the hash.
 * @type {goog.crypt.Hash}
 * @protected
 */
e2e.hash.Hash.prototype.inst_;


/** @inheritDoc */
e2e.hash.Hash.prototype.blockSize;


/** @inheritDoc */
e2e.hash.Hash.prototype.reset = function() {
  this.inst_.reset();
};


/** @inheritDoc */
e2e.hash.Hash.prototype.digest = function() {
  return this.inst_.digest();
};


/** @inheritDoc */
e2e.hash.Hash.prototype.update = function(msg, opt_bytes) {
  this.inst_.update(msg, opt_bytes);
};


/**
 * Performs reset, update and digest in one operation.
 * @param {Uint8Array|Array.<number>|string} msg The message to hash.
 * @return {!Array.<number>} The checksum.
 */
e2e.hash.Hash.prototype.hash = function(msg) {
  this.reset();
  this.update(msg);
  return this.digest();
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Registers and returns implementations of specific algorithms.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.hash.factory');

goog.require('e2e.hash.Error');


/**
 * Contains a list of all registered implementations for each algorithm.
 * @type {!Object.<e2e.hash.Algorithm,
 *     function(new:e2e.hash.Hash, ...)>}
 * @private
 */
e2e.hash.factory.hashes_ = {};


/**
 * Registers a class for a specific algorithm.
 * @param {function(new:e2e.hash.Hash, ...[*])} hash The constructor of
 *     the cipher.
 * @param {e2e.hash.Algorithm=} opt_algorithm The algorithm to register
 *     it to, if different from the prototype name.
 */
e2e.hash.factory.add = function(hash, opt_algorithm) {
  var algorithm = opt_algorithm || hash.prototype.algorithm;
  e2e.hash.factory.hashes_[algorithm] = hash;
};


/**
 * Returns an instance of the required hash algorithm, or null if not available.
 * @param {e2e.hash.Algorithm} algorithm The hash algorithm.
 * @return {e2e.hash.Hash?} The hash instance requested or null.
 */
e2e.hash.factory.get = function(algorithm) {
  if (e2e.hash.factory.hashes_.hasOwnProperty(algorithm)) {
    var constructor = e2e.hash.factory.hashes_[algorithm];
    return new constructor;
  } else {
    return null;
  }
};


/**
 * Returns all available hash algorithms.
 * @return {!Array.<e2e.hash.Algorithm>} Array of available algorithms.
 */
e2e.hash.factory.getAvailable = function() {
  return Object.keys(e2e.hash.factory.hashes_);
};


/**
 * Returns an instance of the required hash algorithm, or throws if not
 * available.
 * @param {e2e.hash.Algorithm} algorithm The hash algorithm.
 * @return {!e2e.hash.Hash} The hash instance requested.
 */
e2e.hash.factory.require = function(algorithm) {
  var ret = e2e.hash.factory.get(algorithm);
  if (goog.isNull(ret)) {
    throw new e2e.hash.Error('Required algorithm not available.');
  }
  return ret;
};

// Copyright 2014 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview SHA-512 cryptographic hash.
 *
 * Usage:
 *   var sha512 = new goog.crypt.Sha512();
 *   sha512.update(bytes);
 *   var hash = sha512.digest();
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('goog.crypt.Sha512');

goog.require('goog.crypt.Sha2_64bit');



/**
 * Constructs a SHA-512 cryptographic hash.
 *
 * @constructor
 * @extends {goog.crypt.Sha2_64bit}
 * @final
 * @struct
 */
goog.crypt.Sha512 = function() {
  goog.crypt.Sha512.base(this, 'constructor', 8  /* numHashBlocks */,
      goog.crypt.Sha512.INIT_HASH_BLOCK_);
};
goog.inherits(goog.crypt.Sha512, goog.crypt.Sha2_64bit);


/** @private {!Array.<number>} */
goog.crypt.Sha512.INIT_HASH_BLOCK_ = [
  // Section 5.3.5 of
  // csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
  0x6a09e667, 0xf3bcc908,  // H0
  0xbb67ae85, 0x84caa73b,  // H1
  0x3c6ef372, 0xfe94f82b,  // H2
  0xa54ff53a, 0x5f1d36f1,  // H3
  0x510e527f, 0xade682d1,  // H4
  0x9b05688c, 0x2b3e6c1f,  // H5
  0x1f83d9ab, 0xfb41bd6b,  // H6
  0x5be0cd19, 0x137e2179   // H7
];

// Copyright 2012 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Base class for SHA-2 cryptographic hash.
 *
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Some code similar to SHA1 are borrowed from sha1.js written by mschilder@.
 *
 */

goog.provide('goog.crypt.Sha2');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.crypt.Hash');



/**
 * SHA-2 cryptographic hash constructor.
 * This constructor should not be used directly to create the object. Rather,
 * one should use the constructor of the sub-classes.
 * @param {number} numHashBlocks The size of output in 16-byte blocks.
 * @param {Array.<number>} initHashBlocks The hash-specific initialization
 * @constructor
 * @extends {goog.crypt.Hash}
 * @struct
 */
goog.crypt.Sha2 = function(numHashBlocks, initHashBlocks) {
  goog.crypt.Sha2.base(this, 'constructor');

  this.blockSize = goog.crypt.Sha2.BLOCKSIZE_;

  /**
   * A chunk holding the currently processed message bytes. Once the chunk has
   * 64 bytes, we feed it into computeChunk_ function and reset this.chunk_.
   * @private {!Array.<number>|Uint8Array}
   */
  this.chunk_ = goog.global['Uint8Array'] ?
      new Uint8Array(this.blockSize) : new Array(this.blockSize);

  /**
   * Current number of bytes in this.chunk_.
   * @private {number}
   */
  this.inChunk_ = 0;

  /**
   * Total number of bytes in currently processed message.
   * @private {number}
   */
  this.total_ = 0;


  /**
   * Holds the previous values of accumulated hash a-h in the computeChunk_
   * function.
   * @private {!Array.<number>|Int32Array}
   */
  this.hash_ = [];

  /**
   * The number of output hash blocks (each block is 4 bytes long).
   * @private {number}
   */
  this.numHashBlocks_ = numHashBlocks;

  /**
   * @private {Array.<number>} initHashBlocks
   */
  this.initHashBlocks_ = initHashBlocks;

  /**
   * Temporary array used in chunk computation.  Allocate here as a
   * member rather than as a local within computeChunk_() as a
   * performance optimization to reduce the number of allocations and
   * reduce garbage collection.
   * @private {!Int32Array|!Array.<number>}
   */
  this.w_ = goog.global['Int32Array'] ? new Int32Array(64) : new Array(64);

  if (!goog.isDef(goog.crypt.Sha2.Kx_)) {
    // This is the first time this constructor has been called.
    if (goog.global['Int32Array']) {
      // Typed arrays exist
      goog.crypt.Sha2.Kx_ = new Int32Array(goog.crypt.Sha2.K_);
    } else {
      // Typed arrays do not exist
      goog.crypt.Sha2.Kx_ = goog.crypt.Sha2.K_;
    }
  }

  this.reset();
};
goog.inherits(goog.crypt.Sha2, goog.crypt.Hash);


/**
 * The block size
 * @private <number>
 */
goog.crypt.Sha2.BLOCKSIZE_ = 512 / 8;


/**
 * Contains data needed to pad messages less than BLOCK_SIZE_ bytes.
 * @private {!Array.<number>}
 */
goog.crypt.Sha2.PADDING_ = goog.array.concat(128,
    goog.array.repeat(0, goog.crypt.Sha2.BLOCKSIZE_ - 1));


/** @override */
goog.crypt.Sha2.prototype.reset = function() {
  this.inChunk_ = 0;
  this.total_ = 0;
  this.hash_ = goog.global['Int32Array'] ?
      new Int32Array(this.initHashBlocks_) :
      goog.array.clone(this.initHashBlocks_);
};


/**
 * Helper function to compute the hashes for a given 512-bit message chunk.
 * @private
 */
goog.crypt.Sha2.prototype.computeChunk_ = function() {
  var chunk = this.chunk_;
  goog.asserts.assert(chunk.length == this.blockSize);
  var rounds = 64;

  // Divide the chunk into 16 32-bit-words.
  var w = this.w_;
  var index = 0;
  var offset = 0;
  while (offset < chunk.length) {
    w[index++] = (chunk[offset] << 24) |
                 (chunk[offset + 1] << 16) |
                 (chunk[offset + 2] << 8) |
                 (chunk[offset + 3]);
    offset = index * 4;
  }

  // Extend the w[] array to be the number of rounds.
  for (var i = 16; i < rounds; i++) {
    var w_15 = w[i - 15] | 0;
    var s0 = ((w_15 >>> 7) | (w_15 << 25)) ^
             ((w_15 >>> 18) | (w_15 << 14)) ^
             (w_15 >>> 3);
    var w_2 = w[i - 2] | 0;
    var s1 = ((w_2 >>> 17) | (w_2 << 15)) ^
             ((w_2 >>> 19) | (w_2 << 13)) ^
             (w_2 >>> 10);

    // As a performance optimization, construct the sum a pair at a time
    // with casting to integer (bitwise OR) to eliminate unnecessary
    // double<->integer conversions.
    var partialSum1 = ((w[i - 16] | 0) + s0) | 0;
    var partialSum2 = ((w[i - 7] | 0) + s1) | 0;
    w[i] = (partialSum1 + partialSum2) | 0;
  }

  var a = this.hash_[0] | 0;
  var b = this.hash_[1] | 0;
  var c = this.hash_[2] | 0;
  var d = this.hash_[3] | 0;
  var e = this.hash_[4] | 0;
  var f = this.hash_[5] | 0;
  var g = this.hash_[6] | 0;
  var h = this.hash_[7] | 0;
  for (var i = 0; i < rounds; i++) {
    var S0 = ((a >>> 2) | (a << 30)) ^
             ((a >>> 13) | (a << 19)) ^
             ((a >>> 22) | (a << 10));
    var maj = ((a & b) ^ (a & c) ^ (b & c));
    var t2 = (S0 + maj) | 0;
    var S1 = ((e >>> 6) | (e << 26)) ^
             ((e >>> 11) | (e << 21)) ^
             ((e >>> 25) | (e << 7));
    var ch = ((e & f) ^ ((~ e) & g));

    // As a performance optimization, construct the sum a pair at a time
    // with casting to integer (bitwise OR) to eliminate unnecessary
    // double<->integer conversions.
    var partialSum1 = (h + S1) | 0;
    var partialSum2 = (ch + (goog.crypt.Sha2.Kx_[i] | 0)) | 0;
    var partialSum3 = (partialSum2 + (w[i] | 0)) | 0;
    var t1 = (partialSum1 + partialSum3) | 0;

    h = g;
    g = f;
    f = e;
    e = (d + t1) | 0;
    d = c;
    c = b;
    b = a;
    a = (t1 + t2) | 0;
  }

  this.hash_[0] = (this.hash_[0] + a) | 0;
  this.hash_[1] = (this.hash_[1] + b) | 0;
  this.hash_[2] = (this.hash_[2] + c) | 0;
  this.hash_[3] = (this.hash_[3] + d) | 0;
  this.hash_[4] = (this.hash_[4] + e) | 0;
  this.hash_[5] = (this.hash_[5] + f) | 0;
  this.hash_[6] = (this.hash_[6] + g) | 0;
  this.hash_[7] = (this.hash_[7] + h) | 0;
};


/** @override */
goog.crypt.Sha2.prototype.update = function(message, opt_length) {
  if (!goog.isDef(opt_length)) {
    opt_length = message.length;
  }
  // Process the message from left to right up to |opt_length| bytes.
  // When we get a 512-bit chunk, compute the hash of it and reset
  // this.chunk_. The message might not be multiple of 512 bits so we
  // might end up with a chunk that is less than 512 bits. We store
  // such partial chunk in this.chunk_ and it will be filled up later
  // in digest().
  var n = 0;
  var inChunk = this.inChunk_;

  // The input message could be either byte array of string.
  if (goog.isString(message)) {
    while (n < opt_length) {
      this.chunk_[inChunk++] = message.charCodeAt(n++);
      if (inChunk == this.blockSize) {
        this.computeChunk_();
        inChunk = 0;
      }
    }
  } else if (goog.isArray(message)) {
    while (n < opt_length) {
      var b = message[n++];
      if (!('number' == typeof b && 0 <= b && 255 >= b && b == (b | 0))) {
        throw Error('message must be a byte array');
      }
      this.chunk_[inChunk++] = b;
      if (inChunk == this.blockSize) {
        this.computeChunk_();
        inChunk = 0;
      }
    }
  } else {
    throw Error('message must be string or array');
  }

  // Record the current bytes in chunk to support partial update.
  this.inChunk_ = inChunk;

  // Record total message bytes we have processed so far.
  this.total_ += opt_length;
};


/** @override */
goog.crypt.Sha2.prototype.digest = function() {
  var digest = [];
  var totalBits = this.total_ * 8;

  // Append pad 0x80 0x00*.
  if (this.inChunk_ < 56) {
    this.update(goog.crypt.Sha2.PADDING_, 56 - this.inChunk_);
  } else {
    this.update(goog.crypt.Sha2.PADDING_,
        this.blockSize - (this.inChunk_ - 56));
  }

  // Append # bits in the 64-bit big-endian format.
  for (var i = 63; i >= 56; i--) {
    this.chunk_[i] = totalBits & 255;
    totalBits /= 256; // Don't use bit-shifting here!
  }
  this.computeChunk_();

  // Finally, output the result digest.
  var n = 0;
  for (var i = 0; i < this.numHashBlocks_; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      digest[n++] = ((this.hash_[i] >> j) & 255);
    }
  }
  return digest;
};


/**
 * Constants used in SHA-2.
 * @const
 * @private {!Array.<number>}
 */
goog.crypt.Sha2.K_ = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];


/**
 * Sha2.K as an Int32Array if this JS supports typed arrays; otherwise,
 * the same array as Sha2.K.
 *
 * The compiler cannot remove an Int32Array, even if it is not needed
 * (There are certain cases where creating an Int32Array is not
 * side-effect free).  Instead, the first time we construct a Sha2
 * instance, we convert or assign Sha2.K as appropriate.
 * @private {!undefined|Array.<number>|Int32Array}
 */
goog.crypt.Sha2.Kx_;

// Copyright 2012 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview SHA-256 cryptographic hash.
 *
 * Usage:
 *   var sha256 = new goog.crypt.Sha256();
 *   sha256.update(bytes);
 *   var hash = sha256.digest();
 *
 */

goog.provide('goog.crypt.Sha256');

goog.require('goog.crypt.Sha2');



/**
 * SHA-256 cryptographic hash constructor.
 *
 * @constructor
 * @extends {goog.crypt.Sha2}
 * @final
 * @struct
 */
goog.crypt.Sha256 = function() {
  goog.crypt.Sha256.base(this, 'constructor',
      8, goog.crypt.Sha256.INIT_HASH_BLOCK_);
};
goog.inherits(goog.crypt.Sha256, goog.crypt.Sha2);


/** @private {Array.<number>} */
goog.crypt.Sha256.INIT_HASH_BLOCK_ = [
  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
  0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];

// Copyright 2012 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview SHA-224 cryptographic hash.
 *
 * Usage:
 *   var sha224 = new goog.crypt.Sha224();
 *   sha224.update(bytes);
 *   var hash = sha224.digest();
 *
 */

goog.provide('goog.crypt.Sha224');

goog.require('goog.crypt.Sha2');



/**
 * SHA-224 cryptographic hash constructor.
 *
 * @constructor
 * @extends {goog.crypt.Sha2}
 * @final
 * @struct
 */
goog.crypt.Sha224 = function() {
  goog.crypt.Sha224.base(this, 'constructor',
      7, goog.crypt.Sha224.INIT_HASH_BLOCK_);
};
goog.inherits(goog.crypt.Sha224, goog.crypt.Sha2);


/** @private {Array.<number>} */
goog.crypt.Sha224.INIT_HASH_BLOCK_ = [
  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
  0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];


// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Wraps the original Sha224 and Sha256 implementations.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.hash.Sha224');
goog.provide('e2e.hash.Sha256');
goog.provide('e2e.hash.Sha384');
goog.provide('e2e.hash.Sha512');

goog.require('e2e.hash.Algorithm');
goog.require('e2e.hash.Hash');
goog.require('e2e.hash.factory');
goog.require('goog.crypt.Sha224');
goog.require('goog.crypt.Sha256');
goog.require('goog.crypt.Sha384');
goog.require('goog.crypt.Sha512');



/**
 * Wrapper around the goog.crypt.Sha224 implementation.
 * @extends {e2e.hash.Hash}
 * @constructor
 * @struct
 */
e2e.hash.Sha224 = function() {
  e2e.hash.Sha224.base(this, 'constructor');
  this.inst_ = new goog.crypt.Sha224();
  this.blockSize = this.inst_.blockSize;
};
goog.inherits(e2e.hash.Sha224, e2e.hash.Hash);


/** @inheritDoc */
e2e.hash.Sha224.prototype.algorithm = e2e.hash.Algorithm.SHA224;

e2e.hash.factory.add(e2e.hash.Sha224);


/**
 * Wrapper around the goog.crypt.Sha256 implementation.
 * @extends {e2e.hash.Hash}
 * @constructor
 * @struct
 */
e2e.hash.Sha256 = function() {
  e2e.hash.Sha256.base(this, 'constructor');
  this.inst_ = new goog.crypt.Sha256();
  this.blockSize = this.inst_.blockSize;
};
goog.inherits(e2e.hash.Sha256, e2e.hash.Hash);


/** @inheritDoc */
e2e.hash.Sha256.prototype.algorithm = e2e.hash.Algorithm.SHA256;

e2e.hash.factory.add(e2e.hash.Sha256);


/**
 * Wrapper around the goog.crypt.Sha384 implementation.
 * @extends {e2e.hash.Hash}
 * @constructor
 * @struct
 */
e2e.hash.Sha384 = function() {
  e2e.hash.Sha384.base(this, 'constructor');
  this.inst_ = new goog.crypt.Sha384();
  this.blockSize = this.inst_.blockSize;
};
goog.inherits(e2e.hash.Sha384, e2e.hash.Hash);


/** @inheritDoc */
e2e.hash.Sha384.prototype.algorithm = e2e.hash.Algorithm.SHA384;

e2e.hash.factory.add(e2e.hash.Sha384);


/**
 * Wrapper around the goog.crypt.Sha512 implementation.
 * @extends {e2e.hash.Hash}
 * @constructor
 * @struct
 */
e2e.hash.Sha512 = function() {
  e2e.hash.Sha512.base(this, 'constructor');
  this.inst_ = new goog.crypt.Sha512();
  this.blockSize = this.inst_.blockSize;
};
goog.inherits(e2e.hash.Sha512, e2e.hash.Hash);


/** @inheritDoc */
e2e.hash.Sha512.prototype.algorithm = e2e.hash.Algorithm.SHA512;

e2e.hash.factory.add(e2e.hash.Sha512);

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implementation of HMAC in JavaScript.
 *
 * Usage:
 *   var hmac = new goog.crypt.Hmac(new goog.crypt.sha1(), key, 64);
 *   var digest = hmac.getHmac(bytes);
 *
 * @author benyu@google.com (Jige Yu) - port to closure
 */


goog.provide('goog.crypt.Hmac');

goog.require('goog.crypt.Hash');



/**
 * @constructor
 * @param {!goog.crypt.Hash} hasher An object to serve as a hash function.
 * @param {Array.<number>} key The secret key to use to calculate the hmac.
 *     Should be an array of not more than {@code blockSize} integers in
       {0, 255}.
 * @param {number=} opt_blockSize Optional. The block size {@code hasher} uses.
 *     If not specified, uses the block size from the hasher, or 16 if it is
 *     not specified.
 * @extends {goog.crypt.Hash}
 * @final
 * @struct
 */
goog.crypt.Hmac = function(hasher, key, opt_blockSize) {
  goog.crypt.Hmac.base(this, 'constructor');

  /**
   * The underlying hasher to calculate hash.
   *
   * @type {!goog.crypt.Hash}
   * @private
   */
  this.hasher_ = hasher;

  this.blockSize = opt_blockSize || hasher.blockSize || 16;

  /**
   * The outer padding array of hmac
   *
   * @type {!Array.<number>}
   * @private
   */
  this.keyO_ = new Array(this.blockSize);

  /**
   * The inner padding array of hmac
   *
   * @type {!Array.<number>}
   * @private
   */
  this.keyI_ = new Array(this.blockSize);

  this.initialize_(key);
};
goog.inherits(goog.crypt.Hmac, goog.crypt.Hash);


/**
 * Outer padding byte of HMAC algorith, per http://en.wikipedia.org/wiki/HMAC
 *
 * @type {number}
 * @private
 */
goog.crypt.Hmac.OPAD_ = 0x5c;


/**
 * Inner padding byte of HMAC algorith, per http://en.wikipedia.org/wiki/HMAC
 *
 * @type {number}
 * @private
 */
goog.crypt.Hmac.IPAD_ = 0x36;


/**
 * Initializes Hmac by precalculating the inner and outer paddings.
 *
 * @param {Array.<number>} key The secret key to use to calculate the hmac.
 *     Should be an array of not more than {@code blockSize} integers in
       {0, 255}.
 * @private
 */
goog.crypt.Hmac.prototype.initialize_ = function(key) {
  if (key.length > this.blockSize) {
    this.hasher_.update(key);
    key = this.hasher_.digest();
    this.hasher_.reset();
  }
  // Precalculate padded and xor'd keys.
  var keyByte;
  for (var i = 0; i < this.blockSize; i++) {
    if (i < key.length) {
      keyByte = key[i];
    } else {
      keyByte = 0;
    }
    this.keyO_[i] = keyByte ^ goog.crypt.Hmac.OPAD_;
    this.keyI_[i] = keyByte ^ goog.crypt.Hmac.IPAD_;
  }
  // Be ready for an immediate update.
  this.hasher_.update(this.keyI_);
};


/** @override */
goog.crypt.Hmac.prototype.reset = function() {
  this.hasher_.reset();
  this.hasher_.update(this.keyI_);
};


/** @override */
goog.crypt.Hmac.prototype.update = function(bytes, opt_length) {
  this.hasher_.update(bytes, opt_length);
};


/** @override */
goog.crypt.Hmac.prototype.digest = function() {
  var temp = this.hasher_.digest();
  this.hasher_.reset();
  this.hasher_.update(this.keyO_);
  this.hasher_.update(temp);
  return this.hasher_.digest();
};


/**
 * Calculates an HMAC for a given message.
 *
 * @param {Array.<number>|Uint8Array|string} message  Data to Hmac.
 * @return {!Array.<number>} the digest of the given message.
 */
goog.crypt.Hmac.prototype.getHmac = function(message) {
  this.reset();
  this.update(message);
  return this.digest();
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a PRNG using HMAC-SHA256 as a secure next.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.random');

/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.ByteArray');
goog.require('goog.array');
goog.require('goog.crypt.Hmac');
goog.require('goog.crypt.Sha256');


/**
 * Random seed to be used to generate random numbers.
 * @type {Array.<number>}
 * @private
 */
e2e.random.seed_ = [];

/**
 * The state of the random function.
 * @type {Array.<number>}
 * @private
 */
e2e.random.state_;


/**
 * The instance used for hashing.
 * @type {!goog.crypt.Sha256}
 * @private
 */
e2e.random.hasher_;


/**
 * Defines if the RNG has been already initialized.
 * @type {boolean}
 * @private
 */
e2e.random.initialized_ = false;


/**
 * Defines if it's acceptable to use the WebCrypto RNG.
 * @const {boolean}
 */
e2e.random.USE_WEB_CRYPTO = true;

/**
 * Sha256 output size
 * @const {number}
 * @private
 */
 e2e.random.RNG_INTERNAL_BYTES_ = 32;

/**
 * @param {number} size The number of bytes to generate.
 * @return {?e2e.ByteArray} A list of size random bytes.
 * @private
 */
e2e.random.tryGetWebCryptoRandomInternal_ = function(size) {
  var cryptoObject = e2e.random.getWebCryptoObject_();
  if (cryptoObject) {
    var array = new Uint8Array(size);
    cryptoObject['getRandomValues'](array);
    return goog.array.clone(array);
  }
  return null;
};

/**
 * The security of this random number is based on HMAC-SHA256 being a
 * pseudorandom function. As such, it should be impossible to guess from
 * the output of it the message that was hashed.
 * @return {!e2e.ByteArray} RNG_INTERNAL_BYTES_ of random bytes.
 * @private
 */
e2e.random.getRandomBytesInternal_ = function() {
  var webCryptoRandom = e2e.random.tryGetWebCryptoRandomInternal_(
      e2e.random.RNG_INTERNAL_BYTES_);
  if (webCryptoRandom) {
    return webCryptoRandom;
  }
  if (!e2e.random.initialized_) {
    if (e2e.random.seed_.length < e2e.random.RNG_INTERNAL_BYTES_) {
      throw new Error('Seed is too small.');
    }
    e2e.random.state_ = e2e.random.seed_.slice(
        0, e2e.random.RNG_INTERNAL_BYTES_);
    // Destroy the seed.
    for (var i = 0; i < e2e.random.seed_.length; ++i) {
      e2e.random.seed_[i] = 0;
    }
    e2e.random.hasher_ = new goog.crypt.Sha256();
    e2e.random.initialized_ = true;
  }
  var hmacer = new goog.crypt.Hmac(e2e.random.hasher_, e2e.random.state_);

  // The new state is HMAC-SHA256(key=state, 0).
  e2e.random.state_ = hmacer.getHmac([0]).slice(
      0, e2e.random.RNG_INTERNAL_BYTES_);
  // The result is HMAC-SHA256(key=state, 1).
  var res = hmacer.getHmac([1]);
  if (goog.isNull(res)) {
    throw new Error('HMAC returned a null result.');
  }
  return /** @type {!e2e.ByteArray} */ (res);
};


/**
 * Get WebCrypto object, if it's available
 * @return {?Object}
 * @private
 */
e2e.random.getWebCryptoObject_ = function() {
  if (e2e.random.USE_WEB_CRYPTO &&
      (typeof goog.global['crypto'] == 'object' ||
          typeof goog.global['msCrypto'] == 'object')) {
    return goog.global['crypto'] || goog.global['msCrypto'];
  }
  return null;
};


/**
 * @param {number} size The number of bytes to generate.
 * @param {Array.<number>=} opt_blacklist A list of bytes to avoid generating.
 * @return {!e2e.ByteArray} A list of size random bytes.
 */
e2e.random.getRandomBytes = function(size, opt_blacklist) {
  var random = [];
  var blacklist = opt_blacklist || [];
  if (blacklist.length > 0) {
    while (random.length < size) {
      goog.array.extend(random, goog.array.filter(
          e2e.random.getRandomBytesInternal_(), function(elem) {
            return blacklist.indexOf(elem) < 0;
          }));
    }
  } else { // optimize
    var webCryptoRandom = e2e.random.tryGetWebCryptoRandomInternal_(size);
    if (webCryptoRandom) {
      return webCryptoRandom;
    }
    while (random.length < size) {
      goog.array.extend(random, e2e.random.getRandomBytesInternal_());
    }
  }
  return random.slice(0, size);
};


/**
 * The size of the seed is the size of the biggest data sent in one call.
 * @param {!Array.<number>} bytes The random bytes to add to the pool.
 */
e2e.random.seedRandomBytes = function(bytes) {
  e2e.random.seed_.splice(0, bytes.length);
  goog.array.extend(e2e.random.seed_, bytes);
};


/**
 * Adds the specified numbers of bytes into the seed from the WebCrypto random.
 * @param {number} size The number of bytes to add to the entropy pool.
 */
e2e.random.seedRandomBytesWebCrypto = function(size) {
  var array = new Uint8Array(size);
  var cryptoObject = goog.global['crypto'] || goog.global['msCrypto'];
  cryptoObject['getRandomValues'](array);
  e2e.random.seedRandomBytes(goog.array.clone(array));
};

/**
 * Reset the PRNG.
 */
e2e.random.reset = function() {
  if (e2e.random.initialized_) {
    e2e.random.seed_ = [];
    e2e.random.salt_ = [];
    e2e.random.initialized_ = false;
  }
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 *
 * @fileoverview A representation of an element in a prime field.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.ecc.Element');

goog.require('e2e.BigNum');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('e2e.fixedtiming');
goog.require('goog.asserts');



/**
 * Representation of an element in a prime field. Throws
 *     e2e.error.InvalidArgumentsError if the element is
 *     larger than or equal to the field modulus.
 * @param {!e2e.BigPrimeNum} q The modulus of the prime field.
 * @param {!e2e.BigNum} x The value of this element.
 * @constructor
 */
e2e.ecc.Element = function(q, x) {
  if (x.isGreaterOrEqual(q)) {
    throw new e2e.error.InvalidArgumentsError(
        'Field element should be smaller than modulus.');
  }
  // This doesn't check that modulus is actually a prime, but let's assume that
  // that has been taken care by the caller.
  this.q = q;
  this.x = x.cloneWithSize(q.getSize());
};


/**
 * The value of this element. It should be in [0, modulus - 1].
 * @type {!e2e.BigNum}
 */
e2e.ecc.Element.prototype.x;


/**
 * The modulus of the prime field. It should be a prime.
 * @type {!e2e.BigPrimeNum}
 */
e2e.ecc.Element.prototype.q;


/**
 * Returns a copy of this element.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.clone = function() {
  return new e2e.ecc.Element(this.q,
      this.x.clone());
};


/**
 * Copies conditionally.
 * @param {!e2e.ecc.Element} a
 * @param {number} mask
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.copyConditionally = function(a, mask) {
  goog.asserts.assert(mask === 0 || mask === -1);
  mask = mask | 0;
  var maxLen = e2e.fixedtiming.max(this.x.n.length, a.x.n.length);
  var tmp;
  for (var i = 0; i < maxLen; ++i) {
    tmp = mask & (this.x.n[i] ^ a.x.n[i]);
    this.x.n[i] ^= tmp;
  }
  return this;
};


/**
 * Returns a new element that is the inverse of this.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.inverse = function() {
  return new e2e.ecc.Element(this.q,
      this.q.modInverse(this.x));
};


/**
 * Returns a new element that is the negative of this.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.negate = function() {
  return new e2e.ecc.Element(this.q,
      this.q.modSubtract(e2e.BigNum.ZERO, this.x));
};


/**
 * Adds another element to this, and returns the sum.
 * @param {!e2e.ecc.Element} that The element to add.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.add = function(that) {
  goog.asserts.assert(that.q.isEqual(this.q),
      'Cannot add: invalid field element.');
  return new e2e.ecc.Element(this.q,
      this.q.modAdd(this.x, that.x));
};


/**
 * Subtracts this by another element, and returns the result.
 * @param {!e2e.ecc.Element} that The element to substract.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.subtract = function(that) {
  goog.asserts.assert(that.q.isEqual(this.q),
      'Cannot subtract: invalid field element.');
  return new e2e.ecc.Element(this.q,
      this.q.modSubtract(this.x, that.x));
};


/**
 * Multiplies an element with this, and returns the product.
 * @param {!e2e.ecc.Element} that The element to multiply.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.multiply = function(that) {
  goog.asserts.assert(that.q.isEqual(this.q),
      'Cannot add: invalid field element.');
  return new e2e.ecc.Element(this.q,
      this.q.modMultiply(this.x, that.x));
};


/**
 * Calculates this ^ power (mod this.q)
 * @param {!e2e.BigNum} power
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.power = function(power) {
  return new e2e.ecc.Element(this.q,
      this.q.modPower(this.x, power));
};


/**
 * Squares this and return the result.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.square = function() {
  return new e2e.ecc.Element(this.q,
      this.q.modMultiply(this.x, this.x));
};


/**
 * Compares another element with this. Returns true if equal.
 * @param {!e2e.ecc.Element} that The element to compare.
 * @return {boolean}
 */
e2e.ecc.Element.prototype.isEqual = function(that) {
  return this.x.isEqual(that.x) && this.q.isEqual(that.q);
};


/**
 * Shifts right and return the new element.
 * @param {number} n Number of bits to shift.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.shiftRight = function(n) {
  var a = this.x;
  for (var i = 0; i < n; i++) {
    if (a.isOdd()) {
      a = a.add(this.q);
    }
    a = a.shiftRight(1);
  }
  return new e2e.ecc.Element(this.q, a);
};


/**
 * Shifts left and return the new element.
 * @param {number} n Number of bits to shift.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.Element.prototype.shiftLeft = function(n) {
  var a = this.x;
  for (var i = 0; i < n; i++) {
    a = this.q.modAdd(a, a);
  }
  return new e2e.ecc.Element(this.q, a);
};


/**
 * Returns the value of this element.
 * @return {!e2e.BigNum}
 */
e2e.ecc.Element.prototype.toBigNum = function() {
  return this.x;
};


// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Generic abstract class representing an elliptic curve
 * defined over a prime field.
 *
 * @author thaidn@google.com (Thai Duong).
 * @author fy@google.com (Frank Yellin).
 */

goog.provide('e2e.ecc.curve.Curve');

goog.require('e2e.BigNum');
goog.require('e2e.ecc.Element');



/**
 * Constructs a generic elliptic curve defined over a prime field.
 *
 * @param {!e2e.BigPrimeNum} q The modulus of the prime field.
 * @constructor
 */
e2e.ecc.curve.Curve = function(q) {
  /**
   * The modulus of the prime field. It should be a prime.
   * @type {!e2e.BigPrimeNum}
   */
  this.q = q;

  /**
   * 0 in the underlying prime field
   * @type {!e2e.ecc.Element}
   */
  this.ZERO = this.elementFromByteArray([0]);

  /**
   * 1 in the underlying prime field
   * @type {!e2e.ecc.Element}
   */
  this.ONE = this.elementFromByteArray([1]);

  /**
   * 2 in the underlying prime field
   * @type {!e2e.ecc.Element}
   */
  this.TWO = this.elementFromByteArray([2]);

  /**
   * 3 in the underlying prime field
   * @type {!e2e.ecc.Element}
   */
  this.THREE = this.elementFromByteArray([3]);
};


/**
 * Converts a byte array to a point on the curve.
 * @param {!e2e.ByteArray} p A byte representation of a point.
 * @return {!e2e.ecc.point.Point}
 */
e2e.ecc.curve.Curve.prototype.pointFromByteArray = goog.abstractMethod;


/**
 * Returns the key size for this curve
 * @return {number}
 */
e2e.ecc.curve.Curve.prototype.keySizeInBits = goog.abstractMethod;


/**
 * Constructs a new element from a byte array.
 * @param {!e2e.ByteArray} bytes The value of the new element,
 *     represented in big-endian format.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.curve.Curve.prototype.elementFromByteArray = function(bytes) {
  return new e2e.ecc.Element(this.q, new e2e.BigNum(bytes));
};


/**
 * Constructs a new element from an integer.  The integer must be in the range
 * accepted by e2e.BigNum.fromInteger
 * @param {number} value
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.curve.Curve.prototype.elementFromInteger = function(value) {
  var bignum = e2e.BigNum.fromInteger(value);
  return new e2e.ecc.Element(this.q, bignum);
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Abstact representation of a point on a generic elliptic curve
 * defined over a prime field.
 *
 * @author thaidn@google.com (Thai Duong).
 * @author fy@google.com (Frank Yellin).
 */

goog.provide('e2e.ecc.point.Point');



/**
 * Constructs a point on a generic elliptic curve.
 * @param {!e2e.ecc.curve.Curve} curve The curve.
 * @constructor
 */
e2e.ecc.point.Point = function(curve) {
  /**
   * The curve on which this point is defined.
   * @type {!e2e.ecc.curve.Curve}
   */
  this.curve = curve;
};


/**
 * Returns the x coordinate of this point.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.point.Point.prototype.getX = goog.abstractMethod;


/**
 * Returns the y coordinate of this point.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.point.Point.prototype.getY = goog.abstractMethod;


/**
 * Converts this point to a byte array.
 * @param {boolean=} opt_compressed Return compressed form if true.
 * @return {!e2e.ByteArray}
 */
e2e.ecc.point.Point.prototype.toByteArray = goog.abstractMethod;


/**
 * Returns true if this is the identity point
 * @return {boolean}
 */
e2e.ecc.point.Point.prototype.isIdentity = goog.abstractMethod;


/**
 * Multiplies this with a scalar, and return the new point. This operation
 *     dominates the running time of most ECC protocols.
 * @param {!e2e.BigNum} k The scalar to multiply this point with.
 * @return {!e2e.ecc.point.Point}
 */
e2e.ecc.point.Point.prototype.multiply = goog.abstractMethod;


/**
 * Create a fast multiply table on-the-fly and attach it to this Point.
 */
e2e.ecc.point.Point.prototype.initializeForFastMultiply = goog.abstractMethod;

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Representation of a point on the elliptic curve Curve25519.
 * Formulas are provided by
 *     http://cr.yp.to/ecdh/curve25519-20051115.pdf
 *
 * @author fy@google.com (Frank Yellin).
 */

goog.provide('e2e.ecc.point.Curve25519');

goog.require('e2e.BigNum');
goog.require('e2e.ecc.point.Point');
goog.require('goog.asserts');



/**
 * Constructs a point on the elliptic curve Curve25519 defined over a
 * prime field.
 * @param {!e2e.ecc.curve.Curve} curve The curve.
 * @param {!e2e.ecc.Element} x The x Jacobian coordinate.
 * @param {!e2e.ecc.Element=} opt_z The optional z Jacobian coordinate.
 * @constructor
 * @extends {e2e.ecc.point.Point}
 */
e2e.ecc.point.Curve25519 = function(curve, x, opt_z) {
  e2e.ecc.point.Curve25519.base(
      this, 'constructor', curve);
  var z = opt_z || curve.ONE;
  goog.asserts.assert(!x.isEqual(curve.ZERO) || !z.isEqual(curve.ZERO),
      '(0,0) point is undefined');
  /**
   * The x Jacobian projective coordinate of this.
   * @type {!e2e.ecc.Element}
   */
  this.x = x;

  /**
   * The z Jacobian projective coordinate of this.
   * @type {!e2e.ecc.Element}
   */
  this.z = z;

  /**
   * The equivalent affine Point.
   * @type {e2e.ecc.point.Curve25519}
   */
  this.affine = this.z.isEqual(curve.ONE) ? this : null;
};
goog.inherits(e2e.ecc.point.Curve25519, e2e.ecc.point.Point);


/** @override */
e2e.ecc.point.Curve25519.prototype.getX = function() {
  goog.asserts.assert(!this.isInfinity(),
      'Cannot obtain the affine coordinate of the point at infinity.');
  return this.getAffine_().x;
};


/**
 * Returns the x affine coordinate of this, with infinity converted to 0.
 * @return {!e2e.ecc.Element}
 */
e2e.ecc.point.Curve25519.prototype.getX0 = function() {
  if (this.isInfinity()) {
    return this.curve.ZERO;
  } else {
    return this.getAffine_().x;
  }
};


/**
 * Returns the equivalent affine point.
 * @return {!e2e.ecc.point.Curve25519}
 * @private
 */
e2e.ecc.point.Curve25519.prototype.getAffine_ = function() {
  if (this.affine_ == null) {
    var x = this.x.multiply(this.z.inverse());
    this.affine_ = new e2e.ecc.point.Curve25519(this.curve, x);
  }
  return this.affine_;
};


/**
 * Returns true if this is the point at infinity.
 * @return {boolean}
 */
e2e.ecc.point.Curve25519.prototype.isInfinity = function() {
  // Infinity is the only Point with z == 0.
  return this.z.isEqual(this.curve.ZERO);
};


/** @override */
e2e.ecc.point.Curve25519.prototype.isIdentity = function() {
  // Infinity is identity point.
  return this.isInfinity();
};


/**
 * Compares another point with this. Return true if they are the same.
 * @param {!e2e.ecc.point.Point} that The point to compare.
 * @return {boolean}
 */
e2e.ecc.point.Curve25519.prototype.isEqual = function(that) {
  if (this.isInfinity()) {
    return that.isInfinity();
  }
  if (that.isInfinity()) {
    return this.isInfinity();
  }
  // x and y coordinates must be equal
  return this.x.multiply(that.z).isEqual(that.x.multiply(this.z));
};


/**
 * @override
 */
e2e.ecc.point.Curve25519.prototype.toByteArray = function(
    opt_compressed) {
  var X = this.getX0().toBigNum().toByteArray().reverse();
  var fieldSize = Math.ceil(this.curve.keySizeInBits() / 8);
  // Pads X if needed.
  while (X.length < fieldSize) {
    X.push(0);
  }
  return X;
};


/** @override */
e2e.ecc.point.Curve25519.prototype.initializeForFastMultiply =
    function() {
};


/**
 * Doubles this, and return the result as a new point.
 * @return {!e2e.ecc.point.Curve25519}
 * @private
 */
e2e.ecc.point.Curve25519.prototype.twice_ = function() {
  var t1 = this.x.add(this.z).square();
  var t2 = this.x.subtract(this.z).square();
  var t3 = t1.subtract(t2);
  var xOut = t1.multiply(t2);
  var zOut = t3.multiply(t1.add(t3.multiply(this.curve.A4)));
  return new e2e.ecc.point.Curve25519(this.curve, xOut, zOut);
};


/**
 * Returns the value of this + that as a new point.  This method must not
 * be called if delta is infinity (i.e. this == that) or if delta is the zero
 * point.
 *
 * @param {!e2e.ecc.point.Curve25519} that
 * @param {!e2e.ecc.point.Curve25519} delta this - that
 * @return {!e2e.ecc.point.Curve25519}
 * @private
 */
e2e.ecc.point.Curve25519.prototype.add_ = function(that, delta) {
  // This formula work only if that - this is neither zero nor infinity
  goog.asserts.assert(!delta.x.isEqual(this.curve.ZERO));
  goog.asserts.assert(!delta.z.isEqual(this.curve.ZERO));
  var t1 = (this.x.subtract(this.z)).multiply(that.x.add(that.z));
  var t2 = (this.x.add(this.z)).multiply(that.x.subtract(that.z));
  var xOut = (t1.add(t2)).square().multiply(delta.z);
  var zOut = (t1.subtract(t2)).square().multiply(delta.x);
  return new e2e.ecc.point.Curve25519(this.curve, xOut, zOut);
};


/**
 * @override
 */
e2e.ecc.point.Curve25519.prototype.multiply = function(k) {
  // Normally, k > 0 and this isn't infinity or the zero point.  They are
  // included here for completeness.
  if (this.isInfinity() || k.isEqual(e2e.BigNum.ZERO)) {
    return this.curve.INFINITY;
  }
  if (this.x.isEqual(this.curve.ZERO)) {
    // The zero point has order 2.  It either returns itself or infinity.
    return k.isOdd() ? this : this.curve.INFINITY;
  }
  var m = [this, this.twice_()];
  for (var i = k.getBitLength() - 2; i >= 0; --i) {
    // Assertion.  Let j = k >>> i;  Then
    // m = j * this and m1 = (j + 1) * this;
    var bit = k.isBitSet(i) | 0;  // force boolean to 0 or 1.
    // Following code is cryptic because it has no branches.
    // If bit = 0, we want
    //      m[0] = old m[0] + old m[0];
    //      m[1] = old m[0] + old m[1];
    // If bit = 1, we want
    //      m[0] = old m[0] + old m[1];
    //      m[1] = old m[1] + old m[1]
    m[1 - bit] = m[0].add_(m[1], this);
    m[bit] = m[bit].twice_();
  }
  return m[0];
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Representation of the DJB elliptic curve y^2 = x^3 + A x^2 + x
 * defined over a prime field.
 *
 * @author fy@google.com (Frank Yellin).
 */
goog.provide('e2e.ecc.curve.Curve25519');

goog.require('e2e.ecc.curve.Curve');
goog.require('e2e.ecc.point.Curve25519');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * Constructs a DJB elliptic curve defined over a prime field.
 *
 * @constructor
 * @extends {e2e.ecc.curve.Curve}
 * @param {!e2e.BigPrimeNum} q The modulus of the prime field.
 */
e2e.ecc.curve.Curve25519 = function(q) {
  e2e.ecc.curve.Curve25519.base(this, 'constructor', q);

  // The A constant for Curve25519
  var a = 486662;

  /**
   * The A value in the elliptic equation. It's an element in Fq.
   * @type {!e2e.ecc.Element}
   * @const
   */
  this.A = this.elementFromInteger(a);

  /**
   * (A - 2)/4
   * @type {!e2e.ecc.Element}
   * @const
   */
  this.A4 = this.elementFromInteger((a - 2) / 4);

  /**
   * The Point with X coordinate 9.
   * Used as a base point in some calculations.
   * @type {!e2e.ecc.point.Curve25519}
   * @const
   */
  this.POINT_AT_NINE = new e2e.ecc.point.Curve25519(this,
      this.elementFromInteger(9));

  /**
   * The INFINITY point on the curve
   * @type {!e2e.ecc.point.Curve25519}
   * @const
   */
  this.INFINITY = new e2e.ecc.point.Curve25519(
      this, this.ONE, this.ZERO);
};
goog.inherits(e2e.ecc.curve.Curve25519, e2e.ecc.curve.Curve);


/** @override */
e2e.ecc.curve.Curve25519.prototype.pointFromByteArray = function(p) {
  // TODO(user): Apparently DJB's reference implementation accepted
  // any 256-bit representation of an integer, and just used its value mod q.
  // The following code will give an error if value >= q, and in particular if
  // the high bit of p[31] is set.
  goog.asserts.assert(p.length == 32, 'Point length must be 32 bytes');
  p = goog.array.slice(p, 0).reverse();
  var x = this.elementFromByteArray(p);
  return new e2e.ecc.point.Curve25519(this, x);
};


/** @override */
e2e.ecc.curve.Curve25519.prototype.keySizeInBits = function() {
  return 256;
};


/**
 * Returns true if this curve is equal to another curve.
 * @param {!e2e.ecc.curve.Curve25519} that The curve to compare.
 * @return {boolean}
 */
e2e.ecc.curve.Curve25519.prototype.isEqual = function(that) {
  if (this === that) {
    return true;
  }
  return this.q.isEqual(that.q) && this.A.isEqual(that.A);
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview All error types that the e2e module can throw.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.error.DecryptError');
goog.provide('e2e.openpgp.error.Error');
goog.provide('e2e.openpgp.error.InvalidArgumentsError');
goog.provide('e2e.openpgp.error.MissingPassphraseError');
goog.provide('e2e.openpgp.error.ParseError');
goog.provide('e2e.openpgp.error.PassphraseError');
goog.provide('e2e.openpgp.error.SerializationError');
goog.provide('e2e.openpgp.error.SignatureError');
goog.provide('e2e.openpgp.error.UnsupportedError');
goog.provide('e2e.openpgp.error.WrongPassphraseError');

goog.require('goog.debug.Error');


/**
 * The base class for End to End OpenPGP errors.
 * @param {*=} opt_msg The custom error message.
 * @constructor
 * @extends {goog.debug.Error}
 */
e2e.openpgp.error.Error = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.openpgp.error.Error, goog.debug.Error);


/**
 * Class to represent all parsing errors.
 * @param {*=} opt_msg The custom error message.
 * @constructor
 * @extends {e2e.openpgp.error.Error}
 */
e2e.openpgp.error.ParseError = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.openpgp.error.ParseError, e2e.openpgp.error.Error);


/**
 * Class to represent required signature verification errors.
 * @param {*=} opt_msg The custom error message.
 * @constructor
 * @extends {e2e.openpgp.error.Error}
 */
e2e.openpgp.error.SignatureError = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.openpgp.error.SignatureError,
    e2e.openpgp.error.Error);


/**
 * Class to represent all decryption errors.
 * @param {*=} opt_msg The custom error message.
 * @constructor
 * @extends {e2e.openpgp.error.Error}
 */
e2e.openpgp.error.DecryptError = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.openpgp.error.DecryptError, e2e.openpgp.error.Error);


/**
 * Class to represent all serialization errors.
 * @param {*=} opt_msg The custom error message.
 * @constructor
 * @extends {e2e.openpgp.error.Error}
 */
e2e.openpgp.error.SerializationError = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.openpgp.error.SerializationError,
              e2e.openpgp.error.Error);


/**
 * Exception used when a function receives an invalid argument.
 * @param {string} message The message with the error details.
 * @constructor
 * @extends {e2e.openpgp.error.Error}
*/
e2e.openpgp.error.InvalidArgumentsError = function(message) {
  goog.base(this, message);
};
goog.inherits(e2e.openpgp.error.InvalidArgumentsError,
              e2e.openpgp.error.Error);


/**
 * Exception used when the client requests an unimplemented feature.
 * @param {string} message The message with the error details.
 * @constructor
 * @extends {e2e.openpgp.error.Error}
*/
e2e.openpgp.error.UnsupportedError = function(message) {
  goog.base(this, message);
};
goog.inherits(e2e.openpgp.error.UnsupportedError,
              e2e.openpgp.error.Error);


/**
 * Exception used for all passphrase errors.
 * @param {string} message The message with the error details.
 * @constructor
 * @extends {e2e.openpgp.error.Error}
*/
e2e.openpgp.error.PassphraseError = function(message) {
  goog.base(this, message);
};
goog.inherits(e2e.openpgp.error.PassphraseError,
              e2e.openpgp.error.Error);


/**
 * Exception used when an encrypted cipher needs a passphrase.
 * @constructor
 * @extends {e2e.openpgp.error.PassphraseError}
*/
e2e.openpgp.error.MissingPassphraseError = function() {
  goog.base(this, 'Missing passphrase.');
};
goog.inherits(e2e.openpgp.error.MissingPassphraseError,
              e2e.openpgp.error.PassphraseError);


/**
 * Exception used when an encrypted cipher has the wrong passphrase.
 * @constructor
 * @extends {e2e.openpgp.error.PassphraseError}
*/
e2e.openpgp.error.WrongPassphraseError = function() {
  goog.base(this, 'Wrong passphrase.');
};
goog.inherits(e2e.openpgp.error.WrongPassphraseError,
              e2e.openpgp.error.PassphraseError);

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview
 * Fast implementation of a%b for specific values of b that can take advantage
 * of special properties of that number.
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('e2e.FastModulus');
goog.provide('e2e.FastModulus.FFFFFF');
goog.provide('e2e.FastModulus.Ox1000000');


goog.require('e2e.BigNum');
goog.require('e2e.openpgp.error.InvalidArgumentsError');
goog.require('goog.asserts');



/**
 * Classes that implement FastModulus have a residue(value) method that can
 * quickly calculate value % modulus for a specific modulus.
 *
 * @interface
 */
e2e.FastModulus = function() {};


/**
 * Calculates value % modulus, for some fixed value of modulus.
 *
 * @param {!e2e.BigNum} value The value to take the residue of.
 * @return {!e2e.BigNum}
 */
e2e.FastModulus.prototype.residue = function(value) {};


/**
 * If true, the fastest way to calculate
 *      (a * b) % modulus
 * is to call
 *      this.residue(a.multiply(b)).
 * If false, Montgomery reduction is faster.
 *
 * @type {boolean}
 */
e2e.FastModulus.prototype.useForMultiplication;



/**
 * This class is the common superclass of FastModulus.FFFFFF and
 * FastModulus.Ox1000000, which have almost identical residue() methods.
 *
 * @constructor
 * @implements {e2e.FastModulus}
 * @param {!e2e.BigNum} modulus The modulus.
 * @param {number} shift The amount the modulus and dividend need to be shifted
 *     to be in the correct special form.
 */
e2e.FastModulus.SpecialForm = function(modulus, shift) {
  /** @override */
  this.useForMultiplication = false;

  /**
   * The modulus.
   * @private {!e2e.BigNum}
   */
  this.modulus_ = modulus;

  /**
   * The modulus shifted so that its high word has a special form
   * @private {!e2e.BigNum}
   */
  this.shiftedModulus_ = modulus.shiftLeft(shift);

  /**
   * Amount by which modulus_ is shifted left to get shiftedModulus_ .
   * @private {number}
   */
   this.shift_ = shift;
};


/** @override */
e2e.FastModulus.SpecialForm.prototype.residue = function(value) {
  var divisor = this.shiftedModulus_;
  var dividend = this.shift_ == 0 ?
      value.clone() : value.shiftLeft(this.shift_);
  var length = divisor.n.length;
  dividend.n.push(0);
  for (var delta = dividend.n.length - length - 1; delta >= 0; --delta) {
    // LOOP INVARIANT:  (where base = 2^24)
    //       dividend / (divisor * base^delta) < base.
    // Get the tentative quotient digit.  The actual quotient must either be
    // qhat or qhat - 1.
    var qhat = this.calculateQuotient(dividend, length + delta);
    // Subtract qhat * divisor * b^delta
    var accu = 0;
    for (var i = 0; i <= length; i++) {
      accu += dividend.n[i + delta] - (divisor.n[i] | 0) * qhat;
      dividend.n[i + delta] = accu & e2e.BigNum.BASE_MASK;
      accu = Math.floor(accu / e2e.BigNum.BASE);
    }
    goog.asserts.assert(accu == 0 || accu == -1);
    // Add divisor * b^delta back if the result went negative
    var mask = accu;
    accu = 0;
    for (var i = 0; i <= length; i++) {
      accu += dividend.n[i + delta] + (divisor.n[i] & mask);
      dividend.n[i + delta] = accu & e2e.BigNum.BASE_MASK;
      // accu is sum of two 24-bit values, so >>= is okay
      accu >>= e2e.BigNum.BASE_LEN;
    }
  }
  return dividend.shiftRight(this.shift_).cloneWithSize(
      this.modulus_.getSize());
};

/**
 * Returns a tentative quotient digit.  The correct quotient digit is either the
 * value returned by this method, or one less than the value returned.
 *
 * When this method is called, the loop invariant guarantees that
 *     dividend / (divisor * base ^ delta) < base    [base = 2^24]
 * and the correct quotient digit we seek is
 *     q = floor(dividend / (divisor * base ^ delta))
 * This method returns either q or q + 1, and always returns a value less
 * than base.
 *
 * @param {!e2e.BigNum} dividend The current dividend
 * @param {number} deltaPlusLength delta + length, where delta is the amount by
 *     which we are currently shifting the divisor, and length is the length, in
 *     base 2^24 words, of the divisor.
 */
e2e.FastModulus.SpecialForm.prototype.calculateQuotient =
    goog.abstractMethod;



/**
 * An implementation of FastModulus that handles the case in which the high
 * 24 bits of the modulus are all 1s.
 *
 * This is useful for the modulus and size of the NIST elliptic curves.
 *
 * We find the residue by repeatedly subtracting multiples of the divisor from
 * the dividend.  Since the first digit of the divisor is base - 1, the first
 * digit of the quotient must either be the first digit of the dividend, or one
 * greater.  We use one greater than the first digit as a tentative multiplier
 * and subtract the multiplier times the divisor from the dividend.  If the
 * result is negative, we add the divisor back in.
 *
 * Here is a base 100 example of 57998823 % 9963
 *   57 99 88 23
 *  -57 78 54            subtract divisor * 5800
 *   ===========
 *      21 34 23
 *     -21 91 86         subtract divisor * 22
 *         99 63         result went negative, add divisor back in
 *  ============
 *         42 00
 *
 * @constructor
 * @extends {e2e.FastModulus.SpecialForm}
 * @param {!e2e.BigNum} modulus The value of the BigNum for which we are
 *     building a fast modulus function.  Its 24 high order bits must be 1.
 */
e2e.FastModulus.FFFFFF = function(modulus) {
  var n = modulus.getBitLength();
  for (var i = n - e2e.BigNum.BASE_LEN; i < n; i++) {
    if (!modulus.isBitSet(i)) {
      throw new e2e.openpgp.error.InvalidArgumentsError(
          'Bignum must start with 0xFFFFFF.');
    }
  }
  var shift = (((n + e2e.BigNum.BASE_LEN - 1) /
      e2e.BigNum.BASE_LEN) | 0) * e2e.BigNum.BASE_LEN - n;
  e2e.FastModulus.FFFFFF.base(this, 'constructor', modulus, shift);
};
goog.inherits(e2e.FastModulus.FFFFFF,
    e2e.FastModulus.SpecialForm);


/** @override */
e2e.FastModulus.FFFFFF.prototype.calculateQuotient =
function(dividend, deltaPlusLength) {
  // Nomenclature: b = 2^24,  Δ = delta, u = dividend, v = divisor, L = length
  // We are trying to find the next quotient digit q < b such that
  //     q = floor(u / (v b^Δ))
  // Since the high digit of the v is b-1,
  //     (1 - 1/b) b^L ≤ v < b^L.
  // Let t be the digit in the b^(L + Δ) place of u, so that
  //     t b^(L + Δ) ≤ u ≤ (t + 1) b^(L + Δ)
  // We know that t is a plausible quotient digit, because
  //     t v b^Δ < t b^L b^Δ = t^(L + Δ) ≤ u
  // We that that t + 2 is not a plausible quotient digit
  // because either t ≥ b - 2 (from the loop invariant q < b) or
  //     (t + 2) v b^Δ ≥ (t + 2)(1 - 1/b) b^(L + Δ)
  //                   = (t + 1 + (b - t - 2)/b) b^(L + Δ)
  //                   ≥ (t + 1) b^(L + Δ) > u
  return Math.min(
      dividend.n[deltaPlusLength] + 1, e2e.BigNum.BASE_MASK);
};



/**
 * An implementation of FastModulus that handles the case in which the high
 * bits of the modulus are a 1 followed by 24 zeros.
 *
 * This is useful for the order of the base point of Curve25519 and Ed25519.
 *
 * We find the residue by repeatedly subtracting multiples of the divisor from
 * the dividend.  Since the first digit of the divisor is 1, the first digit
 * of the quotient must either be the first digit of the dividend or one less
 * than that.  We use the the dividend digit as the multiplier and subtract
 * the multiplier times the divisor from the dividend.  If the result is
 * negative, we add the divisor back in.  [In rare cases, we end up with a
 * uncleared "1" from the previous digit, always followed by a 0.  The divisor
 * is base - 1 when that happens.  See example below.]
 *
 * Here is a base 100 example of 7647508816 % 10063
 *   76 47 50 88 16
 *  -76 47 88            subtract 760000 * 10063
 *    1 00 63            result went negatve, add back 10000 * 10063
 *  ===============
 *    1 00 25 88 16
 *     -99 62 37         hanging 100; subtract 99.00 * 1.00.63
 *  ===============
 *         63 51 16
 *        -63 39 69      subtract 63 * 1.00.63
 *  ===============
 *            11 47
 *
 * @constructor
 * @extends {e2e.FastModulus.SpecialForm}
 * @param {!e2e.BigNum} modulus The value of the BigNum for which we are
 *     building a fast modulus function.  Its 24 high order bits must be 1.
 */
e2e.FastModulus.Ox1000000 = function(modulus) {
  var n = modulus.getBitLength();
  for (var i = n - e2e.BigNum.BASE_LEN - 1; i < n - 1; i++) {
    if (modulus.isBitSet(i)) {
      throw new e2e.openpgp.error.InvalidArgumentsError(
          'Bignum must start with e2e.BigNum.BASE .');
    }
  }
  // expectedBitLength is the smallest value >= bitLength such that
  // expectedBitLength % e2e.BigNum.BASE_LEN == 1
  var expectedBitLength = (((n + e2e.BigNum.BASE_LEN - 2) /
      e2e.BigNum.BASE_LEN) | 0) * e2e.BigNum.BASE_LEN + 1;
  var shift = expectedBitLength - n;
  e2e.FastModulus.Ox1000000.base(this, 'constructor', modulus, shift);
};
goog.inherits(e2e.FastModulus.Ox1000000,
    e2e.FastModulus.SpecialForm);


/** @override */
e2e.FastModulus.Ox1000000.prototype.calculateQuotient =
function(dividend, deltaPlusLength) {
  // Nomenclature: b = 2^24,  Δ = delta, u = dividend, v = divisor, L = length
  // We are trying to find the next quotient digit q < b such that
  //     q = floor(u / (v b^Δ))
  // Since the high digit of v is 1, and the next digit is 0:
  //     b^(L - 1) ≤ v < (1 + 1/b) b^(L - 1)
  // If u ≥ b^(L + Δ), the quotient digit q must be b - 1, since q < b and
  //     (b - 1) v b^Δ < (b - 1)(1 + 1/b) b^(L - 1) b^Δ
  //                   = (b - 1 + (b - 1)/b) b^(L - 1) b^Δ
  //                   < b b^(L + Δ - 1) = b^(L + Δ) ≤ v
  // Otherwise, let t be the digit in the b^(length + Δ - 1) place of u, i.e.
  //     t b^(L + Δ - 1) ≤ u < (t + 1) b^(L + Δ - 1)
  // We know that t + 1 is too large to be the quotient digit, because
  //     (t + 1) v b^Δ ≥ (t + 1) b^(L - 1) b^Δ > u
  // We also know that t - 1 is a possible quotient digit, because
  //     (t - 1) v b^Δ < (t - 1)(1 + 1/b) b^(L + Δ - 1)
  //                   = (t - 1 + (t - 1)/b) b^(L + Δ - 1)
  //                   < t b^(L + Δ - 1) ≤ u
  // Hence, the quotient must be t or t - 1.
  goog.asserts.assert(dividend.n[deltaPlusLength] == 0 ||
      dividend.n[deltaPlusLength - 1] == 0,
      'Dividend too large for invariant');
  var qhat = dividend.n[deltaPlusLength] * e2e.BigNum.BASE_MASK +
             dividend.n[deltaPlusLength - 1];
  return qhat;
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview
 *
 * Fast modulus implementions for the two NIST primes P_256 and P_384 that take
 * advantage of special properties of those numbers.
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('e2e.ecc.fastModulus.Nist');
goog.provide('e2e.ecc.fastModulus.Nist.P_256');
goog.provide('e2e.ecc.fastModulus.Nist.P_384');

goog.require('e2e.BigNum');
goog.require('e2e.FastModulus');
goog.require('goog.asserts');



/**
 * An abstract implementation of FastModulus that handles the common code
 * between the two NIST primes P_256 and P_384.
 *
 * @constructor
 * @implements {e2e.FastModulus}
 * @param {!e2e.BigPrimeNum} modulus The large prime number for which
 *     we are building a fast modulus function.
 */
e2e.ecc.fastModulus.Nist = function(modulus) {
  /**
   * The modulus.
   * @private {!e2e.BigPrimeNum }
   */
  this.modulus_ = modulus;
};


/** @override */
e2e.ecc.fastModulus.Nist.prototype.useForMultiplication = true;


/**
 * Number of words in the 2^32 representation of this.modulus_
 * @private {number}
 */
e2e.ecc.fastModulus.Nist.prototype.modulusLength_;


/**
 * A precomputed value such that
 *    this.residue((2^32)^modulus_length_) = sum(small_residue[j] * (2^32)^j)
 * where small_residue_.length <= modulusLength_ and each of elements is a
 * small integer.
 * @private {Int8Array}
 */
e2e.ecc.fastModulus.Nist.prototype.smallResidue_;


/** @override */
e2e.ecc.fastModulus.Nist.prototype.residue = function(value) {
  var modLength = this.modulusLength_;
  var doubleModLength = 2 * modLength;
  var temp = value.toByteArray();
  temp.reverse();
  // Parse the number into 32-bit words
  var words = [];
  for (var i = 0, j = 0; i < doubleModLength || j < temp.length;
       i++, j += 4) {
    words[i] = (temp[j] | 0) + (temp[j + 1] | 0) * 0x100 +
        (temp[j + 2] | 0) * 0x10000 + (temp[j + 3] | 0) * 0x1000000;
  }
  goog.asserts.assert(words.length <= doubleModLength);
  var outs = this.fastModulusSmall(words);
  goog.asserts.assert(outs.length == modLength);

  // Normalize the values so that they are in the range 0 <= out[i] < 2^32 - 1
  this.normalize_(outs);

  // Break 32-bit words into 24-bit words used internally by BigNum, and create
  // the BigNum
  var resultWords = [];
  for (var i = 0; i < modLength; i += 3) {
    var t0 = outs[i];
    var t1 = outs[i + 1] || 0;
    var t2 = outs[i + 2] || 0;
    resultWords.push(t0 & 0xFFFFFF,
        ((t0 >> 24) & 0xFF) | ((t1 & 0xFFFF) << 8),
        ((t1 >> 16) & 0xFFFF) | ((t2 & 0xFF) << 16),
        (t2 >> 8) & 0xFFFFFF);
  }
  var result = e2e.BigNum.fromInternalArray(resultWords);
  // We may still have to do one final subtraction
  return result
      .subtractIfGreaterOrEqual(this.modulus_)
      .setSize(this.modulus_.getSize());
};


/**
 * Converts a number of length 2*modulusLength_ 32-bit words into an
 * equivalent value, mod this.modulus_, whose length is modulusLength_.
 * The elements in the result are not guaranteed to be in the range
 *     0 <= x < 2^32, but will
 * definitely be in the range
 *     -10 * 2^32 <= x < 10 * 10^32.
 *
 * @param {Array.<number>} words input words.  An array whose length is
 *     2 * modulusLength and in which each element is in [0, 2^32 - 1)
 * @return {Array.<number>} An array whose length is modusLength and is
 *     equivalent (mod this.modulus) to the input value.
 * @protected
 */
e2e.ecc.fastModulus.Nist.prototype.fastModulusSmall =
    goog.abstractMethod;


/**
 * Normalizes the array.
 * Each outs[i] is in the range -10 * 2^32 <= out[i] < 10 * 2^32
 * We normalize to get each value in the range 0 <= out[i] < 2^32 - 1 by
 * moving any overflow or underflow up to the next word
 *
 * @param {!Array.<number>} outs The little-endian representation of the
 *        32-bit words of  a BigNum
 * @private
 */
e2e.ecc.fastModulus.Nist.prototype.normalize_ = function(outs) {
  var modLength = this.modulusLength_;
  for (;;) {
    var U = 0;
    for (var i = 0; i < modLength; i++) {
      var acc = outs[i] + U;
      // Get the low 32 bits of acc
      var lowBits = (acc ^ 0x80000000) + 0x80000000;
      // U = Math.floor(acc / 0x100000000), where acc may be negative
      U = ((acc - lowBits) / 0x100000000) | 0;
      outs[i] = lowBits;
    }
    // U is the overflow/underflow from outs[modLength -1].
    // Let OUTS be the value represented by outs[]
    // If U == 0, then OUTS is equal to the original argument, (mod modulus_).
    if (U == 0) {
      return;
    }
    var residue = this.smallResidue_;
    // The result we have represented is
    //      U * (2^32)^modLength + OUTS
    // By definition, (all arithmetic is modulo (this.modulus_)
    //      sum(residue[j] * (2^32)^j) = (2^32)^modLength
    // so we can subtract multiples of
    //      (2^32)^modLength - sum(residue[j] * (2^32)^j)
    // Multiplying by U, we have
    //      U * (2^32)^modLength - sum(U * residue[j] * (2^32)^j)
    // So we can subtract this quantity from the actual amount we have
    // represented and get an equivalent value:
    //      OUTS + sum(U * residue[j] * (2^32)^j)
    //
    // For example, with P256, we have that (mod P_256)
    //      U * (2^256) + OUTS
    //   =  U * (2^256) + OUTS - U * (2^256 - 2^224 + 2^192 + 2^96 - 1)
    //   =  OUTS + U * (2^224 - 2^192 - 2^96 + 1)
    var valuesInRange = true;
    for (i = residue.length - 1; i >= 0; i--) {
      var newOut = outs[i] + U * residue[i];
      outs[i] = newOut;
      valuesInRange &= (newOut >= 0 && newOut < 0x100000000);
    }
    if (valuesInRange) {
      // All the values are in the appropriate range, we can can skip another
      // normalization loop.
      return;
    }
    // At least one element of outs[] is out of range, so we repeat the
    // normalization loop
  }
};



/**
 * A concrete subclass of FastModulus that handles the case the special case
 * of the prime modulus P_256.
 *
 * @constructor
 * @extends {e2e.ecc.fastModulus.Nist}
 * @param {!e2e.BigPrimeNum} modulus The large prime number for which
 *     we are building a fast modulus function.  It must be P_256.
 */
e2e.ecc.fastModulus.Nist.P_256 = function(modulus) {
  e2e.ecc.fastModulus.Nist.P_256.base(this, 'constructor', modulus);
  this.modulusLength_ = 8;
  this.smallResidue_ = new Int8Array([1, 0, 0, -1, 0, 0, -1, 1]);
};
goog.inherits(e2e.ecc.fastModulus.Nist.P_256,
    e2e.ecc.fastModulus.Nist);


/** @override */
e2e.ecc.fastModulus.Nist.P_256.prototype.fastModulusSmall = function(
    words) {
  var outs = new Array(8);
  outs[7] = words[7] + 3 * words[15] + words[8] -
      (words[10] + words[11] + words[12] + words[13]);
  outs[6] = words[6] + 3 * words[14] + 2 * words[15] + words[13] -
      (words[8] + words[9]);
  outs[5] = words[5] + 2 * words[13] + 2 * words[14] + words[15] -
      (words[10] + words[11]);
  outs[4] = words[4] + 2 * words[12] + 2 * words[13] + words[14] -
      (words[9] + words[10]);
  outs[3] = words[3] + 2 * words[11] + 2 * words[12] + words[13] -
      (words[15] + words[8] + words[9]);
  outs[2] = words[2] + words[10] + words[11] -
      (words[13] + words[14] + words[15]);
  outs[1] = words[1] + words[9] + words[10] -
      (words[12] + words[13] + words[14] + words[15]);
  outs[0] = words[0] + words[8] + words[9] -
      (words[11] + words[12] + words[13] + words[14]);
  return outs;
};



/**
 * A concrete subclass of FastModulus that handles the case the special case
 * of the prime modulus P_384.
 *
 * @constructor
 * @extends {e2e.ecc.fastModulus.Nist}
 * @param {!e2e.BigPrimeNum} modulus The large prime number for which
 *     we are building a fast modulus function.  It must be P_384.
 */
e2e.ecc.fastModulus.Nist.P_384 = function(modulus) {
  e2e.ecc.fastModulus.Nist.P_384.base(this, 'constructor', modulus);
  this.modulusLength_ = 12;
  // this.residue(2^384)
  this.smallResidue_ = new Int8Array([1, -1, 0, 1, 1]);
};
goog.inherits(e2e.ecc.fastModulus.Nist.P_384,
    e2e.ecc.fastModulus.Nist);


/** @override */
e2e.ecc.fastModulus.Nist.P_384.prototype.fastModulusSmall = function(
    words) {
  // http://www.nsa.gov/ia/_files/nist-routines.pdf,
  var outs = new Array(12);
  outs[11] = words[11] + words[23] + words[20] + words[19] - words[22];
  outs[10] = words[10] + words[22] + words[19] + words[18] - words[21];
  outs[9] = words[9] + words[21] + words[18] + words[17] - words[20];
  outs[8] = words[8] + words[20] + words[17] + words[16] - words[19];
  outs[7] = words[7] + words[19] + words[16] + words[15] + words[23] -
      words[18];
  outs[6] = words[6] + 2 * words[23] + words[18] + words[15] + words[14] +
      words[22] - words[17];
  outs[5] = words[5] + 2 * words[22] + words[17] + words[14] + words[13] +
      words[21] + words[23] - words[16];
  outs[4] = words[4] + 2 * words[21] + words[16] + words[13] + words[12] +
      words[20] + words[22] - (words[15] + 2 * words[23]);
  outs[3] = words[3] + words[15] + words[12] + words[20] + words[21] -
      (words[14] + words[22] + words[23]);
  outs[2] = words[2] + words[14] + words[23] - words[13] - words[21];
  outs[1] = words[1] + words[13] + words[22] + words[23] -
      (words[12] + words[20]);
  outs[0] = words[0] + words[12] + words[21] + words[20] - words[23];
  return outs;
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Precomputed powers of the P_256 generator point.
 *
 * This file was generated by looking at the document
 *   e2e/ecc/create_fast_multiply_table.html?curve=256
 * in a web browser, and then copying its output.
 *
 * THIS IS A GENERATED FILE.  DO NOT MODIFY.
 * Generated: Mon Feb 17 2014 13:26:22 GMT-0800 (PST)
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('e2e.ecc.constant.p_256.G_FAST_MULTIPLY_TABLE');


/**
 *
 * The value of G_FastMultiply[i][j] gives the value of
 *     ((16 ** i) * j) * G
 * where G is the NIST-specified point that is a generator for the
 * P_256 curve.
 *
 * Each non-infinite point is represented as [X, Y], where X and Y
 * each represent a bignum as a base 2**24 array of integers in little-endian
 * order.  The point at infinity is represented by {@code null}.
 *
 * @type {!Array.<!Array.<Array.<!Array.<!number>>>>}
 */
e2e.ecc.constant.p_256.G_FAST_MULTIPLY_TABLE = [
  [
    null,
    [ //  1 * (16 ** 0) * G
      [10011286, 3753432, 10548385, 3009331, 228737, 4256375,
       15033252, 16301286, 2900551, 13759201, 27415],
      [12538357, 4220983, 13552566, 7024990, 13513559, 10360363,
       4881423, 9365483, 1736603, 4383486, 20451]
    ],
    [ //  2 * (16 ** 0) * G
      [6723960, 4783175, 3515915, 7860763, 9005538, 1754048,
       197813, 9065016, 216958, 8067213, 31986],
      [7893969, 12033314, 2727428, 3991938, 8236518, 3201978,
       13016948, 2702746, 9359424, 5574875, 1911]
    ],
    [ //  3 * (16 ** 0) * G
      [15203692, 6691782, 8780609, 15707561, 13023009, 15820262,
       9772363, 13170671, 3344964, 14995878, 24267],
      [8212530, 11610018, 4037241, 3690424, 2797622, 10677464,
       13507172, 3623686, 10026878, 6556745, 34612]
    ],
    [ //  4 * (16 ** 0) * G
      [198738, 148587, 15683731, 7886230, 2089691, 2871299,
       6659814, 10497502, 13668283, 4863282, 57939],
      [5167302, 12730136, 351298, 15929056, 16553667, 2979406,
       6281862, 1695726, 6503623, 5724748, 57585]
    ],
    [ //  5 * (16 ** 0) * G
      [13644781, 4853187, 2367829, 2055141, 9208573, 9428975,
       5638246, 14124232, 5325010, 752209, 20825],
      [10579364, 12272893, 8966608, 13948936, 77568, 7939597,
       3587978, 9101759, 4878973, 8235152, 57537]
    ],
    [ //  6 * (16 ** 0) * G
      [2265513, 11200828, 11847344, 15446549, 5010445, 14541570,
       2930839, 9622308, 10772524, 1518198, 45082],
      [13074402, 4739983, 12451196, 1867286, 63344, 227612,
       3013543, 7334926, 3660501, 1078322, 59484]
    ],
    [ //  7 * (16 ** 0) * G
      [8893091, 2650161, 5976070, 11014127, 16382136, 16474238,
       6716417, 2472752, 12548934, 3895200, 36435],
      [15990964, 1738433, 2213214, 13304859, 13055539, 9437267,
       8627957, 7145119, 3348534, 1949152, 29675]
    ],
    [ //  8 * (16 ** 0) * G
      [7320467, 10338779, 14398685, 1035927, 13777048, 5025217,
       2964149, 4211316, 15315027, 7839166, 25305],
      [628094, 682511, 7920212, 12314474, 15553014, 13557922,
       7803239, 5239133, 15325220, 13417873, 44378]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 1) * G
      [2587758, 4687841, 3712491, 16739488, 2636078, 3235789,
       6461494, 9142812, 7029125, 5051274, 30377],
      [9195792, 14512715, 11144861, 1034123, 10067972, 8855685,
       11919646, 7123105, 2041358, 16671028, 43397]
    ],
    [ //  2 * (16 ** 1) * G
      [8311009, 6018346, 14274887, 11961201, 5603285, 12513194,
       5148325, 7095559, 10633930, 13096592, 9079],
      [12112562, 6795741, 1501120, 15529063, 5809869, 1801830,
       15318928, 4165008, 1287225, 4176260, 18337]
    ],
    [ //  3 * (16 ** 1) * G
      [4536010, 10339998, 6401019, 663578, 3052182, 13476124,
       6021232, 9227892, 2439660, 16453193, 38018],
      [9224648, 8797173, 12263341, 5703615, 4021801, 5137398,
       9217875, 1727843, 15816697, 10266437, 13597]
    ],
    [ //  4 * (16 ** 1) * G
      [976773, 1091257, 1485377, 7551192, 11755228, 9343269,
       6205887, 16153194, 13374686, 4455311, 2566],
      [2071746, 13697158, 14138048, 15139118, 10554624, 946189,
       13476498, 12919002, 10385749, 3682890, 21812]
    ],
    [ //  5 * (16 ** 1) * G
      [15531795, 14344853, 3951025, 14405731, 7752220, 2026339,
       5329672, 5997402, 15282457, 12042618, 45793],
      [1604932, 4819378, 15115194, 1564322, 14293656, 5817223,
       10660567, 15872929, 10742732, 4461331, 59072]
    ],
    [ //  6 * (16 ** 1) * G
      [6511184, 13335292, 16035108, 11320002, 1244338, 7618789,
       13853123, 13780049, 9189268, 238428, 18720],
      [1608602, 7022776, 4835606, 14725856, 1820272, 7971388,
       16346076, 5079855, 3388638, 6934451, 7957]
    ],
    [ //  7 * (16 ** 1) * G
      [16282246, 11744494, 14956731, 16524041, 256125, 15610887,
       8244166, 13317143, 1797058, 4599423, 46131],
      [1349337, 4716164, 4946624, 6958314, 13508736, 3043229,
       7520617, 3686222, 13809150, 5526126, 41178]
    ],
    [ //  8 * (16 ** 1) * G
      [7652598, 6436262, 6449822, 7927897, 5693094, 12018373,
       9367012, 14143023, 14584682, 8239627, 44607],
      [2050899, 5586545, 6037216, 548746, 4214797, 12167545,
       1254557, 2406594, 6920538, 4848650, 7173]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 2) * G
      [13648923, 14901010, 4992434, 879190, 854897, 15556889,
       5408259, 8912849, 595545, 13935536, 13474],
      [9679174, 15172702, 1946660, 14605784, 14116537, 8372455,
       290423, 2869873, 10609602, 15559251, 48810]
    ],
    [ //  2 * (16 ** 2) * G
      [4167902, 13542303, 16528489, 736349, 1489326, 4561572,
       12419469, 15239547, 15161828, 9458315, 1220],
      [9268886, 4801358, 15657945, 4867589, 1940859, 8456007,
       6693930, 11397196, 6080335, 738880, 12517]
    ],
    [ //  3 * (16 ** 2) * G
      [10519588, 11416509, 11132132, 7665220, 12564395, 2354490,
       16755037, 1792197, 12802474, 657325, 43403],
      [3244044, 8888552, 2962962, 10542936, 2877451, 1253493,
       9211421, 15020446, 4823910, 12994338, 18260]
    ],
    [ //  4 * (16 ** 2) * G
      [6408711, 7059854, 14844135, 14800167, 12944538, 15207629,
       12184431, 9007769, 13956225, 10187399, 5780],
      [4326439, 2877344, 3842204, 16703384, 2976454, 1182029,
       12016480, 12450199, 974558, 1338743, 59300]
    ],
    [ //  5 * (16 ** 2) * G
      [3943786, 8281736, 11777325, 8502569, 3117453, 6909394,
       7915610, 13769579, 9284293, 15731144, 41012],
      [12783218, 7271106, 8188979, 1451646, 394079, 15402686,
       5528812, 11587000, 9018399, 14026, 65051]
    ],
    [ //  6 * (16 ** 2) * G
      [6771405, 16626831, 3894625, 4145042, 1826108, 6671287,
       15016114, 11026959, 14765475, 6334448, 16310],
      [12976510, 15253604, 12660498, 1114272, 12587965, 8214923,
       12900695, 4991081, 2384764, 8723778, 25925]
    ],
    [ //  7 * (16 ** 2) * G
      [12487800, 5365032, 5075306, 2849086, 617720, 15311178,
       11798882, 10516194, 10306561, 2555697, 46370],
      [6842627, 6802001, 15933491, 15054223, 10452936, 8723073,
       6913682, 13245238, 3798336, 14731765, 28702]
    ],
    [ //  8 * (16 ** 2) * G
      [12469696, 4883994, 5955904, 16019346, 1775967, 6387240,
       4671928, 8940175, 4677490, 6813462, 45082],
      [9441388, 900608, 8374063, 4306476, 16541539, 16356466,
       1250894, 11326827, 3757794, 1818458, 31826]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 3) * G
      [4544319, 15260322, 6615159, 16055562, 8812274, 7066192,
       6762093, 10057609, 433741, 11457231, 59158],
      [9574609, 12741446, 11751519, 16385993, 4001266, 11030993,
       6719417, 5837488, 16544427, 6547092, 13622]
    ],
    [ //  2 * (16 ** 3) * G
      [7435443, 3943221, 16037137, 13550673, 3038511, 15211371,
       13575605, 3097921, 8521711, 12837716, 23127],
      [3422179, 5855544, 2656463, 1264569, 8939264, 4469544,
       5712371, 110870, 6890054, 8073278, 1916]
    ],
    [ //  3 * (16 ** 3) * G
      [7342252, 7942245, 16482200, 14887405, 13508302, 10628377,
       9063453, 6612309, 5274856, 9014639, 53951],
      [8121173, 5458546, 9994513, 11927303, 10281226, 808551,
       14368681, 4161941, 7042986, 11651930, 27072]
    ],
    [ //  4 * (16 ** 3) * G
      [11536127, 15732652, 12945719, 7962191, 8890740, 8826138,
       11398395, 13699360, 16195724, 6620654, 23785],
      [1386003, 13476103, 2851213, 12424540, 10297534, 8110950,
       15871966, 15488721, 2054869, 7257400, 53611]
    ],
    [ //  5 * (16 ** 3) * G
      [3085696, 8169848, 12057869, 2367550, 14999022, 6617264,
       3743536, 8911447, 8638048, 3165925, 19848],
      [1502679, 11627862, 1117199, 6875934, 16556989, 6625450,
       563453, 15259264, 11559788, 5140634, 10409]
    ],
    [ //  6 * (16 ** 3) * G
      [4446598, 12866757, 2138305, 12280874, 7687022, 10360438,
       697213, 11700906, 779842, 9938376, 21532],
      [4927143, 9410626, 12417803, 12981880, 11787720, 11617407,
       5630820, 5559428, 13809202, 3499564, 1357]
    ],
    [ //  7 * (16 ** 3) * G
      [12815889, 12835552, 12214148, 15363622, 5653019, 11509361,
       9568997, 3303225, 16518891, 2566088, 6087],
      [9494221, 6732718, 14929283, 10882266, 5478725, 8400510,
       13428993, 4218927, 6703932, 10810622, 38341]
    ],
    [ //  8 * (16 ** 3) * G
      [12033980, 1770960, 1643814, 1913257, 10860593, 275299,
       4601265, 4926010, 2476571, 12396486, 29093],
      [2588523, 8178831, 13681379, 15444530, 7037009, 15921095,
       13244930, 11768914, 6767103, 5393670, 50623]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 4) * G
      [11396036, 4611182, 328680, 13174058, 4896585, 8828017,
       3358949, 9329764, 9562381, 3567438, 40984],
      [2549968, 4325995, 3667036, 4481359, 16197710, 8612309,
       7877789, 8154341, 1116950, 15472404, 58043]
    ],
    [ //  2 * (16 ** 4) * G
      [11079981, 13559367, 15662780, 16653539, 8215263, 4998635,
       8907301, 10396244, 8233638, 15097200, 52604],
      [9614255, 12455226, 10878906, 9170528, 9480777, 6752417,
       6989294, 9025793, 9858967, 4868940, 34272]
    ],
    [ //  3 * (16 ** 4) * G
      [14724870, 14593113, 9268764, 6483349, 15964325, 351378,
       5926213, 5291323, 9275748, 2031800, 40159],
      [1486311, 3332962, 4623738, 1670309, 8725212, 9744514,
       12377229, 5084555, 15904102, 2490067, 37229]
    ],
    [ //  4 * (16 ** 4) * G
      [2174746, 11376323, 15690888, 7117195, 11471811, 11426280,
       13055749, 9332692, 9843825, 715273, 3935],
      [1224858, 8068727, 8156509, 14559663, 6214669, 7043151,
       14502817, 5801642, 5848213, 11712456, 63656]
    ],
    [ //  5 * (16 ** 4) * G
      [330110, 2855827, 1671479, 8666021, 14030606, 4490040,
       2950464, 11234075, 10904557, 14276049, 17855],
      [9296900, 364176, 5854394, 12571329, 3906867, 15272040,
       345868, 12245123, 5963051, 14422661, 2513]
    ],
    [ //  6 * (16 ** 4) * G
      [6016071, 4828377, 15663107, 1736576, 14865483, 10131120,
       14978983, 3409914, 12563456, 15756537, 30596],
      [16495540, 14549376, 11928315, 13956863, 6600141, 15126260,
       9679614, 4165092, 15582266, 7552707, 52386]
    ],
    [ //  7 * (16 ** 4) * G
      [3921631, 15835318, 12832049, 14509742, 16524226, 6189009,
       10224265, 6758047, 7760187, 11343204, 46489],
      [16386476, 13542286, 4558497, 9507659, 4244726, 12850794,
       756515, 4601654, 16429874, 13754052, 27001]
    ],
    [ //  8 * (16 ** 4) * G
      [4485563, 1412348, 1516597, 14804713, 4361204, 6066321,
       8850146, 15818509, 8345913, 13674709, 18202],
      [6896140, 1636937, 2901315, 8332184, 14150143, 13711536,
       11829396, 2766458, 9342521, 13263479, 8756]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 5) * G
      [9887729, 13552509, 16682877, 11195900, 14954945, 10016048,
       11890893, 16709280, 2090319, 3704084, 3783],
      [8082732, 4303996, 11181768, 8908152, 5399758, 5394717,
       15685638, 9546948, 11437917, 5197447, 54818]
    ],
    [ //  2 * (16 ** 5) * G
      [6338505, 11876758, 13611395, 1244013, 10562353, 15779483,
       2437832, 367118, 7216350, 7878222, 18295],
      [1623007, 6267801, 13589536, 15811307, 394433, 10390110,
       11970504, 7566319, 3710513, 10289336, 11736]
    ],
    [ //  3 * (16 ** 5) * G
      [9263337, 2403080, 3690947, 6611736, 4873244, 10991337,
       6978626, 15307428, 412294, 12844487, 38618],
      [12500062, 9638574, 14909492, 9734118, 6023323, 12859752,
       9737090, 8744132, 4637101, 11531181, 51999]
    ],
    [ //  4 * (16 ** 5) * G
      [14065038, 80678, 2494424, 3535965, 12816303, 5100078,
       9443297, 13057432, 9549224, 4558132, 13629],
      [15936386, 10289184, 11043883, 16478633, 6159378, 690818,
       14945284, 3223805, 6020644, 3653455, 40061]
    ],
    [ //  5 * (16 ** 5) * G
      [11706258, 11342637, 12945746, 12142514, 2216561, 9404701,
       3640043, 10552796, 1372946, 11681003, 58007],
      [15044059, 9750693, 4284658, 8777025, 2346683, 9521426,
       11253965, 11829467, 13332660, 2433272, 57655]
    ],
    [ //  6 * (16 ** 5) * G
      [6187628, 11322715, 8404813, 10606814, 6791134, 517510,
       11981631, 3240381, 5913438, 12271011, 42807],
      [5534813, 13096592, 702256, 7770861, 5143880, 6231309,
       6131344, 2825846, 10026962, 5496863, 50831]
    ],
    [ //  7 * (16 ** 5) * G
      [14191667, 3898250, 13303188, 14251115, 1762196, 14325721,
       9571620, 7014076, 2856118, 2308347, 7378],
      [9417138, 10978340, 4809358, 6212126, 16666929, 12330771,
       700726, 9881700, 11225264, 13498424, 64570]
    ],
    [ //  8 * (16 ** 5) * G
      [3195032, 5143011, 13414157, 6145559, 15122179, 10972712,
       16714523, 13988224, 3023424, 7073815, 56749],
      [11959128, 10046819, 4210266, 2996689, 3357613, 11393786,
       7561509, 7680164, 5906825, 7464595, 2835]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 6) * G
      [9623557, 12967139, 13907749, 8868869, 8028265, 4496040,
       11205283, 10790221, 6984663, 14470988, 63733],
      [14287610, 1659244, 12190310, 10821955, 15981156, 3306321,
       3368033, 3710270, 14037076, 7786342, 58753]
    ],
    [ //  2 * (16 ** 6) * G
      [5363878, 15774380, 9481383, 7870506, 4380804, 5775357,
       14829743, 10170751, 12869020, 11596363, 41240],
      [8892464, 11885916, 8226337, 14907030, 9577480, 5073537,
       11405638, 14646053, 8263576, 5504271, 27019]
    ],
    [ //  3 * (16 ** 6) * G
      [10503927, 11736703, 10295764, 132912, 1118009, 2966807,
       13145198, 5113930, 5800873, 9325190, 57644],
      [2508461, 5908641, 3429285, 1257753, 787681, 2553565,
       13973809, 4406078, 14263027, 286991, 31980]
    ],
    [ //  4 * (16 ** 6) * G
      [16065806, 15233692, 7731778, 8946310, 13781991, 1436283,
       9791191, 14589634, 5254446, 13250126, 64712],
      [1037474, 1032051, 2121774, 12598049, 4635653, 14310544,
       690996, 16169352, 16301316, 8113390, 12469]
    ],
    [ //  5 * (16 ** 6) * G
      [8731715, 2615490, 6732209, 11412196, 1469527, 3290696,
       15721425, 3999970, 9867785, 13923351, 14667],
      [6571677, 2673824, 831864, 14225359, 3106578, 485333,
       12775894, 2129471, 1951417, 7164437, 11085]
    ],
    [ //  6 * (16 ** 6) * G
      [13327551, 572020, 2103514, 12333297, 1539642, 14044703,
       11385982, 2533260, 11636885, 1762088, 33076],
      [8744303, 2516798, 5785111, 7584819, 12238279, 215424,
       16647887, 905820, 14595572, 7809202, 62116]
    ],
    [ //  7 * (16 ** 6) * G
      [7483028, 14105084, 6417453, 7144841, 14159929, 275278,
       5686676, 4480102, 14582505, 3727160, 51845],
      [4826407, 6479632, 10762762, 10783526, 611240, 10425074,
       2531835, 1173297, 10356163, 16532203, 15143]
    ],
    [ //  8 * (16 ** 6) * G
      [11099651, 11142281, 4006680, 13807420, 4847221, 5126899,
       4443950, 15637067, 3530176, 14703610, 9403],
      [7945293, 4582797, 4818911, 3627681, 697646, 1026772,
       5100150, 1513517, 664271, 388617, 54420]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 7) * G
      [9579965, 2299759, 9410634, 2070817, 10891542, 7452956,
       11374157, 4163050, 5091121, 11976701, 27944],
      [15678719, 16712352, 10044587, 12078498, 2419184, 4856908,
       10886347, 4258785, 1954554, 14222612, 44857]
    ],
    [ //  2 * (16 ** 7) * G
      [16458762, 4214724, 5281673, 11515730, 15358044, 3092304,
       8334640, 15078292, 9689109, 15098333, 53553],
      [5249623, 922626, 15999734, 13494989, 2348267, 5231732,
       3667087, 15178572, 11099554, 2917473, 13364]
    ],
    [ //  3 * (16 ** 7) * G
      [1477476, 14678427, 4240784, 12945096, 5492778, 4619937,
       392212, 13885193, 12575709, 1407615, 31955],
      [12300651, 863066, 3507564, 7528494, 11292059, 16448275,
       7912667, 2119310, 2698338, 9249047, 40096]
    ],
    [ //  4 * (16 ** 7) * G
      [556510, 16635832, 15230949, 4685794, 4408708, 4629200,
       8457186, 7417346, 8418837, 5962028, 45055],
      [5157794, 4631764, 15144835, 9625003, 13571922, 2761386,
       8315146, 629364, 13656258, 7250476, 26015]
    ],
    [ //  5 * (16 ** 7) * G
      [15673832, 13040134, 14922417, 645550, 14439755, 3498596,
       1678661, 5681731, 3012804, 777055, 60806],
      [12128143, 1853881, 3362842, 2985386, 6491996, 8106471,
       11747393, 8154102, 14002173, 15156085, 47159]
    ],
    [ //  6 * (16 ** 7) * G
      [12538601, 16327533, 9387406, 5699320, 1668304, 9533376,
       10193671, 6972787, 5852986, 16464648, 15973],
      [1102664, 5512903, 4405842, 2535099, 874193, 5867360,
       8981753, 1097382, 16254912, 11952142, 59291]
    ],
    [ //  7 * (16 ** 7) * G
      [3597847, 1618934, 5873145, 12710351, 14471227, 2923847,
       3046951, 7560732, 13767235, 13406161, 26728],
      [12270887, 14480380, 14097549, 10762316, 16658632, 4131424,
       3701041, 11781520, 1833446, 566713, 61136]
    ],
    [ //  8 * (16 ** 7) * G
      [3612499, 6922496, 6920699, 6863974, 10354099, 3834600,
       684933, 374784, 15984252, 10996408, 33847],
      [10271659, 7526279, 5842056, 14416866, 14755070, 12291600,
       16005145, 7558275, 8464960, 14112898, 38543]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 8) * G
      [5921091, 10363416, 11942490, 6055391, 12130614, 7461402,
       3286572, 2188651, 2273161, 7028911, 32739],
      [10264833, 1387625, 1234189, 8096498, 11785606, 10940788,
       264156, 10422772, 11941412, 13916197, 59031]
    ],
    [ //  2 * (16 ** 8) * G
      [8550594, 13756358, 12596077, 10882631, 14487736, 16407201,
       10699693, 6640842, 8799043, 9728327, 24951],
      [11260623, 15512303, 10919171, 2299809, 7956889, 6583090,
       379032, 245744, 6846751, 15193509, 20174]
    ],
    [ //  3 * (16 ** 8) * G
      [598696, 8425951, 14251687, 5528824, 9497042, 9142414,
       5636655, 8426062, 5123443, 6963291, 19301],
      [10125499, 13288857, 6901165, 12158223, 7584226, 12900052,
       12735960, 2150476, 15169593, 10689810, 60958]
    ],
    [ //  4 * (16 ** 8) * G
      [8229700, 9672282, 7057067, 65973, 2235066, 6298103,
       5811193, 1654151, 7511322, 15781257, 21020],
      [11994698, 15892886, 10569001, 5936635, 1262026, 3611514,
       971654, 12944382, 16378298, 2153163, 54786]
    ],
    [ //  5 * (16 ** 8) * G
      [13663902, 16287849, 3585284, 16164364, 10386593, 9330336,
       14744381, 9689899, 6676797, 9793213, 40312],
      [14207214, 6380227, 11728093, 3904711, 6333146, 1101428,
       10231090, 6636200, 9349325, 10383092, 54548]
    ],
    [ //  6 * (16 ** 8) * G
      [2626584, 848699, 3521347, 11534350, 15008155, 15140476,
       6370873, 5068482, 6531293, 11775368, 31878],
      [1564908, 4123953, 1800669, 8110214, 15367217, 10956674,
       7825626, 5006009, 12517013, 12242158, 55640]
    ],
    [ //  7 * (16 ** 8) * G
      [12883215, 5277309, 484983, 12400962, 4305581, 6493783,
       4646107, 5710696, 3489705, 1209057, 19147],
      [14202079, 14959715, 12936902, 11896426, 10371712, 14852063,
       16174193, 9237144, 4443565, 13766583, 29292]
    ],
    [ //  8 * (16 ** 8) * G
      [4181644, 8692523, 10947377, 1393617, 4963820, 7343037,
       15715906, 5648329, 9359483, 1163570, 5996],
      [13234591, 8664739, 11628198, 6010138, 6128682, 3898972,
       8435678, 9001249, 4950581, 9285267, 53631]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 9) * G
      [14562373, 5235197, 8485631, 10661543, 12298717, 5348982,
       15204134, 8730399, 7365094, 11941965, 26981],
      [8737043, 3710488, 14253252, 1728409, 8185349, 2998004,
       6699123, 3300937, 4728081, 14345116, 53692]
    ],
    [ //  2 * (16 ** 9) * G
      [15610094, 12633837, 15795061, 6787465, 5399350, 618824,
       16560516, 10201140, 4901363, 14757783, 39841],
      [11811934, 12073831, 3705494, 9207119, 425659, 7847522,
       15369896, 2587710, 1829484, 15807025, 978]
    ],
    [ //  3 * (16 ** 9) * G
      [9097157, 1021576, 9041380, 3565719, 15685787, 1733041,
       14406665, 163453, 7718874, 12918238, 57803],
      [4825637, 16700834, 5389253, 15646650, 13838635, 14826727,
       5242297, 11735670, 15194861, 8624077, 60519]
    ],
    [ //  4 * (16 ** 9) * G
      [12939557, 13008721, 1084155, 13728859, 1464566, 15229786,
       5084519, 4741972, 131157, 10615785, 51470],
      [16485780, 10814686, 6932073, 7201178, 10735741, 6336950,
       16135910, 1664634, 974443, 10906737, 1452]
    ],
    [ //  5 * (16 ** 9) * G
      [511174, 10829793, 2651534, 5520514, 3708897, 18461,
       2639273, 7544477, 1280673, 2521457, 39999],
      [15372626, 9751869, 8815623, 9828785, 11074894, 7260753,
       16039742, 9167733, 11869596, 793444, 56046]
    ],
    [ //  6 * (16 ** 9) * G
      [16536925, 8255863, 3367174, 15538388, 14640166, 1582289,
       6567900, 11159312, 117561, 1902957, 26533],
      [1229271, 12948588, 4087194, 4395819, 6518100, 9761347,
       8011687, 14775624, 12549088, 5958164, 49417]
    ],
    [ //  7 * (16 ** 9) * G
      [10766823, 15418261, 14950853, 15023147, 10657844, 9579311,
       1552704, 7958444, 7023986, 14243708, 23600],
      [2521040, 10781102, 947982, 12832377, 6176851, 9621687,
       16226757, 1461093, 9313170, 14923184, 32805]
    ],
    [ //  8 * (16 ** 9) * G
      [3987454, 2043307, 9421247, 16261855, 15880329, 1072028,
       11838604, 4012571, 9003568, 12121980, 2696],
      [6692817, 13776113, 5007931, 9754389, 4791305, 11112460,
       13780682, 1920297, 5397186, 3893509, 5558]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 10) * G
      [10153917, 13265997, 7677327, 7584087, 16664498, 4447262,
       868796, 3328671, 6724982, 3415180, 4028],
      [15146144, 7252435, 15854907, 2099871, 722590, 13882261,
       1919319, 14942539, 3542591, 2253615, 48512]
    ],
    [ //  2 * (16 ** 10) * G
      [14961492, 14387827, 16249766, 8134183, 14413562, 5532756,
       3483168, 3001196, 9402218, 1651101, 33424],
      [6284972, 16114942, 8677379, 70484, 4694177, 14262431,
       7253021, 6654093, 11074077, 7237950, 59042]
    ],
    [ //  3 * (16 ** 10) * G
      [4409399, 14679785, 12289942, 8790209, 11736075, 11562413,
       7338831, 11613212, 11041517, 1616836, 55149],
      [2186060, 326075, 12734378, 7714764, 10770663, 9646736,
       1374123, 14552642, 14247492, 5088046, 63164]
    ],
    [ //  4 * (16 ** 10) * G
      [3754528, 4443882, 8496615, 14784674, 1877272, 11309748,
       8238359, 4476117, 10080042, 12558626, 50317],
      [7841627, 8444906, 14830085, 10034101, 4239653, 14077332,
       4266971, 6618926, 1278138, 13344782, 48259]
    ],
    [ //  5 * (16 ** 10) * G
      [520738, 10428828, 8192744, 11297022, 14818403, 5493189,
       1711895, 5195805, 6815584, 12996705, 54720],
      [7339351, 6888972, 8839919, 7897402, 15987994, 7715258,
       7861407, 843276, 1554565, 755208, 5539]
    ],
    [ //  6 * (16 ** 10) * G
      [10582228, 13362582, 15686584, 15993000, 3390543, 9870370,
       5999566, 4471041, 11872145, 12064508, 7025],
      [5275473, 8305589, 7424557, 16174097, 15054529, 9421024,
       12750195, 14577393, 9080364, 10296740, 32357]
    ],
    [ //  7 * (16 ** 10) * G
      [9682854, 1483342, 2771527, 631094, 10299738, 10477779,
       10906444, 15026635, 4650540, 3558986, 29516],
      [13698932, 10983832, 12909679, 8979095, 10565152, 6244588,
       14897676, 10348929, 10984708, 1377194, 2453]
    ],
    [ //  8 * (16 ** 10) * G
      [4843469, 4163760, 52481, 15040476, 16328058, 9634280,
       6945850, 3925785, 13629751, 2452824, 39039],
      [16397782, 4963438, 14399269, 502527, 11821138, 14917191,
       14024711, 15229163, 15487068, 6903444, 36498]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 11) * G
      [16672690, 1669795, 3720931, 667187, 11059175, 2339380,
       10201459, 12346987, 3966428, 12731255, 26120],
      [11827752, 16669925, 530723, 4244803, 2823583, 14696386,
       894790, 8679268, 2212200, 1490629, 41385]
    ],
    [ //  2 * (16 ** 11) * G
      [7912575, 2136835, 8806337, 9166946, 12348929, 7230296,
       8744599, 10058172, 2729, 16607512, 28865],
      [11450454, 1514662, 879976, 6414795, 11137839, 8733685,
       15802946, 11202038, 6014242, 11256333, 63450]
    ],
    [ //  3 * (16 ** 11) * G
      [13057538, 15379755, 2888678, 15426865, 9855310, 8794500,
       1146199, 2124440, 12966947, 7004838, 61589],
      [1122717, 16161158, 5713196, 12299924, 2950285, 9655911,
       9106051, 7791109, 4513852, 15097873, 17215]
    ],
    [ //  4 * (16 ** 11) * G
      [8258498, 12186855, 2931811, 12562457, 3328256, 5286654,
       14593260, 12612415, 882354, 9327141, 12460],
      [14434179, 1375953, 14459161, 13469574, 309810, 7839847,
       8650798, 6924901, 10057822, 11874496, 54932]
    ],
    [ //  5 * (16 ** 11) * G
      [6284380, 3007772, 5864930, 3701775, 11698600, 2634888,
       10321143, 10825508, 10659340, 15460924, 56216],
      [16013858, 115774, 1852583, 11159566, 8593487, 2919657,
       10344593, 14554386, 12420514, 15928181, 57536]
    ],
    [ //  6 * (16 ** 11) * G
      [13025468, 3853184, 8375204, 8642408, 10456434, 1050701,
       6289351, 7887493, 8293964, 9447943, 2962],
      [16112930, 15325370, 3985544, 14233298, 7888611, 1974276,
       8006934, 880233, 6253196, 13880749, 56763]
    ],
    [ //  7 * (16 ** 11) * G
      [1216172, 15076834, 13348697, 13414172, 4675797, 5335308,
       3898730, 2210411, 14525940, 12588554, 2675],
      [15800333, 2694500, 13252697, 7820761, 3627505, 687225,
       14521589, 10837174, 5145484, 14308868, 17471]
    ],
    [ //  8 * (16 ** 11) * G
      [6852998, 10894398, 11480454, 6213046, 12297920, 6427190,
       11432761, 15686295, 658933, 9799971, 23481],
      [14917656, 3214619, 12905979, 6013404, 6569680, 4275858,
       6398780, 5711060, 15544665, 8644983, 6302]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 12) * G
      [15028484, 11501591, 7455467, 12291740, 3834719, 5643511,
       12799371, 6545043, 12027703, 7754279, 55518],
      [3016909, 15696101, 1780226, 1655003, 16203726, 16327874,
       9097692, 6048866, 1307345, 9725374, 12242]
    ],
    [ //  2 * (16 ** 12) * G
      [2271259, 9701879, 9373419, 9725878, 2259883, 10690793,
       1529504, 6299895, 3717019, 11692698, 53310],
      [11032423, 6260440, 16094690, 7205384, 16718376, 13898397,
       283234, 7135319, 2204647, 16560172, 20677]
    ],
    [ //  3 * (16 ** 12) * G
      [8896467, 12765161, 5007673, 16041000, 12928815, 13734279,
       15399645, 5578235, 5344819, 7892925, 58277],
      [12729981, 1797260, 8486611, 14231776, 14480108, 2165923,
       16730840, 8681401, 5783782, 11340115, 63307]
    ],
    [ //  4 * (16 ** 12) * G
      [16129043, 1117443, 14149684, 15825165, 6915798, 9924607,
       5113799, 2964185, 12111271, 9502990, 65088],
      [10531758, 13553085, 7586771, 10084825, 8846299, 752121,
       11471163, 3754095, 4210738, 5882330, 2071]
    ],
    [ //  5 * (16 ** 12) * G
      [13960558, 5362210, 8173177, 14829472, 14464423, 6178830,
       16574830, 1135199, 10821844, 7356908, 17065],
      [16243473, 5097648, 16599105, 7249873, 5130301, 3876534,
       13790038, 7258989, 34566, 8349391, 62204]
    ],
    [ //  6 * (16 ** 12) * G
      [9742001, 8560138, 11959242, 13687268, 3148840, 4400074,
       12489724, 2664398, 10991501, 12186410, 22643],
      [5393565, 10459358, 15749823, 10484541, 5264520, 12147231,
       10273691, 16048183, 6172341, 14415085, 6055]
    ],
    [ //  7 * (16 ** 12) * G
      [14351675, 6263251, 5686900, 3001145, 12098032, 7984751,
       3069523, 16655148, 2594380, 10951452, 3436],
      [7333608, 15811098, 1758893, 15632503, 2246827, 14571680,
       10495751, 10478740, 14559549, 3191695, 43089]
    ],
    [ //  8 * (16 ** 12) * G
      [11071041, 795791, 4723664, 13071414, 5137988, 4457419,
       7365397, 1998997, 14506133, 3147833, 51470],
      [14139822, 3565507, 7227302, 1551565, 4543303, 221776,
       12997508, 10225424, 1697596, 268141, 25333]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 13) * G
      [1989763, 12358151, 12512934, 8733344, 13795097, 15053195,
       12003928, 2140229, 2545471, 13189456, 21708],
      [595617, 9369364, 9883600, 6131428, 10357708, 12526226,
       1432274, 3837831, 5326130, 4146612, 7235]
    ],
    [ //  2 * (16 ** 13) * G
      [2653221, 12061697, 11698971, 9727844, 16603934, 15217539,
       1367291, 10322960, 9086996, 4922349, 10723],
      [11002990, 11345269, 3743011, 7214500, 3807627, 7022031,
       14666969, 12665212, 15643555, 9953173, 59971]
    ],
    [ //  3 * (16 ** 13) * G
      [7739004, 3547823, 3755102, 12874855, 3097132, 14283311,
       6893004, 3785260, 4128661, 3071159, 34648],
      [5079030, 12280175, 15232111, 7805307, 167686, 3582088,
       12829554, 16638210, 14043771, 9712906, 1883]
    ],
    [ //  4 * (16 ** 13) * G
      [10724227, 12466771, 652245, 3847716, 7287123, 1644935,
       1915904, 15358815, 6005150, 7747196, 53920],
      [8259136, 11252270, 13526514, 4151691, 8498943, 13512793,
       16104349, 6701984, 12057792, 637075, 31146]
    ],
    [ //  5 * (16 ** 13) * G
      [14575121, 4122740, 11552370, 4948511, 16144185, 15801907,
       3552614, 1844663, 2569947, 8047135, 18960],
      [11011582, 15461976, 11273048, 6037810, 6116474, 339463,
       15267584, 3460708, 6549305, 2511104, 32923]
    ],
    [ //  6 * (16 ** 13) * G
      [14105104, 1939515, 845624, 10349691, 5406738, 2103458,
       3729558, 1257629, 2308428, 8701182, 8288],
      [13824553, 13733336, 215314, 2419904, 12785092, 8623093,
       6761707, 788649, 10491543, 10549357, 24883]
    ],
    [ //  7 * (16 ** 13) * G
      [13626544, 5165165, 4652218, 3188952, 8650013, 4847337,
       870847, 6638094, 11198409, 3060594, 64832],
      [10522088, 4144621, 7934041, 12445278, 4934692, 11037466,
       3709867, 15312422, 10893858, 4206813, 54963]
    ],
    [ //  8 * (16 ** 13) * G
      [10761513, 5451087, 4880200, 14789555, 354074, 14006997,
       6494583, 6741227, 16614506, 14059184, 50541],
      [10822134, 15576313, 15620589, 1506174, 10372728, 9179489,
       6334315, 5594412, 15839843, 11175411, 62124]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 14) * G
      [13838646, 12022050, 115471, 3310719, 839726, 8337636,
       13717821, 10448071, 1352829, 809336, 50500],
      [13287380, 16398151, 6134338, 3269662, 10932870, 16035032,
       1909740, 3071006, 4071335, 15317560, 53886]
    ],
    [ //  2 * (16 ** 14) * G
      [3027641, 10587436, 12635105, 16503954, 6651965, 11211505,
       13971291, 16727618, 11146671, 9799981, 53374],
      [1724252, 11364908, 1990264, 5384424, 15571185, 15683107,
       6944915, 7544583, 7488808, 5072134, 30542]
    ],
    [ //  3 * (16 ** 14) * G
      [9021665, 126073, 14515589, 7663179, 1939187, 16648828,
       4692892, 7667936, 14657435, 246876, 15949],
      [1844234, 1280068, 4233337, 15973735, 11475157, 10951167,
       13293514, 11190551, 5923957, 4509825, 4855]
    ],
    [ //  4 * (16 ** 14) * G
      [10451857, 11464439, 8156673, 14785941, 7709001, 10302018,
       169346, 3802798, 7330044, 7210936, 17279],
      [2555955, 11330421, 3368118, 9517416, 10123025, 14040152,
       2661141, 12531896, 9040186, 13860008, 24552]
    ],
    [ //  5 * (16 ** 14) * G
      [12286210, 11063513, 4155705, 8828871, 12741746, 6201304,
       10392648, 10132004, 14028853, 8669619, 438],
      [4122195, 4501984, 8572287, 7439206, 15410692, 1409532,
       15057773, 782744, 3644478, 6529513, 58768]
    ],
    [ //  6 * (16 ** 14) * G
      [287235, 14609733, 12400140, 14445820, 3363466, 14967637,
       10059014, 5457509, 16612983, 10465815, 53994],
      [9348643, 15891006, 16090521, 6960323, 14676693, 869397,
       533584, 5965378, 9476720, 2338975, 5805]
    ],
    [ //  7 * (16 ** 14) * G
      [7461374, 5690563, 12305051, 1677782, 4928876, 3820784,
       10994603, 3365205, 13409442, 3977644, 38188],
      [9019711, 15127105, 6215532, 1575111, 4482289, 15061094,
       3602156, 11001745, 14036742, 8734455, 22969]
    ],
    [ //  8 * (16 ** 14) * G
      [1890759, 15531717, 9415017, 3426267, 687242, 15607992,
       2778243, 7981598, 11240527, 16743004, 52941],
      [3708466, 15386409, 4189046, 6577754, 643179, 1010445,
       8494205, 9613160, 8814600, 15027490, 37667]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 15) * G
      [6749512, 4289200, 8634271, 12097301, 3608604, 14460444,
       9938618, 444315, 2617797, 5667394, 9244],
      [8747784, 2910098, 360317, 11445094, 11039032, 238734,
       8127538, 9659265, 3157323, 2986964, 16550]
    ],
    [ //  2 * (16 ** 15) * G
      [4062076, 5984376, 6701742, 10616900, 1619246, 1522853,
       11084859, 6328439, 15539341, 2148235, 20130],
      [1433918, 15132804, 8447449, 5386820, 12755636, 8558632,
       10327372, 2572669, 13143354, 14495518, 50756]
    ],
    [ //  3 * (16 ** 15) * G
      [16341277, 8239373, 2786847, 4371656, 15481538, 7477468,
       12888882, 13344979, 6912233, 13777794, 56879],
      [5746052, 9911556, 10794209, 8962102, 10127903, 3062746,
       15500473, 388279, 6439923, 7410491, 16397]
    ],
    [ //  4 * (16 ** 15) * G
      [14093614, 15242375, 855810, 7688654, 9296185, 1652053,
       4583964, 15411169, 5957966, 5361367, 40070],
      [15949096, 14324512, 1219795, 2979279, 15532456, 5556467,
       2701860, 3912558, 320830, 14902189, 38194]
    ],
    [ //  5 * (16 ** 15) * G
      [6432812, 2444021, 7810728, 3734467, 3095289, 1261808,
       11543777, 10041672, 5032925, 9023536, 36344],
      [13735373, 11262305, 1405526, 13564347, 8351812, 15949348,
       6494346, 7107614, 380653, 5990194, 29778]
    ],
    [ //  6 * (16 ** 15) * G
      [10790211, 687677, 9214693, 6216992, 11672622, 4176818,
       14460832, 4431238, 13603677, 6757802, 8474],
      [11967499, 1555254, 16208673, 4295276, 8457300, 8620599,
       14461032, 4418920, 16708768, 4696219, 62573]
    ],
    [ //  7 * (16 ** 15) * G
      [14529245, 2659597, 10942933, 13380621, 8938701, 15877383,
       848210, 8120, 9142520, 7703769, 41213],
      [15591090, 5240947, 8159193, 8994970, 9234799, 9384220,
       13833136, 16279839, 3369173, 14169537, 21477]
    ],
    [ //  8 * (16 ** 15) * G
      [14035699, 16152773, 3544996, 7061740, 4095138, 5927401,
       12625198, 10946811, 15279124, 4201070, 10634],
      [671126, 4124847, 15701110, 6311638, 6743737, 9494344,
       16762892, 14944645, 16647270, 10725892, 6393]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 16) * G
      [1366883, 6075534, 8294631, 11363615, 4799402, 2481705,
       3027566, 8688217, 1157797, 2276392, 4008],
      [4599527, 2380895, 16114705, 5308034, 11642448, 1608500,
       12366815, 7293652, 14395405, 4909301, 49140]
    ],
    [ //  2 * (16 ** 16) * G
      [6248373, 1489568, 9533770, 5714501, 16663690, 524627,
       198294, 14991677, 9291590, 8865759, 794],
      [214013, 15619996, 15865895, 4372702, 3260812, 8008212,
       7085624, 6351018, 11064710, 2909437, 34874]
    ],
    [ //  3 * (16 ** 16) * G
      [11783660, 4538237, 16086316, 11675883, 15677970, 4966619,
       6192106, 15046244, 9514844, 12608767, 34226],
      [260127, 532554, 14716749, 15092984, 9964340, 7143644,
       2961356, 6539258, 13702454, 2592569, 63051]
    ],
    [ //  4 * (16 ** 16) * G
      [729890, 3040600, 13238622, 9851196, 13413472, 9652814,
       7717077, 16340761, 9911319, 3943323, 42774],
      [9961449, 11674401, 14104883, 14719314, 4302068, 7043768,
       9524314, 6502553, 15933349, 10123642, 12426]
    ],
    [ //  5 * (16 ** 16) * G
      [503856, 5956742, 7547018, 15041750, 14352227, 15899684,
       11332630, 7885307, 136295, 227012, 4363],
      [6388794, 10556083, 4846650, 16460167, 12457302, 13044871,
       10454113, 5009080, 9365107, 2852145, 33859]
    ],
    [ //  6 * (16 ** 16) * G
      [3358752, 13865322, 12163835, 9370031, 8477081, 9481377,
       7491958, 14821895, 6115053, 4531335, 15473],
      [7345749, 11033786, 2908418, 15176588, 3132079, 4033557,
       2752383, 4753895, 1748828, 353655, 32521]
    ],
    [ //  7 * (16 ** 16) * G
      [10972936, 14163061, 5133549, 9157613, 9826899, 11204658,
       2370332, 1373921, 6582743, 5129375, 6264],
      [8538515, 6315371, 3279673, 10881573, 10319015, 15102460,
       16624753, 1537960, 1972967, 15564618, 36214]
    ],
    [ //  8 * (16 ** 16) * G
      [4366976, 4876892, 814256, 2994791, 10816568, 10034946,
       2355019, 8461113, 11240057, 11242499, 7167],
      [14389857, 4339277, 11979207, 11129423, 2766490, 1747608,
       5788319, 3353287, 11653272, 11935950, 10626]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 17) * G
      [6973831, 1246647, 16738548, 4446787, 4725428, 1785643,
       8968174, 8248425, 10000724, 1628073, 21692],
      [10137161, 8179803, 1703493, 12284849, 15437524, 14875986,
       5356147, 7573944, 15133427, 9179665, 19244]
    ],
    [ //  2 * (16 ** 17) * G
      [2490960, 5005718, 5026470, 3497162, 7802648, 5084858,
       7579387, 15940993, 1965846, 29048, 7992],
      [72021, 10169963, 9679185, 364758, 8742758, 13591067,
       1535138, 10696453, 7104541, 2016442, 45394]
    ],
    [ //  3 * (16 ** 17) * G
      [2086944, 4716029, 14527, 4748917, 8881478, 2562936,
       2253489, 11035472, 12698922, 12383872, 47867],
      [15758576, 11358747, 14084845, 2301898, 1848481, 12647912,
       5949595, 2942911, 11853185, 10058909, 5255]
    ],
    [ //  4 * (16 ** 17) * G
      [11437274, 9818487, 15985261, 2236468, 15133269, 7577688,
       2848914, 4317374, 14352799, 10588842, 39403],
      [1399980, 10337794, 1084835, 14094477, 3201126, 1592758,
       6571312, 16054278, 15712217, 12897761, 64589]
    ],
    [ //  5 * (16 ** 17) * G
      [2726782, 529044, 13691159, 624352, 15179565, 2157604,
       16545218, 2767931, 3377662, 3733264, 39705],
      [8094942, 2643780, 3327355, 16280450, 13494353, 4114698,
       9313450, 3227881, 7406211, 11169521, 64274]
    ],
    [ //  6 * (16 ** 17) * G
      [641542, 2537988, 7260730, 9413678, 7102303, 15980724,
       15372411, 15212272, 5376220, 3734678, 6583],
      [4265325, 3187543, 15139381, 1340721, 11802847, 8048508,
       12051802, 14689808, 6907467, 13708431, 28586]
    ],
    [ //  7 * (16 ** 17) * G
      [836804, 475345, 10550593, 12887357, 1914274, 1780919,
       14419574, 8140831, 95632, 1672652, 42615],
      [9921904, 3875708, 9749007, 10944304, 7624563, 10239420,
       6299229, 15899606, 5299608, 6391287, 34128]
    ],
    [ //  8 * (16 ** 17) * G
      [16343043, 16238583, 16419179, 7734437, 5151035, 1968285,
       13508962, 16537925, 9864245, 8741939, 27984],
      [8296092, 13413036, 14221937, 8545184, 12637916, 15661526,
       9085639, 13024349, 6866663, 7559145, 52469]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 18) * G
      [11199025, 16437616, 8151210, 7993707, 9746514, 7696209,
       2331239, 8778312, 6415346, 13199767, 7477],
      [14068849, 408268, 15816807, 7510630, 16091812, 16257261,
       11936491, 1926666, 16123939, 7124525, 50978]
    ],
    [ //  2 * (16 ** 18) * G
      [4402578, 3306534, 217114, 2836281, 13206076, 8041689,
       12756537, 10031329, 52696, 416376, 28459],
      [14777503, 1853795, 13331757, 14892478, 3928109, 2540809,
       13594632, 15406194, 15180516, 15431653, 2767]
    ],
    [ //  3 * (16 ** 18) * G
      [16400300, 4186508, 9686541, 12790657, 11372191, 8400931,
       4576781, 14864059, 13771596, 4212646, 57149],
      [13095961, 7181199, 7730274, 9865257, 14040292, 10338223,
       15899663, 2402849, 16597211, 7295529, 18682]
    ],
    [ //  4 * (16 ** 18) * G
      [7265269, 6162570, 7070470, 9855623, 3363414, 13676335,
       11009453, 6854941, 14514036, 12659619, 34570],
      [3116259, 13819120, 8263942, 3039017, 3957762, 5924816,
       14117328, 9299951, 10122905, 7506841, 30019]
    ],
    [ //  5 * (16 ** 18) * G
      [1254100, 2469407, 12299993, 4902108, 682304, 16261835,
       5022481, 15343212, 16343364, 11496113, 56242],
      [9196305, 2838346, 6269513, 8093242, 10471800, 4169114,
       2020931, 10597901, 1267226, 7715119, 60334]
    ],
    [ //  6 * (16 ** 18) * G
      [3828602, 9099831, 6023333, 6443732, 11399276, 7145971,
       11146274, 636519, 2236724, 10473909, 6066],
      [4516780, 8521544, 11406356, 13863115, 13645975, 16503353,
       6700798, 15307342, 3095886, 4493365, 5627]
    ],
    [ //  7 * (16 ** 18) * G
      [1281915, 10697889, 15921257, 3011304, 12699966, 6228932,
       2523035, 13302410, 2498516, 8083839, 7610],
      [10220136, 14206883, 12639362, 10060338, 3598007, 521601,
       441216, 3858832, 15200198, 8207965, 27311]
    ],
    [ //  8 * (16 ** 18) * G
      [12610291, 14967632, 15760038, 10476528, 10390644, 14365802,
       15695924, 10534751, 873874, 1304282, 56300],
      [13779949, 1014966, 6585519, 6614454, 2374194, 14996546,
       4765509, 12641651, 1697272, 9932758, 63577]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 19) * G
      [937823, 11446389, 15095154, 10840032, 16108186, 15899339,
       16230914, 3706864, 4938479, 11098500, 21977],
      [11107760, 15431356, 1427544, 3386651, 9965766, 15487564,
       5225672, 7761239, 14340611, 8362661, 27083]
    ],
    [ //  2 * (16 ** 19) * G
      [13039867, 13323607, 13829976, 4131253, 1520190, 15098613,
       4992882, 3733827, 9049697, 6855591, 35958],
      [13574918, 11770523, 6258117, 1272768, 11608003, 7196144,
       11585085, 2655369, 4234554, 7510282, 52529]
    ],
    [ //  3 * (16 ** 19) * G
      [11617001, 9996286, 16498794, 4589564, 7793414, 13926593,
       8621998, 7949702, 7290385, 4451300, 19200],
      [13010258, 12922210, 8914098, 3805784, 2304271, 2983695,
       4601378, 14358408, 896026, 13575075, 5948]
    ],
    [ //  4 * (16 ** 19) * G
      [6943189, 6263533, 4464356, 13524498, 5519208, 12552006,
       1479297, 15779492, 14673002, 9476755, 16309],
      [10841285, 16711321, 11539412, 16581986, 13850248, 7820325,
       3816415, 7359054, 15237279, 9546763, 21657]
    ],
    [ //  5 * (16 ** 19) * G
      [15837846, 4908823, 8517341, 3473252, 14132727, 6538515,
       13350708, 3306125, 11366338, 13793682, 31210],
      [671671, 7458379, 5931194, 1160085, 8705809, 6636254,
       9655845, 1732163, 11197119, 15323131, 43357]
    ],
    [ //  6 * (16 ** 19) * G
      [3646068, 15413014, 419523, 6368600, 2163799, 12612677,
       12788589, 5088119, 4082241, 15602026, 61469],
      [10302565, 13922435, 9925695, 13604036, 9584494, 117478,
       2301469, 4350303, 16026611, 11386010, 9423]
    ],
    [ //  7 * (16 ** 19) * G
      [3840742, 13267705, 11388933, 10254328, 14723589, 7618446,
       3551661, 11872158, 5087694, 20722, 12686],
      [4488569, 5674204, 15603787, 11457448, 5468123, 4968596,
       10821200, 16044412, 13537945, 15601945, 10130]
    ],
    [ //  8 * (16 ** 19) * G
      [15187071, 1208509, 217199, 12512574, 15383308, 15881087,
       14774250, 9101863, 14520384, 13507813, 49994],
      [7866052, 3768425, 4370102, 12408228, 5587609, 7279318,
       12484630, 15082424, 9983970, 3881472, 57839]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 20) * G
      [5346892, 13819459, 12702931, 7296018, 6890551, 6031412,
       10585461, 11426492, 2671743, 16341438, 28201],
      [4184207, 2407766, 6492552, 7998459, 6556754, 2387439,
       7127428, 5264108, 996086, 6135632, 13398]
    ],
    [ //  2 * (16 ** 20) * G
      [15224228, 15790053, 11362784, 7264524, 651383, 6853691,
       8472942, 1101731, 9476619, 1014197, 36602],
      [6908371, 10437209, 3538401, 9929056, 9796680, 16585849,
       1858986, 10462319, 5035539, 1632147, 9252]
    ],
    [ //  3 * (16 ** 20) * G
      [936396, 66444, 868245, 6014272, 2305448, 4255041,
       14601143, 14516872, 9899886, 13937016, 54929],
      [999762, 11846096, 15916299, 2805827, 6021584, 807596,
       11892286, 16251837, 7926679, 15173451, 31353]
    ],
    [ //  4 * (16 ** 20) * G
      [3851470, 15908866, 9915082, 2012147, 9008099, 14364447,
       13693792, 12179158, 9427760, 11498443, 53460],
      [8246969, 221348, 7857119, 8796846, 8719132, 9777249,
       15613522, 12315084, 6127068, 16304369, 60816]
    ],
    [ //  5 * (16 ** 20) * G
      [10195722, 7053099, 9387399, 4534517, 11613482, 12339678,
       14645883, 14607799, 14735301, 6833826, 10845],
      [2928330, 3432251, 8750847, 6170390, 5993283, 11229418,
       3736516, 15060208, 7751533, 8128872, 56381]
    ],
    [ //  6 * (16 ** 20) * G
      [8810906, 14758072, 15731654, 4655394, 6075541, 7725846,
       5059371, 16614684, 4559195, 8359140, 35623],
      [13859896, 3210862, 3999627, 13542170, 2176896, 9517397,
       15624684, 7228242, 4539324, 14121750, 53060]
    ],
    [ //  7 * (16 ** 20) * G
      [6904303, 13357697, 10156669, 7609781, 7983190, 6158454,
       4271655, 3081265, 10204454, 4811320, 34660],
      [13455376, 1166304, 15820291, 7535075, 5680449, 9838376,
       2594541, 10357569, 12285, 6936093, 22939]
    ],
    [ //  8 * (16 ** 20) * G
      [3767618, 14311826, 11330457, 5317998, 13751810, 6262840,
       1795512, 10934007, 5526248, 9294061, 33435],
      [14636562, 1454563, 6132151, 6532378, 5954626, 4304732,
       9079138, 10086204, 13431917, 15488063, 54016]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 21) * G
      [11997824, 13897996, 1124519, 11027811, 4309593, 4558529,
       15759727, 12586798, 12578521, 6987442, 65284],
      [12794137, 2563934, 8027843, 12396616, 2846318, 16566529,
       14409036, 655853, 9779735, 5614784, 17199]
    ],
    [ //  2 * (16 ** 21) * G
      [11786759, 4310960, 11317949, 5692981, 1525240, 8254465,
       13386024, 9415612, 14533296, 12645172, 22672],
      [3675104, 714893, 6709821, 4074113, 10648014, 2565717,
       16404345, 6178308, 1940484, 11303051, 52382]
    ],
    [ //  3 * (16 ** 21) * G
      [13253859, 8563251, 14835495, 11233911, 2824293, 2301935,
       2052882, 1742268, 13884627, 12868884, 63255],
      [15567081, 13425488, 15755412, 14423917, 5497533, 15619503,
       15534765, 13278036, 10047789, 4224652, 16940]
    ],
    [ //  4 * (16 ** 21) * G
      [7867436, 4096959, 1572295, 2975336, 14444436, 6853631,
       14484035, 12667750, 5530892, 9791245, 28396],
      [12569906, 12689901, 8980638, 3803135, 11232789, 66937,
       14706154, 16525341, 7811778, 5460121, 5307]
    ],
    [ //  5 * (16 ** 21) * G
      [2674056, 4394331, 10142568, 174525, 9308533, 11742323,
       6455185, 12779189, 3607328, 6927603, 24802],
      [14812780, 11052075, 11592347, 13027398, 4546872, 14644738,
       8951592, 6328849, 7991465, 1530469, 65024]
    ],
    [ //  6 * (16 ** 21) * G
      [4173434, 5148660, 12062176, 6043667, 14110534, 9095686,
       11325758, 122935, 2403670, 9669516, 8713],
      [15016710, 6988231, 4621935, 1552345, 12117679, 9210963,
       3817984, 2621487, 2839973, 14714803, 39928]
    ],
    [ //  7 * (16 ** 21) * G
      [1885588, 1651334, 7017787, 315475, 4971799, 6837654,
       392372, 697786, 7575881, 9937382, 31122],
      [9253022, 1085967, 9477777, 765038, 14321326, 15008039,
       1603743, 14747281, 2345392, 15830229, 4911]
    ],
    [ //  8 * (16 ** 21) * G
      [10470741, 14084353, 14177238, 15643931, 16160145, 11020552,
       16166205, 12031088, 10224033, 4263120, 41186],
      [11300237, 530625, 3198772, 7038585, 12251551, 16681355,
       8103346, 2802613, 12574420, 6589553, 7721]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 22) * G
      [8728144, 11685061, 12961744, 13588236, 2915939, 8322955,
       2312686, 12712362, 11251800, 13099006, 58502],
      [13570173, 3976622, 14182074, 3379947, 4482006, 14703209,
       6070097, 10414218, 434478, 7728470, 20989]
    ],
    [ //  2 * (16 ** 22) * G
      [6893088, 2925432, 15365200, 12794320, 11378310, 7792995,
       4296802, 2227988, 6278024, 7218266, 27041],
      [1141903, 6924723, 9738606, 1015208, 4008034, 12193809,
       10112221, 454686, 1768449, 6868361, 42953]
    ],
    [ //  3 * (16 ** 22) * G
      [8919303, 10896732, 14337642, 5963953, 2918003, 267540,
       13395630, 9847045, 3144572, 4504462, 19151],
      [3988220, 11818742, 2435366, 8181835, 3484463, 5527449,
       5951754, 3490856, 16603259, 11075087, 44441]
    ],
    [ //  4 * (16 ** 22) * G
      [12356977, 15177478, 1525693, 13081357, 3799387, 7625338,
       1243662, 2169102, 15708871, 9120382, 56493],
      [9960690, 16658082, 5654284, 8089979, 2540551, 1024807,
       3989628, 2232729, 2076571, 2652857, 35825]
    ],
    [ //  5 * (16 ** 22) * G
      [3749951, 14707060, 11174586, 11927970, 16754018, 5172276,
       9619491, 14514850, 8955465, 2261825, 19935],
      [13968183, 11016227, 6906671, 1253250, 14012485, 813885,
       9950092, 7646126, 9537597, 6454029, 59164]
    ],
    [ //  6 * (16 ** 22) * G
      [15818160, 1483534, 16260971, 116777, 4987606, 12212719,
       3246126, 15988611, 3271457, 8653335, 35262],
      [754176, 6866717, 2062621, 13248936, 12181367, 93267,
       4617705, 16041316, 11741206, 9181500, 28908]
    ],
    [ //  7 * (16 ** 22) * G
      [2274548, 8918360, 9381596, 16279007, 3488508, 15965093,
       14711163, 1258729, 7964574, 6650131, 22704],
      [6355914, 11018508, 5858823, 16535122, 10788982, 8612892,
       6226530, 162981, 5909559, 9085972, 21929]
    ],
    [ //  8 * (16 ** 22) * G
      [10071382, 3549610, 8902439, 11341359, 16688474, 5751827,
       4727436, 5098136, 3247045, 11761437, 55800],
      [6054329, 1652831, 11850985, 3274300, 6153626, 10789785,
       5766000, 12997909, 13771639, 14041584, 1962]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 23) * G
      [5345656, 12119083, 12944566, 10763551, 3905944, 15600310,
       16299490, 13623436, 15008816, 8342453, 62493],
      [6960465, 6708682, 16361377, 6887905, 4828355, 2312107,
       14940840, 15795309, 10156246, 6930109, 59046]
    ],
    [ //  2 * (16 ** 23) * G
      [564043, 8261775, 4008595, 14049647, 8448283, 15484173,
       14301313, 16276419, 14538129, 6946585, 15139],
      [15732559, 5599079, 12709989, 2565095, 7399344, 7894585,
       4051581, 2957857, 10122796, 191666, 24049]
    ],
    [ //  3 * (16 ** 23) * G
      [3473881, 3227166, 9116273, 12280316, 15215841, 4088091,
       9557549, 3355350, 2969215, 8552150, 54879],
      [5600670, 4638443, 14789524, 6124299, 12663469, 8911969,
       10819179, 5471100, 10129662, 6356208, 62027]
    ],
    [ //  4 * (16 ** 23) * G
      [3484321, 772024, 2145048, 10066960, 8179822, 16748441,
       9643163, 13067792, 5616646, 15659012, 60579],
      [12660387, 11352556, 2328051, 10189037, 3513145, 9439144,
       15957159, 16169059, 9184696, 12747239, 40555]
    ],
    [ //  5 * (16 ** 23) * G
      [3070030, 16655375, 1231714, 6284010, 10046963, 12627431,
       11892780, 6219464, 11557944, 11908830, 21929],
      [6591907, 12931156, 15751069, 1220824, 16757975, 16005864,
       1642199, 2692941, 10426795, 2201260, 50418]
    ],
    [ //  6 * (16 ** 23) * G
      [4999124, 13790046, 8312532, 10969436, 952377, 1876418,
       1353189, 4307802, 10418383, 8842214, 63763],
      [10280306, 9062670, 4143057, 5879611, 9310725, 16368731,
       14501961, 6319880, 15547174, 7614831, 62517]
    ],
    [ //  7 * (16 ** 23) * G
      [5543330, 13600519, 11705298, 4766720, 14556854, 9159839,
       680532, 2064086, 14381530, 5729735, 31198],
      [15495096, 9202346, 4620332, 6591399, 1373449, 7980675,
       11421660, 7888493, 1600002, 4001387, 15149]
    ],
    [ //  8 * (16 ** 23) * G
      [9687103, 11056666, 8125844, 1772973, 9388494, 15374406,
       12057413, 13345300, 12049151, 6921540, 23703],
      [7285671, 10266894, 5859145, 7623521, 6819634, 15920160,
       10930728, 2330617, 13307825, 10703780, 18231]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 24) * G
      [1188238, 11090293, 4302922, 7653889, 10822064, 15270633,
       3807394, 5736459, 10909606, 5269010, 19035],
      [5191744, 14318156, 10292202, 1696365, 7188820, 8208482,
       16507234, 12854788, 12618225, 4594922, 60179]
    ],
    [ //  2 * (16 ** 24) * G
      [9263170, 15584447, 8133480, 8672694, 7650893, 3655130,
       1326771, 5379187, 14349635, 15330508, 52367],
      [7405767, 1755464, 13129342, 4556407, 15817005, 16480093,
       1313681, 7720646, 15924287, 13638873, 49829]
    ],
    [ //  3 * (16 ** 24) * G
      [8680445, 4252241, 9523951, 13014835, 12124779, 11133883,
       12162856, 8726826, 3247008, 406067, 4196],
      [6092805, 1453688, 3780518, 795088, 12458253, 8928463,
       10380677, 13166466, 9151192, 3310139, 40040]
    ],
    [ //  4 * (16 ** 24) * G
      [3660372, 9027084, 14558195, 12325252, 11581804, 6447473,
       997352, 8390325, 2349262, 8468744, 4552],
      [15613429, 6624264, 14636668, 3689770, 14887713, 1762483,
       1297142, 10758831, 2538915, 13259111, 33525]
    ],
    [ //  5 * (16 ** 24) * G
      [4141299, 15648869, 14497127, 15573560, 4341458, 4137259,
       873480, 6216257, 6236095, 11374576, 14536],
      [15278459, 15157739, 3645536, 2709983, 8649368, 6561637,
       5561789, 15962262, 14463254, 6387830, 33730]
    ],
    [ //  6 * (16 ** 24) * G
      [7358156, 7222525, 7824054, 14888333, 235702, 6181160,
       3052303, 2336209, 5932908, 10228304, 16248],
      [6831693, 8742288, 14029959, 9308991, 2154116, 4694627,
       14521934, 6605172, 9545445, 15840162, 53465]
    ],
    [ //  7 * (16 ** 24) * G
      [15668612, 6885814, 12538942, 9409036, 11117219, 1589879,
       14941493, 5789947, 6339337, 9223400, 28619],
      [3215602, 16237085, 2474953, 9603651, 9631446, 4562265,
       2337840, 13978632, 7478646, 11025803, 43249]
    ],
    [ //  8 * (16 ** 24) * G
      [6918003, 9806333, 15349084, 2776216, 5026727, 9269707,
       15203467, 6778423, 10692224, 5175890, 40058],
      [848194, 4439314, 8131108, 15370142, 11566293, 15113108,
       12701869, 1492004, 1379451, 10951346, 41668]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 25) * G
      [9317872, 14169856, 16213544, 4401381, 12825175, 1003570,
       14650302, 76841, 2800021, 9505758, 11955],
      [7662254, 13389522, 4786448, 15529567, 4247840, 10067861,
       3444132, 7852925, 4672314, 12591927, 16169]
    ],
    [ //  2 * (16 ** 25) * G
      [14434958, 14265505, 11664953, 9458269, 15495574, 4728336,
       12450032, 16491253, 13198786, 8722981, 54062],
      [13623640, 14005505, 6862161, 4625655, 16092560, 8601649,
       2271626, 4574317, 12965454, 369148, 27628]
    ],
    [ //  3 * (16 ** 25) * G
      [2648048, 12077928, 3784450, 1775882, 1320674, 61602,
       6977545, 2796497, 5012706, 14387430, 63209],
      [1597930, 3862799, 2312027, 16347318, 269221, 14004519,
       7792832, 8509755, 13806452, 7932794, 21450]
    ],
    [ //  4 * (16 ** 25) * G
      [3106349, 2680548, 12546556, 7962637, 8466727, 209350,
       4605084, 16076039, 13815796, 269358, 58948],
      [15127953, 12655974, 12609297, 9535447, 14772111, 11849810,
       852167, 4956165, 6707919, 16759262, 48249]
    ],
    [ //  5 * (16 ** 25) * G
      [876802, 276722, 4233949, 10700089, 7164792, 10116848,
       12170777, 7887893, 935069, 14366838, 64797],
      [15228, 6590894, 8641034, 1134905, 4069650, 11993110,
       2062467, 15575583, 5268362, 12088208, 52052]
    ],
    [ //  6 * (16 ** 25) * G
      [8395490, 1941374, 13000802, 16410484, 12068303, 15830391,
       14307416, 9914137, 12671686, 11581762, 47892],
      [1951217, 15015516, 4426509, 6718817, 6180795, 13098617,
       15087290, 8865852, 1287796, 9862981, 38574]
    ],
    [ //  7 * (16 ** 25) * G
      [13073591, 3415490, 11990007, 187413, 7181321, 6918127,
       4089326, 10478759, 10063901, 7586341, 24994],
      [14362093, 1177629, 7636294, 7384607, 12955034, 838085,
       10444523, 16050721, 3855315, 13448013, 23482]
    ],
    [ //  8 * (16 ** 25) * G
      [3230821, 553655, 11394307, 7302762, 2653691, 412492,
       2567334, 11902802, 13325077, 12841745, 42534],
      [4135193, 8238502, 3847776, 8402258, 3562454, 12985582,
       8514031, 14240183, 966732, 2780057, 48008]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 26) * G
      [13412320, 10873406, 4114233, 6767411, 13814159, 9709735,
       3482189, 1044323, 7940620, 15613020, 32498],
      [2801812, 2284885, 2109483, 14662973, 11670608, 646017,
       5363174, 10811007, 11321361, 8791856, 44982]
    ],
    [ //  2 * (16 ** 26) * G
      [9006351, 2921131, 3960240, 788770, 8915941, 13069150,
       15690118, 9655197, 15109553, 4662406, 1606],
      [16066794, 4524196, 9474263, 12991311, 1804637, 8191707,
       13564164, 15905781, 7365563, 15606526, 61940]
    ],
    [ //  3 * (16 ** 26) * G
      [4132858, 5782947, 4289267, 1147002, 14994118, 12992970,
       7784921, 7742629, 8944333, 5711638, 14084],
      [16397740, 4179552, 16539629, 11176946, 12205751, 16731223,
       12290197, 8657844, 7464783, 575002, 23652]
    ],
    [ //  4 * (16 ** 26) * G
      [13992542, 5787048, 747932, 3689815, 15419006, 4182395,
       5525488, 3057427, 9632881, 14807378, 3394],
      [8996531, 563066, 13364504, 4932416, 5026540, 13270540,
       10836613, 2891543, 16161483, 2820641, 44506]
    ],
    [ //  5 * (16 ** 26) * G
      [6305043, 9987378, 9780335, 8473088, 12996038, 11966454,
       4374667, 2956970, 10017650, 7988546, 49833],
      [3474873, 5975100, 4822389, 4723988, 13002463, 13532812,
       8491867, 5515136, 7255496, 14109214, 61341]
    ],
    [ //  6 * (16 ** 26) * G
      [16544405, 14414613, 7331767, 4837240, 503189, 14059331,
       14807317, 4174987, 223546, 15521750, 44647],
      [5200738, 10247930, 3409151, 2894574, 3152242, 14270972,
       12077698, 469908, 16426706, 13807269, 53820]
    ],
    [ //  7 * (16 ** 26) * G
      [16641598, 16757209, 124486, 7090222, 2070385, 11516264,
       6085399, 1518513, 16538081, 1600177, 51700],
      [15540967, 7128524, 5198310, 8083679, 14766876, 2179908,
       4372611, 915249, 11772737, 687932, 2370]
    ],
    [ //  8 * (16 ** 26) * G
      [14123186, 9062042, 15202753, 16155712, 3870118, 15159692,
       12750746, 924112, 6061490, 5086868, 17628],
      [9679134, 7607211, 10326339, 12766915, 7828961, 6264244,
       14444607, 16317721, 12777929, 9537349, 56299]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 27) * G
      [4843603, 15765740, 4876033, 10057184, 13325138, 10975913,
       5565279, 5734437, 6556395, 4285473, 3665],
      [4218034, 4002678, 3552110, 9488878, 6830401, 200181,
       10828433, 2592436, 9458793, 1895013, 53043]
    ],
    [ //  2 * (16 ** 27) * G
      [12036709, 12245850, 10665855, 2560241, 14777866, 6542659,
       1019317, 8640612, 7745858, 13677551, 34085],
      [15230092, 8589277, 2816446, 9584393, 14666945, 6911696,
       1842791, 445507, 16326614, 11002129, 3683]
    ],
    [ //  3 * (16 ** 27) * G
      [13021101, 4135965, 4637858, 9828367, 13883682, 13006619,
       6251712, 14585554, 13291301, 10512229, 38779],
      [8366601, 13485341, 1396066, 1956378, 7708964, 14260527,
       10539137, 8926202, 14389154, 12338094, 7107]
    ],
    [ //  4 * (16 ** 27) * G
      [4987681, 1502468, 993757, 12834840, 4401299, 2282712,
       7759292, 11771517, 9900306, 45856, 6974],
      [16094407, 4199607, 15306210, 15775401, 16728489, 7767119,
       14270687, 15799077, 15983314, 2442234, 39748]
    ],
    [ //  5 * (16 ** 27) * G
      [8493115, 4577245, 7890423, 3116715, 2232272, 16436240,
       487935, 4996278, 1194686, 2646314, 15299],
      [10893238, 15893777, 9289113, 9419652, 3442778, 687939,
       6073072, 2427696, 821792, 8547821, 42677]
    ],
    [ //  6 * (16 ** 27) * G
      [9223474, 11811553, 2707248, 9766343, 14963601, 7971301,
       5226403, 8483206, 12633634, 7707527, 675],
      [13606596, 16048550, 13681447, 8162806, 1681466, 1973860,
       5963806, 2008535, 10428703, 5688351, 43139]
    ],
    [ //  7 * (16 ** 27) * G
      [13128571, 7086071, 6387191, 4464512, 9219255, 7086538,
       14797561, 5356271, 15467692, 10807529, 26571],
      [5711578, 5265208, 7216363, 13647935, 14615614, 13370491,
       2043825, 10609094, 1870212, 15592938, 23397]
    ],
    [ //  8 * (16 ** 27) * G
      [12124261, 12316250, 12044328, 12319349, 14533749, 15234598,
       3758578, 9018809, 2836708, 6878501, 30596],
      [14131185, 6988530, 11520247, 44250, 12307183, 14870823,
       6979329, 7300371, 11771040, 1749262, 17204]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 28) * G
      [15906612, 10222050, 6811753, 5571026, 12827483, 4478841,
       8843542, 406695, 15518106, 141726, 8778],
      [15499231, 5788817, 13665295, 7587759, 11994294, 8388359,
       11372317, 1350152, 7152308, 11063963, 64065]
    ],
    [ //  2 * (16 ** 28) * G
      [9561607, 4042265, 14592223, 1666577, 1102094, 2253283,
       12103531, 7737208, 10861985, 5977534, 45011],
      [529007, 7584835, 4283915, 2184623, 12048775, 15504314,
       2517889, 9885934, 321940, 6244578, 853]
    ],
    [ //  3 * (16 ** 28) * G
      [2441267, 3098461, 8047081, 12756080, 3572352, 15876216,
       10913974, 16571103, 3992665, 192021, 58933],
      [15752767, 11045224, 6323850, 4979955, 9525772, 13518892,
       984841, 11367656, 6430225, 8616735, 42949]
    ],
    [ //  4 * (16 ** 28) * G
      [12165130, 13390320, 9403926, 3118054, 1527204, 7722245,
       9942369, 10536908, 15419733, 11288629, 58830],
      [9980503, 16256615, 5182847, 8846969, 15588213, 13755532,
       10236822, 8735301, 13457081, 12136479, 26124]
    ],
    [ //  5 * (16 ** 28) * G
      [14716723, 634849, 13249430, 13342764, 16605981, 58033,
       12923888, 1223493, 15439495, 14598770, 22088],
      [6943177, 14265410, 5318382, 14684537, 7519218, 10643774,
       12995959, 16021749, 9400387, 14446704, 38397]
    ],
    [ //  6 * (16 ** 28) * G
      [10863942, 3429864, 9538986, 10688635, 960139, 14062367,
       7164520, 4093771, 12936827, 12925103, 42563],
      [16775255, 3374291, 8121118, 902730, 9689928, 3479880,
       72957, 4587571, 7854862, 191043, 43222]
    ],
    [ //  7 * (16 ** 28) * G
      [12160067, 2100218, 10806200, 8273546, 12212085, 9372613,
       9358316, 9770287, 8449318, 12689203, 6465],
      [11264535, 1104418, 3772322, 12115798, 16133437, 9196504,
       2771195, 14857947, 6140598, 12072025, 36454]
    ],
    [ //  8 * (16 ** 28) * G
      [4420875, 7189027, 7753557, 8204956, 4822434, 6266004,
       13804215, 9356879, 15104258, 6047275, 3649],
      [13457100, 8132030, 435721, 6289388, 16159140, 13491310,
       1079288, 2604194, 16352482, 7238007, 49925]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 29) * G
      [9025613, 6663543, 14871136, 13698076, 8216292, 9698838,
       1160548, 13481425, 3623756, 10884183, 19081],
      [9322152, 8224513, 10088347, 3436825, 3024902, 7857831,
       9936870, 574186, 4722012, 5146605, 17840]
    ],
    [ //  2 * (16 ** 29) * G
      [14753662, 10290020, 532484, 9338075, 14400584, 14534459,
       10530388, 9086139, 8792431, 7237061, 21942],
      [7852150, 14444316, 16319677, 2209172, 16670982, 2354124,
       314530, 12814028, 13713819, 11083549, 36931]
    ],
    [ //  3 * (16 ** 29) * G
      [14765108, 11679554, 9662070, 471669, 5004990, 7850371,
       948243, 10660275, 7401362, 9849000, 52383],
      [12473707, 1407636, 362642, 8555646, 10033137, 9034537,
       3398630, 4395366, 16304495, 16723125, 33435]
    ],
    [ //  4 * (16 ** 29) * G
      [4961542, 4198092, 73798, 9913487, 6376810, 1706758,
       1286530, 11214080, 13334952, 12358093, 56126],
      [11789834, 1580873, 183261, 15267794, 1582837, 9590962,
       6194515, 11475560, 6776451, 6574986, 43354]
    ],
    [ //  5 * (16 ** 29) * G
      [14567479, 7112085, 5146590, 3007975, 4359880, 9074061,
       1903321, 16053644, 11338778, 9282042, 23649],
      [4881902, 5782371, 13287608, 6562424, 13854281, 9859564,
       3688957, 8960014, 15966621, 9508796, 19569]
    ],
    [ //  6 * (16 ** 29) * G
      [14444480, 4492096, 9221834, 6611341, 9294523, 12622576,
       15632366, 6807164, 14861695, 13308586, 8893],
      [949723, 6063163, 7637658, 3901895, 16564027, 10241909,
       9375120, 12163194, 4095441, 824747, 21487]
    ],
    [ //  7 * (16 ** 29) * G
      [6509462, 3417686, 796041, 3574380, 13295962, 12656370,
       14542449, 15042018, 5899938, 8940177, 43914],
      [13184035, 16411199, 11370040, 16241366, 3540355, 14003129,
       8538300, 5662975, 11027225, 13597821, 59251]
    ],
    [ //  8 * (16 ** 29) * G
      [15061425, 2259373, 151388, 13003447, 16424593, 10731485,
       14920292, 12132724, 7570711, 8245586, 57043],
      [13072571, 7829266, 4751820, 5837444, 3868525, 4503796,
       11764293, 2833578, 15174720, 3955332, 45390]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 30) * G
      [12387744, 13126258, 865336, 729032, 8532861, 2068666,
       9827181, 15581945, 3246172, 9582138, 58856],
      [10919773, 14560225, 11454774, 10277017, 7575899, 6045386,
       124827, 1245675, 1804242, 10347738, 30531]
    ],
    [ //  2 * (16 ** 30) * G
      [11853633, 6093171, 5311590, 1010026, 6784250, 8157438,
       15520535, 4512095, 16697553, 15562303, 51239],
      [16326474, 6955904, 11742811, 7077959, 15312400, 3986367,
       8087279, 6349181, 14311125, 4486642, 7756]
    ],
    [ //  3 * (16 ** 30) * G
      [4619627, 5406977, 5328649, 5415499, 8220969, 15849525,
       1139756, 13697414, 3525877, 9691028, 23843],
      [12342360, 7587505, 11012038, 5309555, 10946471, 16018802,
       5975386, 8047576, 16584573, 6550115, 58990]
    ],
    [ //  4 * (16 ** 30) * G
      [3411296, 308038, 12730457, 9793149, 9999899, 5799305,
       15643585, 2485651, 12011095, 5265, 46353],
      [4115110, 6387813, 9529549, 1595719, 11895473, 16349327,
       10418025, 7515017, 16665670, 8516657, 39993]
    ],
    [ //  5 * (16 ** 30) * G
      [1417082, 15285405, 9498801, 15876837, 16333468, 8863724,
       2872063, 3857659, 11241791, 5743930, 17718],
      [195448, 2846858, 6134210, 15211994, 9739220, 13052015,
       9517569, 14298864, 146885, 11468680, 49077]
    ],
    [ //  6 * (16 ** 30) * G
      [16456340, 7784012, 15308594, 6540749, 3081955, 15091107,
       10675328, 16761821, 2372336, 12722615, 10144],
      [624004, 16302804, 9939864, 7890754, 14921789, 2006417,
       9290114, 15921903, 10528658, 11222707, 50166]
    ],
    [ //  7 * (16 ** 30) * G
      [7124010, 15594452, 9646573, 10953616, 338003, 7595964,
       15376701, 5051565, 11553862, 5556999, 17243],
      [16199120, 5107162, 10926050, 4405577, 14437497, 5791070,
       5030368, 4846757, 7440922, 12595684, 55078]
    ],
    [ //  8 * (16 ** 30) * G
      [9316307, 13924711, 9421203, 937064, 2655213, 7818945,
       3229924, 1880816, 951305, 13299396, 24746],
      [12899038, 6357544, 4980604, 3827727, 13893752, 323142,
       13108190, 14308599, 14612077, 14679237, 38519]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 31) * G
      [11911887, 10064634, 14557527, 2076804, 1241282, 9479251,
       4261114, 7464775, 2236240, 8274718, 58384],
      [9788459, 4210475, 1101864, 16743204, 7901916, 2830908,
       6845468, 3754182, 7347354, 1173199, 7775]
    ],
    [ //  2 * (16 ** 31) * G
      [10385974, 10073172, 3494159, 6719268, 6638886, 3348896,
       1139926, 10967025, 15136825, 9820993, 11602],
      [3337063, 8492494, 3923382, 9908410, 8078585, 3720938,
       11302459, 3862892, 8417842, 13576198, 63882]
    ],
    [ //  3 * (16 ** 31) * G
      [11959166, 11942921, 4742069, 9509949, 7043883, 1131126,
       122556, 11194263, 1548157, 10118638, 34271],
      [669411, 8822403, 10848435, 2079854, 16422045, 2716550,
       6225678, 12282749, 11494152, 12036665, 42676]
    ],
    [ //  4 * (16 ** 31) * G
      [10655559, 8484675, 9949165, 8305030, 2370496, 16570930,
       4587967, 16721644, 12579710, 1388043, 14455],
      [5064247, 4072946, 4307543, 13631206, 12394350, 3616927,
       7125405, 12457489, 4965914, 11008257, 52336]
    ],
    [ //  5 * (16 ** 31) * G
      [3477715, 16639499, 14946940, 303574, 13833831, 2697349,
       8805421, 11065505, 10472712, 9698943, 9156],
      [15243847, 3064890, 14095174, 2537947, 10085214, 15128823,
       10374911, 796509, 3413027, 5679588, 44532]
    ],
    [ //  6 * (16 ** 31) * G
      [8432518, 4488251, 3932266, 9649775, 7025800, 5396424,
       5508370, 577812, 7557692, 9466822, 47324],
      [9129322, 1658628, 14692193, 14367977, 5064089, 1598410,
       8291348, 4939206, 13901416, 8855919, 60535]
    ],
    [ //  7 * (16 ** 31) * G
      [4826911, 9535627, 3779782, 6562428, 3599212, 3530156,
       15444722, 14571923, 5099757, 7146289, 37952],
      [11684265, 1656016, 9717532, 13263823, 14840417, 15243216,
       9474159, 13443196, 5108089, 15171206, 25002]
    ],
    [ //  8 * (16 ** 31) * G
      [12297812, 10094086, 10443078, 1269415, 3932093, 1460574,
       2558606, 10909748, 13649257, 6975040, 17274],
      [10993907, 4218935, 1062741, 1652948, 10994550, 12951572,
       6288205, 11216002, 8332434, 1971544, 49809]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 32) * G
      [9026949, 5229015, 12801992, 12752874, 3538813, 7761660,
       13994182, 16488495, 14376551, 7576558, 17533],
      [14834482, 3393906, 3198, 11008741, 3447701, 11532093,
       9779786, 14757533, 4272622, 2468739, 11592]
    ],
    [ //  2 * (16 ** 32) * G
      [7038558, 2171162, 3861252, 11007616, 3110814, 312192,
       2767880, 4673567, 4563412, 9542473, 41571],
      [12377339, 262192, 14851812, 4980975, 4162527, 6342060,
       10348045, 3054908, 15540476, 48426, 34610]
    ],
    [ //  3 * (16 ** 32) * G
      [10935144, 10063582, 12743649, 534066, 16439382, 16053981,
       16344542, 5812557, 13238655, 5455363, 63670],
      [7736745, 2470062, 15559101, 10247328, 12415197, 4114027,
       14307498, 3081325, 4478086, 5174764, 49935]
    ],
    [ //  4 * (16 ** 32) * G
      [7806732, 13872205, 11073265, 3924142, 11343590, 4714668,
       14505877, 1631802, 8264033, 14098917, 10384],
      [8981880, 2682037, 6883927, 8320320, 12642295, 5434493,
       13713767, 11499489, 14418730, 12064157, 27061]
    ],
    [ //  5 * (16 ** 32) * G
      [2418515, 13954041, 8152789, 2947186, 94983, 16479583,
       8858093, 5541617, 8553596, 9032533, 62290],
      [1286668, 11911915, 305733, 2698511, 6487127, 1824965,
       10597646, 9690888, 15471611, 7872197, 30145]
    ],
    [ //  6 * (16 ** 32) * G
      [7348538, 9637158, 10811574, 11500189, 7150578, 3394452,
       12605776, 5517507, 6022272, 6093548, 37535],
      [4747028, 5883341, 7382320, 16249345, 3684708, 9454875,
       12276195, 12954724, 3350726, 3576361, 10701]
    ],
    [ //  7 * (16 ** 32) * G
      [1573246, 13330224, 14099349, 14081827, 1318911, 5112239,
       6272627, 4731928, 4462358, 7042266, 53200],
      [917328, 8119502, 7839918, 7042967, 3158136, 7950336,
       9799642, 8455091, 2861331, 12036535, 46663]
    ],
    [ //  8 * (16 ** 32) * G
      [8298052, 2289580, 8474456, 7461399, 14942046, 14878164,
       2622269, 8481030, 5086319, 8939485, 31627],
      [13439683, 141992, 6621031, 12310307, 360045, 11384164,
       3964373, 2246151, 1474740, 2571857, 35782]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 33) * G
      [8251190, 9153555, 2367165, 8816846, 16307553, 12684962,
       2854110, 8992596, 10276670, 14881940, 36898],
      [12857036, 6031428, 5764335, 4516470, 4798060, 13502591,
       283174, 6738107, 304020, 6180649, 12206]
    ],
    [ //  2 * (16 ** 33) * G
      [8020028, 5427061, 9930542, 6568290, 3189097, 1261281,
       7864753, 12743455, 14620828, 6551036, 42870],
      [11068520, 4554828, 4774167, 9222862, 12086358, 10705546,
       16405622, 14346626, 14351448, 10272173, 19987]
    ],
    [ //  3 * (16 ** 33) * G
      [10158581, 7125200, 5345648, 3306432, 4142360, 8747767,
       4135671, 16453421, 7334213, 7529223, 28248],
      [13459422, 5822891, 10994439, 14719621, 3242452, 15788993,
       4912062, 8440861, 14119281, 12594888, 16915]
    ],
    [ //  4 * (16 ** 33) * G
      [1966052, 2175046, 8579134, 16227157, 4024683, 8851113,
       2713074, 1216797, 8952337, 10015451, 6768],
      [1250778, 6221078, 5501882, 14558901, 6825859, 15935336,
       9662326, 15049772, 9136634, 7665134, 14804]
    ],
    [ //  5 * (16 ** 33) * G
      [14965535, 12011503, 12760377, 3039592, 13719035, 14647931,
       3427351, 4914462, 14303056, 2142629, 10530],
      [4960294, 756563, 286692, 5037377, 12796976, 9273335,
       6290153, 14908537, 15824302, 10507051, 58134]
    ],
    [ //  6 * (16 ** 33) * G
      [12021465, 13658221, 590995, 10551829, 12060649, 6669667,
       4895975, 13462711, 7093894, 16358717, 32165],
      [5425652, 13603735, 3244273, 9204225, 1882987, 5653273,
       1262279, 15018461, 1060633, 10141736, 55846]
    ],
    [ //  7 * (16 ** 33) * G
      [11261248, 418467, 14958213, 4920941, 8405093, 3814414,
       8855817, 12788303, 10768138, 14764039, 13892],
      [6137393, 16653525, 5104070, 10907553, 1539309, 14848768,
       3186593, 1163909, 12745078, 9523419, 60506]
    ],
    [ //  8 * (16 ** 33) * G
      [7522734, 1011492, 15893520, 2503220, 495435, 8382746,
       2037057, 11289599, 3345335, 2253034, 65497],
      [13646564, 12703846, 3449038, 8817546, 4009628, 1990438,
       3286385, 5871971, 2167111, 9679034, 53067]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 34) * G
      [13448087, 4571460, 11891729, 1659230, 3457286, 7204316,
       15906069, 8992876, 15574819, 16712729, 29626],
      [14465252, 2757530, 4801007, 16262675, 10418476, 8543863,
       15253903, 6947025, 7842911, 14574409, 7831]
    ],
    [ //  2 * (16 ** 34) * G
      [14169624, 16612575, 12364993, 3247507, 742876, 8855060,
       11378932, 3590709, 12206853, 4547473, 28597],
      [4392486, 16108290, 4079417, 11199955, 1991833, 14334511,
       12919049, 15547240, 13023395, 14186342, 63075]
    ],
    [ //  3 * (16 ** 34) * G
      [2078995, 16339478, 9928368, 5690130, 1057889, 13651518,
       14566590, 3425160, 15075864, 3345459, 17912],
      [1426364, 8485900, 7565524, 16186419, 7145593, 7823600,
       7788730, 16256640, 14061678, 13594047, 49682]
    ],
    [ //  4 * (16 ** 34) * G
      [12425841, 14353436, 7943547, 11824884, 14229104, 14989634,
       15458200, 10569159, 8790291, 14602418, 54612],
      [9225006, 4885308, 10069050, 10987036, 2752169, 9639007,
       13916867, 16715642, 3567758, 16337772, 29880]
    ],
    [ //  5 * (16 ** 34) * G
      [3749460, 9867758, 13064943, 15986135, 6114273, 5869974,
       1870797, 6682016, 14138795, 14436780, 21828],
      [5447791, 769935, 7545697, 251278, 2031255, 5345828,
       11909267, 12602373, 8912202, 8751440, 60734]
    ],
    [ //  6 * (16 ** 34) * G
      [11884858, 4150714, 10545337, 15098535, 13529923, 11620164,
       10081326, 5562748, 14745909, 732393, 17427],
      [6000265, 7749055, 4187045, 13487662, 7150558, 8429943,
       2185989, 3263057, 467535, 8374137, 18713]
    ],
    [ //  7 * (16 ** 34) * G
      [10575357, 5870632, 5575667, 2488990, 1948352, 16160116,
       13982434, 4930862, 10413939, 12030049, 10071],
      [4375361, 8654064, 7208078, 3974933, 6854538, 5246231,
       2178261, 6080885, 12759342, 13817172, 57158]
    ],
    [ //  8 * (16 ** 34) * G
      [14847114, 8486715, 8773250, 2233092, 6387558, 5337503,
       5515618, 6538468, 389575, 14126031, 47241],
      [16644254, 16667114, 12791863, 7876536, 16134629, 60127,
       11105735, 1584100, 5315483, 722938, 47803]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 35) * G
      [10806076, 6271775, 11734574, 9111948, 8634055, 16488486,
       7088502, 13202500, 4990395, 4634906, 40182],
      [869731, 6161934, 3283396, 15450464, 2119719, 2044318,
       2460546, 1982606, 16145033, 6442433, 14256]
    ],
    [ //  2 * (16 ** 35) * G
      [2420552, 6896066, 16092233, 2383381, 11424873, 8671084,
       9262407, 3510655, 5386904, 1639332, 65061],
      [3596199, 6332497, 568937, 12788196, 5941921, 3579973,
       4217371, 14169785, 13278176, 10267799, 20396]
    ],
    [ //  3 * (16 ** 35) * G
      [12525159, 6393030, 6547851, 16669871, 5662537, 5115724,
       3680118, 10320485, 1795225, 4447765, 33739],
      [10144919, 15250185, 10396286, 12439830, 7619116, 1636392,
       7234116, 15708544, 10024696, 9216587, 48354]
    ],
    [ //  4 * (16 ** 35) * G
      [4217460, 6075981, 10861775, 12440551, 12754795, 1054414,
       12842515, 14861238, 6879730, 1987603, 52289],
      [13745627, 15119896, 877659, 10426107, 5227008, 8835262,
       16528641, 5707047, 7816580, 8466348, 65227]
    ],
    [ //  5 * (16 ** 35) * G
      [984446, 14108892, 14164746, 120125, 15229575, 140420,
       12672549, 209935, 13545612, 11789664, 16371],
      [1545822, 16243368, 6434113, 12873751, 1057646, 7881632,
       7362438, 7307217, 11949967, 11366203, 32535]
    ],
    [ //  6 * (16 ** 35) * G
      [10403677, 7868022, 2847956, 8272070, 5238168, 6639574,
       15962324, 8445043, 10295119, 15202590, 34006],
      [2933625, 8843622, 15907589, 11051624, 4890426, 13719985,
       4056330, 15005443, 4226125, 16050286, 1365]
    ],
    [ //  7 * (16 ** 35) * G
      [6187505, 4931634, 11867409, 13902524, 6793458, 11508067,
       14775254, 14524829, 16767039, 14364120, 28318],
      [2850459, 1565504, 1798670, 7970600, 7500884, 12580380,
       11232755, 11220310, 16749902, 2234062, 49282]
    ],
    [ //  8 * (16 ** 35) * G
      [14758779, 2691246, 11638312, 4572321, 9962026, 6152456,
       15986627, 13251950, 10761500, 9583857, 35948],
      [13126334, 1924313, 2804549, 13032954, 5464769, 9340036,
       3251882, 6224818, 4259690, 7325773, 41253]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 36) * G
      [3895661, 11386962, 7045743, 16207386, 2328934, 14654989,
       9669912, 15246791, 9217332, 6022027, 63519],
      [6497281, 193810, 3163712, 3835779, 481360, 206950,
       10303502, 1922770, 2033375, 4797084, 56447]
    ],
    [ //  2 * (16 ** 36) * G
      [7902521, 12920720, 2442976, 3919959, 5118577, 3244558,
       6455510, 1412775, 10243135, 15168194, 29785],
      [3791231, 5916436, 9518303, 5209523, 3864032, 12691768,
       8751662, 15498894, 3425514, 13104408, 35115]
    ],
    [ //  3 * (16 ** 36) * G
      [13737354, 6836281, 1410245, 5350738, 4269961, 4786747,
       3522925, 5961452, 1214008, 8671483, 42496],
      [863311, 14398297, 4062613, 10954327, 16646287, 13272304,
       6192105, 13170388, 10714226, 7979111, 31563]
    ],
    [ //  4 * (16 ** 36) * G
      [15917031, 8293518, 12907634, 5998721, 6180825, 16596788,
       16284974, 12977353, 8357010, 8140861, 11804],
      [6184746, 13411013, 12402565, 6795461, 14108630, 11071938,
       2752382, 7184197, 15777318, 14428937, 50729]
    ],
    [ //  5 * (16 ** 36) * G
      [7122079, 8075593, 7480984, 6046942, 14912746, 924761,
       7966699, 12995593, 8254292, 8565142, 56915],
      [10777555, 8584623, 1408224, 7592001, 14934676, 10431426,
       627151, 6472624, 10260869, 11958454, 40007]
    ],
    [ //  6 * (16 ** 36) * G
      [12531113, 8128561, 9452364, 7168540, 15544374, 5858786,
       9986955, 4246279, 3432019, 11267269, 29919],
      [10643681, 11565878, 9254421, 12936324, 6267174, 13539647,
       7980311, 6891550, 5678960, 1789065, 18484]
    ],
    [ //  7 * (16 ** 36) * G
      [8419875, 9844614, 4095154, 6956543, 8273, 5163072,
       10309913, 5457081, 15902984, 8062983, 42786],
      [1136788, 1672148, 13179975, 12003533, 12550487, 7711719,
       7938208, 4577924, 6109672, 7677396, 62800]
    ],
    [ //  8 * (16 ** 36) * G
      [15865971, 15217650, 1682667, 8661424, 3129757, 14428162,
       11076136, 15085880, 15193369, 7969590, 35974],
      [1413440, 12048357, 15501573, 15229424, 12534534, 7524701,
       14972322, 6409887, 10741853, 2888357, 23564]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 37) * G
      [3492730, 13100935, 9932505, 12816732, 3066454, 14556418,
       6546748, 2332660, 8259656, 5534935, 34152],
      [7210182, 4205521, 12421460, 2086653, 11047388, 7505670,
       3877487, 15645841, 16091062, 963851, 8373]
    ],
    [ //  2 * (16 ** 37) * G
      [4408807, 5955654, 12654700, 3953476, 16445572, 6900805,
       8084209, 6889159, 11848812, 11247362, 33004],
      [4383727, 14570208, 11835299, 6016219, 15007946, 16548914,
       16268825, 16474056, 7165382, 1346250, 62500]
    ],
    [ //  3 * (16 ** 37) * G
      [2496093, 13105787, 8302444, 16152339, 1286677, 9625255,
       602060, 4843986, 11681381, 4507474, 24947],
      [11707014, 16632710, 10798235, 14905713, 10071062, 2142872,
       774530, 4831185, 3638106, 1447844, 59792]
    ],
    [ //  4 * (16 ** 37) * G
      [3550164, 3171700, 4007232, 3107776, 1284641, 16731997,
       11633726, 3404224, 13553476, 992033, 57693],
      [11825080, 13425327, 6930026, 10765954, 15551480, 14886435,
       3747979, 12697568, 8307246, 13361776, 39556]
    ],
    [ //  5 * (16 ** 37) * G
      [4466544, 16213584, 13697563, 14746042, 1636262, 16526992,
       14327360, 14288065, 16476706, 257621, 63660],
      [51245, 6615323, 145960, 9765917, 7733951, 7149481,
       5354318, 10761927, 10296974, 9332057, 23093]
    ],
    [ //  6 * (16 ** 37) * G
      [15728612, 8877873, 14467939, 14854905, 4447231, 3255210,
       6342304, 6007440, 2711969, 4097010, 3102],
      [6977572, 4774537, 5463243, 5645750, 16243563, 13768338,
       2797408, 15231474, 14109533, 915021, 22809]
    ],
    [ //  7 * (16 ** 37) * G
      [5529822, 7177974, 12123104, 11190135, 7600336, 9348620,
       12464332, 7105724, 12359110, 2077989, 35443],
      [9290247, 10100223, 14936453, 5394574, 8814140, 5096501,
       4980656, 9392789, 11232025, 5621218, 22616]
    ],
    [ //  8 * (16 ** 37) * G
      [10460261, 12139318, 6738806, 2638028, 4355001, 3464283,
       8903789, 5830977, 11883837, 8948189, 59299],
      [11005532, 14999724, 12008219, 1604890, 10627988, 4570456,
       2496801, 582523, 2199922, 11909809, 21559]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 38) * G
      [3640342, 14424850, 2809286, 4592994, 3540821, 5864862,
       2976761, 11737573, 2833169, 12016065, 4406],
      [4751655, 10211507, 14907893, 15159756, 1354280, 15512214,
       12980201, 651435, 1478621, 1036101, 32236]
    ],
    [ //  2 * (16 ** 38) * G
      [5060983, 14352371, 6279398, 1626132, 6045962, 5272281,
       1160772, 552844, 5871693, 16085889, 4593],
      [1395569, 9497088, 398524, 4048514, 8295743, 4769683,
       8901543, 13337247, 12630405, 12694905, 43928]
    ],
    [ //  3 * (16 ** 38) * G
      [2725696, 7176827, 3446542, 7421361, 1001085, 11356404,
       3642362, 13388497, 14500662, 4110108, 21385],
      [16741641, 7281471, 13455850, 2227688, 10564335, 14454232,
       2681461, 3686862, 8780760, 9076372, 10098]
    ],
    [ //  4 * (16 ** 38) * G
      [6974102, 829517, 4177540, 10104417, 3906167, 2459285,
       12017277, 10190872, 1891400, 9025962, 37708],
      [14170349, 1344819, 10480623, 14869706, 8203760, 3054864,
       14070555, 4527830, 13300746, 16056252, 34154]
    ],
    [ //  5 * (16 ** 38) * G
      [8388860, 13194867, 12660915, 8122427, 1976176, 15032398,
       12251642, 5759862, 5036583, 15326581, 56676],
      [16034834, 1855709, 16301994, 12131912, 4575266, 7995326,
       4069834, 7207070, 2699977, 9693964, 17185]
    ],
    [ //  6 * (16 ** 38) * G
      [3844536, 6299735, 2424037, 8560338, 7426232, 16017375,
       8368789, 5940002, 2910531, 2456409, 53693],
      [5363739, 6834475, 4374885, 8703859, 13513687, 934261,
       3029354, 13677714, 12977446, 12635211, 6012]
    ],
    [ //  7 * (16 ** 38) * G
      [8883274, 1382195, 5631874, 8737216, 8638524, 1778136,
       6349993, 15910556, 16766230, 4565118, 65432],
      [8970088, 8682868, 12348326, 11951358, 15939398, 15261169,
       9363445, 9427108, 14828175, 10155172, 33627]
    ],
    [ //  8 * (16 ** 38) * G
      [12912328, 6202540, 1179327, 9255477, 200449, 639912,
       6708442, 9394226, 10351125, 8936602, 19712],
      [3516972, 6688280, 3396858, 10841313, 13728458, 8954181,
       4459006, 1359943, 7456754, 3947158, 16261]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 39) * G
      [4096810, 3076500, 7380086, 1541855, 15010480, 15830535,
       11019657, 9500019, 12756250, 15895463, 3371],
      [2151292, 3862875, 4605990, 6313236, 15506873, 15199527,
       693428, 7374753, 12386476, 4145939, 3244]
    ],
    [ //  2 * (16 ** 39) * G
      [8586685, 12415139, 5701187, 9411432, 6549612, 12017931,
       9173149, 16509217, 965336, 15582050, 34046],
      [7584681, 2095200, 3932148, 14365381, 6873389, 3754021,
       6035418, 4865883, 13091173, 12309929, 61849]
    ],
    [ //  3 * (16 ** 39) * G
      [2922086, 12893201, 15950314, 6684621, 16303811, 5446428,
       3520473, 16620492, 6813740, 15228601, 13541],
      [2766438, 8731801, 2536865, 12706725, 4713827, 4600591,
       7720124, 8553573, 2204523, 6828338, 49358]
    ],
    [ //  4 * (16 ** 39) * G
      [16428931, 5546657, 15751205, 15744515, 3776308, 16640828,
       7462871, 2183192, 4676564, 558795, 23945],
      [14884794, 1310508, 13781380, 2180659, 5992825, 6385013,
       15690928, 4632909, 10679962, 3718532, 38665]
    ],
    [ //  5 * (16 ** 39) * G
      [2135298, 2876241, 6668645, 2480422, 4289024, 14767193,
       15665433, 10929299, 16046179, 6474841, 29299],
      [273165, 13751255, 12306039, 12265312, 9254905, 1908897,
       9186537, 10424331, 11250520, 15999643, 6064]
    ],
    [ //  6 * (16 ** 39) * G
      [8983841, 1423935, 6735354, 3515089, 6660748, 5847840,
       1641072, 3077949, 14133508, 13719375, 46511],
      [13741298, 3260656, 6400718, 5133341, 13957523, 3706813,
       10881254, 7456115, 96715, 10529928, 31061]
    ],
    [ //  7 * (16 ** 39) * G
      [4716889, 7940260, 6833502, 8548819, 4709050, 15657465,
       12893001, 9910804, 4877548, 15884293, 41155],
      [9135903, 13781142, 13217849, 5821042, 11883522, 8521905,
       1100642, 3682188, 4926543, 7538958, 20620]
    ],
    [ //  8 * (16 ** 39) * G
      [16746612, 12957885, 6161924, 1458387, 12831484, 1452315,
       4538638, 16111432, 10086044, 12943686, 42721],
      [486831, 14217107, 1316997, 3674802, 9017759, 3079607,
       11136858, 2404832, 11020262, 11416799, 3109]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 40) * G
      [16265002, 13065719, 3845865, 4914676, 4994439, 1255070,
       16004919, 16081453, 13055511, 6248046, 35411],
      [3183799, 10529826, 6931961, 5016694, 15020934, 9617357,
       1640538, 3661864, 11570135, 12616808, 1109]
    ],
    [ //  2 * (16 ** 40) * G
      [13467446, 4441089, 10217648, 9705748, 10078449, 16389975,
       6310077, 13856300, 8473988, 10582664, 20143],
      [2956355, 12995083, 13813624, 11355459, 3581324, 12876624,
       1386479, 15615315, 15474719, 7657553, 42105]
    ],
    [ //  3 * (16 ** 40) * G
      [3444640, 15865771, 14547732, 333121, 16655449, 11844832,
       2321444, 12755491, 15435821, 13188573, 34538],
      [10820846, 8426829, 9064163, 5361646, 2546019, 4616556,
       10390895, 5915503, 12340621, 3691467, 38031]
    ],
    [ //  4 * (16 ** 40) * G
      [6427899, 10310841, 6671409, 9432007, 14456954, 12945777,
       9883121, 13478372, 12573477, 3130447, 50706],
      [11403255, 12423095, 9058050, 1976095, 10937484, 16326408,
       8816759, 9449929, 4435009, 6024323, 59936]
    ],
    [ //  5 * (16 ** 40) * G
      [2239491, 2096281, 228084, 8906209, 9234302, 15992724,
       7882841, 4152957, 16464558, 10402553, 35824],
      [7519060, 16204522, 13934917, 14557409, 10404065, 12202140,
       14411749, 3885233, 14842483, 12234722, 20636]
    ],
    [ //  6 * (16 ** 40) * G
      [2186237, 9927309, 11998854, 8328290, 14709798, 6104203,
       959190, 8762914, 5399198, 13549087, 35663],
      [6210155, 15731271, 14026474, 10297773, 13959888, 5570553,
       13294226, 16347057, 2233726, 502184, 7987]
    ],
    [ //  7 * (16 ** 40) * G
      [11440896, 10666449, 8434771, 7718018, 1853188, 7560030,
       11379443, 1643275, 15142854, 3001271, 59486],
      [4645470, 14671125, 12284576, 14650417, 12050821, 2557918,
       5997116, 13089403, 1892543, 11511509, 17690]
    ],
    [ //  8 * (16 ** 40) * G
      [10316676, 15330574, 8907131, 15632057, 5242845, 10476143,
       2888449, 2405380, 8462647, 4203201, 46809],
      [10996513, 11145148, 2810300, 15486776, 3306474, 8049602,
       8946903, 8795207, 9602851, 4145506, 37887]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 41) * G
      [7784477, 8343524, 6200451, 10085693, 10683150, 10708663,
       2571688, 10155981, 11803137, 9494492, 44384],
      [6751709, 12354798, 14647690, 5189704, 4185142, 14198841,
       12766299, 11324789, 16042270, 13753672, 30645]
    ],
    [ //  2 * (16 ** 41) * G
      [15562315, 901322, 11906328, 8830284, 8330613, 10559266,
       13264630, 2500342, 12354780, 7592577, 32325],
      [12776183, 1138455, 11836547, 13704831, 15594439, 11668271,
       13186641, 15842207, 433957, 15728022, 36027]
    ],
    [ //  3 * (16 ** 41) * G
      [7492752, 7568610, 9439780, 2345817, 12788742, 8797258,
       5454601, 10661290, 11364732, 4569969, 55563],
      [15405721, 5211311, 13414648, 15975526, 14419903, 13359116,
       6845304, 645301, 12268815, 9604801, 13094]
    ],
    [ //  4 * (16 ** 41) * G
      [15786046, 2840259, 4044069, 5249146, 10249567, 12738330,
       13171760, 7960490, 6619679, 5782719, 44819],
      [6081314, 6028375, 8698671, 10740188, 2158079, 14088394,
       14970243, 14415371, 10180531, 3274778, 63742]
    ],
    [ //  5 * (16 ** 41) * G
      [9647720, 3827070, 15771499, 16280491, 186444, 442107,
       3865119, 11273529, 2179015, 9574193, 44069],
      [7827381, 8349490, 8001255, 13016606, 8798601, 15563887,
       4123608, 8720065, 14395578, 10500208, 27769]
    ],
    [ //  6 * (16 ** 41) * G
      [2925699, 2583734, 15095307, 7194318, 6781949, 1945539,
       10228273, 10279369, 2455471, 863296, 54058],
      [4414232, 10870266, 1526105, 7736637, 5003307, 13687149,
       4654487, 7578210, 10963760, 13938040, 3351]
    ],
    [ //  7 * (16 ** 41) * G
      [9299939, 8131090, 7182945, 11266713, 8661699, 3260294,
       12429236, 8860175, 7992232, 3623657, 31683],
      [7233065, 11742894, 15755168, 11845836, 15915833, 11320661,
       11431499, 14683255, 8736349, 15737952, 46129]
    ],
    [ //  8 * (16 ** 41) * G
      [12844217, 12325263, 6886447, 9994681, 10725011, 11391154,
       5352423, 2681110, 10962134, 3536589, 55845],
      [2786975, 6394768, 14252040, 6949216, 9303332, 13489133,
       6836493, 2377036, 4746738, 539687, 59222]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 42) * G
      [12886533, 2897555, 4760879, 16060584, 1761161, 2751710,
       7370169, 14968405, 375748, 7098723, 46816],
      [11758853, 5080669, 8868735, 11020959, 16356377, 14105443,
       2549662, 12968433, 11740149, 2587681, 48564]
    ],
    [ //  2 * (16 ** 42) * G
      [14482500, 1440252, 1255923, 14129131, 3568838, 2002351,
       10517486, 15030019, 16309695, 2598133, 42519],
      [15980046, 2785038, 15963064, 6484096, 12124420, 14768321,
       5909434, 14575917, 158058, 10375067, 1021]
    ],
    [ //  3 * (16 ** 42) * G
      [14842119, 2225913, 14062328, 8968676, 1758387, 12413047,
       6123487, 7027037, 2366542, 14958468, 3801],
      [7914747, 5197934, 389439, 12106265, 1383678, 920809,
       14215954, 16104463, 7021383, 8866559, 46511]
    ],
    [ //  4 * (16 ** 42) * G
      [4173476, 1395285, 13145082, 13200144, 4878721, 6987314,
       4947135, 9210355, 12433231, 9380840, 10096],
      [8400175, 14579152, 13742618, 13735515, 7170227, 13202428,
       14052546, 3146277, 13280420, 1597769, 22367]
    ],
    [ //  5 * (16 ** 42) * G
      [11767636, 5711157, 13514448, 6074119, 2786830, 14809390,
       14371070, 12931688, 7180157, 14946311, 22439],
      [6236169, 8513060, 10968999, 11077611, 14118457, 14492127,
       2342018, 1657994, 15510820, 984008, 64895]
    ],
    [ //  6 * (16 ** 42) * G
      [16158721, 8501152, 5679296, 11734150, 13213015, 5918671,
       14234805, 5758220, 2374647, 3578542, 11992],
      [12210590, 10693165, 16343404, 5935684, 3758533, 14147230,
       12236029, 15960669, 9499274, 7164266, 36241]
    ],
    [ //  7 * (16 ** 42) * G
      [10982803, 12319143, 7948030, 13786185, 8024649, 6091572,
       2460874, 16067995, 15687102, 10150643, 9337],
      [9571669, 9270736, 10016312, 10218259, 9713183, 14876825,
       11129699, 3326929, 13138811, 11871790, 37942]
    ],
    [ //  8 * (16 ** 42) * G
      [4480946, 12535191, 1081269, 11721317, 8669932, 11431088,
       8170359, 638953, 6741089, 4292522, 31982],
      [2243110, 13459880, 2052095, 10408163, 6809686, 766886,
       15202767, 9885809, 15055349, 15723489, 12352]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 43) * G
      [11162335, 16049321, 8338645, 11807330, 12866225, 15525400,
       9034129, 7191617, 6327287, 1165695, 17829],
      [6209900, 12390930, 13531986, 13773141, 9542439, 5952090,
       8375138, 4186931, 15375213, 968563, 29630]
    ],
    [ //  2 * (16 ** 43) * G
      [255050, 5381104, 15864780, 11772133, 428214, 1799426,
       279723, 2881482, 11330186, 10533558, 19666],
      [1688461, 15509883, 14043539, 13205157, 14870481, 13706941,
       7692824, 7148304, 13771781, 574321, 27359]
    ],
    [ //  3 * (16 ** 43) * G
      [7715967, 5500846, 2057575, 11991035, 13047565, 5012373,
       1185741, 9368591, 2855747, 11292647, 2903],
      [7530921, 7527689, 6423793, 4213244, 16346126, 9763505,
       13608318, 15895604, 11137973, 12550775, 52973]
    ],
    [ //  4 * (16 ** 43) * G
      [2210368, 3777269, 11696848, 10519197, 12903513, 4539629,
       10494408, 3289943, 2389867, 16660347, 29777],
      [1629433, 1889253, 3788966, 9985364, 11574969, 15392310,
       1672292, 14061570, 13044032, 6567420, 5689]
    ],
    [ //  5 * (16 ** 43) * G
      [3220991, 3395459, 4330356, 5921409, 4544432, 11442485,
       14273052, 13584002, 4968776, 11795310, 4472],
      [4745917, 9898456, 1828879, 582989, 13151693, 971021,
       3664433, 3681766, 11262299, 9955995, 57302]
    ],
    [ //  6 * (16 ** 43) * G
      [1387487, 6167970, 9601557, 16443393, 9222242, 1601536,
       9382607, 1411334, 7496185, 3292434, 49951],
      [13763117, 2209484, 8252865, 1060963, 13222334, 1372607,
       16618340, 10406253, 12481920, 14502059, 9865]
    ],
    [ //  7 * (16 ** 43) * G
      [6478165, 9817334, 5192502, 11832548, 4511365, 5673860,
       8293671, 16295995, 9758983, 10519151, 35527],
      [7028142, 2997860, 9288810, 12413971, 16024005, 10148323,
       2313397, 13228005, 3351324, 4231695, 51215]
    ],
    [ //  8 * (16 ** 43) * G
      [4146550, 11062187, 289863, 2451993, 13667243, 15949545,
       3913806, 2401082, 6146723, 14421502, 1423],
      [1117854, 14934432, 5847621, 6321527, 8393618, 8855070,
       4589240, 12836763, 11133159, 3907230, 37102]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 44) * G
      [7796091, 1751440, 469199, 13552326, 755427, 10829571,
       5250290, 12134371, 8439708, 1594952, 8417],
      [10989542, 12508077, 2000259, 4252087, 14736539, 15308703,
       14941037, 3259843, 4423415, 11752108, 65383]
    ],
    [ //  2 * (16 ** 44) * G
      [12716117, 9782484, 6004356, 761920, 14642191, 14101346,
       889481, 4190177, 11911943, 740859, 20205],
      [14679327, 8011659, 4148232, 2962686, 3591379, 1427473,
       2654145, 1655251, 5663034, 16459914, 44256]
    ],
    [ //  3 * (16 ** 44) * G
      [6692260, 3861835, 6063262, 6596682, 676268, 1712532,
       14222086, 9403519, 6686414, 2775992, 65482],
      [10193498, 8609455, 7309700, 15034495, 9406381, 7113799,
       10569972, 10829001, 7458248, 11592491, 52764]
    ],
    [ //  4 * (16 ** 44) * G
      [2388523, 3663365, 15172566, 15114541, 12164882, 2957566,
       1478353, 673201, 13272311, 4422778, 17120],
      [15365830, 3786783, 5928553, 11490342, 15346285, 15351515,
       13420980, 12254596, 14229742, 14289153, 11745]
    ],
    [ //  5 * (16 ** 44) * G
      [9239842, 1971100, 5782700, 11941566, 2819697, 3492430,
       1379757, 6513973, 12654251, 10284543, 65312],
      [12342581, 11619987, 9708425, 13199435, 5196690, 15845389,
       13782223, 2129217, 10293118, 15963974, 44409]
    ],
    [ //  6 * (16 ** 44) * G
      [14455846, 7633132, 10798253, 9655170, 4267271, 14671374,
       2360944, 9446904, 6871141, 14613442, 45837],
      [13051742, 1067817, 9433918, 11452451, 9646236, 13929307,
       1821059, 4895623, 1360211, 5232064, 32191]
    ],
    [ //  7 * (16 ** 44) * G
      [5150782, 15041935, 8185863, 7346167, 10383048, 4920685,
       8442683, 5791808, 498601, 15740171, 13269],
      [15349673, 14387089, 9792880, 5858060, 7449234, 10611578,
       1463739, 7586774, 10241924, 5928659, 491]
    ],
    [ //  8 * (16 ** 44) * G
      [13551876, 5227387, 2672370, 4480194, 10996722, 4770121,
       9421551, 12884458, 1768192, 9882821, 1805],
      [11219311, 5092003, 11335215, 3434523, 12446843, 15300435,
       2971120, 16539992, 703521, 6223359, 39825]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 45) * G
      [2570895, 5433497, 4906260, 6901717, 14501774, 14338367,
       8380375, 202988, 3801723, 12908658, 23708],
      [15207790, 13265244, 11906522, 10558154, 13941, 11507279,
       10303240, 11020120, 16699993, 14711325, 34031]
    ],
    [ //  2 * (16 ** 45) * G
      [16552414, 4401084, 13897518, 6033280, 13920039, 674699,
       7529666, 11019424, 12068711, 10967006, 3646],
      [8582476, 9199093, 8590430, 1350739, 11470928, 11187135,
       16123242, 2355883, 11411798, 12555007, 5106]
    ],
    [ //  3 * (16 ** 45) * G
      [8643458, 9983048, 15961228, 16078134, 6311886, 7614928,
       3756544, 6021696, 14669916, 14783163, 23240],
      [16689884, 4037597, 3035447, 4017565, 7793825, 3765982,
       15921302, 3787007, 8031360, 15007820, 64695]
    ],
    [ //  4 * (16 ** 45) * G
      [5696890, 8628901, 5752308, 3339534, 12245545, 12798710,
       216931, 1395204, 13077327, 11264504, 39532],
      [5547822, 4734624, 1451297, 13705735, 12091055, 5718270,
       16481621, 1959236, 13959237, 5253626, 60831]
    ],
    [ //  5 * (16 ** 45) * G
      [107496, 3176431, 5160100, 3033097, 15426883, 7561926,
       4514006, 2969949, 9511192, 432311, 39388],
      [16126228, 4587072, 9720454, 14153970, 10907700, 17591,
       1143256, 6912711, 12157628, 10280227, 26566]
    ],
    [ //  6 * (16 ** 45) * G
      [7655749, 9355772, 12379963, 8468914, 13200338, 2492857,
       14766283, 10870196, 8461572, 5096002, 40148],
      [13915895, 4219456, 6118508, 16679278, 3782907, 4432691,
       12246404, 285392, 4607539, 13294332, 34477]
    ],
    [ //  7 * (16 ** 45) * G
      [13972907, 8061004, 12793919, 15234637, 2414723, 12186487,
       5754831, 4457027, 263702, 15950222, 44002],
      [8100890, 1782865, 14258289, 12823693, 14580248, 16225663,
       2826285, 14552511, 5616275, 14044343, 20226]
    ],
    [ //  8 * (16 ** 45) * G
      [5931143, 8944243, 7453890, 1927816, 1629825, 14998771,
       8427938, 14188784, 5885788, 10840603, 60697],
      [10478935, 10520378, 4646252, 11441882, 9239898, 11526569,
       1223508, 3155269, 3888822, 6831724, 53182]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 46) * G
      [5390003, 10138408, 4909021, 5598316, 1718901, 13493045,
       4476733, 4631576, 11056555, 13954040, 47871],
      [11334535, 3149013, 15604088, 12535990, 5315791, 12622884,
       11762010, 14990, 13196931, 4048347, 4009]
    ],
    [ //  2 * (16 ** 46) * G
      [2185215, 11341725, 15642115, 8194033, 8485651, 9367273,
       9102571, 7674433, 8866313, 7112279, 51963],
      [13535624, 12616051, 923342, 9517982, 6992965, 14868636,
       12163764, 106955, 12961402, 16457429, 10970]
    ],
    [ //  3 * (16 ** 46) * G
      [7566913, 10178292, 3854345, 6734561, 16433345, 4175642,
       1193558, 7829685, 1870317, 4530756, 37300],
      [113632, 2828769, 258641, 7210877, 14146662, 11806921,
       5943343, 2888483, 16623990, 6536503, 16196]
    ],
    [ //  4 * (16 ** 46) * G
      [1780985, 15437029, 6047488, 10796921, 13797960, 11117367,
       2609038, 10127258, 13860043, 9483002, 35144],
      [9936187, 8046645, 13307160, 10730542, 9335062, 14956617,
       16645448, 8954027, 5976081, 65404, 54376]
    ],
    [ //  5 * (16 ** 46) * G
      [14483935, 12236838, 12175010, 5476335, 4128630, 9528692,
       13092968, 10714790, 2994298, 1269224, 10605],
      [3804616, 13836458, 6310224, 15066735, 16447000, 7850719,
       9926343, 2852626, 14763492, 5168530, 5125]
    ],
    [ //  6 * (16 ** 46) * G
      [15087988, 12262607, 14631546, 2385570, 6239213, 12436945,
       8541682, 12043747, 9337141, 13865899, 39750],
      [16459010, 13673212, 5286893, 16073049, 8318303, 12965567,
       1975993, 349424, 9138594, 15720849, 62412]
    ],
    [ //  7 * (16 ** 46) * G
      [5305821, 7276246, 13158014, 2199986, 16769316, 4888148,
       15856030, 9376706, 3570225, 4387729, 19209],
      [15588461, 6016122, 6472426, 15001402, 3958658, 12738306,
       87571, 14702017, 7121856, 11183670, 29746]
    ],
    [ //  8 * (16 ** 46) * G
      [4590946, 6301310, 3587327, 9704345, 7219742, 12934050,
       7927992, 10578294, 8497869, 9316836, 17981],
      [1122687, 5277836, 664166, 14304923, 10398740, 5412495,
       6759672, 15859052, 14853742, 7555962, 16399]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 47) * G
      [1118465, 579770, 6259538, 7789372, 10423066, 5019207,
       5055870, 15540899, 13555558, 2754959, 1709],
      [11763444, 12229983, 11452839, 11996809, 4365698, 6463710,
       1817067, 5874880, 16277045, 9116760, 11611]
    ],
    [ //  2 * (16 ** 47) * G
      [6010928, 774390, 14428959, 3880613, 16661722, 9705992,
       7258085, 15440587, 9983397, 15270239, 63063],
      [11637755, 10964359, 5948345, 15911139, 11254428, 15204290,
       13786528, 7194684, 13282377, 11057979, 32887]
    ],
    [ //  3 * (16 ** 47) * G
      [2879343, 3688304, 4421372, 4534766, 11423512, 13923771,
       14052312, 325515, 3919218, 13260140, 61858],
      [7085219, 13761935, 4198834, 2086187, 11828904, 92336,
       1563650, 14632276, 8925502, 5877508, 45979]
    ],
    [ //  4 * (16 ** 47) * G
      [4170064, 16764651, 15194951, 968102, 5708114, 9840005,
       2921623, 15789824, 14873100, 11258360, 58478],
      [725919, 8997962, 4962612, 4989566, 16157890, 16530000,
       8457225, 11382786, 12683619, 13617300, 9522]
    ],
    [ //  5 * (16 ** 47) * G
      [4543335, 2686112, 14712928, 2414099, 12907208, 1593830,
       6655679, 15603969, 3899440, 11356670, 59684],
      [2457234, 9238568, 2842577, 5219957, 14299562, 12283730,
       3751279, 7676037, 1326805, 8230810, 64713]
    ],
    [ //  6 * (16 ** 47) * G
      [6994004, 12380807, 9756912, 2266287, 11319438, 5281696,
       14718521, 14666500, 5398377, 6904263, 14355],
      [15673195, 11905759, 15136277, 14582031, 10851894, 6987354,
       8190656, 3792933, 11633681, 6997664, 8211]
    ],
    [ //  7 * (16 ** 47) * G
      [16314855, 604482, 14870815, 5100025, 13937245, 2291341,
       5309947, 10488723, 16188015, 10255813, 62621],
      [5085554, 9089425, 8622626, 5131642, 11534652, 16152833,
       11778452, 7005651, 14920878, 6111747, 62808]
    ],
    [ //  8 * (16 ** 47) * G
      [3392702, 9862744, 1341220, 5876956, 6985479, 5304544,
       16011623, 1358682, 523822, 4490666, 4218],
      [8159452, 15485128, 4875622, 1930764, 3821513, 8390477,
       15485158, 8468372, 14997453, 2179768, 28322]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 48) * G
      [3614910, 1047345, 4877554, 10733241, 4429201, 6276502,
       8602673, 2569983, 8688246, 9861031, 42707],
      [5764596, 12071875, 10220218, 2262021, 4887052, 15523714,
       12397863, 6731962, 755734, 8680603, 26447]
    ],
    [ //  2 * (16 ** 48) * G
      [7650056, 9735257, 2430339, 11463389, 15970506, 1082997,
       11152682, 4875804, 6481933, 14471886, 16134],
      [539801, 6138261, 4098405, 6195445, 1443472, 10169987,
       12489501, 9984007, 1647323, 2445518, 2236]
    ],
    [ //  3 * (16 ** 48) * G
      [1431652, 11889103, 3981396, 10603661, 458182, 13579556,
       15187494, 11520236, 14605069, 6739909, 2031],
      [591870, 5515124, 9131106, 1887818, 4656699, 5267103,
       5382653, 447500, 10348197, 3300792, 11699]
    ],
    [ //  4 * (16 ** 48) * G
      [13091452, 1806293, 4987920, 4971641, 3287225, 9943019,
       3232382, 14729307, 9051397, 16722321, 60513],
      [14548561, 1140697, 4042224, 7770147, 3950276, 9607422,
       8570741, 13669903, 11687841, 1916353, 762]
    ],
    [ //  5 * (16 ** 48) * G
      [13090910, 1326103, 6997653, 2942273, 8637333, 9178034,
       3110386, 1373095, 7193696, 5136320, 33503],
      [16773739, 3998424, 47457, 8662451, 1431878, 13357519,
       2167319, 2576918, 9847306, 8964492, 58593]
    ],
    [ //  6 * (16 ** 48) * G
      [8245340, 4383261, 1753662, 12693518, 5211348, 1495493,
       2156497, 6923259, 7935841, 9162239, 23473],
      [9872137, 4846283, 1464005, 10801828, 1602951, 8525205,
       14014453, 16259949, 15353972, 9574189, 17069]
    ],
    [ //  7 * (16 ** 48) * G
      [223408, 1917268, 10322094, 9432724, 2409007, 8020499,
       9255140, 8232539, 2821226, 16554945, 9758],
      [15401247, 2447805, 3150765, 14916445, 3410913, 16742782,
       2938447, 16631941, 8846569, 2808803, 35485]
    ],
    [ //  8 * (16 ** 48) * G
      [7217232, 3354084, 15778825, 62891, 11283001, 9954037,
       9974119, 5074022, 1979519, 12566503, 39545],
      [6443218, 4686226, 3242559, 11984862, 9763532, 15706570,
       15970852, 11990641, 1499648, 5105363, 59787]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 49) * G
      [1361661, 6487877, 4091631, 895745, 6830925, 5846781,
       5705983, 3396827, 10286304, 14319624, 44069],
      [8586561, 3766021, 8020149, 2374643, 623592, 3378305,
       3222043, 8928681, 11816059, 10328156, 60358]
    ],
    [ //  2 * (16 ** 49) * G
      [9842492, 5312617, 9024598, 7446738, 15119850, 12597185,
       11872619, 4910146, 791480, 13460838, 46183],
      [8877462, 8702754, 7534421, 7126436, 11670239, 6597692,
       2752790, 12271453, 3604458, 12172365, 56465]
    ],
    [ //  3 * (16 ** 49) * G
      [16584253, 1867314, 6324628, 5515181, 3269852, 5588966,
       6757910, 11851592, 12205195, 15101001, 61095],
      [1923176, 2058457, 13373505, 3152355, 13348258, 8231002,
       2604699, 2655295, 8950369, 13917087, 33790]
    ],
    [ //  4 * (16 ** 49) * G
      [3964557, 1415092, 16028059, 15671648, 5454526, 7134728,
       14558938, 9933440, 10712929, 10942783, 37625],
      [12522117, 349522, 9008966, 13542162, 600142, 4382579,
       10941925, 15548883, 4698088, 9269585, 48993]
    ],
    [ //  5 * (16 ** 49) * G
      [13329331, 1372780, 6099359, 4472974, 14679660, 13007741,
       11752451, 12243348, 4071869, 14865385, 39485],
      [16334799, 3315581, 6291909, 15685666, 12590495, 3951689,
       3600001, 8429351, 1118920, 10195041, 12160]
    ],
    [ //  6 * (16 ** 49) * G
      [13879807, 3471399, 16496077, 416053, 11844127, 9258109,
       6944484, 6683572, 7808134, 7764486, 15556],
      [11170691, 12926149, 3813398, 8616007, 2244886, 8314743,
       6677371, 9761319, 13861293, 5475724, 21884]
    ],
    [ //  7 * (16 ** 49) * G
      [4133143, 10702294, 9168108, 12222317, 9006960, 11382580,
       3150399, 331789, 3904219, 8582325, 42947],
      [3459994, 810521, 9224482, 13878438, 5158766, 13612462,
       7827549, 285175, 6406024, 15012199, 7057]
    ],
    [ //  8 * (16 ** 49) * G
      [11467882, 7373231, 8902554, 11667928, 7673509, 3871229,
       6667496, 10576432, 4504307, 16614240, 23780],
      [10336678, 7207871, 13514848, 12182700, 12565834, 13046858,
       2009138, 1978812, 5305192, 2164906, 24836]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 50) * G
      [13765550, 14907951, 1136084, 14005416, 218738, 3422758,
       1185645, 162746, 12385497, 5303747, 10322],
      [14723991, 4545108, 2357726, 15855603, 10164780, 12677486,
       11341894, 4158084, 11370152, 12617460, 30822]
    ],
    [ //  2 * (16 ** 50) * G
      [829863, 15719202, 6484210, 8485990, 4253027, 6406200,
       13382225, 11948496, 4502606, 9558169, 56256],
      [13166443, 5800726, 13126944, 15294866, 6762655, 10878051,
       7151178, 2971538, 8742805, 8448686, 2349]
    ],
    [ //  3 * (16 ** 50) * G
      [3581195, 7777190, 9882760, 11253585, 3077654, 12252765,
       1244280, 5781242, 14002012, 12936517, 61923],
      [3221686, 9522859, 7266167, 13774202, 8365430, 15930219,
       6813349, 7107434, 2030823, 8682094, 4792]
    ],
    [ //  4 * (16 ** 50) * G
      [16242477, 5230718, 14145214, 16062696, 3829205, 7178413,
       10252000, 11739720, 9670435, 12230942, 36888],
      [3591784, 282560, 15405671, 160618, 11890048, 46926,
       16204735, 15253831, 16369353, 8575089, 51651]
    ],
    [ //  5 * (16 ** 50) * G
      [5780288, 1253710, 11686271, 6108403, 6036331, 2264308,
       11270811, 7178189, 14759079, 7511169, 22605],
      [16458937, 15067508, 7369462, 6591680, 1536166, 11532943,
       5845040, 13447292, 884907, 8430678, 12253]
    ],
    [ //  6 * (16 ** 50) * G
      [1584655, 4620469, 9111778, 11709696, 12642030, 13855878,
       3006090, 2664580, 4689374, 7510229, 42879],
      [12070231, 8333508, 2925235, 2389428, 6859886, 6253107,
       12307025, 990820, 1789899, 10919057, 64072]
    ],
    [ //  7 * (16 ** 50) * G
      [3506331, 4120066, 7574216, 11922305, 5713392, 3949884,
       9290296, 1977858, 3661693, 11403464, 47790],
      [5569890, 14198209, 15060321, 10605287, 6044738, 15899011,
       8112969, 11838000, 3296128, 8946495, 12887]
    ],
    [ //  8 * (16 ** 50) * G
      [7054850, 7085907, 10880857, 16736424, 3088027, 304093,
       3674960, 6501216, 15989540, 1293310, 60885],
      [14416275, 8845637, 11287424, 2991580, 8736068, 1608545,
       10653936, 8149292, 11794345, 5868603, 9595]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 51) * G
      [517361, 3811902, 8132383, 13687846, 12915837, 8982047,
       12615416, 8490475, 13645423, 12650030, 50290],
      [11590313, 6831494, 9066268, 14822237, 15972273, 6805637,
       5932246, 6566571, 6254825, 917908, 16770]
    ],
    [ //  2 * (16 ** 51) * G
      [8795191, 2726394, 15712337, 9994120, 12882070, 9903864,
       7322153, 4378079, 117733, 2608122, 17742],
      [10927078, 58705, 8787867, 12997049, 9275605, 97387,
       9383809, 10387039, 15736478, 4923724, 4938]
    ],
    [ //  3 * (16 ** 51) * G
      [16297137, 5458594, 4146025, 6373125, 10315092, 12787379,
       10795244, 8774071, 4580310, 9386389, 34552],
      [625177, 4378885, 7410864, 15275602, 15360702, 11608398,
       9418129, 11762839, 8534230, 14510502, 11471]
    ],
    [ //  4 * (16 ** 51) * G
      [8693145, 1547392, 1521704, 3943427, 4272226, 2097081,
       5646789, 402029, 12806540, 15672827, 3791],
      [2156834, 4985813, 11681227, 10039138, 10311647, 7963374,
       8626074, 11683612, 9827008, 12159986, 33074]
    ],
    [ //  5 * (16 ** 51) * G
      [11381606, 7845628, 186499, 4051798, 13017916, 16359649,
       9855193, 8255334, 9735796, 12459977, 41635],
      [1764114, 1198156, 2486090, 3440813, 3008677, 6218235,
       14109987, 413822, 2408039, 14214837, 43323]
    ],
    [ //  6 * (16 ** 51) * G
      [4103709, 646886, 9985207, 2157322, 7203859, 4964233,
       9776016, 13404470, 13681426, 13440143, 17254],
      [3558388, 15566811, 4549207, 14737216, 15191065, 9962491,
       6912947, 15231381, 1078721, 11370979, 11170]
    ],
    [ //  7 * (16 ** 51) * G
      [8136127, 2233120, 9943197, 12463488, 16500599, 8437378,
       4618176, 3571218, 15175097, 8187222, 13646],
      [8798737, 10721626, 2183459, 368810, 14112459, 15030367,
       2401743, 15133656, 10043504, 6482363, 25245]
    ],
    [ //  8 * (16 ** 51) * G
      [3345441, 3193409, 14378054, 4930430, 5859732, 10164231,
       16698415, 10404544, 12313414, 6102492, 61727],
      [15629024, 7108425, 1397984, 5739127, 11480253, 1466636,
       1013895, 11789173, 161986, 4576855, 53760]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 52) * G
      [10205279, 639875, 2896399, 10506470, 129798, 3430401,
       13212373, 5600642, 6701867, 3771670, 21973],
      [15569775, 3217487, 14809078, 1586137, 879231, 10955481,
       10391226, 367722, 16748077, 2265161, 22382]
    ],
    [ //  2 * (16 ** 52) * G
      [4788565, 15293263, 1635906, 16774081, 11660179, 7310632,
       9799125, 16589667, 7739340, 5178286, 16794],
      [9026503, 12217044, 8997777, 478312, 11225634, 4539847,
       1344640, 3027787, 7242587, 2962490, 9084]
    ],
    [ //  3 * (16 ** 52) * G
      [15345754, 2855442, 13746302, 16234768, 115174, 10986399,
       9297344, 7886853, 5212299, 6555777, 7092],
      [8242946, 9075088, 5168140, 10039209, 5415755, 10812446,
       12096180, 10751961, 11407653, 1490863, 35376]
    ],
    [ //  4 * (16 ** 52) * G
      [10391348, 1812964, 16564356, 734672, 15080878, 16211651,
       11350443, 3613444, 14624808, 8303578, 41493],
      [15646451, 9974409, 5118606, 5970047, 4963235, 15049222,
       7851259, 1029157, 914205, 6913447, 2071]
    ],
    [ //  5 * (16 ** 52) * G
      [3766362, 2687189, 83201, 12069247, 8966262, 8017036,
       2521186, 14718782, 3121486, 5140704, 1212],
      [6480827, 292298, 12800921, 8008309, 7346034, 16469895,
       13582141, 10876321, 13323459, 15869112, 22313]
    ],
    [ //  6 * (16 ** 52) * G
      [1013546, 6755512, 11685532, 12152548, 3627170, 9506380,
       5858970, 8279280, 9538789, 4203326, 46959],
      [15662964, 1932402, 2435912, 7018158, 12198937, 10066006,
       7655088, 9836786, 11458876, 7475623, 1305]
    ],
    [ //  7 * (16 ** 52) * G
      [1363893, 4960737, 10686765, 10737062, 3545242, 554705,
       14792671, 5797689, 16286067, 9633217, 54244],
      [8351813, 10134889, 15711467, 4617550, 8974446, 16688028,
       7782165, 2092582, 16303243, 10947187, 13828]
    ],
    [ //  8 * (16 ** 52) * G
      [6049838, 2628653, 1430763, 1962309, 16573997, 7787047,
       2787523, 16459877, 645600, 7190516, 56376],
      [16522831, 8004987, 8070068, 13399563, 2899379, 14101303,
       4562298, 15197852, 2103434, 6518479, 21100]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 53) * G
      [5323046, 12360754, 15517229, 15723653, 2525504, 3376076,
       11684860, 9764538, 10520358, 8799804, 34882],
      [12100941, 2632367, 5902052, 15457217, 962850, 1181646,
       11757016, 6907405, 12770650, 4365313, 63352]
    ],
    [ //  2 * (16 ** 53) * G
      [2811445, 9562748, 8323159, 5035073, 4007865, 3055375,
       13926538, 11832474, 10169400, 12496921, 30875],
      [15297974, 14675135, 1030017, 2924885, 15686300, 2194047,
       10445553, 8814775, 1612742, 8282521, 5173]
    ],
    [ //  3 * (16 ** 53) * G
      [2159089, 11278693, 10808619, 6586237, 15840414, 7293655,
       1477839, 14001661, 7276569, 10303223, 15277],
      [10018637, 7369302, 5794329, 5158514, 10060194, 950345,
       8232428, 12376570, 2418265, 10347326, 18937]
    ],
    [ //  4 * (16 ** 53) * G
      [2732492, 2037493, 3781105, 9025606, 5682173, 10206545,
       5323274, 2931786, 11367134, 14261342, 34753],
      [11095404, 9932245, 14929702, 12956277, 855730, 16155579,
       7120222, 12083578, 6097869, 5555864, 32278]
    ],
    [ //  5 * (16 ** 53) * G
      [8760934, 4499633, 14617374, 15705987, 15472347, 1149862,
       5493028, 6793183, 11584621, 10793389, 42675],
      [16511515, 5586827, 14515179, 16101960, 12520029, 15259836,
       1890665, 1270185, 8951331, 15259491, 3254]
    ],
    [ //  6 * (16 ** 53) * G
      [10805839, 9550895, 10690579, 10317605, 13106215, 4624221,
       8527160, 5572177, 2776800, 8094543, 7872],
      [2557733, 1113421, 16527753, 7828829, 13450387, 14440684,
       13596798, 16200837, 1602833, 5523744, 33788]
    ],
    [ //  7 * (16 ** 53) * G
      [6491706, 5039340, 12757352, 8385521, 1073345, 1098230,
       10999935, 14821347, 9508004, 9394796, 8068],
      [13263114, 10483334, 2404077, 16659863, 10719851, 10757707,
       4004509, 8792520, 457059, 5582029, 41000]
    ],
    [ //  8 * (16 ** 53) * G
      [7963773, 7991563, 15134966, 7057819, 1681590, 4445495,
       4054143, 3005292, 623330, 277210, 10240],
      [9281242, 33680, 15335003, 12079418, 7362779, 14433192,
       6653092, 11976825, 15214857, 1525351, 3993]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 54) * G
      [4464571, 6118100, 6176267, 10874129, 11175200, 2446750,
       5631417, 8369676, 14557652, 9195041, 46229],
      [14512408, 3972938, 4279422, 2967096, 12187155, 12050733,
       16499596, 15056961, 6701295, 15187865, 64726]
    ],
    [ //  2 * (16 ** 54) * G
      [13634393, 10557291, 13106253, 12327537, 14512205, 15882284,
       1701965, 15170795, 8873089, 10395349, 42014],
      [3043093, 2674127, 10479837, 4052021, 13783894, 3782748,
       13758407, 14306846, 3207862, 3240507, 20700]
    ],
    [ //  3 * (16 ** 54) * G
      [2033649, 6835255, 4872941, 3200780, 9235895, 6835079,
       11945478, 2305696, 2114637, 4152955, 45988],
      [1965477, 2290912, 13390797, 13486862, 7894944, 6219756,
       7563671, 4293410, 9426616, 5200676, 13510]
    ],
    [ //  4 * (16 ** 54) * G
      [1311737, 9891648, 9677580, 12540135, 10934606, 8838962,
       11042152, 2907913, 13383084, 994964, 49194],
      [15564976, 9845159, 11870709, 6291629, 12129030, 13923243,
       4553820, 1012077, 4790958, 11051406, 36538]
    ],
    [ //  5 * (16 ** 54) * G
      [5610825, 9938027, 4521852, 908443, 14791785, 569672,
       16614592, 12740143, 7070026, 9988516, 17710],
      [879527, 6309594, 2454652, 3874532, 8553836, 15618649,
       8087393, 16105477, 6258896, 9080601, 35934]
    ],
    [ //  6 * (16 ** 54) * G
      [7689834, 16421161, 7339745, 3785392, 15906605, 14049130,
       6492855, 2583693, 7477688, 686546, 40727],
      [15984344, 7112940, 6249047, 16112489, 10921875, 8747168,
       490830, 13081008, 8800780, 11152872, 21670]
    ],
    [ //  7 * (16 ** 54) * G
      [13538522, 6810451, 6312826, 5669534, 11685698, 7663243,
       14432964, 5361120, 7168699, 16110732, 6567],
      [2484155, 4658736, 226052, 11412971, 6443782, 10676475,
       13910528, 3107409, 3175875, 4958121, 41552]
    ],
    [ //  8 * (16 ** 54) * G
      [8031539, 7571295, 5809809, 15508598, 7086819, 14838682,
       14764307, 1734237, 9594199, 5284109, 47317],
      [12823534, 12024830, 857975, 5795687, 1850031, 14780500,
       13201523, 8198032, 1449008, 581869, 57049]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 55) * G
      [1237471, 15090542, 306212, 8222237, 11009291, 163032,
       1291078, 4273343, 15282870, 9541256, 53472],
      [13799358, 4512671, 14641765, 9979576, 5031101, 16279380,
       11964891, 11856736, 8197202, 10115582, 1692]
    ],
    [ //  2 * (16 ** 55) * G
      [14336728, 2739224, 1172091, 15894462, 7419869, 4898447,
       12467206, 6740166, 10724044, 9874820, 18886],
      [10923752, 15867363, 1686108, 13616096, 1043498, 14568269,
       13043853, 5736802, 5551839, 12507880, 64380]
    ],
    [ //  3 * (16 ** 55) * G
      [4890776, 8720392, 178957, 11103806, 12648768, 16418057,
       11321281, 3771005, 3344619, 10769569, 46359],
      [4255679, 11902789, 16605188, 6890567, 13929300, 7316388,
       3125490, 6351422, 2066330, 8879372, 2621]
    ],
    [ //  4 * (16 ** 55) * G
      [5304448, 11956992, 8949432, 4976979, 16104441, 11290517,
       7565779, 1851906, 7007175, 1734480, 59390],
      [15328043, 9034393, 11028681, 6775958, 15596343, 5781752,
       7902155, 1959198, 15097263, 12872976, 27271]
    ],
    [ //  5 * (16 ** 55) * G
      [4505505, 11315783, 4025749, 14717796, 2544252, 14911436,
       1235187, 8110631, 5334774, 1325131, 63724],
      [11951981, 5137202, 6342290, 12816384, 6519493, 1007882,
       11692502, 3290767, 4176294, 3453457, 30225]
    ],
    [ //  6 * (16 ** 55) * G
      [700405, 4646182, 15843607, 4728606, 1808691, 12345015,
       15651252, 10184779, 1861634, 11836086, 40985],
      [159880, 14508757, 9672134, 16284161, 2255665, 8816834,
       5526775, 11343672, 2777737, 8177112, 23796]
    ],
    [ //  7 * (16 ** 55) * G
      [2598075, 3926322, 15922732, 1019289, 15118832, 15918667,
       11346388, 9758542, 8125159, 16742619, 12812],
      [15979220, 13174448, 7362588, 647929, 4662132, 6461792,
       10638591, 11237270, 2786962, 15258631, 44959]
    ],
    [ //  8 * (16 ** 55) * G
      [7497519, 3744250, 9766380, 16402352, 4717947, 2295898,
       15997361, 433942, 399169, 16484021, 40450],
      [12013613, 6113780, 14594639, 7263683, 7608834, 794129,
       13522187, 2513592, 11137411, 3170286, 54818]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 56) * G
      [9821959, 4133096, 14183024, 100203, 7730170, 9436925,
       15142112, 15424262, 8642542, 12080167, 26870],
      [7415381, 7309944, 8360135, 15929535, 5411794, 5253327,
       5111204, 16500740, 14945510, 16693906, 52193]
    ],
    [ //  2 * (16 ** 56) * G
      [12672967, 5447040, 5807376, 7530898, 6693873, 15024486,
       13438549, 15978249, 1838431, 808076, 57780],
      [3244068, 8677418, 2365386, 14588854, 9585952, 7376640,
       1181684, 16022913, 3690489, 11185215, 7848]
    ],
    [ //  3 * (16 ** 56) * G
      [11048594, 16393018, 582680, 16337955, 3868886, 10974833,
       4269080, 15308518, 6721357, 13267329, 15327],
      [5309192, 14369562, 1283035, 4580079, 14421091, 5452743,
       5353178, 4801121, 5334968, 2058326, 2674]
    ],
    [ //  4 * (16 ** 56) * G
      [2013822, 5865091, 5677659, 7379102, 14982181, 10714865,
       10992754, 4325819, 2753247, 3235258, 38462],
      [8157632, 4928142, 3948026, 12637681, 10291941, 8262022,
       8147478, 10658763, 4864309, 12194760, 23554]
    ],
    [ //  5 * (16 ** 56) * G
      [8298967, 2310851, 5048219, 16292526, 3749464, 10375090,
       5394829, 3486341, 5378134, 11310519, 44200],
      [11105186, 11601051, 15326703, 4274485, 15581148, 2197985,
       4952711, 9711692, 7719968, 12937181, 32530]
    ],
    [ //  6 * (16 ** 56) * G
      [9254755, 9081837, 4457173, 11784797, 3939137, 5381654,
       2129026, 9177121, 5849506, 3282525, 31180],
      [6253564, 11595964, 7026346, 8508258, 11256181, 16531117,
       5870639, 2608157, 3167184, 9693191, 40184]
    ],
    [ //  7 * (16 ** 56) * G
      [2382719, 7871699, 12541362, 9460095, 8218262, 5444003,
       11507928, 2124833, 6716430, 4654299, 64144],
      [14642159, 4059469, 4714371, 6442781, 10415314, 12683723,
       15548657, 2977699, 11024036, 9188980, 6684]
    ],
    [ //  8 * (16 ** 56) * G
      [8741033, 12198196, 8154168, 6450977, 15294717, 14295219,
       4687424, 8119145, 10044307, 14258181, 28578],
      [15017815, 9664442, 15645024, 12931525, 3788203, 6044414,
       5416600, 3626147, 5949416, 836497, 40634]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 57) * G
      [15343412, 11212647, 906061, 291742, 7066452, 5494372,
       1545139, 12825629, 4672358, 6332989, 32660],
      [9462764, 12765901, 16537790, 2417487, 16744785, 6709702,
       12553991, 6943218, 11559303, 1472399, 53461]
    ],
    [ //  2 * (16 ** 57) * G
      [9198555, 10487083, 7745093, 2585020, 874866, 2030720,
       5759026, 10451306, 14367895, 2820231, 553],
      [7493362, 15185184, 8997839, 1467949, 13168657, 8779316,
       118593, 7393029, 516994, 6849653, 4278]
    ],
    [ //  3 * (16 ** 57) * G
      [16517789, 7653821, 10542171, 1374074, 4465499, 10658526,
       6580960, 2777315, 3317250, 15202380, 56131],
      [10147603, 604830, 5566641, 5690096, 3736691, 10462344,
       8473839, 12100972, 3585425, 9282238, 45078]
    ],
    [ //  4 * (16 ** 57) * G
      [4236420, 16452888, 10517455, 6139397, 16244409, 4349674,
       14975496, 14687996, 12548801, 7037012, 63137],
      [9408785, 5140067, 3508188, 7333806, 14451068, 9701804,
       3296313, 5885758, 3592849, 9572715, 29036]
    ],
    [ //  5 * (16 ** 57) * G
      [8618125, 11630402, 8990908, 3499066, 9373646, 7903247,
       9511418, 12079454, 860590, 3178990, 59823],
      [11771187, 3116601, 1676908, 1381229, 7049809, 4813207,
       5574639, 8761126, 4657760, 13125788, 43382]
    ],
    [ //  6 * (16 ** 57) * G
      [13463960, 12748287, 9835669, 10188532, 6125565, 14990244,
       8354492, 10050442, 6194992, 11122123, 15103],
      [15427125, 3154992, 131743, 8874799, 10850051, 5885200,
       9027448, 7719296, 11297597, 5590926, 11597]
    ],
    [ //  7 * (16 ** 57) * G
      [8660703, 16002221, 665234, 5140362, 4274522, 8608015,
       3685368, 7355081, 8415616, 3367724, 28343],
      [737895, 5893664, 8601591, 8650267, 5433724, 9342354,
       2944192, 200267, 3177114, 7258391, 38597]
    ],
    [ //  8 * (16 ** 57) * G
      [12651428, 11328731, 3544599, 8386443, 8130257, 5423548,
       14003494, 6962941, 8672325, 3759422, 38031],
      [10665487, 4246125, 8133227, 16765080, 6541975, 11136858,
       41397, 7513107, 1763765, 1745, 39098]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 58) * G
      [7177347, 11851662, 904905, 4626047, 15914920, 15287682,
       10427246, 2709748, 4019773, 13328547, 39993],
      [2904315, 3501931, 6853811, 4046403, 11396399, 6637243,
       12041377, 250262, 9692432, 12525284, 61591]
    ],
    [ //  2 * (16 ** 58) * G
      [8333247, 7883628, 10949475, 3604118, 424547, 4116801,
       15416114, 3401892, 14123055, 634516, 52168],
      [10686374, 10314698, 10153158, 9452970, 11357656, 14353671,
       11919324, 14133966, 1137797, 12258840, 48540]
    ],
    [ //  3 * (16 ** 58) * G
      [10571226, 3274823, 15988060, 6769485, 7144489, 3179360,
       16196609, 4470632, 15391447, 8047760, 6387],
      [11305828, 13484837, 13361711, 9078070, 14219207, 13437815,
       15527451, 14138367, 601126, 4962986, 12180]
    ],
    [ //  4 * (16 ** 58) * G
      [11017389, 12683104, 3915356, 11811618, 2898972, 7140482,
       15944016, 3609886, 15017496, 15606982, 35835],
      [15728958, 12144991, 7760262, 11336995, 10471660, 14766477,
       10479387, 851240, 4234073, 2607779, 55121]
    ],
    [ //  5 * (16 ** 58) * G
      [8214974, 15263948, 16471668, 9308466, 15341656, 7564184,
       15615858, 5162495, 1997274, 3509288, 21523],
      [16254352, 10614500, 6761854, 13172915, 14834453, 5331539,
       13762916, 15189135, 10268708, 13950614, 26639]
    ],
    [ //  6 * (16 ** 58) * G
      [5812366, 4816975, 14533160, 1514327, 7773421, 5024988,
       15151062, 16692679, 16772211, 1770279, 2844],
      [146098, 8629493, 11144988, 16234837, 9169772, 6978573,
       1214218, 9806184, 3490087, 12089997, 28303]
    ],
    [ //  7 * (16 ** 58) * G
      [6312360, 827271, 10849976, 3818878, 14119830, 5406910,
       10731960, 6148033, 11638000, 13706897, 20015],
      [13406213, 13062121, 3042046, 9618686, 12106405, 3259627,
       10571914, 3611445, 16055218, 12311541, 4650]
    ],
    [ //  8 * (16 ** 58) * G
      [11746195, 1407023, 6078993, 14039804, 11565867, 15266166,
       4329537, 12613753, 14410020, 1820346, 47128],
      [5565142, 6166138, 14455066, 4978215, 11322801, 14513657,
       4974951, 14610192, 13428682, 3100952, 47873]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 59) * G
      [3724516, 9946460, 7634394, 11645299, 16606705, 1975778,
       7614488, 9918062, 2267448, 8726033, 15762],
      [13430995, 15663296, 8351658, 1669820, 700728, 6941388,
       220200, 4190295, 6875829, 10528212, 54060]
    ],
    [ //  2 * (16 ** 59) * G
      [9454231, 4885460, 12769758, 3310685, 2340862, 12783373,
       16503572, 14941916, 555242, 12694843, 21841],
      [1390601, 15473285, 10935741, 14379367, 12481411, 5922034,
       6160614, 3000056, 15745018, 16273630, 12202]
    ],
    [ //  3 * (16 ** 59) * G
      [14119306, 3299341, 5165170, 1687118, 13114213, 14678161,
       10641014, 16236889, 9449411, 931627, 15128],
      [16614107, 2501018, 13660774, 7351572, 4788566, 2170456,
       10299653, 16426172, 7035050, 11606003, 62134]
    ],
    [ //  4 * (16 ** 59) * G
      [2119874, 9430414, 13218120, 7072598, 4920170, 6949159,
       1994489, 7075657, 8230349, 11804494, 27292],
      [7017621, 11217864, 6810261, 10135539, 558762, 1181701,
       10881186, 178439, 9939302, 4015596, 60889]
    ],
    [ //  5 * (16 ** 59) * G
      [13854013, 10817939, 14023297, 7660647, 5162162, 4108819,
       4233384, 4583247, 14064799, 16712593, 62290],
      [4518542, 6786186, 13662694, 7521666, 1676793, 13960540,
       4062630, 134103, 7102141, 6450379, 17522]
    ],
    [ //  6 * (16 ** 59) * G
      [4945314, 5375193, 14645457, 1934226, 1891978, 4407441,
       7485039, 9350100, 7851963, 14981804, 58474],
      [8503510, 16617610, 16009113, 8901798, 6776521, 16276353,
       15728272, 8671255, 16069470, 15461349, 39590]
    ],
    [ //  7 * (16 ** 59) * G
      [4487386, 14621421, 5559905, 2362881, 6092482, 3973617,
       13483897, 719685, 5082147, 14971139, 26382],
      [16081904, 16666612, 7365263, 1045063, 12826646, 5302300,
       5968775, 2442848, 10494666, 13058651, 23712]
    ],
    [ //  8 * (16 ** 59) * G
      [5491701, 14668154, 5842012, 4510801, 9205433, 3857719,
       15548192, 11971625, 7368080, 16547813, 55989],
      [5438234, 1919792, 9944972, 12674761, 11620723, 9541511,
       9427124, 5257561, 350132, 13377901, 38902]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 60) * G
      [5148131, 307620, 483427, 3066910, 562794, 1544540,
       13568189, 3824253, 8917175, 10073926, 62731],
      [8336776, 3909339, 8735295, 2191902, 7729549, 13548521,
       3812845, 8882583, 15830796, 400981, 58037]
    ],
    [ //  2 * (16 ** 60) * G
      [14447772, 3812704, 43280, 10648280, 3351035, 7247832,
       3154084, 11574388, 7444681, 8999970, 10772],
      [16399602, 15896560, 127713, 12819311, 16330189, 574654,
       4236150, 15350820, 7660578, 5904521, 43553]
    ],
    [ //  3 * (16 ** 60) * G
      [11325323, 7039874, 11001308, 8552815, 13801873, 4392065,
       14831929, 6577968, 5265264, 8348069, 22925],
      [7125000, 6765583, 12131204, 3487040, 2661007, 15452882,
       6468211, 5532753, 9381385, 2225999, 40753]
    ],
    [ //  4 * (16 ** 60) * G
      [9841340, 12808925, 13377036, 9340861, 12287264, 2918174,
       12946020, 13400638, 13386835, 4749556, 2650],
      [2933754, 11189406, 16443485, 9326761, 3319372, 3151704,
       5108368, 5075633, 11590743, 9118344, 63252]
    ],
    [ //  5 * (16 ** 60) * G
      [11172670, 10114148, 15376307, 355484, 12906267, 5771283,
       9524252, 6618400, 10439757, 2102004, 29018],
      [8194077, 3753148, 13687203, 11045703, 1820040, 3891778,
       9407121, 2062632, 6319114, 11776426, 22818]
    ],
    [ //  6 * (16 ** 60) * G
      [11412120, 16412696, 14058947, 8500192, 503279, 8803019,
       6785367, 11170869, 13139203, 3973402, 63497],
      [6067120, 6394579, 7276227, 7190016, 5282319, 10286052,
       15478910, 11624745, 16030736, 5185902, 12807]
    ],
    [ //  7 * (16 ** 60) * G
      [897568, 11966306, 14995901, 1476524, 1886992, 7894727,
       9011128, 12847566, 11120933, 9199210, 18924],
      [7551170, 11313255, 13539768, 15023004, 2895987, 5515652,
       3442271, 4041164, 15360667, 8212453, 39337]
    ],
    [ //  8 * (16 ** 60) * G
      [9086413, 5980178, 15176594, 15570792, 13545272, 9698510,
       16506220, 2162361, 9630131, 15715162, 62947],
      [11145140, 10078158, 13216551, 11604174, 14722804, 12397444,
       14674695, 5132770, 15982085, 10652059, 30415]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 61) * G
      [3657652, 9700704, 8756761, 12832170, 62022, 11591796,
       8916384, 882676, 16117003, 3244607, 1061],
      [7822627, 3301080, 13893815, 3468381, 10740981, 2075886,
       13682790, 6458532, 14684030, 9161978, 51470]
    ],
    [ //  2 * (16 ** 61) * G
      [7035531, 1344486, 6487406, 7873558, 3693075, 14640695,
       1215815, 14396012, 4353344, 10935277, 45271],
      [5573347, 16454348, 9172676, 1405446, 10188599, 10688035,
       6848244, 16587789, 11268886, 6506517, 63058]
    ],
    [ //  3 * (16 ** 61) * G
      [12797303, 6763846, 16218191, 15115562, 4234952, 14990822,
       583872, 11662819, 772680, 8036579, 10069],
      [1448252, 12171268, 765438, 7652408, 10668659, 3470104,
       5917181, 7850199, 1071931, 13064262, 33689]
    ],
    [ //  4 * (16 ** 61) * G
      [3627400, 7647874, 15440922, 9849509, 7484021, 5459048,
       6050714, 4539083, 10673674, 15952862, 1035],
      [3342795, 10736761, 15761618, 11404535, 8044083, 14927255,
       6780542, 3658088, 14341971, 11712129, 59573]
    ],
    [ //  5 * (16 ** 61) * G
      [128211, 16627364, 126552, 15373747, 7089744, 14147279,
       3929441, 9326712, 5796708, 7870418, 36456],
      [9754731, 2004034, 2658344, 3056017, 759537, 3976848,
       10506349, 6486025, 2923514, 11241582, 39068]
    ],
    [ //  6 * (16 ** 61) * G
      [13954716, 3843796, 2878785, 10782055, 7205993, 4387657,
       8179428, 10679570, 9682013, 4756101, 44598],
      [10833919, 13422329, 15191306, 2981685, 6016074, 5748717,
       10308493, 12007091, 1308077, 15797383, 47749]
    ],
    [ //  7 * (16 ** 61) * G
      [2795750, 4055661, 2999702, 4255742, 5462524, 14413344,
       248423, 13697896, 4087030, 1525285, 39076],
      [7141211, 781664, 1665396, 11239122, 137210, 13552099,
       16098037, 11605314, 3433430, 13014142, 22426]
    ],
    [ //  8 * (16 ** 61) * G
      [13481373, 10371056, 14749304, 9628520, 14962227, 13527435,
       10222805, 4026387, 8839905, 15310599, 14164],
      [6980761, 12648427, 15745593, 6498100, 105327, 8444769,
       2564196, 77628, 11394238, 16282774, 9410]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 62) * G
      [6274372, 7416200, 8044660, 10429990, 12765859, 2239625,
       13506261, 14701681, 11229445, 449241, 39871],
      [1916552, 8256122, 13804356, 1377134, 13942236, 4712640,
       15927919, 6772186, 14753955, 8366157, 7116]
    ],
    [ //  2 * (16 ** 62) * G
      [4784133, 9978072, 2047205, 10798360, 5872937, 12029072,
       1650623, 4905643, 15594518, 4830395, 63727],
      [6467550, 3048381, 6756934, 3661550, 15864456, 12008024,
       7759268, 179159, 9904484, 6793198, 38814]
    ],
    [ //  3 * (16 ** 62) * G
      [10990854, 15176372, 14715770, 15173131, 7703482, 977186,
       2811728, 4365563, 3890131, 16250459, 25711],
      [3602758, 12657963, 9816441, 12619369, 3013711, 9431113,
       3244106, 5923299, 4855973, 2792710, 48145]
    ],
    [ //  4 * (16 ** 62) * G
      [8074123, 15342072, 11005406, 3015915, 4510972, 9503230,
       2283117, 1784475, 13059056, 11223506, 48739],
      [11537029, 3089809, 11509025, 4559629, 5491582, 3488624,
       12302603, 9252897, 2290805, 6231134, 7954]
    ],
    [ //  5 * (16 ** 62) * G
      [243027, 7457217, 8394059, 8599642, 6351399, 5275326,
       45694, 10292240, 1561498, 5536422, 31936],
      [4564262, 13345741, 8214425, 11281035, 1595914, 9749504,
       13318652, 12441384, 2622554, 10403107, 31538]
    ],
    [ //  6 * (16 ** 62) * G
      [5780992, 4560216, 1087632, 7486291, 15413246, 16599659,
       13102021, 15082112, 16656094, 5458846, 5398],
      [10490651, 9309379, 591938, 15158796, 11224009, 6052139,
       10087594, 11593538, 13535466, 4437671, 24803]
    ],
    [ //  7 * (16 ** 62) * G
      [15144868, 16012313, 8498222, 11333659, 14298074, 14767208,
       5467566, 353261, 12704590, 5347595, 37992],
      [2547363, 1036725, 10266463, 16190157, 10065296, 8241239,
       15118950, 11778256, 12947880, 7881229, 51804]
    ],
    [ //  8 * (16 ** 62) * G
      [3921950, 2385425, 2180148, 13298663, 8405750, 11985495,
       14624878, 11459202, 6095078, 7291568, 64541],
      [8315370, 13910365, 14434787, 5533128, 7779633, 7136825,
       14254039, 9688907, 145450, 14631852, 27948]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 63) * G
      [4981832, 3289924, 14884525, 12649241, 3503750, 9693078,
       13319032, 4801532, 4448165, 11400489, 45359],
      [6938199, 6190771, 15898199, 3341389, 386819, 10921757,
       6715314, 15298447, 11596972, 4560281, 738]
    ],
    [ //  2 * (16 ** 63) * G
      [4711035, 8281739, 6838370, 9279667, 15915053, 3897659,
       10448106, 12463602, 7714468, 11674206, 24660],
      [11422562, 2746212, 8847384, 11513113, 7904501, 14743581,
       13759860, 11564556, 9492717, 455601, 28273]
    ],
    [ //  3 * (16 ** 63) * G
      [15275295, 12866660, 1635638, 13110660, 15348633, 16465511,
       14324184, 4400477, 12911976, 9319665, 18488],
      [8033332, 4845005, 1055726, 5496451, 11616529, 2870425,
       9639240, 6956339, 14962334, 6532084, 45292]
    ],
    [ //  4 * (16 ** 63) * G
      [12163077, 13265294, 14912915, 15309329, 552268, 3827885,
       9636851, 11584191, 7376126, 8372738, 494],
      [15649967, 6245904, 10160637, 3522169, 1586922, 5706113,
       3076933, 1199072, 149634, 13561883, 38485]
    ],
    [ //  5 * (16 ** 63) * G
      [5997373, 11838862, 1693663, 13241124, 3801203, 641369,
       8455425, 6186463, 1332186, 6571950, 56974],
      [5004487, 12688033, 13234428, 2687430, 8258323, 14837144,
       9223533, 14889512, 594904, 4602901, 1505]
    ],
    [ //  6 * (16 ** 63) * G
      [16184398, 356651, 2389314, 13185806, 4209241, 11594058,
       10681812, 13554297, 659172, 15920868, 364],
      [1442728, 6045537, 10179362, 9471627, 13587428, 5488047,
       3739086, 11873848, 10999208, 13591118, 47337]
    ],
    [ //  7 * (16 ** 63) * G
      [16244552, 9693889, 8076837, 12087601, 6768446, 15959474,
       5131864, 9327963, 15498910, 1233060, 45451],
      [4633926, 13996264, 5870003, 8638949, 8648676, 12794684,
       7062956, 6089794, 5897028, 1647267, 65363]
    ],
    [ //  8 * (16 ** 63) * G
      [6237012, 15503159, 5289261, 14936355, 16659808, 2407502,
       1149205, 5269225, 7021331, 692526, 30642],
      [13395967, 130262, 15846056, 15225056, 6438305, 9073375,
       16571651, 16232715, 13542391, 2693157, 41948]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 64) * G
      [2134602, 2429892, 5716369, 4750507, 11929703, 14574592,
       14567597, 5962594, 6792267, 8007198, 2841],
      [285279, 3881169, 4241893, 12107699, 6247663, 4324367,
       6121414, 5664568, 9720802, 3879155, 42144]
    ]
  ]
];

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Representation of a point on the Ed25519 elliptic curve defined
 * over a prime field.  Point arithmetics for Ed25519 curves are performed using
 * explicit formulas provided by
 *
 * @author fy@google.com (Frank Yellin).
 */

goog.provide('e2e.ecc.point.Ed25519');
goog.provide('e2e.ecc.point.Ed25519X');

goog.require('e2e.BigNum');
goog.require('e2e.ecc.Element');
goog.require('e2e.ecc.point.Point');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * Constructs a point on the elliptic curve y^2 = x^3 - 3*x + B defined
 *     over a prime field.
 * @param {!e2e.ecc.curve.Curve} curve The curve.
 * @param {!e2e.ecc.Element} x The x Jacobian coordinate.
 * @param {!e2e.ecc.Element} y The y Jacobian coordinate.
 * @param {!e2e.ecc.Element=} opt_t The optional t Jacobian coordinate.
 * @param {!e2e.ecc.Element=} opt_z The optional z Jacobian coordinate.
 * @constructor
 * @extends {e2e.ecc.point.Point}
 */
e2e.ecc.point.Ed25519 = function(curve, x, y, opt_t, opt_z) {
  e2e.ecc.point.Ed25519.base(this, 'constructor', curve);

  var z = opt_z || this.curve.ONE;
  var t;
  if (!opt_t) {
    t = x.multiply(y);
    if (!z.isEqual(this.curve.ONE)) {
      x = x.multiply(z);
      y = y.multiply(z);
      z = z.multiply(z);
    }
  } else {
    t = opt_t;
  }

  /**
   * The x coordinate of this in the extended twisted Edwards curve format.
   * The actual x value is this.x / this.z
   * @type {!e2e.ecc.Element}
   */
  this.x = x;

  /**
   * The y coordinate of this in the extended twisted Edwards curve format.
   * The actual y value is this.y / this.z
   * @type {!e2e.ecc.Element}
   */
  this.y = y;

  /**
   * The t coordinate of this in the extended twisted Edwards curve format.
   * A constant defined such that x * y = z * t;
   * @type {!e2e.ecc.Element}
   */
  this.t = t;

  /**
   * The z coordinate of this in the extended twisted Edwards curve format.
   * @type {!e2e.ecc.Element}
   */
  this.z = z;


  /**
   * The equivalent affine Point.
   * @type {e2e.ecc.point.Ed25519}
   */
  this.affine = this.z.isEqual(this.curve.ONE) ? this : null;
};
goog.inherits(e2e.ecc.point.Ed25519, e2e.ecc.point.Point);

/**
 * @type {Array.<!Array.<!e2e.ecc.point.Ed25519|
 *                        e2e.ecc.point.Ed25519X>>}
 * @private
 */
e2e.ecc.point.Ed25519.prototype.fastMultiplyTable_;


/**
 * @type {Array.<!e2e.ecc.point.Ed25519>}
 * @private
 */
e2e.ecc.point.Ed25519.prototype.smallMultiplyTable_;


/** @override */
e2e.ecc.point.Ed25519.prototype.getX = function() {
  // Converts the point to affine form, and then extracts the X coordinate
  return this.getAffine_().x;
};


/** @override */
e2e.ecc.point.Ed25519.prototype.getY = function() {
  return this.getAffine_().y;
};


/**
 * Returns the equivalent affine point.
 * @return {!e2e.ecc.point.Ed25519}
 * @private
 */
e2e.ecc.point.Ed25519.prototype.getAffine_ = function() {
  if (this.affine_ == null) {
    var zInv = this.z.inverse();
    var x = this.x.multiply(zInv);
    var y = this.y.multiply(zInv);
    this.affine_ = new e2e.ecc.point.Ed25519(this.curve, x, y);
  }
  return this.affine_;
};


/**
 * Compares another point with this. Return true if they are the same.
 * @param {!e2e.ecc.point.Ed25519} that The point to compare.
 * @return {boolean}
 */
e2e.ecc.point.Ed25519.prototype.isEqual = function(that) {
  if (this.isInfinity()) {
    return that.isInfinity();
  }
  if (that.isInfinity()) {
    return this.isInfinity();
  }
  // x and y coordinates must be equal
  return this.x.multiply(that.z).isEqual(that.x.multiply(this.z)) &&
         this.y.multiply(that.z).isEqual(that.y.multiply(this.z));
};


/**
 * Compares another point with this. Return true if this is infinity;
 * @return {boolean}
 */
e2e.ecc.point.Ed25519.prototype.isInfinity = function() {
  return this.z.isEqual(this.curve.ZERO);
};


/** @override */
e2e.ecc.point.Ed25519.prototype.isIdentity = function() {
  return this.isEqual(this.curve.IDENTITY);
};


/**
 * Returns a new point which is a negative of this.
 * @return {!e2e.ecc.point.Ed25519}
 */
e2e.ecc.point.Ed25519.prototype.negate = function() {
  return new e2e.ecc.point.Ed25519(this.curve, this.x.negate(), this.y,
      this.t.negate(), this.z);
};


/** @override */
e2e.ecc.point.Ed25519.prototype.toByteArray = function(opt_compressed) {
  var X = this.getX().toBigNum();
  var Y = this.getY().toBigNum();
  var result = this.curve.littleEndianByteArray32FromBigNum(Y);
  if (X.isOdd()) {
    result[result.length - 1] |= 0x80;
  }
  return result;
};


/**
 * Adds another point to this, and return the new point. This is the group
 *     operation.
 * @param {!e2e.ecc.point.Ed25519} that The point to add.
 * @return {!e2e.ecc.point.Ed25519}
 */
e2e.ecc.point.Ed25519.prototype.add = function(that) {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  goog.asserts.assert(!this.isInfinity());
  goog.asserts.assert(!that.isInfinity());
  var A = (this.y.subtract(this.x)).multiply(that.y.subtract(that.x));
  var B = (this.y.add(this.x)).multiply(that.y.add(that.x));
  var C = this.curve.D2.multiply(this.t).multiply(that.t);
  var D = this.z.multiply(that.z).shiftLeft(1);
  var E = B.subtract(A);
  var F = D.subtract(C);
  var G = D.add(C);
  var H = B.add(A);
  return new e2e.ecc.point.Ed25519(this.curve, E.multiply(F),
      G.multiply(H), E.multiply(H), F.multiply(G));
};


/**
 * Doubles this point.
 * @return {!e2e.ecc.point.Ed25519}
 * @private
 */
e2e.ecc.point.Ed25519.prototype.twice_ = function() {
  return this.add(this);
};


/**
 * @override
 */
e2e.ecc.point.Ed25519.prototype.multiply = function(k) {
  if (this.fastMultiplyTable_) {
    return this.fastMultiply_(k);
  }

  // In every non-test occurrence of .multiply(), "this" is either
  // the generator or another user's public key. It make sense to cache
  // the small multiplication table, since these points will likely have
  // further multiplies applied to them.
  var powers = this.smallMultiplyTable_;
  if (!powers) {
    // Create a table consisting of 1 * this through 8 * this
    powers = new Array(9);
    powers[1] = this;
    for (var i = 2; i < 9; i++) {
      powers[i] = powers[i - 1].add(this);
    }
    this.smallMultiplyTable_ = powers;
  }
  var acc = this.curve.IDENTITY;
  var nybbles = k.toSignedNybbleArray();
  // Perform a high-end to low-end signed-nybble-at-a-time multiplication.
  for (var i = nybbles.length - 1; i >= 0; --i) {
    // ASSERT:
    //   acc = sum(nybbles[j] * 16**(j - i - 1), i < j < nybbles.length) * this
    acc = acc.twice_().twice_().twice_().twice_();
    // ASSERT:
    //   acc = sum(nybbles[j] * 16**(j - i), i < j < nybbles.length) * this
    var origNybble = nybbles[i] | 0;
    var nybble = origNybble || 1;
    var absNybble = nybble < 0 ? -nybble : nybble;
    // multiplier = (absNybble * (16^i)) * this
    var multiplier = powers[1].selectFromFastMultiplyTable_(powers, absNybble);
    // multiplier = (nybble * (16^i)) * this
    if (nybble < 0) {
      multiplier = multiplier.negate();
    }
    var temp = acc.add(multiplier);
    if (origNybble != 0) {
      acc = temp;
    }
    // ASSERT:
    //   acc = sum(nybbles[j] * 16**(j - i), i <= j < nybbles.length) * this
  }
  return acc;
};


/**
 * Determines if this point is on this elliptic curve.
 * @return {boolean}
 */
e2e.ecc.point.Ed25519.prototype.isOnCurve = function() {
  if (this.isInfinity()) {
    return true;
  }
  var temp = this.getAffine_();
  //  -x^2 + y^2 = 1 + d x^2 y^2
  var x2 = temp.x.square();
  var y2 = temp.y.square();
  var left = y2.subtract(x2);
  var right = this.curve.D.multiply(x2).multiply(y2).add(this.curve.ONE);
  return left.isEqual(right);
};


/**
 * Create a table
 * @return {!Array.<!Array.<!e2e.ecc.point.Ed25519>>}
 */
e2e.ecc.point.Ed25519.prototype.createFastMultiplyTable = function() {
  var bits = 256;
  var nybbleCount = Math.ceil((bits + 1) / 4);  // sign can add one more bit
  var unsignedNybbleCount = Math.ceil(bits / 4);
  var table = [];
  for (var power = 0; power < nybbleCount; power++) {
    // table[power][i] = (i * (16^power)) * this
    table[power] = [];
    table[power][0] = this.curve.IDENTITY;
    if (power == 0) {
      table[power][1] = this;
    } else {
      table[power][1] = table[power - 1][8].twice_();
    }
    if (power == unsignedNybbleCount) {
      // This extra nybble is the result of an overflow that can happen when
      // going from unsigned digit to signed digit representation.
      // Its value can only be 0 or 1.
      continue;
    }
    for (var i = 2; i <= 8; i++) {
      table[power][i] = table[power][i - 1].add(table[power][1]);
    }
  }
  table.isConverted = true;
  table.isAffine = false;
  return table;
};


/**
 * @override
 */
e2e.ecc.point.Ed25519.prototype.initializeForFastMultiply = function() {
  var table = this.createFastMultiplyTable();
  goog.asserts.assert(this.isEqual(table[0][1].toPoint()),
      'Fast Multiply table is being attached to the wrong point');
  this.fastMultiplyTable_ = table;
};


/**
 * Take a pre-constructed fast multiply table and convert it into a form so
 * that it can be attached to this point.
 * @param {!Array.<!Array.<
 *           (Array.<Array.<number>> | e2e.ecc.point.Ed25519)>>} table
 */
e2e.ecc.point.Ed25519.prototype.setFastMultiplyTable = function(table) {
  var identityX = this.curve.IDENTITY.toPointX();
  if (!table.isConverted) {
    var curve = this.curve;
    var newTable = goog.array.map(table, function(row) {
      return goog.array.map(row, function(encodedPoint) {
        if (encodedPoint == null) {
          return identityX;
        }
        var delta = e2e.BigNum.fromInternalArray(encodedPoint[0]);
        var sum = e2e.BigNum.fromInternalArray(encodedPoint[1]);
        var d2xy = e2e.BigNum.fromInternalArray(encodedPoint[2]);
        return new e2e.ecc.point.Ed25519X(curve,
            new e2e.ecc.Element(curve.q, delta),
            new e2e.ecc.Element(curve.q, sum),
            new e2e.ecc.Element(curve.q, d2xy));
      });
    });
    // Splice the new table into the array where the old table was.
    goog.array.clear(table);
    goog.array.extend(table, newTable);
    table.isConverted = true;
  }
  goog.asserts.assert(this.isEqual(table[0][1].toPoint()),
      'Fast Multiply table is being attached to the wrong point');
  this.fastMultiplyTable_ =
      /** @type {Array.<!Array.<!e2e.ecc.point.Ed25519X>>} */ (table);
};


/**
 * Calculate k * this, when this has a fast multiply table attached to it.
 *
 * @param {!e2e.BigNum} k
 * @return {!e2e.ecc.point.Ed25519} k * this
 * @private
 */
e2e.ecc.point.Ed25519.prototype.fastMultiply_ = function(k) {
  var table = this.fastMultiplyTable_;
  var base = table[0][1];
  var nybbles = k.toSignedNybbleArray();
  // The definition of nybbles[] is:
  //    k = sum(nybbles[i] * 16**i) 0 <= i < nybbles.length
  // where each -8 <= nybbles[i] <= 8
  // So we also have
  //    k * this = (sum(nybbles[i] * 16**i)) * this
  //             = sum(nybbles[i] * 16**i * k)
  // The value is parentheses is a precomputed quantity.
  //     nybbles[i] > 0:    table[i][nybbles[i]]
  //     nybbles[i] < 0:    table[i][-nybbles[i]].negate();
  //     nybbles[i] = 0:    Identity
  var acc = this.curve.IDENTITY;
  // We avoid timing attacks by always performing table.length additions,
  // even if nybbles.length is shorter
  for (var i = 0; i < table.length; i++) {
    var origNybble = nybbles[i] | 0;
    var nybble = origNybble || 1;
    var absNybble = nybble < 0 ? -nybble : nybble;
    // Don't let side-channel information leak regarding the index
    // that we are accessing.
    // multiplier = (absNybble * (16^i)) * this
    var multiplier = base.selectFromFastMultiplyTable_(table[i], absNybble);
    // multiplier = (nybble * (16^i)) * this
    if (nybble < 0) {
      multiplier = multiplier.negate();
    }
    // multiplier can be either a point or an extended point, so
    // it needs to be on the left.  acc is always a point.
    var temp = multiplier.add(acc);
    if (origNybble != 0) {
      acc = temp;
    }
  }
  return acc;
};


/**
 * Returns the row[index] of the fast multiplication table as a Point.
 * This code is careful to touch every entry in the row in the exact same
 * order, independent of the value of we are fetching.
 *
 * @param {!Array.<e2e.ecc.point.Ed25519>} row
 *     A row of the fast multiply table
 * @param {number} index The index of the entry to fetch.
 * @return {!e2e.ecc.point.Ed25519} corresponding point.
 * @private
 */
e2e.ecc.point.Ed25519.prototype.selectFromFastMultiplyTable_ = function(
    row, index) {
  goog.asserts.assert(index >= 1 && index < row.length, 'Argument sanity');
  var length = this.curve.q.n.length;
  var x = e2e.BigNum.createBigNumOfSize(length);
  var y = e2e.BigNum.createBigNumOfSize(length);
  var t = e2e.BigNum.createBigNumOfSize(length);
  var z = e2e.BigNum.createBigNumOfSize(length);
  for (var i = 1; i < row.length; i++) {
    var mask = -(index == i);    // index == i ? -1 : 0
    var element = row[i];
    for (var word = 0; word < length; word++) {
      x.n[word] |= element.x.toBigNum().n[word] & mask;
      y.n[word] |= element.y.toBigNum().n[word] & mask;
      t.n[word] |= element.t.toBigNum().n[word] & mask;
      z.n[word] |= element.z.toBigNum().n[word] & mask;
    }
  }
  var point = new e2e.ecc.point.Ed25519(this.curve,
      new e2e.ecc.Element(this.curve.q, x),
      new e2e.ecc.Element(this.curve.q, y),
      new e2e.ecc.Element(this.curve.q, t),
      new e2e.ecc.Element(this.curve.q, z));
  return point;
};



/**
 * Converts to an extended point.
 * @return {!e2e.ecc.point.Ed25519X}
 */
e2e.ecc.point.Ed25519.prototype.toPointX = function() {
  var x = this.getX();
  var y = this.getY();
  return new e2e.ecc.point.Ed25519X(this.curve, y.subtract(x), y.add(x),
      x.multiply(y).multiply(this.curve.D2));
};

/**
 * Converts to a point.
 * @return {!e2e.ecc.point.Ed25519}
 */
e2e.ecc.point.Ed25519.prototype.toPoint = function() {
  return this;
};



/**
 * Consturcts a precomputed point on the Elliptic curve.
 *
 * Section 4 of http://ed25519.cr.yp.to/ed25519-20110926.pdf recommends
 * representing pre-computed points in the format (y-x, y+x, 2dxy).  Doing
 * so saves 2 additions and two multiplications when calculating an addition.
 * When performing calculations, we ensure that these precomputed points are
 * always "this" rather than the argument, and only permit multiply() and
 * negate()
 *
 * @param {!e2e.ecc.curve.Curve} curve
 * @param {!e2e.ecc.Element} delta  y - x
 * @param {!e2e.ecc.Element} sum   y + x
 * @param {!e2e.ecc.Element} d2xy   d * x * y
 * @constructor
 * @extends {e2e.ecc.point.Point}
 */
e2e.ecc.point.Ed25519X = function(curve, delta, sum, d2xy) {
  e2e.ecc.point.Ed25519X.base(this, 'constructor', curve);

  /** @type {!e2e.ecc.Element} */
  this.delta = delta;

  /** @type {!e2e.ecc.Element} */
  this.sum = sum;

  /** @type {!e2e.ecc.Element} */
  this.d2xy = d2xy;
};
goog.inherits(e2e.ecc.point.Ed25519X, e2e.ecc.point.Point);


/**
 * Converts to a point.
 * @return {!e2e.ecc.point.Ed25519}
 */
e2e.ecc.point.Ed25519X.prototype.toPoint = function() {
  var x = this.sum.subtract(this.delta).shiftRight(1);
  var y = this.sum.add(this.delta).shiftRight(1);
  return new e2e.ecc.point.Ed25519(this.curve, x, y);
};


/**
 * Converts to an extended point
 * @return {!e2e.ecc.point.Ed25519X}
 */
e2e.ecc.point.Ed25519X.prototype.toPointX = function() {
  return this;
};


/**
 * Negates an extended point.
 * @return {!e2e.ecc.point.Ed25519X}
 */
e2e.ecc.point.Ed25519X.prototype.negate = function() {
  // Negation swaps sum and delta, and negates dyx;
  return new e2e.ecc.point.Ed25519X(this.curve,
      this.sum, this.delta, this.d2xy.negate());
};

/**
 * Adds another point to this, and return the new point. This is the group
 *     operation.
 * @param {!e2e.ecc.point.Ed25519} that The point to add.
 * @return {!e2e.ecc.point.Ed25519}
 */
e2e.ecc.point.Ed25519X.prototype.add = function(that) {
  // A rewrite of Ed25519.prototype.add, using the values available here
  // "Z" is implicitly 1.  T * D2 has already been pre-calculated.
  goog.asserts.assert(!that.isInfinity());
  var A = (this.delta).multiply(that.y.subtract(that.x));
  var B = (this.sum).multiply(that.y.add(that.x));
  var C = this.d2xy.multiply(that.t);
  var D = that.z.shiftLeft(1);
  var E = B.subtract(A);
  var F = D.subtract(C);
  var G = D.add(C);
  var H = B.add(A);
  return new e2e.ecc.point.Ed25519(this.curve, E.multiply(F),
      G.multiply(H), E.multiply(H), F.multiply(G));
};


/**
 * Returns the row[index] of the fast multiplication table as a Point.
 * This code is careful to touch every entry in the row in the exact same
 * order, independent of the value of we are fetching.
 *
 * @param {!Array.<e2e.ecc.point.Ed25519X>} row
 *     A row of the fast multiply table
 * @param {number} index The index of the entry to fetch.
 * @return {!e2e.ecc.point.Ed25519X} corresponding point.
 * @private
 */
e2e.ecc.point.Ed25519X.prototype.selectFromFastMultiplyTable_ =
function(row, index) {
  goog.asserts.assert(index >= 1 && index < row.length, 'Argument sanity');
  var length = this.curve.q.n.length;
  var delta = e2e.BigNum.createBigNumOfSize(length);
  var sum = e2e.BigNum.createBigNumOfSize(length);
  var d2xy = e2e.BigNum.createBigNumOfSize(length);
  for (var i = 1; i < row.length; i++) {
    var mask = -(index == i);    // index == i ? -1 : 0
    var element = row[i];
    for (var word = 0; word < length; word++) {
      delta.n[word] |= element.delta.toBigNum().n[word] & mask;
      sum.n[word] |= element.sum.toBigNum().n[word] & mask;
      d2xy.n[word] |= element.d2xy.toBigNum().n[word] & mask;
    }
  }
  var point = new e2e.ecc.point.Ed25519X(this.curve,
      new e2e.ecc.Element(this.curve.q, delta),
      new e2e.ecc.Element(this.curve.q, sum),
      new e2e.ecc.Element(this.curve.q, d2xy));
  return point;
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Representation of the ED25519 elliptic curve
 *     -x^2 + y^2 = 1 + d x^2 y^2
 * defined over a prime field.
 *
 * These two papers give information on this category of elliptic curve.
 *
 * Twisted Edwards Curves
 *   http://eprint.iacr.org/2008/013.pdf
 * Twisted Edwards Curves Revisited
 *   http://eprint.iacr.org/2008/522.pdf
 *
 * This paper describes ED25519 specifically and describes its use for
 * signatures.
 *
 * High-speed high-security signatures
 *   http://ed25519.cr.yp.to/ed25519-20110926.pdf
 * @author fy@google.com (Frank Yellin).
 */

goog.provide('e2e.ecc.curve.Ed25519');

goog.require('e2e.BigNum');
goog.require('e2e.ecc.Element');
goog.require('e2e.ecc.curve.Curve');
goog.require('e2e.ecc.point.Ed25519');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('goog.asserts');



/**
 * Constructs an Edwards elliptic curve defined over a prime field.
 *
 * @constructor
 * @extends {e2e.ecc.curve.Curve}
 * @param {!e2e.BigPrimeNum} q The modulus of the prime field.
 */
e2e.ecc.curve.Ed25519 = function(q) {
  e2e.ecc.curve.Ed25519.base(this, 'constructor', q);


  /**
   * The D value in the elliptic equation, with value -121665/121666.
   * @type {!e2e.ecc.Element}
   * @const
   */
  this.D = this.elementFromInteger(121665).negate().multiply(
      this.elementFromInteger(121666).inverse());

   /**
   * The 2 * D
   * @type {!e2e.ecc.Element}
   * @const
   */
  this.D2 = this.D.shiftLeft(1);

  /**
   * If an element e has a square root, it must either be e^SQUARE_ROOT_POWER_
   * or (e^SQUARE_ROOT_POWER_) * SQUARE_ROOT_MINUS_ONE_.
   * Its value is (q + 3)/8.
   * This is algorithm 3.37 in the Handbook of Applied Cryptography, which
   * handles q == 5 (mod 8).
   * @const
   * @private {!e2e.BigNum}
   */
  this.SQUARE_ROOT_POWER_ =
      q.add(e2e.BigNum.fromInteger(3)).shiftRight(3);

  /**
   * Calculate 2 ^ ((q - 1)/4).
   * Since 2 is not a square in Fq, this is a square root of -1.
   * @private {!e2e.ecc.Element}
   */
  this.SQUARE_ROOT_MINUS_ONE_ = this.TWO.power(
      q.subtract(e2e.BigNum.ONE).shiftRight(2));

  var four = this.elementFromInteger(4);
  var five = this.elementFromInteger(5);
  /**
   * The point whose y coordinate is 4/5 and whose x coordinate is even
   * @type {!e2e.ecc.point.Ed25519}
   * @const
   */
  this.B = this.pointFromYCoordinate_(four.multiply(five.inverse()), 0);

  /**
   * The point at infinity
   * @type {!e2e.ecc.point.Ed25519}
   * @const
   */
  this.INFINITY = new e2e.ecc.point.Ed25519(this,
      this.ZERO, this.ZERO, this.ZERO, this.ZERO);

  /**
   * The additive identity
   * @type {!e2e.ecc.point.Ed25519}
   * @const
   */
  this.IDENTITY = new e2e.ecc.point.Ed25519(this,
      this.ZERO, this.ONE);


};
goog.inherits(e2e.ecc.curve.Ed25519, e2e.ecc.curve.Curve);


/** @override */
e2e.ecc.curve.Ed25519.prototype.pointFromByteArray = function(p) {
  goog.asserts.assert(p.length == 32, 'Point length must be 32 bytes');
  // Comes in little endian.  Reverse it to be big endian
  p = p.slice(0).reverse();
  // Bit 255 is actually the parity bit, and not part of the point
  var parity = (p[0] & 0x80) >> 7;
  p[0] &= 0x7F;
  var y = new e2e.ecc.Element(this.q, new e2e.BigNum(p));
  // Calculate and return the point, based on y and the parity
  return this.pointFromYCoordinate_(y, parity);
};


/** @override */
e2e.ecc.curve.Ed25519.prototype.keySizeInBits = function() {
  return 256;
};


/**
 * Returns a 32-byte little-endian byte array representing the value of the
 * bignum.
 * @param {!e2e.BigNum} bignum
 *
 * @return {!e2e.ByteArray}
 */
e2e.ecc.curve.Ed25519.prototype.littleEndianByteArray32FromBigNum =
function(bignum) {
  var result = bignum.toByteArray().reverse();
  while (result.length < 32) {
    result.push(0);
  }
  return result;
};


/**
 * Returns true if this curve is equal to another curve.
 * @param {!e2e.ecc.curve.Ed25519} that The curve to compare.
 * @return {boolean}
 */
e2e.ecc.curve.Ed25519.prototype.isEqual = function(that) {
  if (this === that) {
    return true;
  }
  return this.q.isEqual(that.q);
};


/**
 * Returns the point with the specified y coordinate. The resulting x must
 * have the same parity (odd or even) as the "parity" argument.
 *
 * @param {!e2e.ecc.Element} y the y coordinate
 * @param {number} parity
 * @return {!e2e.ecc.point.Ed25519} the point with the specified x
 *     coordinate.
 * @private
 */
e2e.ecc.curve.Ed25519.prototype.pointFromYCoordinate_ = function(
    y, parity) {
  var yy = y.square();
  // y^2 - 1 == x^2(d y^2 + 1) is an equivalent equation
  var xx = yy.subtract(this.ONE).multiply(
      yy.multiply(this.D).add(this.ONE).inverse());
  var x = xx.power(this.SQUARE_ROOT_POWER_);
  if (!x.multiply(x).isEqual(xx)) {
    x = x.multiply(this.SQUARE_ROOT_MINUS_ONE_);
    if (!x.multiply(x).isEqual(xx)) {
      throw new e2e.error.InvalidArgumentsError('Bad argument');
    }
  }
  if ((x.toBigNum().isOdd() ^ parity) & 1) {
    // We got the odd x, but wanted even, or vice versa.
    if (x.isEqual(this.ZERO)) {
      throw new e2e.error.InvalidArgumentsError(
          'No odd point with this y coordinate exists');
    }
    x = x.negate();
  }
  return new e2e.ecc.point.Ed25519(this, x, y);
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview
 *
 * Fast modulus implemention for the Curve25519 prime 2^255 - 19
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('e2e.ecc.fastModulus.Curve25519');

goog.require('e2e.FastModulus');



/**
 * A concrete subclass of FastModulus that handles the case the special case
 * of the prime modulus 2^255 - 19.
 *
 * @constructor
 * @implements {e2e.FastModulus}
 * @param {!e2e.BigPrimeNum} modulus The large prime number for which
 *     we are building a fast modulus function.
 */
e2e.ecc.fastModulus.Curve25519 = function(modulus) {
  /**
   * The modulus.
   * @private {!e2e.BigPrimeNum }
   */
  this.modulus_ = modulus;

  /** @override */
  this.useForMultiplication = true;
};


/** @override */
e2e.ecc.fastModulus.Curve25519.prototype.residue = function(value) {
  value = value.clone();
  // Loop while bitLength(n) > 255
  while (value.n.length > 11 || (value.n[10] | 0) >= (1 << 15)) {
    for (var i = value.n.length - 1; i >= 11; --i) {
      // Note that 2^255 == 19 (mod modulus_).
      // So value[i] * 2^(24 * i) = 19 * value[i] * 2^(24 * i - 255)
      //                          = 19 * value[i] * 2^(24 * (i - 11) + 9)
      //                          = 19 * value[i] * 2^9 * 2^(24 * (i - 11));
      var temp = value.n[i] * 19;
      // Rather than just adding temp<<9 to value[i-11], we break it into
      // its low and high pieces.
      value.n[i - 11] += (temp & 0x7FFF) << 9;
      value.n[i - 10] += (temp >> 15);
    }
    // We also want all to remove all but the low 15 bits of n[10] (representing
    // bits >= 2^255) by multiplying them by 19 and adding them to n[0].
    // (since a * 2^255 == 19 * a, mod modulus_)
    // The low 15 bits are left alone.
    value.n[0] += (value.n[10] >> 15) * 19;
    value.n[10] &= 0x7FFF;
    value.n.length = 11;
    // Normalize our result.
    var U = 0;
    for (var i = 0; i < 10; i++) {
      U += value.n[i];
      value.n[i] = U & 0xFFFFFF;
      U >>>= 24;
    }
    value.n[10] += U;
    value.dropLeadingZeros();
  }
  // At this point bitlength(value) <= 255.
  if (value.compare(this.modulus_) >= 0) {
    // bitlength(value) <= 255, but value >= modulus.  The value must be one of
    // the nineteen numbers in the range [2^255 - 19, 2^225 - 1].
    // Rather than subtracting modulus_, we just subtract the low 24 bits of
    // modulus_, and force the result of the pieces to be zero.
    value.n.length = 1;
    value.n[0] -= this.modulus_.n[0];
  }
  return value;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Representation of a point on the NIST elliptic curve defined
 * over a prime field.  Point arithmetics for NIST curves are performed using
 * explicit formulas provided by
 *     http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html.
 *
 * @author thaidn@google.com (Thai Duong).
 * @author fy@google.com (Frank Yellin).
 */

goog.provide('e2e.ecc.point.Nist');

goog.require('e2e.BigNum');
goog.require('e2e.ecc.Element');
goog.require('e2e.ecc.point.Point');
goog.require('e2e.fixedtiming');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * Constructs a point on the elliptic curve y^2 = x^3 - 3*x + B defined
 *     over a prime field.
 * @param {!e2e.ecc.curve.Curve} curve The curve.
 * @param {!e2e.ecc.Element} x The x Jacobian coordinate.
 * @param {!e2e.ecc.Element} y The y Jacobian coordinate.
 * @param {!e2e.ecc.Element=} opt_z The optional z Jacobian coordinate.
 * @constructor
 * @extends {e2e.ecc.point.Point}
 */
e2e.ecc.point.Nist = function(curve, x, y, opt_z) {
  e2e.ecc.point.Nist.base(this, 'constructor', curve);

  /**
   * The x Jacobian projective coordinate of this.
   * @type {!e2e.ecc.Element}
   */
  this.x = x;

  /**
   * The y Jacobian projective coordinate of this.
   * @type {!e2e.ecc.Element}
   */
  this.y = y;

  /**
   * The z Jacobian projective coordinate of this.
   * @type {!e2e.ecc.Element}
   */
  this.z = opt_z || this.curve.ONE;

  /**
   * The equivalent affine Point.
   * @type {e2e.ecc.point.Nist}
   */
  this.affine = this.z.isEqual(this.curve.ONE) ? this : null;
};
goog.inherits(e2e.ecc.point.Nist, e2e.ecc.point.Point);


/**
 * @type {Array.<!Array.<!e2e.ecc.point.Nist>>}
 * @private
 */
e2e.ecc.point.Nist.prototype.fastMultiplyTable_;


/**
 * @type {Array.<!e2e.ecc.point.Nist>}
 * @private
 */
e2e.ecc.point.Nist.prototype.smallMultiplyTable_;


/**
 * Returns a copy of this point.
 * @return {!e2e.ecc.point.Nist}
 */
e2e.ecc.point.Nist.prototype.clone = function() {
  return new e2e.ecc.point.Nist(
      this.curve, this.x.clone(), this.y.clone(), this.z.clone());
};


/** @override */
e2e.ecc.point.Nist.prototype.getX = function() {
  // Converts the point to affine form, and then extracts the X coordinate
  goog.asserts.assert(!this.isInfinity(),
      'Cannot obtain the affine coordinate of the point at infinity.');
  var affine = this.getAffine_();
  goog.asserts.assert(goog.isDefAndNotNull(affine.x),
      'Element X of affine must not be null.');
  return affine.x;
};


/** @override */
e2e.ecc.point.Nist.prototype.getY = function() {
  // Converts the point to affine form, and then extracts the Y coordinate
  goog.asserts.assert(!this.isInfinity(),
      'Cannot obtain the affine coordinate of the point at infinity.');
  var affine = this.getAffine_();
  goog.asserts.assert(goog.isDefAndNotNull(affine.y),
      'Element Y of affine must not be null.');
  return affine.y;
};


/**
 * Returns the equivalent affine point.
 * @return {!e2e.ecc.point.Nist}
 * @private
 */
e2e.ecc.point.Nist.prototype.getAffine_ = function() {
  if (this.affine_ == null) {
    var zInv = this.z.inverse();
    var zInv2 = zInv.square();
    var x = this.x.multiply(zInv2);
    var y = this.y.multiply(zInv2.multiply(zInv));
    this.affine_ =
        new e2e.ecc.point.Nist(this.curve, x, y, this.curve.ONE);
  }
  return this.affine_;
};


/**
 * Returns true if this is the point at infinity.
 * @return {boolean}
 */
e2e.ecc.point.Nist.prototype.isInfinity = function() {
  // Infinity is the only Point with z == 0.
  return this.z.isEqual(this.curve.ZERO);
};


/** @override */
e2e.ecc.point.Nist.prototype.isIdentity = function() {
  // Infinity is identity point.
  return this.isInfinity();
};


/**
 * Compares another point with this. Return true if they are the same.
 * @param {!e2e.ecc.point.Nist} that The point to compare.
 * @return {boolean}
 */
e2e.ecc.point.Nist.prototype.isEqual = function(that) {
  // x and y coordinates must be equal
  var z1z1 = this.z.square();
  var z2z2 = that.z.square();
  return this.x.multiply(z2z2).isEqual(that.x.multiply(z1z1)) &&
         this.y.multiply(z2z2.multiply(that.z)).
             isEqual(that.y.multiply(z1z1.multiply(this.z)));
};


/**
 * Returns a new point which is a negative of this.
 * @return {!e2e.ecc.point.Nist}
 */
e2e.ecc.point.Nist.prototype.negate = function() {
  return new e2e.ecc.point.Nist(this.curve, this.x, this.y.negate(),
      this.z);
};


/** @override */
e2e.ecc.point.Nist.prototype.toByteArray = function(opt_compressed) {
  var X = this.getX().toBigNum().toByteArray();
  var fieldSize = Math.ceil(this.curve.keySizeInBits() / 8);
  // Pads X if needed.
  while (X.length < fieldSize) {
    goog.array.insertAt(X, 0x00, 0);
  }
  if (!opt_compressed) {
    // Pads Y if needed.
    var Y = this.getY().toBigNum().toByteArray();
    while (Y.length < fieldSize) {
      goog.array.insertAt(Y, 0x00, 0);
    }
    var r = [0x4];
    goog.array.extend(r, X);
    goog.array.extend(r, Y);
    return r;
  } else {
    // 0x2 if y is even, 0x3 if y is odd.
    var r = [0x2 + (this.getY().toBigNum().isOdd() & 1)];
    goog.array.extend(r, X);
    return r;
  }
};


/**
 * Adds another point to this, and return the new point. This is the group
 * operation.
 * Note that this function leaks timing side-channel. We use it only to
 * calculate public points.
 * @param {!e2e.ecc.point.Nist} that The point to add.
 * @return {!e2e.ecc.point.Nist}
 */
e2e.ecc.point.Nist.prototype.add = function(that) {
  goog.asserts.assertObject(that, 'Point should be defined.');
  goog.asserts.assert(that.curve.isEqual(this.curve),
      'Cannot add points from different curves.');

  if (this.isInfinity()) {
    return that;
  }
  if (that.isInfinity()) {
    return this;
  }

  var Z1Z1 = this.z.square();
  var Z2Z2 = that.z.square();
  if (this.x.multiply(Z2Z2).isEqual(that.x.multiply(Z1Z1))) {
    // this.getX() == that.getX().  Either this==that or this==-that.
    // Compare the y values to see which is the case.
    if (this.y.multiply(Z2Z2.multiply(that.z)).isEqual(
        that.y.multiply(Z1Z1.multiply(this.z)))) {
      // this.getY() == that.getY().  So same point
      return this.twice_();
    } else {
      // this = -that
      return this.curve.INFINITY;
    }
  }

  // Check for special cases that might have faster formulas.
  if (this.z.isEqual(that.z)) {
    if (this.z.isEqual(this.curve.ONE)) {
      // Add two affine points.
      return this.addAffine_(that);
    }
    return this.addSameZ_(that);
  } else if (that.z.isEqual(this.curve.ONE)) {
    // Add mixed Jacobian and affine coordinates.
    return this.addMixed_(that);
  }

  return this.add_(that);
};


/**
 * Adds another point to this, and return the new point.
 * @param {!e2e.ecc.point.Nist} that The point to add.
 * @return {!e2e.ecc.point.Nist}
 * Note that this function does not handle P+P, infinity+P or P+infinity
 * correctly.
 * @private
 */
e2e.ecc.point.Nist.prototype.add_ = function(that) {
  var Z1Z1 = this.z.square();
  var Z2Z2 = that.z.square();

  var U1 = this.x.multiply(Z2Z2);
  var U2 = that.x.multiply(Z1Z1);
  var S1 = this.y.multiply(that.z).multiply(Z2Z2);
  var S2 = that.y.multiply(this.z).multiply(Z1Z1);
  var H = U2.subtract(U1);
  var I = H.shiftLeft(1).square();
  var J = H.multiply(I);
  var V = U1.multiply(I);
  var r = S2.subtract(S1).shiftLeft(1);
  var X3 = r.square().subtract(J).subtract(V.shiftLeft(1));
  var Y3 = r.multiply(V.subtract(X3)).subtract(S1.multiply(J).shiftLeft(1));
  var Z3 =
      this.z.add(that.z).square().subtract(Z1Z1).subtract(Z2Z2).multiply(H);
  return new e2e.ecc.point.Nist(this.curve, X3, Y3, Z3);
};


/**
 * Doubles this, and return the new point.
 * @return {!e2e.ecc.point.Nist}
 * @private
 */
e2e.ecc.point.Nist.prototype.twice_ = function() {
  if (this.affine_ != null) {
    // Either this affine (Z == 1) or we have already calculated the
    // this's affine equivalent.
    return this.affine_.doubleAffine_();
  }
  // Cost: 3M + 5S.
  var delta = this.z.square();
  var alpha = this.curve.THREE
      .multiply(this.x.subtract(delta))
      .multiply(this.x.add(delta));
  var gamma = this.y.square();
  var beta = this.x.multiply(gamma);
  var X3 = alpha.square().subtract(beta.shiftLeft(3));
  var Y3 = alpha.multiply(beta.shiftLeft(2).subtract(X3)).subtract(
      gamma.square().shiftLeft(3));
  var Z3 = this.y.add(this.z).square().subtract(gamma).subtract(delta);
  return new e2e.ecc.point.Nist(this.curve, X3, Y3, Z3);
};


/**
 * @override
 */
e2e.ecc.point.Nist.prototype.multiply = function(k) {
  if (this.fastMultiplyTable_) {
    return this.fastMultiply_(k);
  }

  // In every non-test occurrence of .multiply(), "this" is either
  // the generator or another user's public key. It make sense to cache
  // the small multiplication table, since these points will likely have
  // further multiplies applied to them.
  var powers = this.smallMultiplyTable_;
  if (!powers) {
    // Create a table consisting of 1 * this through 8 * this
    powers = new Array(9);
    powers[1] = this;
    for (var i = 2; i < 9; i++) {
      powers[i] = powers[i - 1].add(this);
    }
    this.smallMultiplyTable_ = powers;
  }
  var acc = this.curve.INFINITY.clone();
  var accIsInfinityMask = -1;
  var multiplierIsInfinityMask;
  var mask;
  // k should have the same size as the order of the group, which isn't easily
  // accessible from here. Fortunately in NIST curves the order of the group
  // has the same length as the modulus.
  var nybbles = k.cloneWithSize(this.curve.q.getSize()).toSignedNybbleArray();
  // Perform a high-end to low-end signed-nybble-at-a-time multiplication.
  for (var i = nybbles.length - 1; i >= 0; --i) {
    // ASSERT:
    //   acc = sum(nybbles[j] * 16**(j - i - 1), i < j < nybbles.length) * this
    acc = acc.twice_().twice_().twice_().twice_();
    // ASSERT:
    //   acc = sum(nybbles[j] * 16**(j - i), i < j < nybbles.length) * this
    // multiplier = (nybble[i] * (16^i)) * this
    var multiplier = this.selectFromFastMultiplyTable_(powers, nybbles[i] | 0);
    var temp = acc.add_(multiplier);
    acc.x.copyConditionally(multiplier.x, accIsInfinityMask);
    acc.y.copyConditionally(multiplier.y, accIsInfinityMask);
    acc.z.copyConditionally(multiplier.z, accIsInfinityMask);
    multiplierIsInfinityMask = e2e.fixedtiming.select(
        -1, 0, ((nybbles[i] | 0) === 0) | 0);
    mask = ~multiplierIsInfinityMask & ~accIsInfinityMask;
    acc.x.copyConditionally(temp.x, mask);
    acc.y.copyConditionally(temp.y, mask);
    acc.z.copyConditionally(temp.z, mask);
    accIsInfinityMask &= multiplierIsInfinityMask;

    // ASSERT:
    //   acc = sum(nybbles[j] * 16**(j - i), i <= j < nybbles.length) * this
  }
  return acc;
};


/**
 * Determines if this point is on this elliptic curve.
 * @return {boolean}
 */
e2e.ecc.point.Nist.prototype.isOnCurve = function() {
  if (this.isInfinity()) {
    return true;
  }
  var affine = this.getAffine_();
  // Y^2 = X^3 - 3 X + B
  var left = affine.y.square();
  var X = affine.x;
  var right = X.square().multiply(X)
      .subtract(X.add(X).add(X))
      .add(this.curve.B);
  return left.isEqual(right);
};


/**
 * Create a table
 * @return {!Array.<!Array.<!e2e.ecc.point.Nist>>}
 */
e2e.ecc.point.Nist.prototype.createFastMultiplyTable = function() {
  var bits = this.curve.keySizeInBits();
  var nybbleCount = Math.ceil((bits + 1) / 4);  // sign can add one more bit
  var unsignedNybbleCount = Math.ceil(bits / 4);
  var table = [];
  for (var power = 0; power < nybbleCount; power++) {
    // table[power][i] = (i * (16^power)) * this
    table[power] = [];
    table[power][0] = this.curve.INFINITY;
    if (power == 0) {
      table[power][1] = this;
    } else {
      table[power][1] = table[power - 1][8].twice_();
    }
    if (power == unsignedNybbleCount) {
      // This extra nybble is the result of an overflow that can happen when
      // going from unsigned digit to signed digit representation.
      // Its value can only be 0 or 1.
      continue;
    }
    for (var i = 2; i <= 8; i++) {
      table[power][i] = table[power][i - 1].add(table[power][1]);
    }
  }
  table.isConverted = true;
  table.isAffine = false;
  return table;
};


/**
 * @override
 */
e2e.ecc.point.Nist.prototype.initializeForFastMultiply = function() {
  var table = this.createFastMultiplyTable();
  goog.asserts.assert(this.isEqual(table[0][1]),
      'Fast Multiply table is being attached to the wrong point');
  this.fastMultiplyTable_ = table;
};


/**
 * Take a pre-constructed fast multiply table and convert it into a form so
 * that it can be attached to this point.
 * @param {!Array.<!Array.<
 *           (Array.<Array.<number>> | e2e.ecc.point.Nist)>>} table
 */
e2e.ecc.point.Nist.prototype.setFastMultiplyTable = function(table) {
  if (!table.isConverted) {
    var curve = this.curve;
    var newTable = goog.array.map(table, function(row) {
      return goog.array.map(row, function(encodedPoint) {
        if (encodedPoint == null) {
          return curve.INFINITY;
        }
        var x = e2e.BigNum.fromInternalArray(encodedPoint[0]);
        var y = e2e.BigNum.fromInternalArray(encodedPoint[1]);
        return new e2e.ecc.point.Nist(curve,
            new e2e.ecc.Element(curve.q, x),
            new e2e.ecc.Element(curve.q, y));
      });
    });
    // Splice the new table into the array where the old table was.
    goog.array.clear(table);
    goog.array.extend(table, newTable);
    table.isConverted = true;
    table.isAffine = true;  // Maybe we can use this fact in the future.
  }
  goog.asserts.assert(this.isEqual(
      /** @type {!e2e.ecc.point.Nist} */ (table[0][1])),
      'Fast Multiply table is being attached to wrong point');
  this.fastMultiplyTable_ = table;
};


/**
 * Calculate k * this, when this has a fast multiply table attached to it.
 *
 * @param {!e2e.BigNum} k
 * @return {!e2e.ecc.point.Nist} k * this
 * @private
 */
e2e.ecc.point.Nist.prototype.fastMultiply_ = function(k) {
  var table = this.fastMultiplyTable_;
  var nybbles = k.toSignedNybbleArray();
  // The definition of nybbles[] is:
  //    k = sum(nybbles[i] * 16**i) 0 <= i < nybbles.length
  // where each -8 <= nybbles[i] <= 8
  // So we also have
  //    k * this = (sum(nybbles[i] * 16**i)) * this
  //             = sum(nybbles[i] * 16**i * k)
  // The value in parentheses is a precomputed quantity.
  //     nybbles[i] > 0:    table[i][nybbles[i]]
  //     nybbles[i] < 0:    table[i][-nybbles[i]].negate();
  //     nybbles[i] = 0:    Infinity
  var acc = this.curve.INFINITY.clone();
  var accIsInfinityMask = -1;
  var multiplierIsInfinityMask;
  var mask;
  // We avoid timing attacks by always performing table.length additions,
  // even if nybbles.length is shorter
  for (var i = 0; i < table.length; i++) {
    // Don't let side-channel information leak regarding the index
    // that we are accessing.
    // multiplier = (nybbles[i] * (16^i)) * this
    var multiplier = this.selectFromFastMultiplyTable_(
        table[i], nybbles[i] | 0);
    // Because k is less than the order of the group, we know that
    // acc != multiplier, unless both are zero, which we handle below.
    var temp = acc.addMixed_(multiplier);
    // The result of addMixed is incorrect if acc is INFINITY. We handle that
    // situation by copying the point from the table.
    acc.x.copyConditionally(multiplier.x, accIsInfinityMask);
    acc.y.copyConditionally(multiplier.y, accIsInfinityMask);
    acc.z.copyConditionally(multiplier.z, accIsInfinityMask);
    // Equally, the result is also wrong if the point from the table is
    // INFINITY, which happens when the index is zero. We handle that by
    // only copying from temp to accu if index != 0.
    multiplierIsInfinityMask = e2e.fixedtiming.select(
        -1, 0, ((nybbles[i] | 0) === 0) | 0);
    // Only copy if multiplier != INFINITY && acc != INFINITY.
    mask = ~multiplierIsInfinityMask & ~accIsInfinityMask;
    acc.x.copyConditionally(temp.x, mask);
    acc.y.copyConditionally(temp.y, mask);
    acc.z.copyConditionally(temp.z, mask);
    // If multiplier != INFINITY, acc is now != INFINITY.
    accIsInfinityMask &= multiplierIsInfinityMask;
  }
  return acc;
};


/**
 * Returns the row[|index|] of the fast multiplication table as a Point.
 * This code is careful to touch every entry in the row in the exact same
 * order, independent of the value of we are fetching.
 *
 * @param {!Array.<e2e.ecc.point.Nist>} row
 *     A row of the fast multiply table
 * @param {number} index The index of the entry to fetch.
 * @return {!e2e.ecc.point.Nist} corresponding point.
 * @private
 */
e2e.ecc.point.Nist.prototype.selectFromFastMultiplyTable_ = function(
    row, index) {
  var absIndex = e2e.fixedtiming.select(index, -index, (index > 0) | 0);
  goog.asserts.assert(
      absIndex >= 0 && absIndex < row.length, 'Argument sanity');

  var length = this.curve.q.n.length;
  var x = e2e.BigNum.createBigNumOfSize(length);
  var y = e2e.BigNum.createBigNumOfSize(length);
  var z = e2e.BigNum.createBigNumOfSize(length);
  for (var i = 1; i < row.length; i++) {
    var mask = -(absIndex == i);    // index == i ? -1 : 0
    var element = row[i];
    for (var word = 0; word < length; word++) {
      x.n[word] |= element.x.toBigNum().n[word] & mask;
      y.n[word] |= element.y.toBigNum().n[word] & mask;
      z.n[word] |= element.z.toBigNum().n[word] & mask;
    }
  }
  var minusY = this.curve.q.modSubtract(e2e.BigNum.ZERO, y);
  var point = new e2e.ecc.point.Nist(this.curve,
      new e2e.ecc.Element(this.curve.q, x),
      new e2e.ecc.Element(this.curve.q,
          e2e.BigNum.select(y, minusY, (index > 0) | 0)),
      new e2e.ecc.Element(this.curve.q, z));
  return point;
};


/**
 * Doubles this, which has affine coordinates (e.g., Z = 1), and return the new
 *     point. This should cost 1M + 5S.
 * @return {!e2e.ecc.point.Nist}
 * @private
 */
e2e.ecc.point.Nist.prototype.doubleAffine_ = function() {
  goog.asserts.assert(this.z.isEqual(this.curve.ONE),
      'Point should have affine coordinates.');
  var XX = this.x.square();
  var YY = this.y.square();
  var YYYY = YY.square();
  var S = this.curve.TWO.multiply(
      this.x.add(YY).square().subtract(XX).subtract(YYYY));
  var M = this.curve.THREE.multiply(XX.subtract(
      this.curve.ONE));
  var T = M.square().subtract(this.curve.TWO.multiply(S));
  var X3 = T;
  var Y3 = M.multiply(S.subtract(T)).subtract(YYYY.shiftLeft(3));
  var Z3 = this.y.shiftLeft(1);
  return new e2e.ecc.point.Nist(this.curve, X3, Y3, Z3);
};


/**
 * Adds another point to this, and return the new point. Both should have
 *     affine coordinates, i.e., Z = 1.
 * @param {!e2e.ecc.point.Nist} that The point to add.
 * @return {!e2e.ecc.point.Nist}
 * @private
 */
e2e.ecc.point.Nist.prototype.addAffine_ = function(that) {
  goog.asserts.assert(this.z.isEqual(this.curve.ONE),
      'Point should have affine coordinate.');
  goog.asserts.assert(that.z.isEqual(this.curve.ONE),
      'Point should have affine coordinate.');
  goog.asserts.assert(goog.isDefAndNotNull(this.x),
      'Element X should not be null.');
  goog.asserts.assert(goog.isDefAndNotNull(this.y),
      'Element Y should not be null.');
  // Cost: 4M + 2S.
  var H = that.x.subtract(this.x);
  var HH = H.square();
  var I = HH.shiftLeft(2);
  var J = H.multiply(I);
  var r = that.y.subtract(this.y).shiftLeft(1);
  var V = this.x.multiply(I);
  var X3 = r.square().subtract(J).subtract(V.shiftLeft(1));
  var Y3 = r.multiply(V.subtract(X3)).subtract(
      this.y.multiply(J).shiftLeft(1));
  var Z3 = H.shiftLeft(1);
  return new e2e.ecc.point.Nist(this.curve, X3, Y3, Z3);
};


/**
 * Adds another point to this, and return the new point. Both should have
 *     the same Z coordinate.
 * @param {!e2e.ecc.point.Nist} that The point to add.
 * @return {!e2e.ecc.point.Nist}
 * @private
 */
e2e.ecc.point.Nist.prototype.addSameZ_ = function(that) {
  goog.asserts.assert(this.z.isEqual(that.z),
      'Both points should have the same z.');
  goog.asserts.assert(goog.isDefAndNotNull(this.x),
      'Element X should not be null.');
  goog.asserts.assert(goog.isDefAndNotNull(this.y),
      'Element Y should not be null.');
  // Cost: 5M + 2S.
  var A = that.x.subtract(this.x).square();
  var B = this.x.multiply(A);
  var C = that.x.multiply(A);
  var D = that.y.subtract(this.y).square();
  var X3 = D.subtract(B).subtract(C);
  var Y3 = that.y.subtract(this.y).multiply(B.subtract(X3)).subtract(
      this.y.multiply(C.subtract(B)));
  var Z3 = this.z.multiply(that.x.subtract(this.x));
  return new e2e.ecc.point.Nist(this.curve, X3, Y3, Z3);
};


/**
 * Adds an affine point to this, and return the new point.
 * Note that this function does not handle P+P, infinity+P or P+infinity
 * correctly.
 * @param {!e2e.ecc.point.Nist} that The point to add.
 * @return {!e2e.ecc.point.Nist}
 * @private
 */
e2e.ecc.point.Nist.prototype.addMixed_ = function(that) {
  goog.asserts.assert(goog.isDefAndNotNull(this.x),
      'Element X should not be null.');
  goog.asserts.assert(goog.isDefAndNotNull(this.y),
      'Element Y should not be null.');

  // Cost: 7M + 4S.
  var Z1Z1 = this.z.square();
  var U2 = that.x.multiply(Z1Z1);
  var S2 = that.y.multiply(this.z).multiply(Z1Z1);
  var H = U2.subtract(this.x);
  var HH = H.square();
  var I = HH.shiftLeft(2);
  var J = H.multiply(I);
  var r = S2.subtract(this.y).shiftLeft(1);
  var V = this.x.multiply(I);

  var X3 = r.square().subtract(J).subtract(V.shiftLeft(1));
  var Y3 = r.multiply(V.subtract(X3)).subtract(
      this.y.multiply(J).shiftLeft(1));
  var Z3 = this.z.add(H).square().subtract(Z1Z1).subtract(HH);

  return new e2e.ecc.point.Nist(this.curve, X3, Y3, Z3);
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 *
 * @fileoverview Representation of the NIST elliptic curve y^2 = x^3 - 3*x + B
 * defined over a prime field.
 *
 * @author thaidn@google.com (Thai Duong).
 */

goog.provide('e2e.ecc.curve.Nist');

goog.require('e2e.BigNum');
goog.require('e2e.ecc.Element');
goog.require('e2e.ecc.curve.Curve');
goog.require('e2e.ecc.point.Nist');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('goog.asserts');



/**
 * Constructs a NIST elliptic curve defined over a prime field.
 *
 * @constructor
 * @extends {e2e.ecc.curve.Curve}
 * @param {!e2e.BigPrimeNum} q The modulus of the prime field.
 * @param {!e2e.BigNum} b The B cofficient in the elliptic equation,
 *     represented as an array of bytes in little-endian order.
 */
e2e.ecc.curve.Nist = function(q, b) {
  e2e.ecc.curve.Nist.base(this, 'constructor', q);

  /**
   * The B value in the elliptic equation. It's an element in Fq.
   * @type {!e2e.ecc.Element}
   * @const
   */
  this.B = new e2e.ecc.Element(q, b);


  /**
   * The INFINITE point on the curve
   * @type {!e2e.ecc.point.Nist}
   * @const
   */
  this.INFINITY = new e2e.ecc.point.Nist(this,
      this.ONE, this.ZERO, this.ZERO);

  /**
   * If an element e has a square root, it must be e**SQUARE_ROOT_POWER_.
   * This is algorithm 3.36 in the Handbook of Applied Cryptography, which
   * handles q == 3 (mod 4).
   * @private {!e2e.BigNum}
   * const
   */
  this.SQUARE_ROOT_POWER_ = this.q.add(e2e.BigNum.ONE).shiftRight(2);
};
goog.inherits(e2e.ecc.curve.Nist, e2e.ecc.curve.Curve);


/** @override */
e2e.ecc.curve.Nist.prototype.pointFromByteArray = function(p) {
  goog.asserts.assertArray(p, 'Point should be defined.');
  if (p[0] == 0x04) {
    goog.asserts.assert(p.length % 2 == 1,
        'Point in uncompressed form should have an odd number of bytes.');

    var l = p.length - 1;
    var x = this.elementFromByteArray(p.slice(1, l / 2 + 1));
    var y = this.elementFromByteArray(p.slice(l / 2 + 1));
    var point = new e2e.ecc.point.Nist(this, x, y);
    if (!point.isOnCurve()) {
      throw new e2e.error.InvalidArgumentsError(
          'Point should lie on this curve.');
    }
    return point;
  } else if (p[0] == 0x02 || p[0] == 0x03) {
    // compressed notation
    var x = this.elementFromByteArray(p.slice(1));
    return this.pointFromXCoordinate_(x, p[0]);
  } else {
    throw new e2e.error.InvalidArgumentsError('Bad argument');
  }
};


/** @override */
e2e.ecc.curve.Nist.prototype.keySizeInBits = function() {
  return this.q.getBitLength();
};


/**
 * Returns true if this curve is equal to another curve.
 * @param {!e2e.ecc.curve.Nist} that The curve to compare.
 * @return {boolean}
 */
e2e.ecc.curve.Nist.prototype.isEqual = function(that) {
  if (this === that) {
    return true;
  }
  return this.q.isEqual(that.q) && this.B.isEqual(that.B);
};


/**
 * Returns the point with the specified x coordinate. The resulting y must
 * have the same parity (odd or even) as the "parity" argument.
 *
 * @param {!e2e.ecc.Element} x the x coordinate
 * @param {number} parity
 * @return {!e2e.ecc.point.Point} the point with the specified x coordinate.
 * @private
 */
e2e.ecc.curve.Nist.prototype.pointFromXCoordinate_ = function(
    x, parity) {
  goog.asserts.assert(this.q.n[0] & 3 == 3,
      'Do not know how to take square root in this prime number field.');
  // y*2 = x*3 - 3*x + b;
  var yy = x.square().multiply(x).
      subtract(x.add(x).add(x)).
      add(this.B);
  // If a square root exists, one of them has the value
  //     yy ^ ((q + 1) / 4)
  var y = yy.power(this.SQUARE_ROOT_POWER_);
  if (!y.square().isEqual(yy)) {
    throw new e2e.error.InvalidArgumentsError(
        'No point with this x coordinate exists');
  }
  if ((y.toBigNum().n[0] ^ parity) & 1) {
    // We got the odd y, but wanted even, or vice versa.
    if (y.isEqual(this.ZERO)) {
      // I think this is impossible.  But just in case.
      throw new e2e.error.InvalidArgumentsError(
          'No odd point with this x coordinate exists');
    }
    y = y.negate();
  }
  var point = new e2e.ecc.point.Nist(this, x, y);
  goog.asserts.assert(point.isOnCurve(), 'pointFromXCoordinate_ broken');
  return point;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 *
 * @fileoverview Public domain parameters for NIST curves.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.ecc.constant');

// Define the namespaces for the subsequent constants.
// TODO(user): Make typesafe.
/** @type {Object} */
e2e.ecc.constant.P_256 = {};
/** @type {Object} */
e2e.ecc.constant.P_384 = {};
/** @type {Object} */
e2e.ecc.constant.CURVE_25519 = {};

/**
 * The field order, e.g., 2^224 (2^32 - 1) + 2^192 + 2^96 - 1.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.P_256.Q = [
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF];


/**
 * The B coefficient in the equation of the elliptic curve.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.P_256.B = [
   0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7,
   0xB3, 0xEB, 0xBD, 0x55, 0x76, 0x98, 0x86, 0xBC,
   0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6,
   0x3B, 0xCE, 0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B];


/**
 * The base point in uncompressed form.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.P_256.G = [0x04, /* uncompressed */
   // x
   0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47,
   0xF8, 0xBC, 0xE6, 0xE5, 0x63, 0xA4, 0x40, 0xF2,
   0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0,
   0xF4, 0xA1, 0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96,
   // y
   0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B,
   0x8E, 0xE7, 0xEB, 0x4A, 0x7C, 0x0F, 0x9E, 0x16,
   0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE,
   0xCB, 0xB6, 0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5];


/**
 * The order of the base point.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.P_256.N = [
   0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   0xBC, 0xE6, 0xFA, 0xAD, 0xA7, 0x17, 0x9E, 0x84,
   0xF3, 0xB9, 0xCA, 0xC2, 0xFC, 0x63, 0x25, 0x51];


/**
 * The field order 2^384 - 2^128 - 2^196 + 2^32 - 1
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.P_384.Q = [
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
   0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff];


/**
 * The B coefficient in the equation of the elliptic curve.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.P_384.B = [
   0xb3, 0x31, 0x2f, 0xa7, 0xe2, 0x3e, 0xe7, 0xe4,
   0x98, 0x8e, 0x05, 0x6b, 0xe3, 0xf8, 0x2d, 0x19,
   0x18, 0x1d, 0x9c, 0x6e, 0xfe, 0x81, 0x41, 0x12,
   0x03, 0x14, 0x08, 0x8f, 0x50, 0x13, 0x87, 0x5a,
   0xc6, 0x56, 0x39, 0x8d, 0x8a, 0x2e, 0xd1, 0x9d,
   0x2a, 0x85, 0xc8, 0xed, 0xd3, 0xec, 0x2a, 0xef];


/**
 * The base point in uncompressed form.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.P_384.G = [0x04, /* uncompressed */
   // x
   0xaa, 0x87, 0xca, 0x22, 0xbe, 0x8b, 0x05, 0x37,
   0x8e, 0xb1, 0xc7, 0x1e, 0xf3, 0x20, 0xad, 0x74,
   0x6e, 0x1d, 0x3b, 0x62, 0x8b, 0xa7, 0x9b, 0x98,
   0x59, 0xf7, 0x41, 0xe0, 0x82, 0x54, 0x2a, 0x38,
   0x55, 0x02, 0xf2, 0x5d, 0xbf, 0x55, 0x29, 0x6c,
   0x3a, 0x54, 0x5e, 0x38, 0x72, 0x76, 0x0a, 0xB7,
   // y
   0x36, 0x17, 0xde, 0x4a, 0x96, 0x26, 0x2c, 0x6f,
   0x5d, 0x9e, 0x98, 0xbf, 0x92, 0x92, 0xdc, 0x29,
   0xf8, 0xf4, 0x1d, 0xbd, 0x28, 0x9a, 0x14, 0x7c,
   0xe9, 0xda, 0x31, 0x13, 0xb5, 0xf0, 0xb8, 0xc0,
   0x0a, 0x60, 0xb1, 0xce, 0x1d, 0x7e, 0x81, 0x9d,
   0x7a, 0x43, 0x1d, 0x7c, 0x90, 0xea, 0x0e, 0x5f];


/**
 * The order of the base point.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.P_384.N = [
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xc7, 0x63, 0x4d, 0x81, 0xf4, 0x37, 0x2d, 0xdf,
  0x58, 0x1a, 0x0d, 0xb2, 0x48, 0xb0, 0xa7, 0x7a,
  0xec, 0xec, 0x19, 0x6a, 0xcc, 0xc5, 0x29, 0x73];


/**
 * The field order for Curve25519: 2^255 - 19.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.CURVE_25519.Q = [
  0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x100 - 19];


/**
 * The order of the base point.
 * @type {!e2e.ByteArray}
 */
e2e.ecc.constant.CURVE_25519.N = [
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x14, 0xde, 0xf9, 0xde, 0xa2, 0xf7, 0x9c, 0xd6,
  0x58, 0x12, 0x63, 0x1a, 0x5c, 0xf5, 0xd3, 0xed];

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Precomputed powers of the ED_25519 generator point.
 *
 * This file was generated by looking at the document
 *   e2e/ecc/create_fast_multiply_table_ed25519.html
 * in a web browser, and then copying its output.
 *
 * THIS IS A GENERATED FILE.  DO NOT MODIFY.
 * Generated: Mon May 05 2014 16:46:55 GMT-0700 (PDT)
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('e2e.ecc.constant.ed_25519.G_FAST_MULTIPLY_TABLE');


/**
 *
 * The value of G_FastMultiply[i][j] gives the value of
 *     ((16 ** i) * j) * G
 * where G is the ED25519-specified point that is a generator for the
 * ED_25519 curve.
 *
 * Each non-identity point is represented as [Y - X, Y + X, 2dXY], where each
 * bignum is represented as a base 2**24 array of integers in little-endian
 * order.  The identity is represented by {@code null}.
 *
 * @type {!Array.<!Array.<Array.<!Array.<!number>>>>}
 */
e2e.ecc.constant.ed_25519.G_FAST_MULTIPLY_TABLE = [
  [
    null,
    [ //  1 * (16 ** 0) * G
      [4231486, 3737047, 11771152, 13713598, 3776261, 9046525,
       3434639, 10862980, 16257639, 3117720, 17661],
      [9190277, 9684725, 1650620, 16485390, 9645510, 4375247,
       9987133, 2558792, 13941349, 10304051, 1999],
      [8039016, 1181063, 10398665, 13413060, 14280739, 5868582,
       13360451, 5905277, 812456, 8087711, 28433]
    ],
    [ //  2 * (16 ** 0) * G
      [11851176, 10838082, 16157337, 5136556, 2851084, 3648143,
       7057774, 14720547, 13182293, 9807465, 27573],
      [3961303, 15203475, 11899428, 7999477, 4627862, 459423,
       6676950, 5940890, 8203822, 409512, 22796],
      [10189407, 11056037, 7881722, 6134479, 12676061, 6959414,
       8653629, 5246880, 10816371, 16101694, 28698]
    ],
    [ //  3 * (16 ** 0) * G
      [16568933, 2091172, 8214113, 15057338, 13849597, 14073147,
       1712459, 8466931, 6019682, 1410901, 10937],
      [15636272, 11577420, 9088805, 15238731, 5932080, 6763010,
       171777, 12655440, 8452340, 5118874, 31254],
      [13686921, 9649933, 6427822, 1848794, 9708322, 14371928,
       4558066, 13725925, 12170438, 2535186, 23080]
    ],
    [ //  4 * (16 ** 0) * G
      [6822079, 330245, 11113982, 5660922, 8292721, 5272370,
       13436576, 12839139, 4564122, 4148340, 10131],
      [16517535, 5355918, 3680371, 8256805, 6670068, 9594215,
       4061962, 13251725, 15042343, 9503521, 26638],
      [7798537, 16509380, 7494163, 8084673, 10369349, 4494446,
       16322603, 6151132, 5586475, 835427, 32669]
    ],
    [ //  5 * (16 ** 0) * G
      [4708026, 8569764, 12025745, 4925225, 5329, 10520533,
       1882212, 14892273, 1791475, 8287211, 5450],
      [10861363, 12338184, 172562, 13065965, 5261507, 15484045,
       809663, 14490603, 14812907, 13431110, 10565],
      [2785925, 14414209, 16563387, 13680081, 919559, 10956071,
       727997, 11803495, 3913370, 12478827, 17322]
    ],
    [ //  6 * (16 ** 0) * G
      [8228004, 439931, 3754392, 2609703, 6021764, 5486935,
       15147077, 12257372, 4290692, 4997550, 14518],
      [1405233, 15657847, 8927756, 51375, 2561417, 10958491,
       6871641, 8414646, 13383869, 8107682, 20965],
      [15354737, 3303170, 99756, 4301243, 7397379, 12666046,
       4917307, 5498018, 877027, 15276703, 4280]
    ],
    [ //  7 * (16 ** 0) * G
      [3285425, 2923178, 10992239, 3914275, 10494291, 2898540,
       5214745, 10349174, 5445600, 14507310, 7534],
      [5153727, 6082708, 13789978, 11771328, 7353658, 3033460,
       8530004, 7451218, 3969662, 15362344, 17947],
      [12104610, 7194625, 10154371, 343716, 220999, 11400115,
       12212343, 5413953, 1020071, 12262506, 31391]
    ],
    [ //  8 * (16 ** 0) * G
      [9581785, 6155763, 16376487, 14792024, 4028032, 2358166,
       11300412, 2893633, 917955, 2400562, 14992],
      [14499471, 5858820, 2906551, 14846064, 11731831, 12788588,
       6708953, 11613084, 12379439, 15163489, 2325],
      [10653978, 16112073, 14149569, 9161895, 10711416, 2765496,
       1642166, 6513682, 13389461, 8150062, 9872]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 1) * G
      [4074995, 5360213, 11763400, 10897528, 1213643, 13756327,
       1651336, 15119844, 10127491, 1109082, 19698],
      [9445878, 304429, 10236461, 7718591, 12689203, 723385,
       4408018, 5798458, 6618721, 1898666, 5179],
      [9095851, 8158614, 2727814, 2558247, 5514638, 619871,
       4975128, 13674451, 4269793, 4629303, 8629]
    ],
    [ //  2 * (16 ** 1) * G
      [8946499, 16275618, 3975503, 5444589, 971862, 3472078,
       13612479, 16079933, 15381361, 3974601, 2661],
      [8724879, 8013265, 3492106, 4588691, 1390456, 14808730,
       642097, 24810, 7268709, 1406968, 32260],
      [5990387, 10786510, 9856690, 12408471, 5542616, 2937087,
       2706009, 5258476, 1289394, 4416776, 22121]
    ],
    [ //  3 * (16 ** 1) * G
      [6424472, 14355494, 4896792, 6319669, 6042073, 13485917,
       5177512, 623354, 5497556, 2870598, 6113],
      [11253405, 16378653, 16537202, 11528275, 7386421, 14052794,
       7677846, 4697103, 1143413, 3479444, 12965],
      [6587447, 4499167, 14537638, 8916927, 3892569, 1746288,
       4238650, 13337893, 5006440, 11794318, 2304]
    ],
    [ //  4 * (16 ** 1) * G
      [10315035, 1810279, 15862405, 209730, 576353, 3187681,
       8382603, 14025205, 3004180, 3853037, 14111],
      [1486129, 1031880, 14937384, 14214895, 14244187, 2356562,
       7534278, 1042199, 1976636, 199429, 17172],
      [15776941, 24315, 6215008, 13731596, 11996974, 15114382,
       3395716, 2105232, 8087152, 5956046, 19514]
    ],
    [ //  5 * (16 ** 1) * G
      [12122773, 10761436, 737592, 7116420, 849533, 15215751,
       7612795, 14563461, 6464858, 5091954, 31873],
      [4038877, 7726281, 5094136, 7452969, 3310247, 12869817,
       12055750, 8443455, 6734209, 13057514, 28137],
      [5110002, 316832, 13846409, 11600194, 16494154, 628986,
       6509917, 16173228, 9482500, 4866351, 23212]
    ],
    [ //  6 * (16 ** 1) * G
      [13183240, 3304250, 14730831, 15098849, 5354114, 4948821,
       16075290, 4680501, 10447042, 10747416, 7069],
      [8343860, 854717, 4612154, 14799790, 9029938, 12411776,
       3770264, 14624145, 12190261, 6083188, 7188],
      [15980355, 3695733, 15676136, 7005657, 5999535, 6823478,
       11941979, 8540728, 8218081, 2736406, 9033]
    ],
    [ //  7 * (16 ** 1) * G
      [7843304, 15510432, 10328141, 1698616, 4159405, 14128184,
       8268116, 13102187, 8141434, 8076011, 22983],
      [630735, 6079005, 15026196, 13379799, 3522962, 8257861,
       15026212, 8447937, 2716654, 2651195, 19039],
      [6082402, 14099746, 6149037, 11670828, 1717121, 16285073,
       11361032, 14201759, 10092091, 6318919, 28421]
    ],
    [ //  8 * (16 ** 1) * G
      [8104290, 10392087, 14786558, 910794, 11462429, 1066136,
       9710979, 4191406, 5454536, 14757464, 29005],
      [1795203, 3230201, 6445891, 5909695, 11918437, 2601901,
       1205032, 8911492, 4847832, 6197675, 24713],
      [16280600, 15920396, 13953516, 472543, 7144978, 7071668,
       9962681, 12361120, 7193195, 15085529, 29666]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 2) * G
      [11161950, 6509641, 3861851, 771714, 6669471, 13747368,
       15293250, 8719391, 13833657, 7171843, 12503],
      [3120157, 14487139, 1388236, 7768369, 13678230, 8018001,
       7055459, 5431223, 978745, 8210848, 28115],
      [451783, 4462369, 6908996, 9604479, 5494400, 4138747,
       10774861, 11826078, 8801200, 9900334, 4294]
    ],
    [ //  2 * (16 ** 2) * G
      [12476382, 12855165, 10642579, 1682814, 6115245, 4558886,
       13125168, 917727, 6749705, 1879021, 9702],
      [5818373, 2793603, 4656294, 8003650, 4016867, 15588458,
       10894097, 7627987, 526063, 10202965, 959],
      [5793284, 14756044, 8273683, 11819380, 5796844, 6878575,
       15584274, 10532413, 8839724, 7889733, 22125]
    ],
    [ //  3 * (16 ** 2) * G
      [12650548, 10788764, 5314103, 11049924, 9328341, 13818812,
       1015679, 1881580, 13383129, 6015582, 13207],
      [5910480, 4359622, 12820741, 15930983, 6557994, 15620204,
       4223770, 6818530, 9679402, 10875719, 5371],
      [8779732, 4593257, 5717207, 13223936, 4087428, 1252953,
       11959137, 3130354, 16536172, 10283651, 5250]
    ],
    [ //  4 * (16 ** 2) * G
      [14521794, 8094871, 11009859, 11161269, 7622192, 15240044,
       6372485, 10357853, 7700851, 13049439, 12249],
      [7466168, 733006, 14885351, 4236407, 5692857, 5210342,
       13553181, 12543318, 6126462, 3916883, 1532],
      [11525853, 11775570, 13575352, 15547184, 9790348, 8492340,
       8628670, 3384508, 6627076, 6768476, 14135]
    ],
    [ //  5 * (16 ** 2) * G
      [13741529, 10091840, 2568122, 9893072, 464495, 3911347,
       5379568, 4416496, 1636761, 10841147, 8126],
      [2385296, 9816852, 3498816, 1491285, 1184832, 12345583,
       821520, 10369044, 9469068, 9459504, 27637],
      [4283274, 7926241, 8261543, 12239783, 4235255, 10113030,
       12098210, 7295703, 6511190, 1898106, 594]
    ],
    [ //  6 * (16 ** 2) * G
      [10310292, 15600394, 6705471, 1040218, 10020700, 511631,
       8962017, 13918598, 3681517, 687729, 16288],
      [3104484, 6758519, 13545748, 9832346, 16290993, 8538856,
       5046444, 4913186, 13462724, 5495287, 23],
      [4053812, 2305430, 5782633, 11835192, 14583770, 15893789,
       16359569, 11196369, 4779446, 16658336, 4789]
    ],
    [ //  7 * (16 ** 2) * G
      [16573261, 16499862, 15561200, 11400027, 12157547, 12935539,
       6422312, 13763698, 11608175, 7797103, 29851],
      [7282322, 8136365, 1302315, 5262217, 6738723, 9159499,
       12612892, 9191581, 9881528, 9683463, 28542],
      [10923525, 16123054, 10035034, 12510364, 2314737, 7038657,
       11923199, 6400008, 14688593, 12652289, 4046]
    ],
    [ //  8 * (16 ** 2) * G
      [16653892, 5809737, 8283213, 3255671, 16559778, 13685281,
       5933183, 148508, 12915187, 11170179, 18689],
      [2379333, 13802948, 671218, 9689310, 134772, 2182443,
       8290828, 7129094, 15382794, 7935599, 16695],
      [1767664, 12014732, 11798705, 2384537, 1014396, 14236110,
       16326150, 16212144, 7148051, 8944498, 16827]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 3) * G
      [8145368, 8416342, 6984295, 13269278, 7144652, 3754758,
       4580300, 10919766, 7900370, 11962016, 23701],
      [3798994, 8446122, 1873881, 5424821, 13645890, 5614133,
       9635789, 8209396, 9093986, 3592119, 22205],
      [1354068, 1687821, 9448133, 9745914, 16020660, 8018666,
       8563192, 15118211, 10215572, 7188871, 3562]
    ],
    [ //  2 * (16 ** 3) * G
      [4515243, 12538995, 633446, 9378627, 1202312, 4927450,
       11795798, 6195154, 8630749, 7899220, 23340],
      [11041146, 15430870, 3282362, 16434199, 16080113, 378238,
       5913739, 2687007, 15387899, 13403986, 2775],
      [3410127, 1270393, 9720341, 1676861, 988931, 9725675,
       16418877, 11023282, 15480, 8365941, 2362]
    ],
    [ //  3 * (16 ** 3) * G
      [1497022, 8250938, 13624592, 10154802, 7864284, 6782883,
       1590283, 7394751, 10687491, 2824612, 27173],
      [11080326, 6308960, 14596329, 7829715, 4184068, 6172031,
       3260298, 6803486, 8086846, 9045698, 31491],
      [6918387, 1693139, 15900377, 14372537, 1289915, 9516370,
       347321, 13043946, 2494038, 13991794, 22750]
    ],
    [ //  4 * (16 ** 3) * G
      [4275575, 10333673, 8222951, 9906662, 5765589, 11003634,
       975738, 5888913, 10355612, 1792955, 27297],
      [1037451, 5449307, 8968813, 9682857, 6324785, 8267913,
       3301845, 14125769, 6062403, 9710906, 31218],
      [13143529, 3089846, 6920154, 11334145, 1812458, 11854885,
       8908622, 635983, 6978981, 11213756, 32144]
    ],
    [ //  5 * (16 ** 3) * G
      [93182, 10912679, 7183052, 15910155, 5267277, 3517072,
       6278372, 7037197, 10026902, 869473, 6561],
      [11781015, 10744982, 3283463, 9391653, 13543960, 1830929,
       14002037, 8230040, 9296032, 1449808, 6637],
      [14477002, 2938503, 5068298, 8807631, 3500228, 3815551,
       5382784, 8864233, 5657596, 14332249, 18491]
    ],
    [ //  6 * (16 ** 3) * G
      [3471945, 988295, 14744184, 3540276, 7277424, 507152,
       7332835, 2232439, 15114494, 12650973, 12934],
      [14319862, 5049012, 14735055, 16265343, 4734533, 10331266,
       6925935, 327762, 16222074, 5410972, 7280],
      [5150932, 8249991, 6304494, 12156428, 12804841, 10717716,
       14576224, 5734876, 8038464, 14019242, 8573]
    ],
    [ //  7 * (16 ** 3) * G
      [9313968, 12898340, 5414327, 5076159, 7772129, 2315488,
       1522774, 1993371, 5917029, 12722041, 32679],
      [9178824, 2079166, 8555487, 14879234, 12249080, 5204992,
       1944940, 4809625, 16184842, 9072221, 1797],
      [3274367, 181467, 2877931, 1096955, 2489737, 14529773,
       2055260, 4638739, 13343694, 1840032, 13234]
    ],
    [ //  8 * (16 ** 3) * G
      [8228401, 9631752, 16201222, 13791587, 14468663, 5858292,
       2123242, 2467046, 12673241, 16199258, 26011],
      [14912603, 12169310, 13081263, 465427, 10300750, 2689727,
       7203123, 9367150, 1087255, 11212718, 7227],
      [13285296, 11671239, 13376666, 506819, 6673268, 5821821,
       5263434, 5403719, 1714576, 6318867, 2546]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 4) * G
      [4409022, 8209524, 2441448, 1422635, 4774612, 6307357,
       1614139, 8141450, 13483511, 2670895, 20151],
      [6721966, 5003644, 13139491, 689588, 8953149, 16443236,
       800074, 14344905, 6987293, 1967884, 2695],
      [12355977, 11901259, 6304513, 6020418, 7056954, 10370163,
       14817749, 876973, 8770660, 3149606, 16103]
    ],
    [ //  2 * (16 ** 4) * G
      [8246967, 5629086, 11335122, 6359838, 1446236, 8899200,
       6132449, 3971479, 9512386, 5726871, 4993],
      [1996056, 7948164, 14107642, 6528070, 13040217, 2847973,
       1958661, 10552926, 12095536, 13017807, 32071],
      [15783648, 13636750, 3948506, 9524335, 4093082, 8476573,
       1058491, 7466082, 13233280, 16092468, 5260]
    ],
    [ //  3 * (16 ** 4) * G
      [3469351, 9631353, 11093668, 16155658, 10060990, 1594438,
       2787681, 6070716, 6142932, 16391869, 16370],
      [14972269, 3112346, 8381015, 8975176, 12797371, 11046230,
       7170400, 10473739, 11444665, 15445326, 10127],
      [9648486, 6823820, 10006954, 2107660, 2200732, 3953292,
       9511325, 3739986, 10250107, 14484222, 16644]
    ],
    [ //  4 * (16 ** 4) * G
      [2376234, 12541457, 11891378, 10003258, 16387123, 11953825,
       129618, 9751393, 11490261, 3866799, 11398],
      [617144, 5113563, 3506465, 844879, 11056841, 2815265,
       2769054, 6628545, 16557185, 11904142, 357],
      [8678006, 10777760, 12644752, 13447036, 15726980, 2854674,
       415914, 6905385, 16697528, 6805951, 22811]
    ],
    [ //  5 * (16 ** 4) * G
      [11836410, 859264, 9056559, 11269100, 7950686, 1869913,
       12623600, 7499827, 9403339, 3065802, 15840],
      [1619293, 11760031, 2005433, 10587236, 6678010, 388580,
       3588767, 6359057, 3150475, 5211760, 18587],
      [15438575, 1060154, 6410802, 6362792, 6443956, 11150561,
       15145227, 4030123, 7126719, 16497225, 18933]
    ],
    [ //  6 * (16 ** 4) * G
      [6016980, 10096778, 15413396, 12346483, 4250992, 859356,
       12660860, 9618068, 16412276, 11038155, 22020],
      [10245934, 6458398, 4265309, 12945479, 5080748, 6548362,
       16142679, 9544530, 6771035, 10928776, 1697],
      [1533110, 13751420, 5337736, 14696843, 5509440, 16175474,
       6297772, 10421018, 2572998, 10390014, 8344]
    ],
    [ //  7 * (16 ** 4) * G
      [3001471, 7863610, 9587095, 10833880, 8748076, 14917682,
       6607367, 10648024, 10911273, 15539468, 1027],
      [15395886, 2591621, 14620276, 8047403, 2219015, 16013910,
       1466827, 6556236, 366035, 10047735, 29451],
      [5162322, 2962823, 9292107, 9970799, 15124687, 3526341,
       16389824, 16239430, 3161548, 4539144, 23511]
    ],
    [ //  8 * (16 ** 4) * G
      [11685058, 13735208, 8486810, 6501825, 7033957, 7485055,
       7229376, 6731958, 8433027, 7864435, 4922],
      [15169834, 9642261, 13206980, 12439005, 5015970, 14115526,
       11054499, 10296893, 6813740, 14357040, 23479],
      [13263550, 16017350, 15599969, 2169170, 15475158, 4681732,
       7838677, 1581920, 15786194, 13266264, 29709]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 5) * G
      [15773451, 783827, 16208055, 14888561, 15398026, 12399695,
       13870427, 6350926, 5296621, 4758335, 237],
      [2497253, 13052653, 16201990, 8970496, 11964377, 104346,
       10154806, 16115973, 2846023, 14448831, 3667],
      [7440250, 2735993, 3258632, 7149542, 4473955, 6853470,
       3020839, 5047749, 4868853, 2988634, 10083]
    ],
    [ //  2 * (16 ** 5) * G
      [11690190, 15749460, 7393567, 7534930, 7193486, 12663000,
       861820, 6299597, 15273165, 9528361, 11111],
      [15400923, 8769927, 6596994, 14209192, 11860923, 6551461,
       8323622, 11950322, 10281602, 2826969, 15292],
      [3934808, 13193816, 15972631, 1041606, 4192696, 3935333,
       14138591, 10161575, 5559822, 15644331, 17312]
    ],
    [ //  3 * (16 ** 5) * G
      [4871303, 6726765, 12204393, 11283379, 1155466, 11693048,
       5985832, 6743144, 9608082, 7799453, 28836],
      [8871912, 3285847, 9386694, 16120779, 13956332, 11935961,
       9648171, 9301636, 7970780, 15376716, 20677],
      [15924028, 14453718, 10542350, 10274743, 12991143, 10426964,
       2829453, 11406083, 2713595, 14747488, 28572]
    ],
    [ //  4 * (16 ** 5) * G
      [14795306, 5550541, 14658832, 4778802, 11069698, 12643012,
       3386573, 6241915, 7968318, 4658172, 29238],
      [2154677, 9635381, 16651158, 8972803, 8376188, 5880899,
       775113, 16241860, 9690841, 5558776, 27025],
      [11695398, 6059444, 10826077, 145114, 13337645, 15634124,
       10695775, 2289864, 3791853, 5923197, 29591]
    ],
    [ //  5 * (16 ** 5) * G
      [7723536, 5110115, 7398402, 1585352, 13837594, 14228600,
       4744588, 9448217, 12010378, 11602729, 32280],
      [4406854, 15962868, 1601335, 2053739, 1685921, 14049806,
       9052113, 2232247, 8505677, 4348067, 13866],
      [7072559, 14226219, 4690033, 2638210, 2550189, 9592079,
       13221356, 15382814, 9106142, 6015220, 19430]
    ],
    [ //  6 * (16 ** 5) * G
      [7237672, 8383395, 3438664, 1956046, 4133632, 12880223,
       2968368, 9654193, 8325675, 2379065, 1388],
      [12739124, 16491095, 9117008, 14594151, 13926970, 9106811,
       7251539, 12759260, 1943358, 15648309, 22117],
      [12562960, 14682435, 12770110, 2129930, 7471495, 8808265,
       6386621, 2534237, 2115896, 639659, 8370]
    ],
    [ //  7 * (16 ** 5) * G
      [8368971, 3418816, 9655454, 2176829, 14164488, 16082690,
       7384273, 12330541, 13289348, 13237755, 31378],
      [12399241, 11093270, 2629580, 4276740, 9266602, 6120004,
       11671205, 5882807, 6368472, 2934350, 18841],
      [16253406, 1829488, 9070013, 16665058, 15710144, 11422235,
       13480370, 11035398, 6040073, 12635430, 15226]
    ],
    [ //  8 * (16 ** 5) * G
      [113900, 15614860, 3899947, 12647367, 832805, 4188499,
       3457429, 4739472, 10096475, 12739040, 9820],
      [15546791, 5132066, 717013, 5638165, 11200798, 15234466,
       15330778, 15999410, 8251794, 5447019, 12732],
      [8452465, 1265065, 11001661, 2234914, 5224657, 14080122,
       2110890, 4061140, 1708638, 15584362, 10772]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 6) * G
      [13618766, 15599442, 12050248, 453640, 16775923, 5883075,
       2799956, 356619, 4105101, 2488982, 5661],
      [7881532, 9197316, 10298138, 12747075, 11872014, 499639,
       15393753, 14396057, 2819033, 16065900, 11267],
      [5481597, 1602939, 7960847, 13569112, 8061232, 16251184,
       7808382, 3248189, 9878447, 6864317, 27028]
    ],
    [ //  2 * (16 ** 6) * G
      [14352079, 3098356, 16235807, 10780630, 15663380, 11763580,
       14305863, 13836285, 9459589, 1680499, 21074],
      [11082056, 4056682, 13424861, 3129554, 5268674, 15347528,
       6698237, 10176548, 4861498, 1855084, 10558],
      [5313249, 1264530, 10499950, 14459229, 3635381, 3215728,
       11486748, 11552137, 206883, 6046847, 23392]
    ],
    [ //  3 * (16 ** 6) * G
      [12876937, 8411424, 13416805, 9583503, 15732748, 15693799,
       6619874, 293, 11449326, 7196328, 9383],
      [15200332, 16697072, 6437865, 7725897, 6969246, 15080070,
       1449501, 5587695, 5946837, 16708812, 12050],
      [12633920, 2274015, 461381, 4245924, 13659775, 16148496,
       4290767, 13029140, 10762128, 8070424, 24160]
    ],
    [ //  4 * (16 ** 6) * G
      [14620696, 1937260, 10639539, 12804696, 13608783, 1928757,
       5203686, 14791679, 13489655, 11316076, 20583],
      [9883412, 4398245, 41004, 11457508, 12856640, 2546659,
       8400399, 13780262, 4550760, 3347358, 8223],
      [236881, 8350472, 458066, 97280, 11618660, 10790936,
       11546149, 13967886, 4588405, 12224610, 14716]
    ],
    [ //  5 * (16 ** 6) * G
      [5855666, 3183600, 7745729, 15313273, 3842445, 6170338,
       9531933, 2240468, 7236666, 13836406, 9017],
      [1276391, 12843976, 15824917, 14541098, 6394912, 16635302,
       16287144, 16755136, 14795346, 4203201, 30491],
      [3813287, 14255697, 579709, 16372943, 11311985, 8631285,
       1777314, 13659075, 9902710, 1610265, 13082]
    ],
    [ //  6 * (16 ** 6) * G
      [5210310, 7292411, 13628694, 6408053, 3590110, 14228636,
       1806401, 14931176, 12451361, 8153987, 12566],
      [7697071, 3095197, 10364497, 6817610, 13361800, 16237659,
       12652928, 8711617, 4826747, 6397942, 6857],
      [4919400, 3686994, 8909355, 15637737, 6829115, 5294160,
       8669794, 16555377, 569617, 3552287, 24868]
    ],
    [ //  7 * (16 ** 6) * G
      [5147021, 4316039, 2152861, 7079900, 16688625, 10206217,
       6803471, 7945516, 6225728, 14823582, 18155],
      [2958904, 4842266, 3509091, 10212349, 14661376, 7054493,
       12100512, 8358897, 14222405, 11153784, 5410],
      [6375736, 3101545, 1059896, 12004717, 16662682, 15869914,
       9549382, 15255603, 2371692, 7402757, 17918]
    ],
    [ //  8 * (16 ** 6) * G
      [789388, 7710358, 2153032, 15666735, 6869110, 9426011,
       13581579, 523089, 14914260, 1450912, 17037],
      [9770129, 4792520, 10642162, 4154124, 15730632, 13940741,
       13825481, 7322437, 8004165, 10448309, 5729],
      [10684669, 4867073, 11274319, 7775690, 2234819, 12352936,
       4604881, 14596318, 12400838, 5844320, 7553]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 7) * G
      [2772024, 14139116, 15587379, 707616, 9527939, 7700780,
       11178719, 15284807, 3951233, 6791987, 28717],
      [9029793, 3578415, 866890, 8162792, 1276445, 10491235,
       9074925, 12364800, 8630335, 11773364, 11448],
      [1806497, 1559499, 5125860, 8327545, 11787690, 12977971,
       559195, 4149512, 11010573, 1949926, 9236]
    ],
    [ //  2 * (16 ** 7) * G
      [15724189, 3962687, 10312183, 12701592, 15855497, 5529523,
       4382766, 14900731, 10597500, 1182535, 22374],
      [8590717, 6147261, 9736594, 2280576, 10559571, 14083132,
       1589136, 2680191, 3044987, 1363678, 6727],
      [11974655, 12193720, 10607392, 7819551, 3326902, 2984375,
       12622320, 11086673, 10266097, 7712072, 20280]
    ],
    [ //  3 * (16 ** 7) * G
      [3320610, 7745353, 1820668, 3099708, 12643831, 9824378,
       11180712, 6253397, 655489, 2575789, 13952],
      [7597760, 1308398, 11631085, 6885643, 12997229, 8785061,
       12813827, 14977320, 7363061, 1328893, 29226],
      [13600793, 10480040, 10277013, 8680873, 11113808, 10274256,
       3350704, 7253015, 1773717, 13567027, 25230]
    ],
    [ //  4 * (16 ** 7) * G
      [13688252, 11606185, 2857148, 570496, 4496948, 11601134,
       2537638, 8849554, 13078877, 3447365, 26719],
      [7654641, 11335772, 5348161, 534098, 7549313, 11618230,
       15536557, 10078506, 15512591, 14093620, 31303],
      [4433141, 12897228, 11100320, 3569598, 6055626, 16117111,
       7679992, 10582689, 130496, 14221838, 4574]
    ],
    [ //  5 * (16 ** 7) * G
      [15722244, 7866826, 7112974, 14880396, 2632045, 11651463,
       10719918, 5004498, 7426847, 6541655, 6466],
      [15373239, 9809979, 13846303, 3347371, 5429204, 4160261,
       14868862, 12424048, 941036, 990642, 31506],
      [5254522, 16465286, 5380050, 5285523, 6608964, 14114229,
       13149710, 8235362, 8861354, 16276273, 208]
    ],
    [ //  6 * (16 ** 7) * G
      [8160509, 1322615, 6461323, 370880, 156743, 1230836,
       1828838, 10910421, 14510643, 4560536, 12155],
      [7741889, 3940093, 16098933, 4478577, 12629159, 3936617,
       7603634, 9903954, 11061197, 13060177, 14459],
      [5417384, 4934986, 3113353, 16169091, 14237202, 14039213,
       4765211, 1592709, 13235917, 6478806, 16156]
    ],
    [ //  7 * (16 ** 7) * G
      [9505823, 2031761, 2895503, 12579553, 14634976, 7616676,
       716434, 6342230, 15714554, 2637740, 25400],
      [9398589, 4079636, 7487405, 9759642, 2512609, 5123845,
       16586831, 3100107, 8577419, 9286084, 16495],
      [1646308, 863359, 7380579, 12337142, 12550913, 7586895,
       5143291, 7896462, 16093093, 4021224, 20696]
    ],
    [ //  8 * (16 ** 7) * G
      [1710231, 3741377, 558440, 15009488, 6923503, 12386605,
       7927396, 3780371, 1382342, 2175286, 26004],
      [13874797, 13602996, 6340780, 6386478, 368101, 11582119,
       7893190, 212255, 14239460, 6409510, 22593],
      [13794466, 11640946, 310258, 16506567, 3751001, 12066495,
       13558370, 15306171, 2733449, 12389168, 750]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 8) * G
      [896095, 8869542, 5726518, 15444956, 14692202, 1015063,
       2968782, 8329535, 15523056, 4880265, 8227],
      [8766952, 11968379, 11700069, 13723834, 15755147, 1022831,
       8133939, 3829991, 11505276, 7164336, 14943],
      [7909970, 898673, 6321874, 13967057, 1848569, 1142791,
       2143204, 16132682, 16769894, 8533308, 31958]
    ],
    [ //  2 * (16 ** 8) * G
      [8911542, 10771416, 7212001, 12206139, 8677938, 6291498,
       1239406, 14258704, 14420291, 13141563, 10296],
      [11334899, 13459560, 13870693, 3987427, 14232856, 2480450,
       10302304, 5724472, 2939135, 2439979, 16112],
      [4608048, 11587402, 11260267, 1426807, 4811585, 4300282,
       9106603, 8572846, 11020306, 12101126, 8668]
    ],
    [ //  3 * (16 ** 8) * G
      [10330056, 280204, 13327456, 13904547, 4196718, 3120165,
       4985582, 1203021, 10689963, 13664660, 3011],
      [7811514, 64190, 9017997, 6463000, 221310, 14253954,
       3621875, 11717634, 7301003, 900972, 23940],
      [10477963, 3673392, 13070446, 12181861, 11546022, 2141038,
       10059182, 5749690, 12687069, 7742250, 14914]
    ],
    [ //  4 * (16 ** 8) * G
      [7374074, 4402314, 4541250, 14662117, 9050595, 14966153,
       2202712, 12492544, 7203793, 7851681, 8177],
      [4488907, 12677851, 12401656, 12986413, 13616159, 1441375,
       12613034, 8432895, 14789113, 13232164, 1904],
      [11908605, 14260805, 2412385, 1784441, 623849, 4098438,
       1650750, 15151113, 5245726, 6618433, 14834]
    ],
    [ //  5 * (16 ** 8) * G
      [15196828, 3413979, 10266541, 2858003, 9713514, 8104381,
       9343833, 10545435, 8951872, 14103656, 5906],
      [621537, 4893694, 2740635, 14671897, 7208161, 15859620,
       9710758, 12830984, 3535182, 2172716, 26054],
      [3249117, 9042126, 12314411, 10560960, 1061718, 16679757,
       4009500, 268713, 10281586, 8391345, 8953]
    ],
    [ //  6 * (16 ** 8) * G
      [10418379, 3574334, 1400922, 10833991, 15319074, 2396131,
       11558692, 5586248, 7743205, 1494372, 5108],
      [7273900, 10476954, 4276738, 3450185, 1232574, 15956921,
       12158909, 6557540, 10013364, 10802053, 16753],
      [13192332, 5810841, 522791, 11534520, 28527, 5476899,
       14527962, 16503441, 4968875, 1374807, 20610]
    ],
    [ //  7 * (16 ** 8) * G
      [14089803, 6886718, 12894722, 5315959, 5924665, 11506854,
       4598804, 13360678, 11249483, 6351983, 8953],
      [13632470, 1424211, 6637082, 12383177, 1058952, 3824306,
       7695464, 2606454, 7124039, 5809352, 14967],
      [11423862, 1177235, 10900609, 1965396, 11411935, 6186269,
       9499409, 1189004, 15201428, 13721485, 23967]
    ],
    [ //  8 * (16 ** 8) * G
      [6517375, 578413, 3343124, 14141365, 3644143, 14830442,
       12962990, 11133327, 9420499, 3510607, 13103],
      [14111262, 5057262, 1392420, 4402838, 3837992, 1496206,
       7810716, 14771386, 15440088, 8911431, 15297],
      [8831500, 71146, 2452807, 7096017, 9091019, 100505,
       11876966, 14121010, 7322115, 8507024, 17677]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 9) * G
      [4536578, 5057240, 1964206, 15260461, 1574286, 12656240,
       6277074, 11187097, 13421177, 7152420, 21425],
      [13295797, 5072562, 7742246, 15452773, 12250419, 4900989,
       14086354, 200382, 6509840, 8354039, 10888],
      [77135, 12183388, 15346211, 13296114, 9913937, 7391756,
       7563101, 3126834, 4457461, 2427782, 2983]
    ],
    [ //  2 * (16 ** 9) * G
      [10249249, 1637634, 178957, 8989071, 2954273, 956092,
       15108901, 8603640, 2978249, 3139587, 31647],
      [16280988, 5804934, 10804579, 14760581, 6918518, 8214369,
       9785002, 3035409, 6340091, 1791995, 12994],
      [10356608, 2346289, 12966008, 9009013, 12898241, 11794415,
       1219082, 4740347, 3720049, 10305906, 4804]
    ],
    [ //  3 * (16 ** 9) * G
      [15218537, 11875327, 13699408, 9313643, 8789021, 15011873,
       3674882, 15737560, 9554612, 2100323, 9481],
      [7968066, 10491779, 4131251, 11195886, 7196815, 1351522,
       15657840, 12189884, 10765513, 11683488, 5153],
      [2402247, 3837580, 16075428, 14217310, 12711232, 12180484,
       789310, 11385438, 10788067, 5260360, 10933]
    ],
    [ //  4 * (16 ** 9) * G
      [1007084, 2565743, 2371282, 6214920, 2420289, 13899160,
       8164456, 8420332, 2220607, 12247477, 28819],
      [6109946, 11297564, 7134215, 16375692, 6377841, 14856280,
       14196083, 7512185, 15393117, 16043700, 29441],
      [7482433, 15161814, 10183689, 7520114, 7659983, 15034790,
       15416353, 12323364, 12241699, 6804046, 14593]
    ],
    [ //  5 * (16 ** 9) * G
      [3489564, 9321402, 6367221, 12544579, 4683341, 2510924,
       15035990, 11516868, 14787677, 3073706, 2011],
      [15864331, 347042, 12048315, 11601289, 12177070, 15580898,
       13169600, 4188346, 1231721, 4224625, 19645],
      [12943734, 3981353, 6359904, 6074717, 8971138, 11373913,
       1301744, 2864660, 1585799, 15494260, 31630]
    ],
    [ //  6 * (16 ** 9) * G
      [13794480, 4225068, 12444874, 16509287, 16368419, 2006746,
       4885204, 11705299, 7265869, 300898, 29313],
      [3697523, 15036668, 13054718, 14301836, 9109825, 8608218,
       706710, 9920509, 3319893, 631217, 28392],
      [16614970, 12268028, 12948548, 4083272, 14903562, 16393519,
       6803592, 14428616, 7547182, 1980625, 5053]
    ],
    [ //  7 * (16 ** 9) * G
      [6375861, 5036137, 12047147, 8509610, 5846999, 2856165,
       2600466, 772897, 4233648, 7327665, 16872],
      [16434465, 11915037, 5251647, 7296324, 6038833, 7842866,
       14116241, 199576, 8955069, 1619535, 7888],
      [173744, 14655928, 13973040, 4369723, 1017671, 10802312,
       7139013, 719117, 13485529, 2390583, 29802]
    ],
    [ //  8 * (16 ** 9) * G
      [8100598, 12107051, 5362993, 3669083, 330037, 5533008,
       2475411, 2305999, 11800393, 6624299, 8355],
      [14238189, 14176888, 4419276, 13774712, 5549699, 13481762,
       3046335, 12919504, 15787234, 3363263, 26654],
      [216901, 11902339, 16485220, 2073102, 9138674, 5301295,
       9812581, 6890644, 13977387, 16354885, 21406]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 10) * G
      [2118261, 11968934, 8613499, 4275342, 5186007, 6075050,
       5630095, 7296721, 3431393, 6114214, 11746],
      [11433023, 14194204, 15585396, 15604835, 7149813, 15542776,
       6023156, 9944517, 3846408, 13793638, 19642],
      [14098381, 9446560, 16285905, 16459914, 2474506, 6560197,
       4939578, 11641751, 29235, 12382178, 32127]
    ],
    [ //  2 * (16 ** 10) * G
      [7022593, 1993254, 1506031, 13988767, 7104708, 7744646,
       12327683, 16157231, 12016269, 4415111, 22901],
      [12750996, 6145523, 11259260, 2789637, 8495770, 3168455,
       3555868, 8439325, 14210263, 13735644, 20380],
      [8075112, 9951338, 6494610, 1757562, 13654052, 792528,
       11361308, 12190364, 7996167, 13665336, 31949]
    ],
    [ //  3 * (16 ** 10) * G
      [2491415, 4336749, 12442790, 9732672, 1391952, 13006766,
       11860840, 11124929, 13684563, 13692257, 17035],
      [6343827, 8656999, 10066700, 1749802, 11403386, 14293197,
       8806923, 11046380, 9488964, 13272193, 13715],
      [8690343, 1612382, 13472275, 6674682, 14205749, 12308948,
       5985277, 9196116, 2974694, 8587482, 10041]
    ],
    [ //  4 * (16 ** 10) * G
      [6214675, 9250883, 13189827, 3307724, 5305184, 257981,
       1735130, 12257195, 9188181, 9940670, 9877],
      [7349331, 936970, 14596513, 13991195, 10639462, 14350095,
       11914535, 16759257, 2896893, 2704713, 22316],
      [13447358, 13059542, 16500607, 14924462, 14674131, 14290148,
       3189341, 10628232, 6015616, 5544128, 32664]
    ],
    [ //  5 * (16 ** 10) * G
      [778519, 13535391, 8927305, 8082594, 371995, 9575552,
       10429436, 4039619, 3273476, 15484682, 30402],
      [12542819, 1397263, 10933078, 13585915, 285253, 10535432,
       12355391, 15647311, 10162919, 6634710, 12530],
      [12651653, 13187242, 13339144, 14362475, 1547104, 11300934,
       1969775, 11083968, 6583258, 7598425, 12050]
    ],
    [ //  6 * (16 ** 10) * G
      [14687761, 16546954, 10438457, 4876971, 5403792, 9383677,
       8554354, 4315530, 5990898, 5712600, 23966],
      [10947520, 9164629, 15151176, 15848514, 14071204, 6382086,
       10402905, 15389094, 12973956, 1677293, 14508],
      [5353787, 11868071, 9176678, 8297349, 8193670, 14567796,
       1131853, 11316416, 15328924, 13475007, 8927]
    ],
    [ //  7 * (16 ** 10) * G
      [855257, 13820099, 3378651, 11320131, 9332319, 9838509,
       9187882, 9399077, 4768199, 1491028, 27433],
      [3924129, 5878800, 6903532, 13785593, 14924524, 13447726,
       9704437, 7961778, 13493362, 8878116, 4073],
      [12226875, 3461386, 949979, 3042732, 10734978, 16258382,
       16737656, 6686781, 15731223, 4141183, 19504]
    ],
    [ //  8 * (16 ** 10) * G
      [11701381, 3921431, 15389450, 3766075, 13858743, 6078405,
       9182826, 13027047, 2799556, 12121995, 3425],
      [14238976, 219149, 9644540, 7322604, 13793956, 11008236,
       6275810, 1247765, 434645, 1383095, 16747],
      [12662448, 14151657, 2119336, 5825611, 517581, 14724029,
       14293847, 11527727, 7858386, 2815810, 6426]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 11) * G
      [7293317, 613291, 1758544, 5226415, 16043355, 7684100,
       13707788, 10325550, 2171526, 5113010, 11202],
      [14719508, 11930415, 8260052, 14397812, 8712367, 16608963,
       9009333, 5825258, 14719754, 16086965, 20894],
      [2411689, 14145809, 9312355, 12094064, 12616005, 3274106,
       623984, 2870643, 12122853, 8023690, 25139]
    ],
    [ //  2 * (16 ** 11) * G
      [16763414, 15826694, 6966222, 6892257, 451035, 4370654,
       2974031, 480112, 9573072, 4306011, 24416],
      [3805811, 3296795, 4247979, 8455507, 9731313, 1666584,
       6793612, 3890581, 3022440, 271744, 32672],
      [9185029, 1405954, 16678227, 14355829, 3243369, 9297280,
       15265676, 3211180, 12839320, 15301558, 32413]
    ],
    [ //  3 * (16 ** 11) * G
      [6653347, 9862046, 9573720, 10021259, 13212896, 11382167,
       10186419, 1093396, 13864186, 2091252, 16920],
      [5062877, 12477090, 2093060, 283348, 416145, 4338874,
       14770852, 8504414, 2254575, 2742434, 19640],
      [12084865, 11174919, 3874236, 9119349, 2031646, 9339144,
       6980612, 3987406, 2486828, 1139519, 30895]
    ],
    [ //  4 * (16 ** 11) * G
      [5290684, 15455243, 15631382, 2629771, 553510, 12807445,
       11516353, 10687631, 2981213, 14331091, 3335],
      [6631820, 12586621, 15151681, 13690989, 12510684, 9184998,
       12778432, 1149741, 6307267, 305148, 26637],
      [5940203, 4278889, 2226626, 370319, 10759244, 9846490,
       9994131, 8154147, 3757283, 9229068, 8462]
    ],
    [ //  5 * (16 ** 11) * G
      [10951686, 127504, 2206786, 15974320, 6676654, 3340138,
       6043958, 12337859, 6227778, 9286022, 22250],
      [16673830, 15819063, 14166864, 5694468, 179416, 2059233,
       4279382, 1224945, 2682001, 8112336, 20913],
      [5460249, 16468943, 10551285, 14618888, 10001785, 10692084,
       6658619, 12451050, 13739762, 2036084, 6305]
    ],
    [ //  6 * (16 ** 11) * G
      [7060009, 7711551, 3031155, 10034760, 12826328, 9628062,
       8578399, 10078222, 789217, 1292027, 12412],
      [8019756, 3988178, 14154710, 9085190, 1033404, 10760432,
       1740388, 5503836, 1715845, 11265292, 1258],
      [9090535, 1057227, 15410293, 6049808, 2311241, 1090044,
       8080982, 6233713, 7408853, 6232258, 17626]
    ],
    [ //  7 * (16 ** 11) * G
      [12070581, 12935153, 5374780, 4267182, 5956461, 11326385,
       1675259, 12206262, 3048991, 14475603, 30350],
      [14215884, 16673673, 10588502, 14823718, 12031057, 15421158,
       14235972, 12416099, 7472046, 7599734, 29283],
      [8320650, 13267691, 2351877, 7400155, 2945823, 5990502,
       16626884, 1634342, 13823165, 5473461, 20795]
    ],
    [ //  8 * (16 ** 11) * G
      [2726046, 6455495, 14501588, 5466277, 9698256, 5933387,
       8507766, 6545215, 10527267, 12412089, 13518],
      [15944939, 165770, 11427367, 12142294, 721929, 8721040,
       16243389, 6623979, 2461569, 12020104, 25049],
      [12048715, 10949449, 4630213, 2354068, 15978840, 4732067,
       13793096, 268027, 7373103, 6188844, 27092]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 12) * G
      [3937329, 16206789, 14601750, 2126573, 9905614, 4122411,
       7321010, 12106179, 6080776, 935179, 32302],
      [4591355, 2835279, 14065638, 10892807, 13829076, 14296286,
       964512, 15749665, 5528467, 8240640, 9086],
      [111664, 7728487, 1048885, 10423293, 1086694, 8331811,
       1410020, 7680527, 1136099, 10918321, 29103]
    ],
    [ //  2 * (16 ** 12) * G
      [5486109, 7314233, 15099342, 11510081, 5781994, 5897926,
       16624119, 1000287, 11649678, 4385218, 529],
      [3887318, 3939399, 1108546, 3881199, 15235615, 12490065,
       6271689, 10192063, 16292380, 2079864, 115],
      [16259200, 13047880, 1696816, 6213313, 9833506, 1434559,
       8612794, 11983584, 14768136, 7287623, 19533]
    ],
    [ //  3 * (16 ** 12) * G
      [8200137, 15519681, 1317111, 5324860, 7730598, 843628,
       2881518, 14409329, 14973474, 14527143, 6463],
      [9378160, 14548120, 1781516, 11581941, 9527847, 7781995,
       12875665, 7260086, 9412520, 9765032, 14527],
      [15239023, 13188151, 2891730, 1626438, 16129626, 1210018,
       8534308, 5275893, 870761, 12164799, 27247]
    ],
    [ //  4 * (16 ** 12) * G
      [546283, 12696406, 10316358, 16290800, 1489720, 11321636,
       3641201, 14097681, 1611498, 6886563, 30199],
      [14951366, 2274742, 9367217, 15894271, 10317840, 6130835,
       8592847, 9480490, 12970768, 14327618, 4975],
      [376273, 14660003, 588108, 10483756, 3558301, 5802511,
       10863547, 2787288, 15260858, 8605963, 545]
    ],
    [ //  5 * (16 ** 12) * G
      [11349268, 6699102, 3164919, 13270104, 9361536, 1981856,
       15077409, 856998, 8416259, 1892731, 27143],
      [3177087, 7405891, 6266202, 12877220, 6545054, 8049584,
       5422738, 2276350, 4211308, 12861949, 4999],
      [9931512, 12833159, 1291731, 8326724, 2841149, 8167538,
       4766535, 883528, 2022546, 11692719, 12657]
    ],
    [ //  6 * (16 ** 12) * G
      [5655720, 3248279, 1681711, 2258401, 8108108, 5329151,
       3646599, 5199358, 15762266, 13928252, 8735],
      [9062353, 12048562, 15836685, 1536164, 12522710, 12408998,
       9655261, 13935096, 4342761, 4875060, 27729],
      [1401665, 2117434, 2958114, 12192259, 7594217, 200443,
       4997391, 16572637, 9587370, 10852091, 18650]
    ],
    [ //  7 * (16 ** 12) * G
      [10853575, 9332316, 10514122, 3029164, 4662603, 1560232,
       578078, 3256263, 14174967, 14089418, 26477],
      [5019539, 1924552, 398582, 15679874, 4323811, 7842969,
       9385058, 13497784, 9075113, 3668494, 22728],
      [16552024, 6849942, 1772793, 8083104, 14466035, 14051869,
       8210741, 14467815, 10845962, 7598790, 7247]
    ],
    [ //  8 * (16 ** 12) * G
      [6267067, 5225776, 11341434, 5555811, 10308832, 3688578,
       8597475, 15999427, 16141378, 13110555, 31066],
      [8139908, 7368444, 6402926, 12829135, 14666164, 13100403,
       13203484, 15408505, 11495260, 10148733, 28741],
      [11807667, 14371217, 13245329, 4915932, 2528803, 7920727,
       15015820, 10477470, 14819283, 6456460, 24545]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 13) * G
      [490561, 699981, 10740345, 14382185, 9667184, 1483403,
       14453437, 7255602, 412530, 1371306, 29192],
      [1135497, 2738069, 13513052, 8793972, 14738695, 7615191,
       2196882, 805494, 2466276, 7116874, 29406],
      [6988560, 11883455, 1814170, 8416622, 676009, 5323013,
       241151, 9616244, 12476811, 13792837, 916]
    ],
    [ //  2 * (16 ** 13) * G
      [8318452, 2249093, 12930391, 14786195, 7491293, 7353827,
       920441, 9072962, 11265859, 8599175, 15164],
      [3491236, 6563250, 9893177, 10025906, 10986110, 14517781,
       12346223, 11234386, 9647342, 9807937, 31193],
      [9821557, 9348625, 3132810, 1956264, 317608, 7976613,
       8495960, 5508554, 13134474, 1483641, 24797]
    ],
    [ //  3 * (16 ** 13) * G
      [8512857, 13125747, 13317538, 14123138, 7339686, 11948889,
       15457191, 13342577, 5088901, 11862427, 23048],
      [4081592, 14088213, 800001, 1352438, 11102036, 9774007,
       11945309, 1126120, 1239690, 10731905, 20066],
      [6993798, 11273297, 4049108, 5412274, 5960481, 3195225,
       3463938, 14085586, 5980620, 15722626, 2345]
    ],
    [ //  4 * (16 ** 13) * G
      [13693651, 119243, 8347398, 6369979, 7225647, 14583667,
       3285901, 8609860, 12612924, 5403381, 7738],
      [5661981, 7518125, 1542961, 4172759, 5774202, 16180225,
       16138829, 3000653, 2697295, 7232812, 12343],
      [5875100, 9283457, 15979153, 4130579, 14425305, 6656107,
       9652941, 5660538, 11845928, 11332684, 21466]
    ],
    [ //  5 * (16 ** 13) * G
      [13150166, 3921820, 11685031, 4712873, 4879247, 16646221,
       2704117, 16042993, 12519250, 4192701, 417],
      [2948528, 2868101, 760197, 5887725, 12660373, 12745516,
       12557146, 7404002, 5877401, 9179513, 20283],
      [15885330, 13223983, 11031990, 2078311, 12888265, 9171482,
       13626231, 13969343, 1221566, 3660400, 12339]
    ],
    [ //  6 * (16 ** 13) * G
      [1875324, 2237068, 1021268, 1743668, 16433463, 4773633,
       7836251, 8293777, 11789083, 11359841, 21496],
      [13827537, 3984378, 11048813, 3647040, 8946583, 13313483,
       1926964, 3141644, 10235179, 16047224, 9887],
      [9267085, 4177344, 1510400, 8301867, 9973667, 8581453,
       13480677, 12615275, 4270660, 7508447, 10604]
    ],
    [ //  7 * (16 ** 13) * G
      [14349207, 14560051, 11761923, 13215268, 16713241, 4069584,
       2839899, 9051429, 14727104, 5774418, 11117],
      [12105118, 3278298, 5300146, 13109538, 5958304, 6101062,
       1612402, 13710273, 15800273, 3605089, 8999],
      [4094342, 4445026, 5520645, 12744867, 9704642, 9893479,
       13398625, 11420656, 4582074, 12853122, 30774]
    ],
    [ //  8 * (16 ** 13) * G
      [15293057, 5561161, 7595938, 569517, 9622992, 16516945,
       11653130, 5054693, 15884088, 16253228, 23893],
      [1151868, 2000000, 2673253, 7271450, 11584622, 9261766,
       10968895, 11993627, 14137853, 16751082, 4509],
      [11738445, 14666740, 9585642, 1119368, 5259124, 3872710,
       12912141, 16707176, 4852424, 9679837, 12946]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 14) * G
      [9737754, 2183137, 5197401, 881101, 12484039, 15871305,
       13777744, 9633999, 9531954, 13911804, 18313],
      [8172040, 8727901, 15149177, 6847986, 14605680, 7901624,
       11215208, 14420991, 8235573, 12600167, 11076],
      [5158798, 8891143, 6756892, 10083060, 13029774, 9463802,
       13453391, 4107451, 12166372, 3075883, 24773]
    ],
    [ //  2 * (16 ** 14) * G
      [16616433, 9026619, 1706845, 13235029, 7049783, 2684336,
       11588912, 936982, 13617835, 10236204, 4284],
      [11431185, 12960380, 11235371, 5547148, 13068699, 3060292,
       5683785, 15711296, 11954029, 7489753, 28887],
      [12755035, 15223614, 14723722, 15538049, 6921972, 8769944,
       14971022, 7947539, 7795731, 6017961, 25461]
    ],
    [ //  3 * (16 ** 14) * G
      [13699155, 10501674, 6927711, 10413621, 7304592, 12095541,
       16629353, 10484209, 12676996, 12698763, 3468],
      [15838391, 1054871, 14171591, 12674491, 14318942, 135005,
       10227617, 5279323, 12921430, 7673655, 10083],
      [11803049, 185198, 10814100, 7844960, 11816574, 4806384,
       3200060, 13609058, 13723367, 14518906, 28866]
    ],
    [ //  4 * (16 ** 14) * G
      [7334926, 9719967, 9266529, 4638289, 3047081, 10181870,
       15951840, 9909185, 9733269, 11297635, 11791],
      [15564307, 9862584, 8032724, 14120577, 2436874, 2450548,
       14683525, 14944642, 10829029, 6371350, 12984],
      [4771172, 16236260, 13662695, 555142, 13122151, 14364266,
       14262500, 16293844, 5918529, 2186355, 16761]
    ],
    [ //  5 * (16 ** 14) * G
      [14478634, 9758679, 7375984, 4707228, 16485059, 14221975,
       3385606, 14760928, 14261622, 4498188, 28675],
      [7064884, 3389736, 14476462, 5610966, 15695542, 9314231,
       2077651, 2591508, 4309638, 8742434, 12794],
      [3547892, 7094830, 2994050, 9974608, 2107783, 9511873,
       14756664, 10207671, 9774217, 2298537, 9403]
    ],
    [ //  6 * (16 ** 14) * G
      [14575555, 15537970, 4764072, 4594505, 11834392, 12374588,
       4421327, 9354563, 1605640, 4097822, 4078],
      [16276587, 797429, 9716216, 326247, 7505091, 1813864,
       10068922, 8996319, 15424790, 2816511, 3357],
      [6430431, 9085234, 7973338, 5841509, 12067489, 12686128,
       8103834, 4195353, 5447030, 14128920, 5804]
    ],
    [ //  7 * (16 ** 14) * G
      [10165565, 7515949, 5927647, 10760740, 4598326, 9844579,
       7935667, 4116128, 3154697, 980665, 4670],
      [8894125, 13026680, 12241241, 6263038, 14786221, 16057492,
       6464322, 1499726, 1447680, 13847320, 5710],
      [3139226, 14240793, 1263742, 3838229, 11414762, 14559073,
       13875620, 8879094, 7599083, 1033744, 30938]
    ],
    [ //  8 * (16 ** 14) * G
      [2868842, 6105317, 9329649, 7401498, 4711192, 9166124,
       12322498, 2365871, 7018298, 14609189, 11557],
      [801428, 8450408, 15114911, 1763815, 16219669, 7959409,
       5785601, 1114353, 11767261, 10793750, 1354],
      [2522296, 4623641, 11526088, 6743373, 2652316, 15472395,
       2778734, 2812701, 8234848, 1091243, 4934]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 15) * G
      [5878335, 6210172, 15911669, 1395972, 11463998, 4322457,
       7528769, 6833181, 3317922, 4526905, 5123],
      [166972, 3203292, 7461140, 5380039, 12146088, 10615310,
       15543449, 4917729, 6976572, 1766077, 17032],
      [6073661, 13015723, 11369470, 5026511, 4099283, 14066370,
       4979511, 6839761, 6781464, 14042133, 2774]
    ],
    [ //  2 * (16 ** 15) * G
      [8121525, 4431425, 6715418, 13700610, 12948364, 11281482,
       1115794, 6136709, 14881331, 6660781, 4528],
      [9600671, 8988743, 7829780, 3607208, 14341871, 2556723,
       16388370, 2068260, 14652818, 11284266, 21093],
      [16560966, 14495898, 5521503, 2680383, 7486788, 11185881,
       15753061, 9748509, 4982793, 14432993, 17380]
    ],
    [ //  3 * (16 ** 15) * G
      [3712279, 13103529, 14793746, 3244210, 3156139, 2443847,
       2030541, 4159575, 16185615, 3424879, 29925],
      [12764835, 8045485, 9759343, 15298940, 15280374, 15398352,
       15390277, 14865273, 2096062, 8881605, 18141],
      [6064280, 114231, 4747416, 14941571, 449205, 463947,
       15542051, 7702540, 3099714, 4624349, 11017]
    ],
    [ //  4 * (16 ** 15) * G
      [117654, 4845239, 12818375, 11969385, 16005332, 2939267,
       9148992, 6460971, 8970107, 13062296, 26998],
      [16752682, 9725314, 4807575, 16689397, 617041, 11508698,
       3628919, 10511185, 1908342, 14573856, 7119],
      [6969762, 5541924, 9456202, 15237085, 4111838, 7469782,
       6753571, 14238588, 1019606, 7538899, 27112]
    ],
    [ //  5 * (16 ** 15) * G
      [5684912, 9154902, 13255514, 5197147, 16435642, 12613112,
       12850504, 12169848, 9614882, 15693544, 16048],
      [13107971, 12518027, 16453504, 8001742, 11409075, 14066538,
       4708140, 14501866, 15546794, 3508468, 24980],
      [237445, 6045329, 11129454, 16184122, 15329149, 6984640,
       5599238, 15242892, 11185629, 13731871, 15412]
    ],
    [ //  6 * (16 ** 15) * G
      [10460864, 2842272, 9453469, 11936680, 11221871, 2540573,
       15364825, 10525603, 14201709, 9654591, 14145],
      [16769241, 757551, 12172635, 4117071, 10638352, 2212970,
       12366440, 2803671, 14459754, 3754848, 24667],
      [10297042, 5694554, 10663144, 7116713, 15222902, 15629807,
       6561374, 11601103, 10951823, 12065928, 12112]
    ],
    [ //  7 * (16 ** 15) * G
      [6820283, 3957244, 995698, 6427008, 11817032, 5723036,
       13846425, 7768371, 7679949, 10827010, 13457],
      [14307882, 2924711, 5253973, 4496130, 3191606, 10467634,
       12362937, 15910085, 477730, 6768984, 31532],
      [13798623, 6654014, 3790161, 13853406, 14176210, 9326354,
       13886263, 689994, 7749236, 2826108, 13]
    ],
    [ //  8 * (16 ** 15) * G
      [7162471, 528848, 14892354, 9494783, 16516229, 8117950,
       12041544, 16281798, 10156584, 7542321, 28202],
      [9742507, 7834686, 15504932, 15312779, 14087118, 3952394,
       8457588, 9734855, 15531212, 7943594, 30306],
      [13998751, 11281622, 415400, 3184368, 14382398, 5413320,
       15109964, 4685633, 13132052, 8723702, 22669]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 16) * G
      [16167166, 9357197, 1790227, 15037941, 9951881, 15841619,
       1929594, 598138, 2152016, 16628267, 8450],
      [13759765, 6678391, 15846698, 9415264, 9015687, 451924,
       12376764, 11646779, 8178171, 7916457, 25928],
      [6088353, 14943493, 2725534, 1200557, 12363624, 10753334,
       1550973, 3807989, 15512250, 2480937, 2775]
    ],
    [ //  2 * (16 ** 16) * G
      [5121111, 6795651, 12966978, 7392795, 7685301, 6215606,
       784337, 1765498, 10499664, 13630321, 19183],
      [356229, 12323995, 14155463, 15201791, 8213096, 11467347,
       6439698, 7843782, 3776473, 6247170, 20327],
      [1382174, 3552772, 3916589, 9017416, 2879249, 5312717,
       11391124, 8850030, 11036001, 12284578, 3020]
    ],
    [ //  3 * (16 ** 16) * G
      [11643336, 9842666, 13441118, 6624381, 15197749, 7205510,
       3259227, 11571936, 14071614, 15772505, 16420],
      [16650902, 6179920, 8263789, 16705695, 3767170, 3256544,
       12931184, 3917814, 9385922, 16607504, 26232],
      [6841282, 16396643, 15865222, 5713203, 16157768, 11467783,
       10451102, 5206988, 11355905, 14815374, 11586]
    ],
    [ //  4 * (16 ** 16) * G
      [14668443, 1250708, 6985717, 3227468, 5609565, 5247073,
       460869, 15442239, 13816610, 2492600, 26475],
      [5469587, 8064271, 4989297, 1252870, 5138699, 14720913,
       11433258, 1816199, 4340846, 15968155, 16907],
      [5974855, 12215580, 8421688, 3218203, 7452396, 3518598,
       11648049, 8126220, 848352, 3144348, 29789]
    ],
    [ //  5 * (16 ** 16) * G
      [13224125, 5905963, 8503122, 2508701, 5973512, 5626858,
       974593, 13963719, 849360, 3992470, 6882],
      [13848170, 14636833, 13656118, 10058675, 14387239, 7010993,
       12830837, 13877769, 1951801, 6022476, 1761],
      [3316042, 6129433, 11557746, 13545946, 3480757, 13239602,
       4840119, 8242197, 9355767, 14180647, 22750]
    ],
    [ //  6 * (16 ** 16) * G
      [6735196, 3642354, 4839447, 13387086, 13203141, 12822728,
       16301094, 6087554, 8779513, 10348628, 12275],
      [12765608, 6006966, 9186811, 16067673, 15658894, 1405768,
       520493, 3375249, 1924056, 6908755, 2234],
      [15713658, 4124355, 1144813, 13958984, 14701847, 7457540,
       4190630, 15351162, 8191572, 3388564, 4614]
    ],
    [ //  7 * (16 ** 16) * G
      [6357058, 9992337, 15207316, 15526906, 15184188, 10797134,
       9802992, 7388787, 13996421, 694708, 13779],
      [1183754, 3229513, 426685, 8286142, 2325357, 7980766,
       1642986, 14753398, 3750878, 3924939, 1859],
      [15308788, 4505692, 10747769, 11557969, 6110692, 8682583,
       16603766, 5780353, 16177823, 4120186, 11655]
    ],
    [ //  8 * (16 ** 16) * G
      [3617801, 3236931, 14226810, 16034433, 12105710, 4720378,
       15136166, 11572222, 8366006, 3560560, 11895],
      [6158721, 188750, 16099938, 5248481, 874775, 1928354,
       13875938, 1614453, 6292051, 6392321, 1347],
      [4989889, 12448919, 9637354, 10341958, 7277093, 12201130,
       12100250, 270380, 497165, 4404781, 19220]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 17) * G
      [2370796, 3667795, 15878072, 12599826, 7193740, 2671909,
       16507353, 14820091, 9055239, 2710445, 18666],
      [12939614, 1851223, 9447835, 7039085, 13341342, 5944214,
       6571811, 3146880, 5087201, 6038692, 11331],
      [16286527, 13204608, 5965319, 13247980, 8721784, 12283662,
       726558, 5568325, 14612494, 4690592, 31691]
    ],
    [ //  2 * (16 ** 17) * G
      [13055577, 14929963, 14648455, 366969, 11502661, 7323467,
       5954733, 13728919, 16553654, 10423262, 22326],
      [5383362, 13672452, 5381356, 6939961, 8330011, 16154997,
       9589385, 7822202, 7561544, 12984342, 7020],
      [6522520, 10027381, 13889961, 15641184, 4051390, 10782773,
       3361947, 8688753, 11395857, 7235651, 25594]
    ],
    [ //  3 * (16 ** 17) * G
      [9945448, 2118501, 9032028, 10015367, 7566336, 12197791,
       15807063, 1617639, 3436308, 12573191, 13336],
      [4939447, 12504530, 16327061, 12635460, 4321676, 10411614,
       4473290, 14624775, 5995879, 3905779, 1799],
      [15020244, 6777932, 16044092, 3890681, 6602823, 10690059,
       9116083, 417007, 3211977, 14049619, 12420]
    ],
    [ //  4 * (16 ** 17) * G
      [8677805, 12033727, 3531254, 14837297, 8392708, 1579797,
       3190644, 10111363, 10184508, 5263108, 15266],
      [205309, 15234678, 14195308, 10401338, 14857488, 365183,
       11438792, 59348, 7303738, 7043771, 29656],
      [12212918, 11886701, 11209554, 12300781, 1265423, 10892713,
       891652, 3189074, 7595483, 12120953, 26643]
    ],
    [ //  5 * (16 ** 17) * G
      [4270017, 11555891, 2463828, 8584191, 6095992, 7294736,
       16335896, 14371319, 13678848, 15218878, 5992],
      [1408553, 13260531, 10875284, 6223144, 7157104, 10075155,
       7834373, 14503151, 16266221, 7515940, 32084],
      [3398215, 8867247, 16371951, 11985721, 13876829, 15650304,
       3120284, 4139658, 5391194, 15431971, 23834]
    ],
    [ //  6 * (16 ** 17) * G
      [13460426, 7058201, 3798430, 2216040, 791954, 13284967,
       5972304, 11562326, 5182115, 1678608, 8443],
      [1812341, 12562102, 16585415, 14836671, 5136927, 905144,
       12803204, 739237, 11503156, 12454860, 32387],
      [10076448, 4058733, 14705044, 4590495, 1056558, 5868934,
       5345000, 7058161, 12875212, 6457852, 30391]
    ],
    [ //  7 * (16 ** 17) * G
      [6457082, 5030261, 8157467, 14109205, 13554455, 12445403,
       2222706, 8287012, 3262697, 1591569, 510],
      [3063987, 15835474, 7160389, 2782565, 8881586, 11780181,
       2443425, 1919066, 9429151, 10407125, 24725],
      [15563273, 15432616, 10239679, 15008376, 16630459, 9709641,
       6110225, 4516814, 9731914, 15422910, 13793]
    ],
    [ //  8 * (16 ** 17) * G
      [7572947, 15139269, 15653850, 11693851, 13039157, 6223097,
       8405745, 6416746, 6333656, 13705135, 15009],
      [7130228, 7207538, 6624509, 3101625, 543998, 13153339,
       16077474, 15940324, 4200042, 11565581, 22954],
      [6204453, 15486098, 3700668, 6296439, 4747652, 16011544,
       3669673, 5977923, 15116870, 15175368, 6245]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 18) * G
      [7217018, 12044214, 8309956, 16059439, 1408549, 11476036,
       16544062, 4124781, 14312439, 4482898, 22575],
      [5414091, 5564700, 16488060, 6604341, 16131730, 1664304,
       16021522, 2574255, 16150364, 8657130, 5891],
      [3296484, 8114976, 12895793, 10766475, 1065704, 1270952,
       9129562, 11673329, 10653129, 1854413, 3114]
    ],
    [ //  2 * (16 ** 18) * G
      [2032711, 13095023, 5886541, 14387136, 2530878, 13799346,
       7535538, 13720322, 16140407, 9163206, 31829],
      [12413253, 8472681, 2289092, 12459149, 7180413, 12954381,
       1234268, 12991442, 1367171, 10170531, 23146],
      [9848381, 1385683, 15782124, 12802596, 12280458, 6267922,
       7937212, 10816570, 16494531, 10865162, 1028]
    ],
    [ //  3 * (16 ** 18) * G
      [10961878, 4196106, 15240223, 5973598, 12243147, 13819596,
       7038607, 5720836, 14521907, 6028746, 17977],
      [4288465, 10361642, 9134780, 14897241, 13039400, 6907829,
       14171485, 275519, 16314008, 7673575, 14674],
      [6134428, 14363930, 2756991, 13697116, 7816636, 7334556,
       15815893, 15717566, 2281494, 10103272, 30295]
    ],
    [ //  4 * (16 ** 18) * G
      [12593687, 9338441, 8340918, 12364195, 13455778, 4987683,
       1174562, 4118111, 376241, 8707230, 17315],
      [11810034, 11866962, 14758716, 9690752, 3287113, 3526360,
       8877325, 11882792, 2586561, 1358634, 709],
      [15840837, 14015115, 5466187, 16168267, 9163646, 13784059,
       14133680, 3225878, 5537881, 9570657, 4448]
    ],
    [ //  5 * (16 ** 18) * G
      [14340010, 1468713, 9417805, 8655705, 5414732, 5593562,
       13255997, 15331171, 6917643, 1203141, 13598],
      [10177997, 5641782, 6519352, 6642741, 12594343, 8397173,
       16372977, 8241691, 15130690, 8221841, 12131],
      [16153534, 10176026, 6411444, 13151113, 197498, 10091478,
       10484134, 7462625, 13511322, 2950887, 32536]
    ],
    [ //  6 * (16 ** 18) * G
      [92396, 9331883, 4422268, 1437125, 5917269, 973515,
       13846477, 611609, 4101040, 11308084, 26580],
      [2192674, 4944526, 14158149, 13927608, 5826804, 9452714,
       5078854, 13850661, 1856023, 12600100, 17580],
      [8017783, 7060303, 14752893, 9536275, 3538644, 4621451,
       13027691, 4906145, 11366845, 1868562, 21869]
    ],
    [ //  7 * (16 ** 18) * G
      [9255298, 4252428, 3413999, 1418234, 16189246, 6581809,
       13305715, 5186035, 8539903, 7105821, 29804],
      [1828897, 6772401, 14516720, 1090547, 11532323, 4611343,
       5597849, 16298704, 9207557, 12466380, 2426],
      [10825124, 13207422, 4394057, 10214429, 4417877, 15454796,
       653260, 142392, 15631549, 1352523, 22398]
    ],
    [ //  8 * (16 ** 18) * G
      [10959626, 6859873, 16117986, 3641765, 16448016, 59890,
       8547181, 12706110, 14126914, 8317295, 24826],
      [5101355, 13549245, 1152254, 397090, 6967258, 13762548,
       7848136, 1198681, 37525, 309499, 28755],
      [2715334, 1914189, 14202429, 6270257, 12780862, 4386035,
       9221309, 6753173, 6509565, 9309345, 8505]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 19) * G
      [10998511, 11717261, 2564458, 10089512, 7002589, 3962166,
       20445, 11429049, 9477730, 3758931, 16442],
      [1801882, 16520838, 5342917, 6956996, 10694727, 3512310,
       6791657, 91762, 8577003, 12176736, 1535],
      [4153657, 16424949, 11970071, 1304172, 15906277, 9086048,
       15708996, 14133438, 6201746, 3310959, 31273]
    ],
    [ //  2 * (16 ** 19) * G
      [3008648, 14115248, 2034489, 13779278, 5574270, 11092063,
       5776097, 10928036, 4488089, 3112445, 1290],
      [6525698, 4475001, 2930844, 5293695, 15004051, 16369226,
       11061274, 15774557, 8851479, 13638, 14800],
      [5299063, 3879846, 11682684, 12240171, 11528221, 13834347,
       2960823, 16685376, 2860750, 8318007, 11099]
    ],
    [ //  3 * (16 ** 19) * G
      [16060143, 4963715, 6730684, 9212536, 9374873, 15101520,
       8898743, 4450149, 8362201, 5612452, 3958],
      [3852532, 4214113, 2926228, 16422887, 801835, 12718160,
       13770702, 8864004, 305390, 6271878, 6944],
      [4920124, 11352018, 742892, 6305993, 1971325, 7335492,
       10606124, 6645379, 14740654, 14015623, 343]
    ],
    [ //  4 * (16 ** 19) * G
      [5554493, 11489539, 6353575, 11155243, 10531141, 13922519,
       6948259, 2648505, 4587891, 14953858, 25896],
      [2012452, 5575895, 9671974, 6156613, 252033, 15120358,
       4263245, 1342687, 3655760, 11629316, 21139],
      [13431334, 14713163, 9642960, 8492795, 13059533, 1989522,
       7100756, 9134457, 2226552, 5107904, 16548]
    ],
    [ //  5 * (16 ** 19) * G
      [2157162, 6916431, 1628840, 5005830, 1352657, 16301802,
       13306123, 6291964, 8297712, 15213204, 13812],
      [12963989, 7229771, 4884169, 16557696, 868504, 15359474,
       9029670, 2569789, 1690319, 3561047, 14794],
      [8894300, 7286639, 7378768, 215776, 2404000, 5101254,
       14920403, 2017366, 4253071, 778468, 1371]
    ],
    [ //  6 * (16 ** 19) * G
      [7560466, 10583433, 15819881, 15098553, 7284693, 5669339,
       2648633, 10472355, 6926117, 8389842, 13883],
      [10698146, 10505070, 14503186, 14901542, 13585429, 14247767,
       7728708, 9497750, 9984684, 3444010, 25802],
      [12882221, 9312740, 7051608, 1877454, 13384526, 10016239,
       6355547, 4530922, 14985241, 12299037, 28772]
    ],
    [ //  7 * (16 ** 19) * G
      [7800385, 14766426, 3782937, 5144448, 10674887, 3213737,
       736754, 7677733, 2602891, 7549100, 30058],
      [5513513, 12607810, 9478800, 12488027, 14860974, 16653298,
       14382763, 13575256, 14034623, 8052355, 533],
      [10093451, 9906715, 11812422, 8314943, 5170794, 11848238,
       7827163, 8495688, 13436259, 5171342, 6804]
    ],
    [ //  8 * (16 ** 19) * G
      [234354, 1904977, 14603689, 10078758, 13858743, 7039790,
       11337014, 10580482, 9443733, 2694102, 1840],
      [2319062, 11032856, 12303168, 9063706, 10442103, 5895865,
       2585989, 9246900, 2499418, 1042253, 9922],
      [13378293, 1941481, 8152205, 2678103, 12342809, 3789158,
       2188580, 4707309, 11504457, 7449837, 18898]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 20) * G
      [2831347, 363064, 11831797, 11356352, 14858763, 11759194,
       238909, 9409461, 10629862, 15572373, 23203],
      [12015105, 11205044, 7481240, 6065581, 11301395, 10494814,
       6382007, 13815466, 9403726, 11699433, 7103],
      [14247265, 7858631, 3564903, 7522176, 2822740, 7270091,
       10082640, 6620466, 9000908, 14765662, 18951]
    ],
    [ //  2 * (16 ** 20) * G
      [915865, 1231768, 7425764, 3960519, 1431407, 7863715,
       14586460, 12297709, 3224578, 11286813, 16139],
      [7840923, 5819844, 1516555, 6572016, 3726046, 6991357,
       3319752, 1675917, 11509889, 8056196, 20655],
      [16145381, 14549269, 11693647, 2187529, 9971233, 14080297,
       8457133, 7864837, 15454214, 10688186, 6433]
    ],
    [ //  3 * (16 ** 20) * G
      [12087548, 3112671, 12421442, 5207731, 2714603, 5109548,
       13907650, 473329, 7581360, 14631394, 25688],
      [15974795, 11377369, 10278746, 6336961, 6950639, 973142,
       11281756, 4102667, 6473717, 10349728, 31492],
      [4473987, 14907957, 9690315, 1043902, 8943923, 14518133,
       12784325, 7888900, 9768548, 14470082, 24723]
    ],
    [ //  4 * (16 ** 20) * G
      [14708845, 10126725, 3350515, 11790137, 13673944, 4537142,
       14774671, 4438514, 2599292, 15337544, 22481],
      [8651595, 15646304, 5532638, 7868344, 10076854, 431409,
       11253293, 9909110, 6585744, 8440203, 28209],
      [2666609, 11986849, 11202170, 9676939, 12671341, 6369444,
       8565281, 16233694, 9944344, 10067421, 13886]
    ],
    [ //  5 * (16 ** 20) * G
      [15605700, 4440373, 13604520, 582856, 7254869, 13840535,
       112012, 11808616, 3802411, 10188905, 18670],
      [4959942, 4775138, 6303512, 12237999, 10187349, 15282550,
       7224559, 9489212, 16364373, 9935814, 8991],
      [2814918, 14568396, 2055217, 16654477, 4960304, 11822768,
       639311, 12029296, 7939091, 16423688, 1947]
    ],
    [ //  6 * (16 ** 20) * G
      [3149300, 3822042, 11592592, 4041050, 3761187, 6586500,
       2951989, 15547633, 8483220, 7861892, 908],
      [13976133, 15564962, 5436361, 7861817, 10521464, 5534986,
       6541576, 14118316, 7365483, 16455060, 7924],
      [1473516, 6219355, 12748110, 9883853, 5835330, 2201945,
       3446800, 7516895, 786262, 15280714, 22366]
    ],
    [ //  7 * (16 ** 20) * G
      [1585103, 8425610, 12440768, 10045597, 14774466, 3399216,
       5722871, 375485, 13892864, 15143212, 17364],
      [10803201, 12338442, 14179654, 10826681, 11473447, 443075,
       2501513, 3710523, 3102747, 1998392, 8202],
      [16333509, 12150762, 12603789, 353874, 12359835, 9958769,
       14243441, 16657285, 1986104, 13259365, 1294]
    ],
    [ //  8 * (16 ** 20) * G
      [4131996, 1760837, 10208067, 16740411, 16057438, 8076777,
       13233540, 16570746, 5829830, 15122972, 19214],
      [15100138, 3765856, 9934764, 1391284, 1686526, 10985371,
       11875564, 5026169, 3255895, 12623777, 24913],
      [15752598, 6032893, 8010485, 2798830, 2502368, 1509853,
       8851991, 1159867, 983819, 2423424, 8175]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 21) * G
      [7104009, 1194603, 3716246, 8432473, 5308037, 8019879,
       3782594, 16019903, 11278652, 249463, 20601],
      [1466912, 10906256, 655249, 6025696, 2445998, 14646514,
       14188432, 8257413, 7565241, 1048076, 20322],
      [14564916, 878047, 11363065, 12188255, 2672018, 4526287,
       16369174, 10078318, 2452612, 4719690, 9684]
    ],
    [ //  2 * (16 ** 21) * G
      [15315311, 2297543, 6143336, 12699001, 11647425, 11665166,
       12883382, 7947208, 12242782, 11493899, 12191],
      [142165, 4462025, 16657532, 8466097, 10539585, 6163798,
       13227958, 15740577, 3291942, 5320661, 16768],
      [4761051, 4090250, 3908863, 12424512, 6961158, 11951546,
       11487189, 10452193, 3789563, 8906073, 5600]
    ],
    [ //  3 * (16 ** 21) * G
      [6034582, 7684980, 791072, 14301281, 16727293, 12799962,
       2567281, 15001495, 12447209, 8067380, 14784],
      [9846584, 1601275, 13994132, 14443419, 10489472, 1874248,
       2877804, 10807305, 5715553, 8213706, 23049],
      [13231957, 8989463, 16264517, 8990861, 3407218, 9165264,
       14242395, 7090153, 1884281, 15528385, 11995]
    ],
    [ //  4 * (16 ** 21) * G
      [1417426, 10806215, 5051926, 16266269, 6438064, 10079059,
       2738152, 9891667, 6863526, 9288614, 15694],
      [8888927, 1039824, 15658511, 6045236, 7680341, 3847580,
       3051435, 6687831, 5034930, 16532564, 2132],
      [15576345, 10536277, 15098347, 15771709, 11875326, 10876964,
       2655162, 3897092, 10780301, 8566936, 26511]
    ],
    [ //  5 * (16 ** 21) * G
      [9440340, 1903574, 3584329, 10294054, 3764780, 2869557,
       9571126, 5093672, 9136607, 13762214, 19836],
      [7820950, 14237783, 14360073, 3987793, 13706844, 14774254,
       2826428, 16424364, 13666804, 7790824, 3967],
      [8761356, 15451604, 6633177, 14986675, 5858450, 10276258,
       8438289, 12674452, 7212383, 6506776, 17712]
    ],
    [ //  6 * (16 ** 21) * G
      [13500189, 13681062, 11441373, 15221267, 16183573, 13593173,
       8755503, 7115615, 3666287, 14742858, 1662],
      [468113, 1371179, 6002340, 2598838, 11673985, 4911131,
       5861002, 7153737, 2586207, 11570381, 26099],
      [9961975, 10485529, 3140786, 10658039, 3546399, 3099037,
       2323965, 2486557, 14749666, 15722511, 4684]
    ],
    [ //  7 * (16 ** 21) * G
      [9302613, 7141841, 11947026, 1342051, 13922793, 3891137,
       7599049, 2911548, 16746146, 10920675, 27619],
      [11625609, 15227697, 16454936, 14381323, 11197623, 14825871,
       16032074, 3780797, 4006081, 13363792, 1524],
      [4277692, 958144, 5033476, 587395, 2094306, 4694983,
       9284488, 12407918, 13806501, 6987940, 25702]
    ],
    [ //  8 * (16 ** 21) * G
      [448786, 4414076, 747585, 12271491, 1195041, 14842058,
       2601419, 13939579, 7295046, 3900615, 7541],
      [3664204, 3929907, 1421509, 1171791, 11889022, 13062268,
       11278640, 4949163, 6554728, 4898784, 10461],
      [13344580, 11947076, 12549568, 14914141, 10740140, 5751832,
       8793348, 8007732, 821550, 9172874, 19529]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 22) * G
      [10957206, 5503770, 1587158, 4183908, 9737520, 1552911,
       654138, 11345931, 13132094, 4794671, 21581],
      [9923462, 11531568, 271058, 12767814, 9484294, 12248461,
       7097829, 14459273, 3410967, 6285000, 10240],
      [5408392, 12230452, 10578671, 2429053, 1834900, 4929116,
       13461209, 16210875, 3239418, 7508751, 29412]
    ],
    [ //  2 * (16 ** 22) * G
      [8456271, 2133143, 14755477, 2311438, 5253643, 14549681,
       10879983, 16620974, 3384140, 3050535, 23197],
      [2782759, 16135635, 15730675, 6251878, 11160966, 4477050,
       9906384, 3966439, 14705720, 8323087, 8174],
      [14415845, 383491, 12416595, 1324237, 14348873, 8973476,
       13488714, 8080085, 263491, 4215278, 249]
    ],
    [ //  3 * (16 ** 22) * G
      [13840562, 7021507, 429365, 11552539, 1870747, 12074226,
       7106114, 11758641, 15380749, 10256011, 2007],
      [11507539, 9681671, 10999791, 4044646, 4116687, 2016600,
       12545547, 13527448, 13894738, 16765533, 18359],
      [580882, 16489660, 10192891, 14806722, 420666, 12697482,
       2874143, 874276, 10898358, 2138974, 7221]
    ],
    [ //  4 * (16 ** 22) * G
      [13345610, 5482172, 10191058, 3684385, 6407073, 14915134,
       104578, 9487286, 976495, 358237, 7229],
      [7061593, 7290913, 8310184, 1227992, 12264221, 626719,
       10360775, 11834730, 13708885, 801638, 14453],
      [2286874, 15810708, 7432494, 2842102, 12633916, 14690763,
       15168588, 2163023, 3164284, 14862291, 1569]
    ],
    [ //  5 * (16 ** 22) * G
      [5866381, 6343810, 14462872, 13016986, 15354049, 1978512,
       3630424, 6628936, 13870524, 14027131, 7],
      [14414067, 1545904, 9877422, 14777569, 14659513, 10728532,
       7465386, 2462256, 11933, 5807265, 23950],
      [4368715, 1938696, 4112575, 5803822, 13878115, 14872498,
       3717969, 693780, 1884038, 14121020, 5507]
    ],
    [ //  6 * (16 ** 22) * G
      [10648289, 10678109, 7662830, 5596929, 8141332, 1473113,
       1205769, 13215274, 15568752, 6237825, 9514],
      [10299591, 4654284, 9408515, 16198853, 1795998, 8857117,
       6274651, 1499435, 12933130, 413315, 18776],
      [6744077, 9709136, 7015720, 3177612, 12842885, 1244668,
       7867409, 1790938, 4436872, 1510360, 1948]
    ],
    [ //  7 * (16 ** 22) * G
      [16412671, 15524964, 2295046, 6424037, 14893854, 15352510,
       2380216, 3504450, 13236992, 385866, 28140],
      [14012502, 13455552, 3919318, 12256087, 16214125, 15681690,
       4191171, 3974770, 8096460, 12638001, 26472],
      [5620147, 2483697, 9540790, 10058619, 8123303, 2490433,
       14445931, 12725437, 13456116, 6165725, 20804]
    ],
    [ //  8 * (16 ** 22) * G
      [1329489, 2837307, 11753296, 4475836, 6815595, 8772494,
       2561635, 12107113, 9606600, 7287267, 4888],
      [12493909, 4696875, 2722097, 9570193, 5481039, 16230284,
       4767280, 4934137, 5231677, 9439342, 4841],
      [14662446, 9876351, 16380172, 1187050, 10130270, 9977759,
       12859995, 14618934, 4102575, 14938205, 30642]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 23) * G
      [15803991, 7702428, 2751757, 15022606, 3141524, 4974568,
       15752123, 13382823, 800930, 1143461, 2853],
      [6083227, 16027596, 7443762, 10735158, 11030974, 2703659,
       10506514, 3332810, 1266, 10082613, 18317],
      [12255936, 14239888, 1383770, 967249, 14813361, 1507920,
       8998642, 10644002, 5392389, 2307131, 19913]
    ],
    [ //  2 * (16 ** 23) * G
      [8423094, 9191439, 13165442, 9936653, 7857911, 2929727,
       3165684, 8320734, 11261828, 7961782, 21093],
      [7096693, 14937075, 2439891, 3638817, 6104485, 10819287,
       4038693, 15233940, 1165383, 8172740, 27580],
      [10816854, 10277332, 8273007, 13041323, 2375799, 9907894,
       4732288, 7338431, 3321083, 5800883, 55]
    ],
    [ //  3 * (16 ** 23) * G
      [13306176, 11717928, 13172737, 7281700, 16470432, 13250915,
       9559253, 11906438, 4523616, 9289100, 26403],
      [7719324, 15500652, 16042379, 58172, 4293824, 7746788,
       10205840, 681835, 15956439, 2930033, 26270],
      [10212104, 7041956, 10406673, 2331250, 5942635, 14266626,
       16400213, 11827518, 6785977, 352576, 29345]
    ],
    [ //  4 * (16 ** 23) * G
      [13182109, 8465180, 5808822, 2171167, 8810222, 970338,
       12082673, 2930117, 6532608, 11688418, 934],
      [15009206, 2689506, 3149197, 12593426, 13269163, 2303896,
       6924721, 7860053, 4430663, 9010049, 31863],
      [3349685, 11920094, 2159041, 1440932, 10444174, 3322202,
       15825881, 10462264, 6375143, 1830940, 10808]
    ],
    [ //  5 * (16 ** 23) * G
      [13111745, 9992655, 6794395, 3626725, 8202625, 15596683,
       6323312, 5298766, 4456630, 10891144, 23996],
      [3413615, 12464821, 13957056, 1691504, 15125092, 10967335,
       14133591, 9653751, 14598826, 4595115, 22273],
      [9526309, 4669484, 666727, 724276, 14471592, 4153115,
       12388276, 6182401, 3777090, 11853909, 9557]
    ],
    [ //  6 * (16 ** 23) * G
      [14537238, 10441318, 4747200, 13165424, 15032487, 6487516,
       10330847, 15492499, 3068306, 10151909, 31366],
      [14967764, 10165639, 10319936, 13499235, 5089626, 10198189,
       3626277, 15476855, 1192107, 453059, 27080],
      [12271394, 16086036, 8944456, 11459788, 13094628, 8437352,
       6388205, 15544211, 7846987, 755807, 9687]
    ],
    [ //  7 * (16 ** 23) * G
      [2880734, 12835190, 2834769, 2573784, 4146015, 14537992,
       3018019, 2717530, 10869540, 3826281, 5006],
      [1762516, 10299835, 15505477, 3799380, 12174535, 4931158,
       16171675, 8595267, 11962250, 9316248, 8682],
      [5929884, 16036970, 6457278, 6275536, 2727195, 1460434,
       1629490, 8536216, 10674237, 12497381, 23642]
    ],
    [ //  8 * (16 ** 23) * G
      [3943899, 2815159, 857202, 5899526, 4656223, 11546300,
       11281793, 37950, 4824207, 4930335, 3651],
      [434739, 15130131, 13042381, 1142670, 5919394, 3890043,
       16040214, 14796417, 13837891, 3475040, 9245],
      [12341959, 4214030, 16083940, 11642769, 4596539, 11807662,
       971357, 2812951, 4576916, 16619110, 7565]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 24) * G
      [3065054, 11126172, 13314415, 5211379, 9134527, 16320700,
       14227368, 1865478, 13837661, 9829498, 25527],
      [14528676, 6528018, 7067032, 12592262, 13737776, 14966949,
       219388, 13728815, 614026, 9770286, 1953],
      [10379208, 9372216, 3909686, 13602276, 4406018, 2507664,
       6145345, 11510269, 3080503, 15219971, 16015]
    ],
    [ //  2 * (16 ** 24) * G
      [7381652, 1423621, 4796299, 6752325, 15876720, 16614548,
       14770619, 14556250, 11288583, 3897727, 30138],
      [15716668, 5017064, 3213424, 3399735, 12917390, 13493215,
       10818144, 10853725, 2460806, 563622, 8918],
      [13488534, 14401648, 10117689, 7110026, 16681611, 1204320,
       12380992, 11765831, 7839326, 13663111, 2308]
    ],
    [ //  3 * (16 ** 24) * G
      [12226972, 2086109, 11187406, 13061261, 3267390, 13390287,
       6532486, 2909132, 1957383, 1327036, 17378],
      [16335033, 2975304, 3798066, 12397836, 9776908, 16331014,
       11378817, 1472151, 16198252, 11194042, 25152],
      [10655136, 7642203, 5961780, 13252562, 9731163, 3238614,
       11003849, 6746427, 11799724, 11477901, 22205]
    ],
    [ //  4 * (16 ** 24) * G
      [3486699, 12182517, 4208170, 7256381, 8743125, 5599795,
       5381466, 10358292, 7607064, 11038083, 7460],
      [10304434, 13855937, 12129040, 6431622, 2780087, 5200902,
       9557921, 8166277, 1988436, 3231870, 938],
      [13946399, 7751935, 1897708, 5549196, 4582128, 3505376,
       8527113, 8966693, 15419481, 6413466, 17330]
    ],
    [ //  5 * (16 ** 24) * G
      [12286395, 1972616, 10347867, 12679733, 10408061, 15348640,
       14835773, 11545646, 2583490, 5623643, 12896],
      [9769828, 4033388, 8067409, 3060, 16675110, 9791380,
       14538063, 167184, 9701732, 14017090, 692],
      [13733362, 5622568, 570529, 1600741, 13387334, 4426218,
       9661570, 12885236, 6108176, 13109678, 10150]
    ],
    [ //  6 * (16 ** 24) * G
      [897416, 15453471, 15240102, 6773339, 13883194, 5790263,
       10687989, 15871711, 6332798, 7435519, 11446],
      [4024660, 2558660, 11717932, 6973130, 4865623, 224477,
       2386391, 7993945, 9184665, 221245, 8725],
      [778704, 13498681, 15817198, 7507171, 4333636, 15791273,
       6716052, 8554780, 9499702, 16037688, 31517]
    ],
    [ //  7 * (16 ** 24) * G
      [11706916, 15917235, 6349970, 2839825, 7118342, 8064636,
       14814591, 1436559, 16538002, 15672920, 25084],
      [16315788, 2234375, 13917998, 13931529, 5594271, 10891491,
       9248694, 11709096, 5431357, 8537555, 26729],
      [1579130, 6128938, 14146481, 8838572, 14985939, 12878579,
       8458230, 4504290, 11469263, 4998973, 18127]
    ],
    [ //  8 * (16 ** 24) * G
      [12903929, 2485662, 213605, 1478707, 6216193, 13294606,
       15911909, 7516583, 15425344, 8113428, 10552],
      [4817216, 7251953, 5513532, 3746632, 1998584, 13548156,
       9197097, 2394307, 9225659, 11199757, 4197],
      [2100567, 4531679, 4856876, 12569191, 3878358, 4206684,
       11657603, 657383, 1894166, 10020431, 27041]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 25) * G
      [11130519, 14029807, 5864188, 1836665, 12868260, 14325260,
       311802, 10842081, 14943077, 11994226, 14963],
      [2967348, 15035294, 7699238, 8504854, 13046571, 14581700,
       2485404, 15686805, 1524653, 726759, 14792],
      [8547432, 7212315, 14356249, 4808931, 2093282, 4418807,
       7349175, 6361878, 14316162, 15358071, 3312]
    ],
    [ //  2 * (16 ** 25) * G
      [13946045, 8430813, 10295660, 9827037, 15136093, 13048610,
       13058262, 13065779, 3933231, 1210827, 31669],
      [10916954, 13554747, 6153010, 15237568, 725857, 15547358,
       613991, 1758223, 12991837, 11328184, 23976],
      [7345567, 6703674, 1361078, 692302, 1658639, 7082870,
       3777545, 10838348, 10480877, 16732311, 27856]
    ],
    [ //  3 * (16 ** 25) * G
      [4466860, 6809487, 14926048, 10883381, 8608432, 2700564,
       15939590, 15867156, 296092, 10799327, 25488],
      [4956558, 16432560, 16220140, 3923388, 16546812, 1252560,
       7210362, 10755400, 2243169, 4428274, 25626],
      [436443, 12147366, 15844806, 11560997, 4947870, 10420113,
       7030012, 2781983, 7363836, 15959394, 12509]
    ],
    [ //  4 * (16 ** 25) * G
      [12580857, 13359825, 1527357, 2122839, 1150594, 10311369,
       12324632, 12242126, 4617832, 2288084, 6984],
      [12375340, 15908200, 15872958, 6899758, 4840368, 1765062,
       803275, 11908846, 1222629, 5056258, 23593],
      [5650305, 687909, 5810998, 4722553, 1188490, 11854629,
       2580756, 13065477, 7798314, 9840089, 8749]
    ],
    [ //  5 * (16 ** 25) * G
      [7515361, 8357299, 1580145, 4602047, 9637481, 9132161,
       355264, 2333869, 16318452, 2563207, 2868],
      [3428229, 12484106, 3674004, 8909356, 3123852, 7278571,
       6180577, 10281447, 10522090, 5133336, 17382],
      [3526243, 14832154, 9339221, 16323074, 1051981, 14478526,
       16295293, 12580875, 7063268, 3000685, 22324]
    ],
    [ //  6 * (16 ** 25) * G
      [13523352, 15754696, 10678254, 11914218, 169232, 12867775,
       401591, 9200801, 12732501, 5222961, 13587],
      [7371766, 12367646, 6484931, 7508391, 1940364, 10105653,
       7264982, 20526, 13140095, 5381918, 21039],
      [10719275, 2049785, 13379372, 10052987, 1811383, 1838793,
       3166090, 11428171, 10027387, 11196171, 31484]
    ],
    [ //  7 * (16 ** 25) * G
      [12107329, 15553700, 14533213, 1814754, 2954209, 2798224,
       3395048, 4322354, 11200459, 16426435, 4229],
      [8661867, 4320495, 12953729, 9939942, 15184199, 5242453,
       9896824, 9204879, 13435063, 10614703, 23376],
      [3543829, 1009393, 15309700, 7344131, 4596290, 5275672,
       16442530, 6679877, 14316320, 6437183, 2600]
    ],
    [ //  8 * (16 ** 25) * G
      [8174749, 1296436, 8603307, 10076451, 4843732, 4901176,
       4229078, 5040689, 10657511, 4273329, 7989],
      [13344023, 7568238, 14784014, 14056682, 15878472, 1804794,
       11851102, 3663785, 7100907, 1522868, 23735],
      [12037104, 15108994, 12143241, 10200759, 1890599, 8876020,
       1106317, 1500866, 1771974, 14356351, 31916]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 26) * G
      [1734844, 11722969, 6787170, 13127830, 13207708, 7387207,
       6701136, 10351946, 9675199, 15116580, 29545],
      [12962541, 4469980, 3399937, 3966203, 15555990, 10544967,
       7794054, 7340437, 6814180, 6912978, 9650],
      [9988196, 4193043, 12098919, 4283847, 10877913, 3890748,
       3923751, 14700236, 5131474, 6831541, 5152]
    ],
    [ //  2 * (16 ** 26) * G
      [10342807, 12394020, 177272, 6183105, 800000, 11295842,
       3132602, 16450259, 567085, 3927029, 24758],
      [13392592, 12283841, 9123054, 9848492, 1772777, 14570346,
       4826731, 13873370, 13664705, 3883361, 12776],
      [404303, 13046430, 14194664, 2699786, 14978895, 6831945,
       4943640, 6024417, 5571351, 2012717, 21967]
    ],
    [ //  3 * (16 ** 26) * G
      [12729688, 1052773, 10246265, 5280897, 10291309, 6268811,
       11080389, 14827567, 561620, 6644823, 26266],
      [16092242, 11920253, 3551350, 15178188, 3848669, 15605975,
       14895379, 12419868, 12190003, 16493154, 6742],
      [10340844, 7032924, 1741886, 10976311, 2447291, 7754032,
       5652788, 9991086, 12946012, 8611737, 5060]
    ],
    [ //  4 * (16 ** 26) * G
      [11788729, 6112858, 6373946, 13103423, 1294727, 12171004,
       6614197, 1701942, 3651079, 824230, 26360],
      [9162880, 16476765, 4375772, 5708360, 15451372, 5465566,
       8632549, 13939432, 15054887, 13139400, 20669],
      [14672145, 3638126, 14245997, 15733163, 3489301, 3905074,
       12789175, 6598714, 6280622, 6571122, 7637]
    ],
    [ //  5 * (16 ** 26) * G
      [6427261, 8386611, 1413028, 7458172, 10447556, 822204,
       4409634, 7237957, 10449710, 5837345, 3684],
      [12241050, 15073288, 14729879, 15393219, 5040657, 9927805,
       14786535, 15983499, 10683853, 4525923, 14906],
      [3753511, 3092952, 1050511, 14587045, 10301827, 7307320,
       7149465, 13755244, 11118715, 9278355, 12684]
    ],
    [ //  6 * (16 ** 26) * G
      [16776729, 6095658, 6746740, 8332507, 10435657, 10022668,
       14924421, 12359891, 1921812, 8152986, 8780],
      [1954712, 10365355, 3890534, 3419550, 9573976, 7589372,
       16642905, 5604637, 9767670, 4309797, 20634],
      [16328169, 7265446, 3390912, 6560543, 4125684, 4098425,
       8428931, 8580114, 10556297, 15737640, 1471]
    ],
    [ //  7 * (16 ** 26) * G
      [13295627, 1273891, 5846578, 13741263, 4902666, 1869908,
       4837914, 9860112, 2770087, 9225210, 30731],
      [12915428, 10542349, 16672897, 4498938, 15142344, 5390415,
       7049034, 2061454, 107498, 7851502, 22370],
      [5189727, 9092131, 532211, 1312222, 5734333, 2755994,
       1324262, 6193829, 7452577, 1602146, 24564]
    ],
    [ //  8 * (16 ** 26) * G
      [9034653, 527383, 16071054, 15984504, 6299685, 220583,
       4982461, 16423049, 11101886, 252965, 4202],
      [11965760, 4712467, 14804443, 4400656, 6105659, 1210099,
       15284344, 11280166, 10537833, 14388384, 10708],
      [3363792, 700211, 15063469, 11326217, 6725029, 16248888,
       9095304, 3954533, 2932474, 9064709, 19123]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 27) * G
      [2408681, 13364803, 12050394, 4167003, 4473480, 6332165,
       11070001, 14612394, 2653439, 15140418, 26798],
      [10346580, 14870656, 13760143, 10257082, 12323178, 12535267,
       13896365, 484179, 10589598, 2078174, 31643],
      [7457804, 13169012, 12316700, 5738626, 2371127, 7036821,
       9688036, 2586464, 12420603, 13982248, 11539]
    ],
    [ //  2 * (16 ** 27) * G
      [3520730, 13764187, 12057285, 8741451, 14322330, 13438888,
       9518369, 13423306, 16321880, 4320907, 27523],
      [15628882, 10276474, 13876993, 14963946, 14602934, 12261800,
       755624, 3957151, 595672, 11917142, 13849],
      [8570034, 15887106, 11416953, 5222383, 13996786, 13090916,
       8071368, 12045805, 7579863, 8088433, 27282]
    ],
    [ //  3 * (16 ** 27) * G
      [7226966, 11685784, 5971821, 13756688, 2211886, 10712336,
       16723136, 16318271, 13116818, 7076038, 7466],
      [13535467, 4228670, 9211248, 8449728, 14878633, 9427696,
       6360440, 11280976, 870285, 9610298, 1389],
      [4040097, 10589948, 13638405, 4437406, 14133442, 7936119,
       6461393, 449085, 2315255, 11834609, 26363]
    ],
    [ //  4 * (16 ** 27) * G
      [6033336, 5290456, 8090906, 9162505, 11525157, 11102673,
       10715913, 3085990, 11535961, 16752357, 5341],
      [2296278, 628465, 3790551, 15320021, 16458629, 2363867,
       11597653, 4642306, 8666636, 722263, 9994],
      [8793036, 409767, 16671231, 6230443, 13287578, 2800513,
       284113, 9455491, 5957747, 12444052, 6564]
    ],
    [ //  5 * (16 ** 27) * G
      [10887178, 2553120, 16292767, 13571050, 8406083, 15586148,
       4163121, 9069415, 13868481, 12378398, 29371],
      [7783583, 646848, 16138439, 8339027, 8125170, 4375653,
       3271840, 4220451, 11853572, 7686270, 5299],
      [6741063, 3970219, 7253637, 14644781, 6435902, 16241131,
       1601458, 15765006, 701306, 1835632, 20235]
    ],
    [ //  6 * (16 ** 27) * G
      [1659386, 6784984, 8118640, 11702471, 666766, 6779809,
       10501846, 15153199, 13388628, 8679691, 2637],
      [11723327, 2215105, 2783741, 4537845, 15188609, 4746058,
       13226321, 13113134, 685364, 15287358, 26795],
      [8592843, 13026311, 907794, 5069905, 10629335, 319757,
       1993684, 4895059, 16007407, 11626172, 16646]
    ],
    [ //  7 * (16 ** 27) * G
      [13776488, 8012316, 16581349, 962294, 14285661, 4489290,
       2601252, 9784935, 10089265, 3120422, 32633],
      [15002866, 13423929, 11904133, 349626, 10744749, 16264538,
       3773309, 1334836, 1321023, 11869714, 4664],
      [13949220, 7049823, 854920, 3548840, 9465722, 12391008,
       11843978, 15520615, 15942863, 12497374, 10358]
    ],
    [ //  8 * (16 ** 27) * G
      [1328785, 15283555, 16047236, 14032675, 3139744, 11064675,
       397993, 5024384, 10033363, 14416398, 18681],
      [9078264, 11744058, 5821844, 15175037, 10712713, 3481422,
       4546190, 7585695, 4320180, 14144188, 21767],
      [9794300, 2687785, 15604971, 9765584, 9226914, 15104892,
       3412428, 9551780, 11022823, 4725092, 22404]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 28) * G
      [6870419, 2827623, 1301116, 4465354, 12697687, 13507992,
       14010890, 15837195, 8955536, 13741504, 10701],
      [14532764, 13758303, 13555407, 16209757, 2834173, 3457768,
       6103062, 2479467, 15543195, 13024004, 12353],
      [5693768, 15923673, 3018738, 10433899, 15177589, 154797,
       12279660, 1722008, 301691, 12412948, 4171]
    ],
    [ //  2 * (16 ** 28) * G
      [15854951, 16593256, 12734960, 14184251, 8461773, 15916588,
       4392146, 4512860, 2781513, 13391625, 23528],
      [8384867, 10117078, 8497501, 5031766, 2877085, 15882217,
       5037600, 12056578, 470517, 2760955, 8271],
      [15446137, 3882288, 3196948, 12412206, 8983898, 6041973,
       3247981, 6634556, 7935519, 16455618, 9584]
    ],
    [ //  3 * (16 ** 28) * G
      [11933045, 3571500, 7094010, 1889794, 16346998, 2450165,
       2778549, 15255316, 199373, 6679123, 15819],
      [12067930, 11097355, 13703470, 9408592, 15137704, 13186504,
       2984100, 7964394, 99944, 6263262, 9244],
      [14576810, 1517888, 3811544, 2283891, 12528880, 119183,
       14492507, 1497084, 13496549, 974175, 2114]
    ],
    [ //  4 * (16 ** 28) * G
      [6486602, 2141059, 7261695, 14817854, 14751956, 15084375,
       1571897, 14882710, 1534461, 5500860, 3482],
      [15995086, 12799492, 8717144, 2584070, 1268570, 1384886,
       13102009, 6133360, 14387356, 5567265, 1238],
      [12432853, 12654301, 2973309, 9283037, 5562038, 10654249,
       1520436, 1881608, 10033879, 5187096, 19066]
    ],
    [ //  5 * (16 ** 28) * G
      [11624341, 1573471, 9434279, 7035931, 16146228, 1118781,
       8716512, 13499632, 13834312, 806109, 4533],
      [3615307, 11702703, 15869123, 7438663, 14320240, 10416787,
       6588041, 14517381, 14741043, 3228195, 19094],
      [10813398, 2573320, 14264040, 10229110, 9312126, 11793011,
       11943170, 7811912, 7064657, 13520334, 20299]
    ],
    [ //  6 * (16 ** 28) * G
      [2368900, 13523682, 10397471, 9631114, 15364694, 3994662,
       14097642, 13769225, 1835494, 14488759, 29692],
      [10292079, 6385348, 1519842, 13298723, 5665167, 5220068,
       10220139, 4778816, 5857079, 13559137, 12354],
      [10202177, 7371076, 672382, 12378673, 5956461, 1735813,
       2187140, 5025398, 10281430, 7605402, 14494]
    ],
    [ //  7 * (16 ** 28) * G
      [14465486, 11775540, 11363580, 14895312, 5243683, 3677079,
       8217286, 4568048, 5924744, 5470534, 24916],
      [961576, 7927383, 14797245, 2593180, 5966642, 9563621,
       11248027, 6683710, 2504336, 2483670, 9668],
      [14147182, 435953, 540478, 9307683, 16348711, 7108414,
       2510474, 9180406, 4736857, 10520853, 25913]
    ],
    [ //  8 * (16 ** 28) * G
      [13825907, 2061507, 4581842, 2475112, 5264449, 10367937,
       15268281, 6442588, 13441132, 14985925, 4549],
      [12274201, 14406676, 9362884, 9978447, 11713596, 7432473,
       14104266, 4761759, 1686928, 3280624, 3941],
      [16638150, 13742538, 8508550, 1456977, 4187875, 9673295,
       916210, 5875887, 3344170, 13090284, 19627]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 29) * G
      [3109928, 11074387, 7476986, 4629730, 13905568, 10780891,
       3902366, 5453669, 9912067, 9728547, 16485],
      [5546052, 10591258, 12318656, 7847327, 1859108, 2716234,
       1137394, 10937290, 3055117, 12293439, 6169],
      [274052, 12286302, 1329551, 7772343, 907418, 6460797,
       10758142, 9173771, 2098468, 8578849, 14010]
    ],
    [ //  2 * (16 ** 29) * G
      [4582465, 13350722, 1496590, 3421319, 10217630, 8707837,
       16704546, 13181962, 5447092, 16140496, 17522],
      [2576085, 10291799, 1558742, 6324299, 12222514, 14658629,
       1057365, 14630106, 635705, 2171687, 30674],
      [11375832, 7172196, 6506890, 10155554, 11913469, 4322469,
       345537, 9218285, 2962828, 12501862, 11363]
    ],
    [ //  3 * (16 ** 29) * G
      [7895381, 887786, 12025830, 11924481, 14422398, 6082233,
       10098997, 9553856, 4374239, 3077524, 8809],
      [8845503, 9124485, 15768145, 13349270, 15145718, 6091422,
       15114808, 11142693, 14141649, 2193117, 7659],
      [6737772, 13736480, 14124387, 5098620, 1834380, 9396800,
       12504333, 14251686, 7909470, 14119842, 26575]
    ],
    [ //  4 * (16 ** 29) * G
      [4121717, 3275503, 9604588, 10363645, 14417802, 13283737,
       5852710, 5319953, 4395193, 5644012, 3294],
      [5134442, 11109722, 8269151, 4832939, 16316324, 3396453,
       14545437, 11142989, 13344238, 12218907, 6236],
      [14928705, 10331124, 8295302, 4257687, 234229, 3900351,
       16568390, 156164, 15494893, 1734302, 16073]
    ],
    [ //  5 * (16 ** 29) * G
      [8480429, 16210935, 11476637, 15404247, 16623672, 16353357,
       14205418, 12189742, 15940860, 14368273, 5118],
      [10698799, 3127216, 11014061, 16476660, 6381259, 15377990,
       13157880, 16205244, 9758870, 11041098, 31327],
      [13461409, 9415187, 1528469, 9165749, 6217857, 4567958,
       11153032, 1500557, 10082959, 3767636, 13693]
    ],
    [ //  6 * (16 ** 29) * G
      [12242540, 10510256, 1973951, 1879962, 3432972, 11934409,
       12852610, 13399836, 16207852, 10578597, 11668],
      [4979704, 11318297, 10045469, 12248450, 7857137, 7512141,
       3046675, 2028641, 16738785, 8814192, 14989],
      [11532632, 13458773, 2191192, 7689847, 4106844, 2260410,
       10064229, 7717155, 15905630, 1262530, 27070]
    ],
    [ //  7 * (16 ** 29) * G
      [9947434, 1924833, 10423817, 2704657, 5308831, 15309903,
       12185652, 1324665, 2410134, 1125965, 32136],
      [4951523, 12430440, 1606331, 4180487, 16041936, 11184290,
       16507030, 3374994, 5796726, 5082211, 8205],
      [9679659, 15551304, 6561930, 12474809, 16511550, 15009598,
       11590565, 14115550, 12426644, 8115841, 26976]
    ],
    [ //  8 * (16 ** 29) * G
      [14556385, 135272, 2094782, 974012, 13965543, 370152,
       13638485, 14938109, 15482832, 3363795, 13814],
      [2337026, 3921043, 5454719, 7023726, 2209110, 5416828,
       16071288, 15055503, 9358848, 7841155, 10428],
      [6127670, 7907554, 9462714, 9712436, 6626816, 15020643,
       2107532, 4773935, 11892004, 11270710, 14897]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 30) * G
      [10226222, 9839624, 3679134, 3866183, 4768960, 10562247,
       2782799, 1563629, 1869186, 9695282, 25499],
      [7918217, 7900991, 10469519, 10567757, 3188524, 13409790,
       16568165, 15890315, 13312033, 9967194, 32484],
      [1155523, 582545, 9010133, 8425588, 2855124, 16587051,
       12758642, 15192750, 11928230, 4799621, 3807]
    ],
    [ //  2 * (16 ** 30) * G
      [10181224, 8476761, 962252, 15445474, 5721871, 8325098,
       7611062, 5235741, 10309556, 9626369, 16443],
      [7749907, 12898948, 3499879, 16250360, 9453631, 12508832,
       16435942, 1871823, 14656361, 808145, 1216],
      [4611320, 3113355, 16272834, 1343727, 10548058, 14047089,
       11338951, 11462847, 6387444, 11610802, 13659]
    ],
    [ //  3 * (16 ** 30) * G
      [9681908, 6605940, 12822302, 15508400, 12420313, 15173093,
       850437, 682949, 3064594, 8466968, 3995],
      [9204504, 14337882, 1155841, 11783850, 9438109, 4140525,
       12532654, 7276412, 5418382, 15399136, 29976],
      [8350770, 5882907, 10003592, 16005170, 2973884, 13752591,
       2738609, 1578409, 1529284, 8854459, 18371]
    ],
    [ //  4 * (16 ** 30) * G
      [15486792, 5478257, 7229764, 13208669, 373117, 13003768,
       1722307, 16212673, 4626908, 10192246, 184],
      [5269168, 6115528, 11598822, 11772569, 15516848, 15261794,
       15352858, 15021908, 13929823, 10497256, 2302],
      [14609104, 14513768, 2327117, 4941917, 6571296, 14050760,
       13458825, 11867343, 7722295, 2729807, 18232]
    ],
    [ //  5 * (16 ** 30) * G
      [7980056, 14316870, 15762130, 11690381, 3921880, 15403750,
       2403399, 3497711, 3393204, 6835272, 8312],
      [3736265, 5454509, 9380825, 15663960, 12770766, 3126372,
       9490401, 1385843, 14996368, 9129284, 27750],
      [7897612, 13574522, 9911112, 8464190, 6949554, 15563767,
       10980494, 11103333, 9061183, 10880335, 29713]
    ],
    [ //  6 * (16 ** 30) * G
      [10340461, 10302137, 1396069, 6306545, 5037173, 14977028,
       2940098, 11750513, 8467711, 6649083, 31763],
      [11630004, 15023384, 153498, 15962785, 7418201, 3536232,
       12197615, 8672748, 9189775, 11039301, 7881],
      [10637467, 10802176, 11843814, 772226, 8509186, 7692699,
       10219925, 5760972, 13460576, 8955335, 15069]
    ],
    [ //  7 * (16 ** 30) * G
      [3529970, 5730486, 12364681, 16149535, 14675820, 13731586,
       6864566, 8737538, 8887924, 2751692, 9369],
      [3747910, 10015833, 15500738, 6288985, 8271256, 7223951,
       2814710, 1911970, 436000, 1126820, 25018],
      [9801769, 10547478, 9020368, 12222141, 3894124, 3344130,
       4073080, 8122714, 14216423, 3214523, 22048]
    ],
    [ //  8 * (16 ** 30) * G
      [3462723, 9651017, 16077449, 10818082, 14415878, 1843897,
       9421812, 9399687, 10327856, 6957645, 14183],
      [14845398, 11924599, 9659974, 7114593, 15269735, 9755968,
       1158069, 10939507, 9235533, 4649829, 32456],
      [10628807, 9387805, 1284958, 7078349, 990583, 10467347,
       13607576, 2182287, 10198485, 16196409, 28074]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 31) * G
      [6456676, 4871696, 3430686, 11056351, 4962428, 9323306,
       7530403, 14559781, 15008878, 11262462, 15549],
      [13709424, 12311852, 10387886, 16275982, 3031845, 16698262,
       11193055, 14586769, 12726502, 8378962, 21271],
      [12181113, 9897552, 10201020, 12779957, 1222651, 14912573,
       6869866, 156974, 6396380, 3769178, 31191]
    ],
    [ //  2 * (16 ** 31) * G
      [3260861, 5109313, 2283829, 8842328, 8426657, 15975029,
       1238105, 4482286, 1258114, 16573643, 27665],
      [5838647, 14258701, 14033353, 15316076, 15352274, 12569243,
       2100617, 14814852, 11427832, 10458222, 31193],
      [6763013, 4732264, 7139707, 3975897, 8252136, 14911032,
       16602879, 6403185, 4564377, 1152439, 12660]
    ],
    [ //  3 * (16 ** 31) * G
      [8009227, 102583, 190673, 10065383, 12157728, 4696729,
       16316930, 12406751, 13855367, 14894304, 10098],
      [172103, 12216379, 13113336, 16707510, 2171030, 13361744,
       14816598, 7345051, 9998683, 4497693, 8254],
      [12182431, 4110903, 2348678, 7486298, 6013289, 483856,
       5875292, 1068900, 5060820, 5319003, 22137]
    ],
    [ //  4 * (16 ** 31) * G
      [226596, 14026259, 6968159, 11598786, 1093110, 9481954,
       10167273, 11308298, 3136505, 5048535, 18208],
      [4934015, 3060493, 8849188, 12172492, 16343814, 7292190,
       3463185, 3642633, 4217604, 9265665, 1350],
      [3303390, 6662649, 9044213, 12637582, 13621133, 14847694,
       14480152, 10622434, 6501202, 15634843, 17817]
    ],
    [ //  5 * (16 ** 31) * G
      [14739307, 2148976, 9753538, 15376176, 2878040, 1213105,
       13157159, 2706910, 13750312, 3793313, 3125],
      [1762681, 7170950, 14462068, 16166569, 11208272, 7162929,
       1130533, 2366822, 2205150, 6194493, 12104],
      [537587, 4490140, 8663703, 13806532, 15082879, 8918895,
       8473397, 5449681, 4188604, 2459017, 25969]
    ],
    [ //  6 * (16 ** 31) * G
      [10883425, 3127090, 11050000, 3462432, 9310429, 9533156,
       5533594, 3562595, 7299078, 16665604, 13046],
      [585279, 10427351, 13664706, 11428871, 13326853, 15443933,
       14144163, 9940673, 13961265, 5380753, 5520],
      [9505484, 10559175, 11419811, 15822119, 1302520, 9819280,
       14199729, 1742624, 11109475, 16663854, 7097]
    ],
    [ //  7 * (16 ** 31) * G
      [13979550, 14241971, 12708305, 14683443, 6266046, 13020205,
       5677135, 5358278, 1883337, 9563708, 26048],
      [3568764, 7116236, 905054, 7015363, 4325715, 8056873,
       8187513, 4537030, 9155529, 6992682, 24238],
      [15800554, 6689044, 11366531, 9712796, 3651707, 10436651,
       1881321, 7500789, 14112408, 11098147, 30882]
    ],
    [ //  8 * (16 ** 31) * G
      [9185998, 7530844, 4956848, 6626972, 13630614, 11807593,
       16270055, 4469390, 11198131, 9879842, 24025],
      [16265735, 3949150, 11908338, 13216052, 16291027, 8910763,
       1260029, 13660300, 1466672, 7901463, 6262],
      [807036, 6221927, 12554843, 12139571, 10209346, 16257,
       10121437, 1079598, 2677876, 4946542, 22957]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 32) * G
      [4046407, 7693035, 12083002, 9354656, 15349844, 7510519,
       3229044, 50149, 2610513, 15329046, 4868],
      [11374242, 311212, 8673339, 1346536, 12010472, 12966697,
       3868688, 2825816, 11778986, 4842894, 11092],
      [14458110, 1364586, 751768, 9128157, 1813311, 12978748,
       16775545, 14290913, 3004051, 14560636, 17512]
    ],
    [ //  2 * (16 ** 32) * G
      [1656478, 3497620, 5525947, 2350535, 15129676, 10052147,
       14042239, 9676214, 4504931, 8155131, 27854],
      [6490062, 14206712, 2640794, 4414732, 1127729, 7810081,
       12936570, 13936742, 2388818, 4357731, 23974],
      [11281098, 13011166, 16259732, 12299807, 421623, 5771193,
       3706201, 8957324, 10431656, 10141671, 22770]
    ],
    [ //  3 * (16 ** 32) * G
      [15154792, 13609869, 10873102, 3636854, 225183, 5866068,
       769537, 15747419, 15998518, 2737319, 22390],
      [970230, 6602609, 3951450, 4598825, 5039416, 3848625,
       5690635, 3556304, 5982320, 3613720, 27385],
      [13019272, 148745, 7549472, 4937097, 14693907, 2662354,
       2309171, 8643126, 11452815, 2472716, 28703]
    ],
    [ //  4 * (16 ** 32) * G
      [6384877, 11598052, 8242088, 10364328, 26126, 10853623,
       2094268, 6415110, 12848105, 9617341, 11788],
      [12501267, 16177532, 14982424, 7651291, 4851430, 6346372,
       2272334, 2160053, 9789009, 6013008, 29194],
      [8411701, 607131, 16518207, 6439595, 5147447, 9651944,
       15948834, 6886423, 5173484, 10271508, 3739]
    ],
    [ //  5 * (16 ** 32) * G
      [5709997, 13930491, 981946, 14416141, 8491371, 4440046,
       5399381, 13926705, 3374040, 322367, 8721],
      [11648750, 10212701, 12160494, 684607, 12823351, 14127561,
       12524648, 4499697, 16596190, 4462876, 13933],
      [12356628, 1524722, 3907132, 11896172, 14296828, 16488238,
       944295, 13416495, 5845572, 10806972, 16743]
    ],
    [ //  6 * (16 ** 32) * G
      [16131840, 10299510, 15426619, 947816, 1940800, 427101,
       205308, 1788739, 5579882, 12287522, 31032],
      [13537262, 2516472, 2933438, 15237334, 6815508, 5172969,
       8269622, 15806062, 8311542, 3371211, 13491],
      [8509132, 9563782, 5492165, 15566247, 135324, 8946638,
       12671104, 15561861, 16672228, 16543277, 4470]
    ],
    [ //  7 * (16 ** 32) * G
      [10248603, 7131227, 8434863, 11707780, 14666228, 5096493,
       191465, 4018085, 8216372, 3820647, 2300],
      [7802552, 14846281, 10738576, 11334720, 16501802, 8887192,
       16703191, 2176335, 6882998, 4084978, 8042],
      [472298, 12687827, 14049444, 3216988, 12617142, 8557888,
       2357081, 14824254, 12124369, 11338006, 20271]
    ],
    [ //  8 * (16 ** 32) * G
      [11423316, 11682196, 7095486, 1595375, 5512273, 301151,
       2963085, 10886763, 3078059, 8692887, 17492],
      [3913272, 14228919, 562732, 16519836, 358314, 1477094,
       3797942, 7299483, 4517505, 10051369, 13393],
      [15367548, 16568479, 16159058, 11572060, 8481940, 6045770,
       11159336, 2461338, 2659255, 10266116, 4280]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 33) * G
      [6578213, 4353595, 13605674, 3693796, 1208720, 15353138,
       12770669, 10640639, 11066997, 9441470, 1600],
      [13847200, 14603897, 10475132, 13389235, 761536, 1642444,
       5694301, 10827172, 2060271, 14281462, 11781],
      [1829721, 9444054, 705607, 15064200, 2038204, 6825830,
       8566730, 2386004, 14712614, 7834863, 10556]
    ],
    [ //  2 * (16 ** 33) * G
      [430230, 10383367, 9012864, 15000833, 14113557, 83882,
       1417754, 521047, 8478046, 15986962, 1159],
      [2093568, 9819809, 13178567, 11622421, 7393506, 9811403,
       2136915, 9040531, 14973775, 12767281, 20664],
      [9062754, 788486, 10111029, 5310764, 16633939, 13163887,
       4894575, 1552207, 14394763, 5485884, 19205]
    ],
    [ //  3 * (16 ** 33) * G
      [3342201, 16563739, 10198117, 242959, 7727775, 15075051,
       7105543, 16575786, 7436552, 7132497, 13584],
      [12669652, 2169639, 3784453, 12393206, 12740681, 11245662,
       11177583, 6163244, 12388416, 9166160, 1356],
      [13567805, 11611933, 7747744, 12056226, 6334627, 5216843,
       2478912, 16700844, 377385, 2973269, 29416]
    ],
    [ //  4 * (16 ** 33) * G
      [14173384, 6914032, 4811531, 14252491, 1243228, 991163,
       13025754, 13804865, 13529617, 2369880, 31612],
      [7806210, 13499753, 8257753, 7142385, 161485, 3065665,
       7085233, 4998448, 5245025, 12523047, 10327],
      [92318, 9453313, 368417, 12551696, 7987155, 990167,
       6241771, 10560238, 5898452, 16272200, 20749]
    ],
    [ //  5 * (16 ** 33) * G
      [7840250, 3390354, 3646785, 6527250, 15481698, 15817332,
       14431698, 1719380, 8567354, 7423204, 11572],
      [704862, 13141959, 3286195, 16482743, 15967575, 13376432,
       3138936, 10169566, 11882382, 15533827, 19703],
      [16510479, 8152472, 2976724, 11228606, 4666338, 1099166,
       2364022, 1086454, 10611364, 14838480, 19973]
    ],
    [ //  6 * (16 ** 33) * G
      [5447456, 7037515, 12311195, 7819418, 10122766, 13336642,
       2287651, 14412277, 823170, 1595016, 24975],
      [9430720, 13071329, 6625331, 13879410, 12874010, 11699171,
       5177622, 3931452, 13454776, 8871604, 6485],
      [3774361, 14585614, 7892390, 4259233, 14031524, 6544762,
       1072693, 11742424, 14893230, 12496426, 5622]
    ],
    [ //  7 * (16 ** 33) * G
      [15481442, 13306929, 12748331, 1128691, 928581, 12756097,
       12073434, 7900868, 2790017, 6842286, 10487],
      [4579861, 1014674, 12303002, 14257165, 6840621, 11542771,
       13365792, 3048676, 14225114, 3139938, 27561],
      [8708778, 16344408, 10829389, 14406757, 6487003, 15017149,
       11144681, 14113132, 11645911, 4377778, 28288]
    ],
    [ //  8 * (16 ** 33) * G
      [2673262, 3942862, 4059405, 16561673, 13845824, 2965434,
       14131946, 15155822, 15898809, 10309199, 2223],
      [5382014, 6632982, 12195120, 9838653, 853688, 555366,
       12342367, 2963849, 15456176, 241528, 19283],
      [12369384, 10929086, 9007864, 14432910, 1034826, 14645839,
       15255487, 7317972, 6442679, 2975643, 3535]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 34) * G
      [1583260, 4671895, 2506073, 2380607, 15464645, 15668498,
       13309123, 156351, 12013966, 7918967, 8376],
      [4583534, 4308570, 6649145, 7183455, 8171245, 5355216,
       10253055, 1144683, 871849, 13752815, 6098],
      [4144746, 11474951, 6891506, 14111248, 4187417, 8957,
       2899110, 2286519, 6669991, 5202892, 29217]
    ],
    [ //  2 * (16 ** 34) * G
      [501395, 8339539, 9811171, 3093351, 10949847, 1087915,
       10974070, 14089168, 7457737, 4769153, 24543],
      [3877321, 12040692, 7675293, 5198223, 361034, 10339542,
       12398895, 15908978, 1394096, 11306330, 7972],
      [9766314, 537230, 15606998, 791584, 4768209, 2466375,
       6031099, 13107172, 14915046, 7577130, 186]
    ],
    [ //  3 * (16 ** 34) * G
      [8884438, 10018396, 14637358, 4571810, 12564435, 10035941,
       6355380, 1137211, 11368691, 3817063, 808],
      [8960806, 2553322, 16494148, 8689467, 424409, 5132342,
       796265, 6070019, 1626662, 8251349, 29225],
      [833849, 1951678, 8407076, 9134896, 15833933, 9635890,
       852520, 13885385, 2562373, 2713670, 1505]
    ],
    [ //  4 * (16 ** 34) * G
      [10242394, 15643437, 8174210, 15805369, 15714556, 13754574,
       11441077, 11546027, 6917531, 826387, 14784],
      [2901328, 12306468, 14265791, 13643905, 13110508, 14652092,
       10941896, 8664422, 5819980, 2478978, 30927],
      [4758888, 7048753, 8852910, 10234864, 8723627, 16385450,
       9957454, 13215578, 4192306, 5375851, 107]
    ],
    [ //  5 * (16 ** 34) * G
      [9795612, 13623709, 14821856, 9855760, 8511256, 7027126,
       13856849, 5758777, 13066530, 14894139, 19799],
      [13502509, 8263353, 2749899, 4291260, 520524, 10988340,
       13511668, 13939563, 10450382, 15291930, 32226],
      [10837707, 13956278, 10083952, 6129115, 86655, 10125640,
       4248558, 14404036, 6302189, 9482010, 27434]
    ],
    [ //  6 * (16 ** 34) * G
      [15081111, 16055450, 13723939, 14696287, 3483677, 13708631,
       4450029, 10970286, 2965066, 16050641, 24536],
      [11720714, 15934555, 10188779, 3127559, 3152711, 7549912,
       15879406, 12994534, 7086345, 1230887, 18008],
      [1073881, 12497450, 1461571, 3682780, 6683509, 6870896,
       8117801, 1576266, 11626384, 2894620, 1459]
    ],
    [ //  7 * (16 ** 34) * G
      [5089533, 6212818, 8636608, 385007, 13572780, 13459873,
       15891961, 14401263, 4660889, 5677947, 15189],
      [13992341, 10759290, 13432828, 4404211, 1321070, 9936178,
       865291, 11977373, 7538657, 1722454, 12663],
      [5100674, 12920033, 11940528, 1715108, 11751764, 5960685,
       4728875, 10735968, 7550699, 7983738, 20416]
    ],
    [ //  8 * (16 ** 34) * G
      [12529535, 3715209, 10965449, 188393, 9944421, 14963492,
       10254464, 16777152, 16354962, 6803146, 4677],
      [8832269, 9126924, 5364788, 13407462, 3656649, 3979539,
       5071934, 6562551, 14929160, 7389882, 9233],
      [12874676, 11240970, 3489785, 70628, 9510382, 12890096,
       6351814, 4908880, 8847373, 1218156, 16262]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 35) * G
      [9796580, 5440503, 4525212, 14714305, 12786208, 20643,
       7458949, 11563549, 783066, 3739307, 2746],
      [9206771, 14679651, 9786015, 3705673, 2858592, 149983,
       5184429, 14690227, 16413933, 3131833, 31689],
      [1759737, 15675008, 3841943, 7974874, 6913364, 7032963,
       16760153, 15271603, 4176096, 2832349, 615]
    ],
    [ //  2 * (16 ** 35) * G
      [558564, 13273894, 1853618, 8565580, 2649068, 9401508,
       2496501, 9666074, 2925221, 2083755, 29725],
      [9218037, 10955065, 14413467, 8013897, 10266149, 4514283,
       13532869, 2747177, 3597000, 10624759, 9004],
      [4180759, 4341029, 1359713, 16398827, 8404202, 13086472,
       14653521, 15828482, 14893387, 15966281, 1024]
    ],
    [ //  3 * (16 ** 35) * G
      [6407515, 292538, 1485774, 12899223, 10737367, 2951478,
       14018776, 7254617, 14112507, 7793028, 3217],
      [7240454, 10752672, 6303483, 2919717, 6784325, 9553684,
       15455866, 14653203, 8302067, 706325, 12931],
      [3631592, 2783927, 2887288, 7713166, 10509688, 15393028,
       2550732, 2708050, 15444000, 5211011, 3449]
    ],
    [ //  4 * (16 ** 35) * G
      [1382132, 16108446, 4587317, 6589102, 8412111, 10417134,
       2865466, 15783740, 9610946, 782880, 2427],
      [10674604, 5040039, 12024804, 16437688, 2087230, 8166209,
       14093663, 1520801, 2611990, 9577265, 3429],
      [11130675, 11212065, 2475147, 14031547, 12774122, 4392358,
       1885899, 6446188, 15415911, 1043091, 32713]
    ],
    [ //  5 * (16 ** 35) * G
      [6052134, 15859231, 15991816, 3876235, 9383774, 1468698,
       10681799, 4237649, 9131902, 15635401, 26008],
      [8172093, 14595484, 5162279, 5449792, 5476713, 2914965,
       8486095, 14042002, 14219793, 8236023, 27881],
      [16237711, 11068686, 3286453, 7285989, 6304785, 15022059,
       7595325, 12969809, 1227523, 10461324, 29457]
    ],
    [ //  6 * (16 ** 35) * G
      [15836363, 1217619, 8908080, 13169975, 15081929, 15186364,
       1259710, 16436011, 11027084, 7965342, 12325],
      [16021325, 12143905, 2586693, 7903159, 6484332, 5385151,
       12598358, 6756439, 6427154, 11031189, 15574],
      [15509913, 14586426, 3096556, 6482113, 11164416, 9100989,
       16553624, 6797725, 6688822, 12593234, 16210]
    ],
    [ //  7 * (16 ** 35) * G
      [1266118, 10784298, 14155754, 16416595, 6440788, 14545192,
       15037826, 744361, 9874521, 1067942, 24768],
      [12850886, 12556782, 7443032, 11129590, 9064471, 10791852,
       11212510, 6460745, 595305, 15228057, 1488],
      [10272407, 14688478, 7603485, 11865039, 523350, 14640634,
       10424081, 3640556, 9887309, 3959211, 13957]
    ],
    [ //  8 * (16 ** 35) * G
      [15964973, 12115576, 15480537, 11028409, 4386161, 4185727,
       14055869, 2366673, 16502379, 5237906, 27248],
      [12969918, 12628218, 12469299, 4983004, 4959877, 9411442,
       12863127, 15856204, 8544200, 16739682, 18954],
      [611073, 16490081, 16312599, 172178, 188308, 1641409,
       16120422, 12519906, 14482999, 638688, 26641]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 36) * G
      [2756062, 838008, 8738202, 15364483, 1953202, 2329685,
       5976559, 8348294, 7561533, 10974841, 20554],
      [298259, 16579126, 14523416, 7571869, 1416627, 13675049,
       761746, 14458677, 9050580, 8318599, 9973],
      [8908721, 2938198, 8064171, 2390769, 8442210, 2385745,
       3428186, 8765786, 12202089, 9715101, 16449]
    ],
    [ //  2 * (16 ** 36) * G
      [15453334, 15645251, 11518912, 2550428, 7642268, 13420173,
       15604855, 14285461, 8664079, 10606966, 5152],
      [7121629, 7816098, 13519649, 6589111, 10925092, 13230919,
       7996411, 13311311, 53273, 3228312, 4825],
      [3627343, 7838163, 8061126, 11680420, 3952960, 15963486,
       5563231, 4462632, 5873682, 9580867, 6991]
    ],
    [ //  3 * (16 ** 36) * G
      [1378641, 1088905, 6962780, 3008873, 13564561, 3153977,
       4167519, 2157284, 1256878, 5712511, 9115],
      [9987761, 3158180, 5845967, 2187080, 2061266, 16053797,
       4215262, 11240106, 10101750, 9557359, 24561],
      [2986088, 13906860, 2326942, 6277509, 8629113, 15416616,
       8410515, 15680882, 9385675, 5401205, 524]
    ],
    [ //  4 * (16 ** 36) * G
      [14212028, 3471518, 7108504, 14449828, 15903481, 11564232,
       14459873, 11096652, 3225719, 13387285, 682],
      [4377737, 15686128, 11987249, 9310795, 5807261, 5871404,
       9088711, 11389153, 181516, 16648790, 17708],
      [7895007, 16228452, 10454688, 942204, 12870695, 1165755,
       2486779, 11212778, 4949883, 8223536, 19707]
    ],
    [ //  5 * (16 ** 36) * G
      [10188286, 4025528, 8417972, 10250972, 13014233, 5021524,
       3620579, 12108714, 480100, 6433593, 5300],
      [9039634, 10076823, 909958, 14636825, 7261553, 7393323,
       5762249, 12796872, 5061317, 5028931, 23325],
      [696102, 2495948, 15054587, 12094924, 5180971, 10945850,
       9122665, 1245513, 5844433, 16192088, 12184]
    ],
    [ //  6 * (16 ** 36) * G
      [1023574, 10964149, 2100372, 9342483, 2094249, 1009499,
       2196016, 10103500, 436985, 14830040, 14954],
      [5547777, 11420751, 14560786, 11127767, 16662256, 6152444,
       882051, 13549449, 6374740, 6482407, 7552],
      [9469018, 14321065, 6448506, 9550095, 960693, 11856154,
       16506676, 9244189, 15884275, 9234606, 10635]
    ],
    [ //  7 * (16 ** 36) * G
      [16190642, 7951343, 7744146, 7935344, 9029930, 13593163,
       8007847, 9705541, 6087813, 11026509, 13496],
      [2188766, 7531018, 16155514, 774009, 11208628, 11431999,
       13072184, 5379638, 10999772, 2562051, 27558],
      [6894389, 15512963, 16630382, 6534654, 11015135, 2454485,
       10134706, 10654634, 6167658, 2874694, 29142]
    ],
    [ //  8 * (16 ** 36) * G
      [7921536, 13379795, 11822387, 659364, 14369657, 14310134,
       16381697, 14902367, 1518500, 15931379, 29909],
      [16211701, 11918001, 16108845, 1486949, 8361423, 15762903,
       15351625, 1333023, 2829117, 3547430, 7219],
      [14273153, 15029351, 3647599, 2828684, 9141365, 6437689,
       9626540, 14314760, 15325580, 13387079, 19179]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 37) * G
      [13769335, 5927429, 13914903, 13875508, 12600354, 15391920,
       4971869, 11393522, 1113996, 4646559, 1871],
      [5874757, 11666592, 986601, 4921261, 6075562, 12933089,
       5382009, 14793708, 7407643, 15841744, 9779],
      [9148688, 4290305, 4243963, 7081953, 15343836, 13041574,
       15156052, 14049779, 10698874, 7530225, 24267]
    ],
    [ //  2 * (16 ** 37) * G
      [5897038, 10689314, 3122453, 2869957, 6353815, 5557001,
       15502644, 15578415, 7782425, 2564292, 14382],
      [15231383, 14747368, 8650474, 10014867, 6501247, 15462296,
       961030, 9728072, 12960464, 6854868, 907],
      [13521062, 12918154, 4780945, 11414825, 4378809, 13271089,
       1736484, 14372186, 2428584, 12225369, 8622]
    ],
    [ //  3 * (16 ** 37) * G
      [4216112, 3880143, 16196849, 4393098, 4516426, 10781244,
       1507334, 6149573, 723053, 12122249, 4494],
      [556835, 3539184, 8672133, 14318935, 4593785, 6840396,
       14595103, 7009027, 8132845, 1492418, 2620],
      [9731901, 10229708, 8067044, 11190738, 13036966, 9328332,
       13545712, 14639250, 6800235, 11788844, 18697]
    ],
    [ //  4 * (16 ** 37) * G
      [16658057, 8776291, 15506588, 955410, 1814417, 16677822,
       9078523, 9403306, 9866092, 8364015, 4017],
      [7337550, 6714992, 4020641, 886437, 12145629, 759312,
       15126108, 5785825, 7867496, 7923474, 11659],
      [12816427, 12988079, 2652629, 9037831, 3809618, 2144631,
       4251905, 12815078, 2824813, 2322811, 2478]
    ],
    [ //  5 * (16 ** 37) * G
      [5048380, 1649230, 9616234, 10721, 11329635, 12249908,
       5876474, 9970778, 9960108, 9083610, 28060],
      [3322320, 9413037, 2363563, 14841739, 11332891, 15273961,
       12597053, 11044203, 10828182, 6151645, 26355],
      [10056483, 10156836, 3068541, 16183325, 12050558, 13401883,
       3011886, 2860871, 7314888, 10178404, 769]
    ],
    [ //  6 * (16 ** 37) * G
      [5457357, 8828246, 6948001, 12370961, 15164944, 2770414,
       11827451, 6855795, 6911250, 13369189, 14461],
      [11787371, 11670758, 6663945, 11369775, 7697333, 2338879,
       8917002, 13638105, 6043127, 6530443, 14635],
      [508421, 11394204, 8274067, 16069315, 6667797, 4205253,
       16586115, 6544364, 3015470, 2837231, 24946]
    ],
    [ //  7 * (16 ** 37) * G
      [12404655, 11206380, 589842, 1889379, 10643195, 13053013,
       6818151, 15860715, 3937321, 3753162, 14691],
      [13307452, 8017281, 6936240, 14238793, 1044486, 14294825,
       6952668, 550923, 450137, 13809498, 21864],
      [3657697, 12094491, 15961356, 342040, 11969955, 14244101,
       309127, 15919548, 14516068, 10560666, 27627]
    ],
    [ //  8 * (16 ** 37) * G
      [11645251, 23717, 10624262, 8376781, 5008312, 16770925,
       7754748, 7271830, 13508261, 2746561, 2428],
      [16098619, 15513923, 15883324, 442509, 13215261, 5523356,
       10126729, 13613667, 15769557, 5957645, 23172],
      [15439050, 8240733, 4738281, 9203868, 13673528, 13670200,
       13934953, 12861134, 15042499, 4849655, 2578]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 38) * G
      [7143881, 465703, 7344880, 8832140, 12106437, 16493031,
       10187222, 5441554, 4044690, 16513370, 23944],
      [5551632, 9281139, 7211840, 6006875, 7025235, 10618752,
       215640, 14411322, 10608428, 14278089, 5947],
      [5796575, 990974, 12659536, 13908248, 14047278, 3858520,
       9357671, 15133991, 10396441, 13439921, 1761]
    ],
    [ //  2 * (16 ** 38) * G
      [1470243, 11358575, 12468432, 2075498, 9319059, 560657,
       1351757, 4186974, 14770790, 6305062, 12416],
      [5964627, 11494046, 4671275, 2592004, 11144080, 12527419,
       4625987, 817247, 8616723, 6953613, 32570],
      [4030475, 4471133, 16185318, 13173229, 11064661, 6502805,
       3168556, 6868344, 5320830, 16641326, 12496]
    ],
    [ //  3 * (16 ** 38) * G
      [1192883, 5053170, 10281049, 15780941, 14411662, 10123035,
       8359753, 6907160, 628840, 1318956, 2706],
      [12076880, 9903720, 13606068, 6710459, 9794089, 4271008,
       2519802, 6065639, 12945881, 541521, 17941],
      [12165166, 1687726, 11451536, 1442636, 13046029, 3337301,
       91545, 945653, 13262334, 862357, 15306]
    ],
    [ //  4 * (16 ** 38) * G
      [6120100, 3259452, 6308080, 13627514, 16550718, 11879705,
       10621711, 9967677, 9376717, 14605742, 22065],
      [13369791, 9352862, 7314536, 10896521, 12354477, 10478320,
       6250362, 13249941, 15893057, 11797389, 20136],
      [13292034, 4590321, 8596205, 10783982, 3166981, 1728326,
       4540913, 9511287, 2925667, 602196, 9422]
    ],
    [ //  5 * (16 ** 38) * G
      [442630, 9500157, 15867880, 6129680, 12871733, 11484853,
       16674444, 8550408, 448331, 14926474, 16852],
      [15928197, 10573309, 10764239, 3553070, 16193166, 16270546,
       14574738, 11722852, 5194368, 2664242, 21657],
      [15604270, 3319651, 15397486, 13787133, 9561271, 5073326,
       3920255, 12336083, 14483306, 6741696, 18715]
    ],
    [ //  6 * (16 ** 38) * G
      [15348391, 11615687, 10000629, 8263387, 14022860, 14239715,
       5426168, 11274943, 6218924, 3723464, 2291],
      [14312609, 4886224, 4945392, 6808104, 2239663, 8103149,
       7937915, 8533155, 101223, 12103863, 19702],
      [1733565, 11018649, 8045443, 14627340, 2604033, 7365547,
       1803383, 12664115, 494233, 4883179, 21261]
    ],
    [ //  7 * (16 ** 38) * G
      [16336933, 3551457, 5898316, 9218899, 2979878, 16747390,
       2346116, 13060131, 1536185, 7683856, 26090],
      [10141598, 7554412, 8416617, 4784296, 8368892, 12079141,
       1231055, 2862324, 12565851, 15196172, 3507],
      [615267, 16531170, 7028070, 6403531, 14036095, 3873409,
       4330308, 1031684, 14787035, 15472929, 676]
    ],
    [ //  8 * (16 ** 38) * G
      [2406562, 2464315, 12082406, 4566944, 5733068, 7354296,
       15240096, 13421542, 7866815, 3952914, 15636],
      [13597023, 6382321, 15922632, 2551383, 9209369, 3504145,
       8723462, 1515812, 425935, 2842092, 14033],
      [1394007, 2593145, 660077, 16545850, 14978908, 10202325,
       15261463, 3587510, 11020377, 1542235, 12021]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 39) * G
      [1969482, 4426961, 559293, 4443379, 13328653, 8113200,
       3641747, 14719502, 11629068, 1268517, 17753],
      [7184873, 3572604, 12459684, 2079165, 12683695, 13719033,
       16567901, 3158017, 5750354, 13213372, 10407],
      [13737629, 9673192, 16759037, 9839651, 8491467, 4367248,
       14108615, 11712840, 16467140, 3286743, 14323]
    ],
    [ //  2 * (16 ** 39) * G
      [6254088, 8873909, 134574, 5972026, 4436915, 9206090,
       7241903, 14905946, 6268835, 8376688, 3962],
      [2208029, 2446280, 14627729, 4317953, 15549122, 2293094,
       1118274, 421836, 9574031, 3883457, 12410],
      [11885792, 6096750, 5934827, 11144594, 12924607, 13035567,
       1039542, 12484995, 8105810, 7357826, 21868]
    ],
    [ //  3 * (16 ** 39) * G
      [15325367, 5337858, 15240747, 2393876, 15016553, 6338019,
       7818409, 12406717, 15510953, 4299205, 28491],
      [16008198, 9437739, 3455307, 16748725, 13902718, 7158443,
       6355704, 7733417, 3288803, 11262658, 12101],
      [15698538, 4788936, 6185391, 4455278, 9413886, 2609125,
       6123476, 11907020, 1970667, 9644062, 27219]
    ],
    [ //  4 * (16 ** 39) * G
      [13758089, 5323173, 8975322, 16749417, 4539772, 8963201,
       15532257, 4153903, 9132605, 3675611, 3921],
      [9716687, 327188, 14094335, 8805597, 13289177, 13743955,
       217886, 3225691, 13697949, 10648748, 22598],
      [11568919, 13478942, 12341237, 9499369, 15250069, 16423271,
       6169466, 4458811, 571570, 4976007, 3393]
    ],
    [ //  5 * (16 ** 39) * G
      [947702, 8545789, 511926, 12292327, 5979688, 2915044,
       14589945, 7488168, 3277533, 3277203, 26715],
      [4901352, 6984233, 12485000, 13980999, 1452869, 5866275,
       4457329, 9752508, 4965377, 9427731, 20715],
      [11743437, 4114134, 15843511, 1257391, 14960647, 14606724,
       5424293, 7547763, 8180434, 8188330, 23932]
    ],
    [ //  6 * (16 ** 39) * G
      [4894626, 4636538, 1158971, 5062868, 8848876, 1434551,
       6998652, 1134348, 4758861, 5221033, 16182],
      [7578978, 81563, 14758865, 4779046, 6090583, 8411282,
       1367366, 11009254, 10134584, 16438302, 30896],
      [373896, 10760685, 8306518, 10242396, 3401324, 6625957,
       11503603, 15230251, 14052403, 8388697, 577]
    ],
    [ //  7 * (16 ** 39) * G
      [8018916, 7863971, 12046000, 15050222, 6565634, 7387355,
       12928786, 12773072, 14963356, 11949368, 18289],
      [3729921, 818639, 11937845, 11702650, 7134144, 8583036,
       12486000, 11331535, 14262752, 4565922, 19752],
      [7368926, 8380484, 14662483, 7198039, 10961987, 14404555,
       4666880, 13874595, 16766968, 12314361, 19178]
    ],
    [ //  8 * (16 ** 39) * G
      [14219148, 1154624, 1132080, 3961102, 1743813, 14514592,
       2459920, 4746539, 206053, 4699099, 7788],
      [11127026, 3456196, 3631649, 9096750, 16317724, 10533627,
       301329, 2787, 13147038, 3826027, 1134],
      [3737278, 5522160, 2757862, 14901950, 105812, 3196746,
       15502786, 6868191, 7046684, 8273839, 31995]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 40) * G
      [5811932, 9916044, 10765879, 11268161, 15672059, 7441081,
       5695872, 14779865, 4434086, 7928497, 12059],
      [5975889, 12581680, 12097262, 8951190, 16332973, 14493139,
       13059797, 15791405, 3801237, 8556731, 22422],
      [2154753, 12075786, 4716314, 2420972, 9659789, 15651315,
       11038434, 13595913, 2794465, 4077020, 32196]
    ],
    [ //  2 * (16 ** 40) * G
      [8247747, 6710664, 5604758, 4960339, 1022769, 7975369,
       16314144, 13033613, 9224495, 2102901, 32503],
      [4101912, 2776103, 9722488, 6180605, 7784089, 8207925,
       335651, 995032, 13961881, 12066178, 1103],
      [517081, 1623465, 5882335, 13519971, 11745053, 12274007,
       3453441, 13267013, 3202350, 8535964, 32633]
    ],
    [ //  3 * (16 ** 40) * G
      [11867112, 13777315, 14189364, 12132264, 3567828, 12399553,
       3601808, 1226049, 8706484, 226263, 2638],
      [16091066, 2093160, 14576284, 20680, 2591054, 6022920,
       5602797, 3981209, 448240, 11551516, 25769],
      [8202521, 14066011, 3485363, 13974146, 11859616, 6113200,
       4426148, 7427790, 1586284, 8194766, 1818]
    ],
    [ //  4 * (16 ** 40) * G
      [8894987, 2992840, 15651591, 12559714, 2500869, 7768833,
       180463, 13587504, 15367836, 13398342, 11323],
      [14763057, 3494432, 4312076, 635217, 6657287, 6239757,
       1777821, 10155362, 7820755, 12384097, 31849],
      [15214943, 14150404, 8194032, 3100915, 14358565, 10016528,
       10688279, 15290793, 11314461, 10122018, 28506]
    ],
    [ //  5 * (16 ** 40) * G
      [4310725, 3119, 10193825, 851707, 10451393, 1875908,
       7355589, 5175879, 4698058, 2204385, 18766],
      [14238910, 13953955, 10413865, 8419503, 10357056, 10224525,
       8013702, 4531542, 9255716, 9863406, 683],
      [15011226, 9078237, 4845476, 1030562, 10101326, 16177441,
       1956126, 16386335, 4635444, 7785450, 27485]
    ],
    [ //  6 * (16 ** 40) * G
      [842132, 5598444, 12224599, 6082589, 7527535, 11827044,
       1347394, 11469161, 2585428, 3405445, 2787],
      [7873826, 4265758, 13885689, 223542, 15117940, 13059825,
       10670332, 4229950, 14496062, 8821763, 5883],
      [11929954, 1677107, 3352718, 14199777, 16544436, 13647396,
       15534481, 4723191, 7393397, 14912399, 16257]
    ],
    [ //  7 * (16 ** 40) * G
      [14266366, 1035390, 4947857, 2385287, 6076577, 4654164,
       13781772, 11024766, 16058771, 1032452, 20561],
      [1558564, 8336735, 10750683, 14107289, 12133315, 15398772,
       9161720, 13990974, 14605373, 14865228, 2771],
      [7218333, 1033523, 14249740, 12792271, 6217241, 16653428,
       2542, 15914749, 16391870, 1412080, 4732]
    ],
    [ //  8 * (16 ** 40) * G
      [9992610, 8143406, 4716057, 5425718, 4906452, 11324324,
       12667726, 10174783, 15683432, 16284935, 13646],
      [5355892, 9421998, 9887394, 7622142, 10056659, 4761629,
       755512, 6439016, 6807445, 2390481, 20184],
      [12966261, 11870816, 12123875, 15417776, 3485436, 6634576,
       3189238, 8915116, 3744621, 9622021, 12333]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 41) * G
      [4127612, 147403, 9718873, 12991530, 3132313, 14713964,
       14861255, 12206480, 1602777, 6139557, 3668],
      [16071728, 9145101, 9999739, 9330928, 1865482, 9887274,
       7353431, 12306342, 13212617, 9411216, 8868],
      [4172888, 12639373, 16608125, 15131691, 9948524, 13829460,
       1831936, 5517181, 9277750, 16023300, 16729]
    ],
    [ //  2 * (16 ** 41) * G
      [14884402, 6686777, 5251245, 8652222, 1973205, 12347896,
       5698778, 16254528, 7453045, 4052174, 5330],
      [13781049, 1419451, 5600389, 11513899, 1213255, 10583927,
       12994978, 5290538, 14102769, 2445626, 1541],
      [10649474, 9308554, 2421305, 9019824, 7963323, 13782125,
       8659277, 16410944, 2294211, 9858979, 29099]
    ],
    [ //  3 * (16 ** 41) * G
      [15532796, 14213965, 11152843, 5861154, 5370860, 2677265,
       4410883, 12362325, 4266786, 9420434, 13686],
      [8427861, 9045762, 9548040, 738243, 11695082, 8842563,
       11468294, 13278055, 3536109, 15515523, 24670],
      [3408945, 681324, 3113760, 9364892, 13463911, 1018527,
       4157744, 7722081, 16073465, 3125088, 31377]
    ],
    [ //  4 * (16 ** 41) * G
      [14424643, 5791326, 3977732, 5806023, 923374, 4734111,
       11423344, 5997248, 14547390, 1510955, 25162],
      [2971031, 5213690, 795967, 5535507, 14982208, 1114661,
       15047019, 49234, 12282954, 9858611, 13259],
      [1141001, 2622591, 6773104, 1988164, 9094172, 7571330,
       12445217, 7356797, 11289476, 2600699, 29206]
    ],
    [ //  5 * (16 ** 41) * G
      [3583445, 3916679, 3184592, 12923569, 1319599, 12305455,
       356609, 3843722, 5218215, 7141351, 19604],
      [732962, 9944129, 4521264, 11915176, 10509735, 13268209,
       1961815, 6367386, 8526082, 10590651, 9310],
      [13924344, 10905976, 14790364, 2691455, 10009148, 12408856,
       8614412, 13595641, 11887441, 1238712, 26586]
    ],
    [ //  6 * (16 ** 41) * G
      [12414471, 14780340, 7630951, 13095422, 9372163, 5910638,
       3094728, 9684650, 7710602, 8199997, 30249],
      [13119628, 15979406, 11217790, 7465876, 9426924, 2801026,
       3589382, 8420411, 11092289, 5027889, 3254],
      [5006200, 16528211, 6369328, 15024616, 6511708, 13052089,
       12507570, 1431977, 7822795, 4105203, 18723]
    ],
    [ //  7 * (16 ** 41) * G
      [12581946, 10025613, 5595795, 13979060, 3138861, 5412321,
       14670578, 15973905, 6191953, 1314254, 25227],
      [10429595, 8781340, 9665337, 10560306, 14070485, 5071439,
       9706207, 13546309, 3007756, 16740180, 27015],
      [8615228, 4276879, 9914338, 8809209, 1556156, 9972067,
       4406554, 14334811, 8911661, 9249874, 1869]
    ],
    [ //  8 * (16 ** 41) * G
      [785457, 14273860, 14123831, 11481487, 10300577, 2125938,
       10778412, 10502308, 7555518, 3076154, 17920],
      [14881928, 7718592, 11814936, 14819380, 9710002, 3892513,
       9056552, 7480265, 2258937, 14027572, 13344],
      [16672247, 3858095, 5044898, 6021238, 2498260, 4457336,
       1978134, 4463626, 8901525, 9328250, 23274]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 42) * G
      [10758205, 12690108, 14252051, 10585661, 6484113, 16418541,
       12108392, 11454396, 1879628, 13875055, 4325],
      [14741879, 7321316, 9645500, 10796394, 14794537, 16181252,
       13924474, 6166886, 2543712, 6250164, 3804],
      [14323303, 12572243, 4281427, 2402806, 14425836, 9053161,
       3867479, 12551974, 1882738, 7098678, 17844]
    ],
    [ //  2 * (16 ** 42) * G
      [5210017, 2801457, 5286208, 9342196, 5763548, 12485858,
       4924328, 1948629, 13332795, 12559213, 8567],
      [8381412, 5102986, 3198621, 7758350, 1270870, 10049707,
       8106766, 4938063, 1190367, 716594, 23580],
      [7986063, 1817850, 11745032, 12738393, 4751646, 2393952,
       6659203, 555638, 9090491, 1652861, 19174]
    ],
    [ //  3 * (16 ** 42) * G
      [4498222, 16165459, 7900635, 11803456, 8972980, 876669,
       9914899, 6205675, 12533251, 14228247, 6656],
      [6028163, 8275096, 3563793, 7444017, 14698026, 9456636,
       4772901, 8629300, 10763620, 5946971, 30056],
      [6419122, 603115, 5402262, 13238089, 4001704, 6646100,
       1080054, 14643829, 11593386, 2733603, 4949]
    ],
    [ //  4 * (16 ** 42) * G
      [13751576, 14407597, 1120496, 13615391, 10451080, 7707543,
       15757588, 8860385, 13253121, 12065381, 31157],
      [3048446, 1490146, 12711367, 15206789, 2878233, 4894388,
       3609637, 15506854, 9479699, 15336725, 22898],
      [9402385, 11280604, 11014100, 11291983, 10146452, 275610,
       6599478, 12589869, 6241243, 10261904, 20350]
    ],
    [ //  5 * (16 ** 42) * G
      [8466478, 4963415, 1008231, 9022940, 5377849, 14272216,
       11424763, 9185689, 6524492, 3856686, 12697],
      [5413374, 4472117, 14119368, 14412778, 13450012, 9725579,
       10416548, 8426057, 4500936, 15647905, 6466],
      [2312594, 5446062, 9600428, 846398, 1785233, 1122860,
       9708860, 5586148, 16370293, 6631758, 10762]
    ],
    [ //  6 * (16 ** 42) * G
      [16328642, 9666551, 3485111, 1560742, 7610118, 11499227,
       10621269, 5866227, 8138221, 14817380, 19702],
      [1866042, 1756476, 3919670, 5911996, 10402988, 10922799,
       15313101, 6350944, 15342099, 12819309, 1373],
      [9264054, 2260162, 11251993, 7818751, 14831292, 2918663,
       13558947, 11025528, 11150518, 3176208, 4634]
    ],
    [ //  7 * (16 ** 42) * G
      [215703, 6119071, 3007707, 3159228, 5504009, 13873633,
       9540945, 4588870, 4252973, 13069434, 13119],
      [7635913, 7421639, 11523673, 12069782, 12574839, 12374920,
       2298007, 2661928, 15547035, 12143212, 21115],
      [5982254, 10037913, 87613, 7223352, 381052, 14214452,
       14561124, 4739125, 10988023, 432928, 27529]
    ],
    [ //  8 * (16 ** 42) * G
      [7348749, 10502498, 5144874, 16327771, 5933562, 15664537,
       13521010, 16756164, 7596915, 2163626, 9148],
      [13097847, 16420021, 5587074, 13055169, 8816376, 10845702,
       14284519, 2746056, 6527951, 13830311, 1139],
      [5807621, 7939587, 9620206, 4644036, 4932114, 11095851,
       7661057, 172527, 275482, 7585758, 4143]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 43) * G
      [12717374, 13962366, 6534562, 10537330, 4971886, 7556550,
       5423615, 5695632, 3144378, 13039403, 18729],
      [10707527, 13345427, 6632846, 11692285, 9410658, 1870255,
       10053792, 4271998, 7685412, 15930061, 22406],
      [1311532, 8978378, 14889847, 4488990, 9572392, 13413875,
       2040603, 9114631, 3426179, 8080370, 19585]
    ],
    [ //  2 * (16 ** 43) * G
      [7453038, 5473576, 12259320, 6341617, 4104107, 4457185,
       5449012, 15662425, 12022859, 12808309, 2615],
      [738436, 10508196, 4407611, 5201770, 4992538, 14032058,
       10858209, 6376352, 384083, 5446283, 30881],
      [13653547, 15822906, 10710205, 13182241, 13584432, 2418574,
       261508, 14347219, 6210927, 8561710, 29357]
    ],
    [ //  3 * (16 ** 43) * G
      [16475638, 9319866, 10567582, 15889043, 14065352, 10735673,
       9800950, 7125197, 11382381, 7831923, 5940],
      [150467, 9671015, 14336872, 4804655, 6934893, 4925838,
       3990623, 16577260, 11848644, 6725283, 1631],
      [3332941, 11454293, 11635200, 4449051, 6923492, 16061880,
       5428135, 4853637, 4029448, 15432752, 6573]
    ],
    [ //  4 * (16 ** 43) * G
      [15391139, 13328723, 7259936, 5319523, 11716991, 9482581,
       6280194, 11658075, 5443298, 13431099, 12249],
      [12785556, 12221763, 2530565, 9646629, 7391487, 7616548,
       13112857, 8594398, 5675859, 7379073, 10322],
      [16225976, 4676423, 5507005, 5516431, 13086739, 16285394,
       16005924, 2997539, 590294, 11523963, 25937]
    ],
    [ //  5 * (16 ** 43) * G
      [11190911, 12234580, 2639174, 11707482, 16150508, 13625590,
       5985835, 5778715, 1013855, 2356114, 17585],
      [14010796, 5039009, 6383778, 1113956, 7840573, 1470139,
       4466131, 1017550, 12149307, 8128848, 22096],
      [7421539, 15775697, 7606790, 1424124, 4187097, 14241077,
       9898713, 1658091, 13646547, 14515449, 25338]
    ],
    [ //  6 * (16 ** 43) * G
      [10002548, 9861973, 2475701, 9324862, 16683470, 559198,
       4540712, 13940524, 6766786, 1132962, 8431],
      [13518228, 12345831, 8273111, 12049702, 7026089, 15673293,
       13124454, 10518699, 13080337, 12873561, 28359],
      [632994, 11363183, 8204039, 2367582, 9955022, 10566022,
       388661, 12627708, 16373911, 612533, 5608]
    ],
    [ //  7 * (16 ** 43) * G
      [4072283, 15695116, 15148453, 12456782, 3785087, 12789612,
       3419589, 13071585, 139065, 5552274, 531],
      [11559364, 15545691, 19921, 9706503, 14421231, 3411522,
       12713350, 6369373, 5612611, 13406990, 22194],
      [12567970, 10331814, 6888951, 10477123, 15966836, 9479938,
       15912355, 11740121, 7656291, 8682375, 31712]
    ],
    [ //  8 * (16 ** 43) * G
      [4150723, 13392523, 10521753, 4185810, 1169189, 669190,
       16725687, 15542677, 9053721, 10114263, 8041],
      [522769, 16101203, 15864934, 15559690, 8375421, 10746753,
       5161892, 683492, 9600267, 1340860, 29703],
      [15198858, 9630579, 3270514, 13304922, 6633426, 5234217,
       4117287, 1822821, 12396902, 2901110, 12186]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 44) * G
      [5719494, 12168063, 9497368, 5736390, 3836654, 11512066,
       14298615, 12003090, 6029629, 8201706, 13913],
      [5315738, 14344373, 434868, 2883583, 13131817, 4338810,
       6157648, 9969463, 5153069, 14099930, 16235],
      [6314156, 9272080, 6255437, 7325328, 4216734, 9645529,
       16355842, 6579960, 6346448, 13375962, 31614]
    ],
    [ //  2 * (16 ** 44) * G
      [6056205, 3619945, 7239874, 410256, 2436710, 2872029,
       4475617, 9772356, 7616854, 11367937, 16949],
      [8190619, 4870567, 5270958, 15180678, 2504276, 8575874,
       13471533, 637951, 16108218, 14444059, 958],
      [9008629, 13307143, 9986648, 9538034, 2703956, 7267401,
       2351843, 10537652, 15754913, 14856397, 3708]
    ],
    [ //  3 * (16 ** 44) * G
      [9209251, 6568644, 11388052, 3957049, 3546612, 5064957,
       14498537, 645911, 11822922, 679311, 26222],
      [4944121, 16703449, 3014310, 12713146, 3194961, 11241969,
       8290095, 4752084, 15527605, 5641098, 24914],
      [7392013, 16141896, 7023291, 11158923, 6667504, 9985485,
       12219880, 10141262, 1367780, 13111509, 32523]
    ],
    [ //  4 * (16 ** 44) * G
      [15995759, 7054374, 3520768, 5759024, 6764190, 3942541,
       14241606, 13355231, 15653877, 9288952, 3359],
      [7476128, 10333555, 9995180, 3077934, 16185530, 6903711,
       14500844, 3218990, 12954485, 9469406, 7482],
      [13664732, 9646398, 8436246, 8723252, 3317677, 2214697,
       3932931, 75777, 1834467, 1787043, 1]
    ],
    [ //  5 * (16 ** 44) * G
      [13003788, 10513471, 13778911, 5101069, 4252558, 5075293,
       3679886, 8053643, 8607713, 9277806, 15044],
      [698204, 2058602, 6952534, 5788349, 12546652, 6729153,
       8362617, 1157341, 8720422, 8954578, 25561],
      [12395310, 480175, 8585234, 16636150, 2870968, 2855401,
       11764967, 16258665, 6856806, 13970211, 13306]
    ],
    [ //  6 * (16 ** 44) * G
      [14949910, 4835013, 3494918, 3358583, 16278576, 15156746,
       13824773, 11709692, 5692583, 16001442, 5824],
      [2281448, 13160644, 13339948, 368954, 2838395, 10841863,
       15133942, 10747574, 684514, 5622969, 15555],
      [4100401, 9716624, 13560246, 8017463, 10785995, 9585848,
       10795706, 13139153, 11433320, 11485803, 25374]
    ],
    [ //  7 * (16 ** 44) * G
      [6749855, 266458, 10925033, 7083749, 14502738, 12551045,
       6364921, 12336535, 11082165, 6589214, 21913],
      [7343592, 7715235, 5392345, 14874629, 8439291, 6152562,
       2568932, 5465487, 6258869, 2916198, 17183],
      [9403161, 6505605, 4904450, 10611281, 11220271, 11130644,
       1712272, 8978500, 2439974, 7430033, 31492]
    ],
    [ //  8 * (16 ** 44) * G
      [16166467, 12396716, 11830253, 8215674, 3505291, 2901126,
       6928363, 12599367, 16144447, 8123842, 22963],
      [15121094, 12746948, 766838, 7151003, 971741, 16336023,
       5784843, 11573909, 13492771, 11336279, 18640],
      [11265649, 2548861, 3651087, 6434618, 13738391, 234737,
       8317334, 4327630, 7158747, 4297011, 5667]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 45) * G
      [10894063, 15386419, 5173658, 4473413, 8370781, 14958892,
       10504085, 6137978, 14725365, 5366180, 16688],
      [5737406, 13761853, 558381, 12789857, 6671986, 2257707,
       16050894, 6654983, 3713856, 16254188, 2355],
      [4809846, 6912397, 13150123, 16561579, 2206430, 9728641,
       15694675, 10869778, 4535578, 4654686, 2045]
    ],
    [ //  2 * (16 ** 45) * G
      [9251789, 3947813, 4180056, 11493559, 170573, 3637527,
       14041450, 16388041, 11795235, 6273592, 7198],
      [15263683, 1136026, 10825794, 9717890, 8499753, 5301490,
       3028866, 9049004, 12208372, 16386388, 330],
      [11757164, 9895963, 12176177, 4980716, 24658, 2309171,
       10033800, 2701073, 5165924, 8664637, 10520]
    ],
    [ //  3 * (16 ** 45) * G
      [4959226, 6817244, 12649276, 5609196, 1425246, 1915692,
       2405787, 1820422, 10424005, 9982113, 16094],
      [1750763, 3654588, 4258717, 5068706, 12457043, 14808578,
       1439909, 16045876, 13402504, 16003084, 22884],
      [616448, 2299181, 9888842, 7374441, 574809, 16477788,
       673455, 14626230, 5701001, 5620216, 22417]
    ],
    [ //  4 * (16 ** 45) * G
      [14731759, 5168402, 9934386, 15876610, 9144205, 7585350,
       7775477, 1677879, 9562410, 12382606, 7807],
      [1566630, 7037704, 2536945, 3945744, 9201955, 15860096,
       3888334, 3295896, 4739909, 9570378, 21440],
      [13348799, 1343985, 15061716, 7430516, 1912246, 6068259,
       5694117, 753014, 10786294, 6084650, 16021]
    ],
    [ //  5 * (16 ** 45) * G
      [13718579, 5463614, 10740879, 881264, 7694634, 6522832,
       1944286, 4258770, 4494837, 4753359, 5158],
      [12270143, 15986529, 4107065, 3062041, 11796581, 2061454,
       13383873, 11918958, 15975583, 8295974, 25933],
      [8203499, 13622620, 12182884, 14104524, 15642590, 11578242,
       6476281, 6359003, 3509691, 11191220, 2923]
    ],
    [ //  6 * (16 ** 45) * G
      [2293400, 2870150, 11500262, 13547665, 7742038, 439367,
       12382948, 1727122, 14947585, 4200324, 32041],
      [43323, 12244535, 7544906, 14317459, 9171, 11995582,
       4612922, 14180099, 8520722, 7193744, 73],
      [8282976, 12094914, 793716, 9245829, 4740134, 13316103,
       8076813, 10569211, 8403747, 4135747, 4228]
    ],
    [ //  7 * (16 ** 45) * G
      [6452957, 283959, 14271993, 14115932, 5838221, 7027150,
       5315894, 9631325, 6919876, 4943442, 4439],
      [2386075, 6761955, 8508783, 11769001, 14322413, 13626833,
       16683368, 14515032, 5685736, 4640077, 31970],
      [8437331, 3182207, 9943284, 3451347, 3979467, 2829407,
       12399564, 1616225, 10155633, 4586298, 28928]
    ],
    [ //  8 * (16 ** 45) * G
      [1807851, 4011536, 8811513, 5205828, 15676281, 15033082,
       6262549, 5656947, 11799969, 15831128, 32675],
      [10316190, 13132293, 6922303, 10117534, 7393185, 4057891,
       1191810, 12910139, 15762510, 356263, 7451],
      [7075359, 4600293, 10689478, 7230338, 7973648, 1478099,
       8258880, 5068997, 4380900, 5661316, 22114]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 46) * G
      [2523126, 10084086, 4438500, 7613448, 7522939, 15905143,
       4188580, 2334741, 13651974, 14675157, 11487],
      [15959616, 10278431, 10542409, 407077, 13474755, 4047657,
       146903, 5366488, 3904049, 7371296, 18981],
      [16182634, 6720083, 10562231, 1954160, 4342360, 90416,
       4995810, 4194324, 9325052, 9006372, 22305]
    ],
    [ //  2 * (16 ** 46) * G
      [1579950, 5576701, 11799406, 2865507, 2253471, 4597136,
       15282694, 5573052, 3937242, 14513398, 22414],
      [13687374, 5280161, 534621, 11927102, 11169703, 9679691,
       8184211, 6546711, 11546877, 3518404, 969],
      [2821181, 7784009, 16554354, 14672389, 13419204, 3816519,
       8707426, 14471835, 8964002, 11229442, 16066]
    ],
    [ //  3 * (16 ** 46) * G
      [14187449, 13794276, 15573408, 6371610, 9129451, 10191785,
       13661131, 10068189, 1034958, 12737056, 11733],
      [3330507, 3803566, 14001953, 4257218, 2852831, 11217167,
       13035550, 765604, 14396510, 16149610, 3611],
      [2918526, 14018937, 6152875, 13341293, 131096, 6233626,
       13482670, 12565097, 15241055, 4764506, 29445]
    ],
    [ //  4 * (16 ** 46) * G
      [11057390, 5350347, 1492021, 11669855, 10645277, 3690597,
       5417868, 7737167, 1947850, 4471617, 12355],
      [14082868, 609185, 1671259, 603455, 4125047, 7351231,
       13305378, 4341510, 7882205, 2258904, 22618],
      [13928802, 6259251, 8364426, 15497253, 10011829, 4325222,
       10827582, 10980975, 15702047, 2591056, 30294]
    ],
    [ //  5 * (16 ** 46) * G
      [2083008, 13588949, 15874243, 329398, 15586045, 954267,
       10464087, 2539280, 12076710, 6334657, 16193],
      [8834973, 7578602, 14475632, 464223, 9239479, 9080378,
       16527747, 4740071, 1308182, 16024758, 10427],
      [1272956, 3103855, 12513889, 16178449, 15388935, 7287727,
       13767646, 5406362, 8976221, 13317505, 7801]
    ],
    [ //  6 * (16 ** 46) * G
      [16245745, 3589102, 16253236, 16686608, 9136767, 14613634,
       15056121, 8386824, 3881009, 9771834, 26071],
      [14713217, 5495029, 14252009, 2727390, 10816580, 2483588,
       820805, 14445613, 13759220, 11873593, 18314],
      [5427545, 10802066, 485030, 8854216, 14541244, 13201381,
       4236993, 12069995, 2171412, 8012058, 5848]
    ],
    [ //  7 * (16 ** 46) * G
      [418325, 8280642, 12694461, 809508, 10216397, 9746311,
       11654905, 5750877, 15961254, 8159589, 10488],
      [5113219, 14017237, 16448420, 3063193, 2076631, 7835618,
       7565033, 4815554, 5926366, 743290, 8089],
      [15267798, 5156123, 9413428, 11332217, 1986795, 14701181,
       10375693, 7849558, 5074238, 3137875, 17800]
    ],
    [ //  8 * (16 ** 46) * G
      [7963606, 3431797, 10905193, 1550865, 11988241, 1216354,
       5740638, 8248600, 2553565, 15055094, 26767],
      [3960804, 10037652, 10672300, 10716050, 16380257, 10154933,
       1294024, 2529755, 389236, 8666340, 32207],
      [4666048, 14043210, 10054800, 13260338, 2180093, 13033941,
       12816733, 11779624, 2562331, 6848115, 26425]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 47) * G
      [529615, 12970528, 4235109, 6923031, 341729, 11840900,
       3745224, 9113297, 3552797, 14397417, 128],
      [13342495, 11194569, 2723045, 10474826, 5679785, 10188817,
       7345583, 4323108, 1001898, 13412418, 8168],
      [837674, 8687420, 5534369, 8879262, 12935362, 4276280,
       2674261, 5244130, 4365681, 1614083, 1060]
    ],
    [ //  2 * (16 ** 47) * G
      [15990623, 15356331, 12224925, 3130072, 9676903, 12410011,
       9944686, 2898123, 2505565, 5735575, 4429],
      [8479303, 5009184, 9656552, 14905303, 11711158, 5080461,
       5643592, 9924994, 3320791, 151430, 2082],
      [1830051, 12287083, 7713537, 13036307, 3751789, 15002453,
       1087414, 9506088, 4693667, 5541277, 6868]
    ],
    [ //  3 * (16 ** 47) * G
      [10111229, 8233016, 2018650, 10123319, 9413802, 9333939,
       1780955, 13031798, 8262723, 5364681, 13775],
      [15335123, 15101199, 630895, 1857657, 7551552, 8999848,
       8392185, 3199309, 11731544, 5797575, 16846],
      [7389218, 3917270, 416172, 10162580, 15105040, 3136234,
       15774584, 9935037, 475282, 3277309, 25886]
    ],
    [ //  4 * (16 ** 47) * G
      [3196367, 8684527, 841277, 2318796, 13939862, 2534476,
       42116, 15634661, 12668651, 1932568, 2805],
      [16559774, 10788894, 9741691, 14430346, 10439662, 13315702,
       15414787, 13758734, 4461176, 13524606, 16537],
      [5317097, 9326474, 14686921, 14416431, 11441476, 915837,
       906819, 8593578, 4861877, 8545580, 26226]
    ],
    [ //  5 * (16 ** 47) * G
      [7063979, 2225368, 15370054, 5701231, 5012414, 12725429,
       2457517, 490020, 12127545, 3925017, 6837],
      [4643619, 11984937, 12037544, 8070458, 845082, 4741916,
       5924573, 8669384, 6773471, 12592592, 32543],
      [10397354, 1775665, 14342382, 3809776, 5081096, 5196544,
       1935418, 3921578, 14286100, 10725087, 19897]
    ],
    [ //  6 * (16 ** 47) * G
      [10225493, 11680697, 8031463, 12907791, 12965613, 5292853,
       13823387, 8265262, 9653665, 6231784, 13872],
      [12024936, 48075, 4839771, 9564536, 12354666, 14267357,
       11451944, 8189696, 13836094, 2645125, 23777],
      [11582952, 9907608, 5976502, 11314910, 9570054, 6659965,
       16289930, 15102736, 14615093, 12756719, 20730]
    ],
    [ //  7 * (16 ** 47) * G
      [8916826, 11137883, 12776403, 14353383, 15467788, 11641581,
       2095600, 11048600, 6173860, 11414444, 18852],
      [16009660, 1869558, 14494043, 2034356, 11724874, 5578065,
       3189390, 12583371, 16004706, 13850948, 27176],
      [10961120, 1240580, 7612603, 10210945, 3226557, 802836,
       15001793, 7534005, 11390299, 11639094, 31935]
    ],
    [ //  8 * (16 ** 47) * G
      [9009453, 14533227, 6595345, 14307622, 3192006, 547099,
       5033749, 829307, 37896, 4448027, 7652],
      [3598048, 3832524, 15568505, 8214638, 16431011, 16049401,
       9616097, 3821462, 6243454, 11550463, 7188],
      [11031185, 8114452, 11475300, 1062099, 12020914, 7207511,
       4460445, 6498779, 5706899, 4085866, 24308]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 48) * G
      [5666214, 2102328, 15265656, 11206057, 6594352, 11062178,
       5266655, 5034475, 5095603, 5945885, 17937],
      [793280, 13409736, 3581549, 1783972, 10509556, 14141079,
       12490203, 11004915, 8289707, 12121741, 32160],
      [11917942, 1659843, 10212367, 2167198, 11300723, 5857309,
       2227890, 248928, 6769483, 8945283, 23135]
    ],
    [ //  2 * (16 ** 48) * G
      [10566929, 118640, 12881763, 3476944, 13547541, 10780367,
       13935804, 16188055, 5051444, 11949796, 13929],
      [10896313, 2675616, 6594198, 15123232, 12831488, 15479477,
       9010221, 10179330, 13747980, 8053461, 17379],
      [10936627, 4130541, 12597374, 10068282, 3153233, 3674471,
       16266790, 12409560, 14019006, 15125839, 27169]
    ],
    [ //  3 * (16 ** 48) * G
      [4646495, 1509936, 2421190, 53813, 7416362, 12014936,
       3968130, 6937533, 9830231, 16380321, 22635],
      [10072803, 2691686, 126785, 7376147, 13830215, 11582833,
       13635970, 3298354, 2001718, 1771264, 17719],
      [16283915, 560478, 15050459, 6359351, 7925980, 7256146,
       13787553, 11273033, 15016313, 11548560, 3759]
    ],
    [ //  4 * (16 ** 48) * G
      [4719663, 5620023, 1152517, 8522666, 10109414, 7146529,
       3699528, 1868279, 181857, 13395802, 12442],
      [7712285, 8412687, 3166528, 2515660, 195555, 3763692,
       2026130, 2943967, 4414387, 3359941, 17582],
      [10830830, 9025979, 4365554, 5949809, 7736989, 6335219,
       12996499, 1934053, 9725839, 2235263, 25301]
    ],
    [ //  5 * (16 ** 48) * G
      [13669229, 2726936, 807500, 9047066, 7058796, 8794568,
       3070794, 10712325, 7685474, 16639164, 23566],
      [16218684, 13903418, 5076357, 16705812, 11434769, 1654239,
       8411639, 10815088, 9576503, 10113923, 5362],
      [11720693, 8313893, 4251505, 10073392, 16347355, 5005857,
       12043245, 14324276, 15599934, 3562619, 24178]
    ],
    [ //  6 * (16 ** 48) * G
      [7414143, 16516933, 5986139, 431321, 7956317, 1979191,
       12317721, 10095159, 11856572, 1068103, 30705],
      [570174, 3737135, 12483987, 14655282, 9853413, 12451163,
       11345822, 11337533, 7555511, 349643, 28850],
      [1125452, 1295701, 13483601, 10127391, 8929850, 3884902,
       8740432, 4482679, 409674, 3772234, 3636]
    ],
    [ //  7 * (16 ** 48) * G
      [13549032, 2283838, 505469, 2589231, 11790401, 7179529,
       2076763, 7618470, 3548018, 341642, 24148],
      [4921640, 723262, 4200595, 7599094, 14934286, 6123389,
       14316345, 16003607, 3644478, 14603978, 28554],
      [12038810, 1195517, 9560896, 10623666, 8099809, 9739848,
       196070, 16356989, 13885079, 15150792, 30733]
    ],
    [ //  8 * (16 ** 48) * G
      [10151868, 8733960, 396002, 1867597, 9297615, 1161272,
       5311048, 3714069, 9604324, 9172593, 3762],
      [16000882, 15397632, 11167519, 2788417, 7531306, 3314319,
       14128951, 2728319, 11896742, 13020466, 7663],
      [5346727, 12458735, 15576923, 9534229, 9179767, 14298644,
       16480997, 2724343, 14493799, 2104312, 18045]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 49) * G
      [12398187, 15626999, 5142790, 1088191, 13791446, 11052037,
       4569409, 9264382, 9912967, 1599260, 17602],
      [7062296, 10311209, 6648927, 14161198, 3506388, 15322777,
       4151353, 11593137, 3744192, 2828500, 20988],
      [14854540, 13703061, 9509775, 2845538, 5136097, 11891228,
       1078308, 5976295, 5196486, 10348620, 28267]
    ],
    [ //  2 * (16 ** 49) * G
      [1958225, 6278731, 2482162, 14752832, 4309191, 10258392,
       13128820, 2446515, 9309689, 2382224, 11561],
      [831624, 6230264, 5335932, 5694497, 7034076, 10077299,
       10864367, 12760608, 10514242, 8400067, 24396],
      [479962, 13169021, 39781, 13074152, 1893176, 16376712,
       15752034, 12825876, 12651848, 6149566, 26349]
    ],
    [ //  3 * (16 ** 49) * G
      [11667613, 10600971, 1211704, 9882836, 8598753, 13833088,
       9202839, 12887819, 32544, 16301059, 11948],
      [13239421, 15976907, 7073965, 16012591, 12825291, 6263681,
       2966643, 13621777, 2098316, 10536830, 7971],
      [12326256, 4619237, 9237045, 899763, 13818114, 14720515,
       10681593, 2577050, 3456080, 12513949, 2112]
    ],
    [ //  4 * (16 ** 49) * G
      [1094279, 16463324, 10320237, 6062066, 1534925, 4785447,
       15255474, 8338755, 12927606, 16097681, 772],
      [3663083, 14707583, 13290836, 16116076, 12672903, 8244876,
       11588441, 12067979, 7618572, 16752736, 9322],
      [14963489, 9332987, 3291096, 12638032, 619848, 865670,
       15698250, 5151507, 5493541, 3976279, 9640]
    ],
    [ //  5 * (16 ** 49) * G
      [14161502, 3098862, 3805218, 4950991, 4178211, 15265890,
       639521, 1971292, 7874096, 10854346, 31951],
      [5420770, 6695225, 8101647, 603174, 14376462, 16702515,
       2872841, 16729381, 450761, 1111493, 1726],
      [2765919, 1419702, 13376150, 4870910, 330838, 917026,
       8726716, 10986104, 2025245, 7801370, 24194]
    ],
    [ //  6 * (16 ** 49) * G
      [9005660, 5342125, 16135490, 15174994, 6765307, 6251752,
       6263459, 2909938, 8827138, 5192507, 2512],
      [3382388, 15206978, 15067138, 11010042, 1528166, 9219636,
       2038848, 3442269, 6014446, 9972832, 11466],
      [8240750, 6108441, 10747181, 9168127, 8138474, 15276064,
       14365274, 2495448, 7609662, 6100775, 31282]
    ],
    [ //  7 * (16 ** 49) * G
      [7208418, 12172241, 2740278, 12883880, 350039, 2516898,
       6727665, 9333961, 3785088, 1734930, 19771],
      [2754410, 8192382, 6221010, 1455689, 8939679, 3401175,
       15765906, 5416474, 11644516, 10350971, 10823],
      [14362384, 15633971, 10853982, 14074940, 9983198, 8468504,
       12948081, 10755106, 3825307, 5585060, 10157]
    ],
    [ //  8 * (16 ** 49) * G
      [3476833, 14502677, 12003142, 15635745, 4180936, 7523024,
       5903238, 15232566, 8227298, 9994110, 20750],
      [4654972, 8217486, 5884762, 2138560, 12014433, 16632973,
       5082093, 5545502, 3872669, 5486416, 2049],
      [4117475, 10326794, 2284966, 13459623, 3698417, 5170749,
       5815722, 13113261, 15152938, 9262415, 9150]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 50) * G
      [15683501, 9542260, 10655230, 16163592, 8551404, 8061242,
       13830564, 9850369, 10733463, 3952475, 29124],
      [8054697, 16039254, 12434462, 14042264, 6442162, 5163071,
       13773855, 14946404, 3686401, 12953018, 12025],
      [10384589, 7206650, 8042237, 14987046, 8550588, 10030833,
       13693423, 8541619, 12972691, 9216912, 23157]
    ],
    [ //  2 * (16 ** 50) * G
      [4596885, 2560217, 238263, 13991248, 11060946, 8899130,
       12558516, 14930944, 15430380, 14828723, 11706],
      [6413460, 9538333, 6720736, 10125616, 15545926, 11195277,
       2732008, 13952680, 3789887, 8398838, 2675],
      [16769484, 4861783, 4429839, 14779288, 6753549, 1441024,
       4868603, 1072191, 2533020, 13263697, 9880]
    ],
    [ //  3 * (16 ** 50) * G
      [11582072, 3246130, 9168741, 9592063, 1585655, 2083896,
       9543721, 567323, 13298439, 4049993, 8116],
      [4053262, 7352158, 8793661, 14996051, 4131096, 11102878,
       16122445, 6190910, 16397106, 4918346, 15360],
      [16037931, 4631558, 15964841, 11011780, 10650789, 4687644,
       6276813, 4117286, 2085399, 16581069, 27459]
    ],
    [ //  4 * (16 ** 50) * G
      [9946436, 6114118, 12568487, 14618623, 16644168, 7887381,
       15444550, 2648249, 5437204, 14094427, 23144],
      [7737075, 4347966, 9483719, 15600313, 14439097, 9584501,
       12715819, 12522535, 15784432, 732527, 29506],
      [8723974, 16173982, 12889900, 12984888, 5847315, 15954831,
       9869819, 14322360, 3456158, 6500330, 15797]
    ],
    [ //  5 * (16 ** 50) * G
      [6150616, 15608823, 10876014, 3762009, 1552886, 7500557,
       3230110, 1831633, 14114579, 1761097, 1074],
      [9971157, 9482626, 9514569, 4102793, 15395719, 4913389,
       3755120, 15659069, 14625550, 8299669, 22809],
      [15030958, 6298084, 15271137, 8269714, 8078202, 10134759,
       12676885, 13094445, 14093504, 16630260, 17898]
    ],
    [ //  6 * (16 ** 50) * G
      [4577067, 99712, 5335428, 13577990, 2292386, 2999884,
       6646562, 9706038, 6478558, 15452163, 23134],
      [13414893, 4596943, 9811470, 12409859, 14402194, 8505689,
       1956868, 3252381, 5691712, 13560413, 16243],
      [5148102, 12570890, 3782567, 4508083, 5701758, 11467454,
       8328535, 6340896, 6428891, 8950054, 9733]
    ],
    [ //  7 * (16 ** 50) * G
      [6356740, 304771, 16013815, 7758310, 14237662, 3494339,
       7541383, 8592170, 6380887, 798286, 21677],
      [7791938, 9321670, 11357313, 249548, 4336787, 10422366,
       13284370, 15468492, 4473784, 16388274, 3565],
      [2839082, 6804920, 15461947, 10462657, 15819590, 10474294,
       15888065, 10859730, 8033288, 11713191, 25324]
    ],
    [ //  8 * (16 ** 50) * G
      [1387325, 7950945, 13755885, 974295, 6436221, 5009737,
       13678955, 7635656, 6740158, 16325033, 11865],
      [11937908, 2635439, 10850823, 7987460, 13459077, 10570335,
       11388464, 5942529, 6700952, 4018293, 24977],
      [3289562, 2962970, 7343558, 9707522, 4675634, 9752314,
       5324693, 186369, 12606812, 12755249, 15835]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 51) * G
      [16482799, 10816079, 12533584, 3929120, 14693641, 2937009,
       1885866, 10201742, 2325056, 9986554, 12835],
      [4863441, 5947904, 12843891, 3827207, 14552899, 13998385,
       12567848, 8095121, 12256524, 10102261, 21950],
      [14368191, 5950771, 14814464, 8432693, 1160060, 15461121,
       7106440, 4756182, 588749, 11383141, 30478]
    ],
    [ //  2 * (16 ** 51) * G
      [5147101, 16375902, 3638353, 12351801, 6488831, 4807872,
       9787046, 6103668, 5637115, 7691424, 2470],
      [5271993, 11960736, 3862995, 3511039, 484762, 14945826,
       2717825, 6226281, 12203854, 14487174, 5822],
      [2570165, 13389612, 220876, 3001527, 12033548, 4059971,
       12340932, 3399688, 7694016, 12075248, 1729]
    ],
    [ //  3 * (16 ** 51) * G
      [8976503, 10864291, 11302536, 14594742, 11103252, 2816002,
       4397964, 6605299, 10612438, 4412756, 13864],
      [163932, 10387355, 4221422, 5537046, 16745098, 616651,
       6926915, 4035496, 14838130, 12111167, 18103],
      [8317920, 2131710, 3664257, 3101012, 12217319, 16443724,
       9130350, 1901590, 9972921, 3739715, 24225]
    ],
    [ //  4 * (16 ** 51) * G
      [7352033, 6069492, 2967826, 9119155, 2144031, 15695429,
       2510879, 3348784, 13822763, 9017288, 25965],
      [13873154, 3925205, 8417067, 6949320, 15479769, 12897455,
       10791100, 221043, 6429067, 12134470, 8901],
      [4032825, 13172291, 5294936, 6983038, 10537774, 12475017,
       5442043, 7981717, 8372486, 6690509, 3170]
    ],
    [ //  5 * (16 ** 51) * G
      [7976479, 12061256, 15540222, 4905505, 9859694, 2472547,
       9647744, 3393456, 12785544, 10536691, 18202],
      [16012465, 12810747, 7442399, 15836343, 10856816, 5838149,
       16235219, 11309598, 1843602, 8969384, 17104],
      [1462681, 997280, 4427738, 13148387, 14343031, 15212554,
       16566389, 2161661, 2229991, 12494860, 7410]
    ],
    [ //  6 * (16 ** 51) * G
      [6423212, 15851187, 10863325, 13820538, 10878473, 15848338,
       16186377, 8197704, 12339545, 13370643, 29890],
      [12599599, 7215618, 16685101, 14375144, 16403587, 9158800,
       12377265, 115445, 6995046, 823329, 26734],
      [4429223, 12245925, 6954925, 11406758, 1704608, 8128436,
       10009507, 12524021, 4735757, 12102878, 27154]
    ],
    [ //  7 * (16 ** 51) * G
      [13931993, 15343417, 16578778, 5398301, 2889998, 1907545,
       313753, 14388413, 9374903, 16622552, 4599],
      [11463519, 14516250, 7436603, 12669320, 10657962, 3585024,
       10690337, 15246195, 9563929, 12093692, 18602],
      [3208206, 8295000, 394271, 7955996, 2976937, 6958592,
       16329476, 8838303, 299985, 6328971, 30211]
    ],
    [ //  8 * (16 ** 51) * G
      [850374, 4310546, 10166715, 14601637, 11708946, 9123050,
       133796, 12691245, 8207208, 5056488, 8541],
      [5901061, 583017, 9155633, 11351971, 11538152, 7569772,
       15639379, 6216406, 14430756, 185526, 16166],
      [13300124, 4699739, 5425330, 11645638, 7839171, 14869065,
       12309996, 9019776, 13164601, 10003406, 5104]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 52) * G
      [6210891, 1046990, 891612, 9187091, 10234475, 9770243,
       13103352, 163847, 308075, 8590508, 30870],
      [9878292, 5743143, 2225066, 10160090, 3848887, 3742856,
       1585568, 15027170, 3278329, 16464088, 24295],
      [4483726, 16632641, 16339853, 4409655, 11337129, 9205925,
       9250364, 4632464, 13241609, 6503579, 25040]
    ],
    [ //  2 * (16 ** 52) * G
      [14361958, 4797951, 12280692, 7867240, 12413833, 15467461,
       8410430, 7281458, 11458549, 6281287, 28310],
      [16544735, 2669816, 16559523, 10940471, 8677725, 11078126,
       14366914, 6520756, 424924, 11283960, 23331],
      [8409723, 12145646, 9280210, 16440941, 9378218, 8572904,
       267534, 946455, 9821916, 12302813, 31161]
    ],
    [ //  3 * (16 ** 52) * G
      [3221186, 5587050, 9694131, 6867139, 6521768, 8028882,
       2745785, 7081060, 16589127, 15816905, 20581],
      [10449780, 8236686, 1495449, 13613832, 3318520, 6228640,
       1207620, 13462714, 13416500, 1132042, 7080],
      [4364628, 6945548, 6779009, 14118607, 4587692, 4569825,
       9072870, 3058361, 10812146, 15965784, 14721]
    ],
    [ //  4 * (16 ** 52) * G
      [2296467, 9074009, 6101243, 6350580, 1478505, 3978525,
       4527273, 3835305, 11325693, 538373, 14556],
      [15101918, 14656877, 3852357, 2900040, 5416192, 16134881,
       6539188, 15323873, 12327781, 4533980, 12532],
      [7706432, 2589381, 13403501, 16358590, 1262953, 5140986,
       7586026, 8930556, 4138089, 10099289, 25389]
    ],
    [ //  5 * (16 ** 52) * G
      [510886, 7017912, 14153403, 12342512, 2344927, 6753048,
       224809, 12262807, 15551063, 16025671, 2852],
      [820391, 16585197, 3849993, 892777, 15757697, 8878435,
       2971599, 2199692, 16141218, 8254090, 14938],
      [1829575, 13942353, 15916250, 15541964, 5472373, 10118564,
       10420319, 14785791, 4726627, 16204917, 13564]
    ],
    [ //  6 * (16 ** 52) * G
      [9922506, 14699640, 8241559, 3725638, 7425483, 6269112,
       8553465, 5627528, 16409591, 14423629, 15675],
      [13609624, 1944440, 15902139, 1641330, 15573607, 6327900,
       1116818, 9636297, 11760816, 10683439, 281],
      [12719997, 14195944, 12674978, 6854096, 10331638, 10661990,
       15053442, 16082328, 14813811, 8974829, 22208]
    ],
    [ //  7 * (16 ** 52) * G
      [11038231, 4002064, 16397165, 751026, 15960114, 2722007,
       7742727, 16323891, 1084295, 5008281, 2407],
      [15961858, 6269988, 12408859, 12247820, 780798, 9629865,
       166607, 10101097, 5833615, 8299651, 907],
      [3239928, 16261529, 5218126, 15378317, 4838018, 3241007,
       11229935, 618917, 6941541, 3211865, 28254]
    ],
    [ //  8 * (16 ** 52) * G
      [15045627, 6485383, 7450988, 13262142, 10087902, 4091209,
       14685388, 11833793, 11066280, 1132425, 2293],
      [418338, 16453219, 4141828, 8891578, 3475081, 6398971,
       7834640, 12392740, 8619552, 11355089, 12376],
      [7758800, 1048037, 1061436, 10628774, 12836664, 5216773,
       12430489, 12437386, 14933145, 10462447, 9812]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 53) * G
      [13537161, 3725191, 9270155, 4290984, 2513122, 3239350,
       10285393, 3175308, 7501257, 9207666, 18706],
      [5478073, 12326903, 4588763, 13826151, 15114967, 11257449,
       10089790, 12992669, 3024338, 7730739, 24673],
      [4253661, 3608309, 10829857, 10613200, 1103605, 12060425,
       13458182, 4601002, 4518453, 15086953, 27193]
    ],
    [ //  2 * (16 ** 53) * G
      [9499623, 5652703, 15374029, 14416421, 3831310, 3982444,
       612835, 2421743, 863832, 10387027, 17032],
      [302749, 9852788, 2825633, 10026549, 13463201, 3581691,
       5295186, 11652045, 9979618, 13122879, 8030],
      [9227125, 2343730, 15306491, 14518126, 4366855, 15177391,
       14441978, 2161626, 12558161, 2386694, 9246]
    ],
    [ //  3 * (16 ** 53) * G
      [7248118, 9328557, 6629862, 738848, 9593032, 12274508,
       3056926, 4128902, 9277591, 13074355, 23490],
      [8436664, 16554594, 622250, 15991768, 10948370, 9248802,
       12262396, 3264064, 12407790, 5649896, 11206],
      [7056787, 14458793, 14477525, 14555463, 9417085, 6267877,
       15361304, 6821170, 4880432, 7092995, 8157]
    ],
    [ //  4 * (16 ** 53) * G
      [14424318, 14847061, 14486116, 3381739, 14655129, 15094499,
       2322658, 7973955, 14994446, 8373050, 13823],
      [14219177, 10921261, 12557331, 4128202, 12263308, 16233773,
       4218376, 9838130, 15124965, 10559931, 18632],
      [6579269, 5930073, 1440833, 12658870, 2405079, 12128978,
       13174267, 6305225, 4366251, 11080308, 17111]
    ],
    [ //  5 * (16 ** 53) * G
      [16199379, 1303530, 15158882, 4435156, 9738266, 576359,
       14577333, 16733308, 16561458, 1694992, 28653],
      [4040124, 8996755, 15509924, 12773753, 5804558, 11291722,
       5093, 9885824, 4763975, 9623371, 17718],
      [5610607, 6134184, 2415991, 14614590, 2761024, 9070324,
       2742930, 5383138, 3732012, 4635245, 1599]
    ],
    [ //  6 * (16 ** 53) * G
      [5465748, 4360543, 2937554, 4363163, 3384005, 12147914,
       10930141, 9990061, 7417181, 2884655, 23061],
      [3434785, 3979063, 4667780, 3721364, 4717319, 3178151,
       3252805, 13340032, 8581224, 1019501, 26497],
      [2653620, 9419986, 9649899, 106558, 13095843, 2513522,
       9223576, 5534696, 2208771, 11161945, 29476]
    ],
    [ //  7 * (16 ** 53) * G
      [3980942, 4387948, 4621689, 4665536, 13853873, 4308897,
       1364540, 1871577, 16176594, 14770670, 2104],
      [2315467, 16177896, 7187747, 11949850, 6443050, 3658089,
       3597198, 10183958, 10694959, 5244369, 23724],
      [14915844, 5557481, 4623553, 8707688, 3802123, 6123099,
       1880510, 12900518, 8789762, 9010136, 16635]
    ],
    [ //  8 * (16 ** 53) * G
      [14563233, 11178082, 14779589, 859542, 1942784, 4380994,
       3173010, 7897734, 856282, 4606569, 15454],
      [11601761, 14174042, 4646270, 7328055, 4415008, 5649009,
       5164290, 3420034, 7937659, 2629288, 19222],
      [8467329, 120075, 2675137, 7794280, 15077137, 6556126,
       9648191, 833160, 16730186, 12936694, 24963]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 54) * G
      [7076310, 5916190, 8483869, 7829413, 373756, 13883683,
       10642548, 13915508, 123135, 14802020, 6438],
      [4154990, 8735151, 10869574, 15813134, 8376068, 804823,
       16229562, 4059711, 13515909, 14672178, 14864],
      [1560224, 5147370, 16638079, 3809217, 13964614, 12644655,
       16593394, 1528610, 1989909, 13639046, 8097]
    ],
    [ //  2 * (16 ** 54) * G
      [5871666, 5608573, 2149504, 3666261, 4609754, 9642014,
       7622149, 10090231, 7720755, 6536298, 30517],
      [14652587, 11272401, 15284444, 13699085, 7416797, 14836270,
       4128213, 8328169, 10093029, 15538414, 29692],
      [1285299, 15272035, 13436593, 12951614, 9689703, 8991396,
       13151587, 9271246, 8802116, 7041051, 8002]
    ],
    [ //  3 * (16 ** 54) * G
      [9509889, 2509889, 2486217, 1548844, 10729400, 1329137,
       7074575, 5797338, 3256464, 16066333, 19994],
      [10560850, 3524753, 7795070, 5725852, 7045459, 7487159,
       7277979, 16417600, 11002936, 12262207, 2934],
      [9606043, 12712319, 7211192, 13911211, 6779339, 8394686,
       6527419, 2286948, 7514453, 14032567, 31597]
    ],
    [ //  4 * (16 ** 54) * G
      [15941010, 12707920, 13612973, 6327509, 10025551, 6019961,
       12422652, 11376173, 1912655, 10210991, 28734],
      [119495, 11270571, 1595184, 4199483, 16479964, 11698454,
       6660299, 8809662, 16739070, 10184091, 21498],
      [8934485, 13166996, 15035412, 6663892, 3824998, 5960068,
       4111574, 1579959, 12984144, 9692612, 14733]
    ],
    [ //  5 * (16 ** 54) * G
      [14829811, 13723443, 6233163, 1425162, 10359431, 227005,
       15769867, 13909900, 1645331, 10182111, 21424],
      [15197170, 8151250, 11649927, 3179147, 3451552, 15808571,
       15168414, 2637350, 12780919, 10260482, 27036],
      [4649420, 10953561, 8254214, 13428185, 1513653, 15299986,
       4686260, 2674130, 13490439, 15928431, 20938]
    ],
    [ //  6 * (16 ** 54) * G
      [7659530, 10961526, 15967755, 10582651, 951664, 2411619,
       4050739, 3627094, 8650154, 11151651, 21764],
      [11293895, 16357912, 1012602, 12917939, 3373276, 837520,
       3362017, 2853308, 16312730, 2736521, 4782],
      [852431, 12634911, 11446686, 3814647, 13758412, 5120525,
       2216092, 5622389, 15443434, 5237080, 24529]
    ],
    [ //  7 * (16 ** 54) * G
      [4565804, 3006248, 9680348, 688105, 9736625, 14894598,
       14041090, 5090035, 6583505, 15887960, 2367],
      [9685902, 16670399, 6241346, 3593302, 14657617, 2156734,
       10389570, 14741637, 2478376, 4167175, 32215],
      [366633, 2424424, 15053069, 14397219, 7538290, 11282805,
       3847255, 1271589, 11825316, 12369030, 12121]
    ],
    [ //  8 * (16 ** 54) * G
      [1512287, 8209049, 14123908, 5668099, 1806623, 11194797,
       14270071, 8288072, 5353290, 11808302, 21592],
      [9552641, 13983926, 1994817, 11392999, 2104127, 5604741,
       6492467, 1491681, 534705, 6176001, 10917],
      [476239, 9627148, 1109329, 7619101, 12930605, 13132866,
       8584629, 3484492, 7767652, 19082, 5097]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 55) * G
      [207871, 11883884, 3853237, 2697594, 7442871, 8502239,
       2534893, 12713843, 12452853, 15252328, 29101],
      [7030396, 8701312, 8068706, 15162720, 16161147, 13787845,
       5813112, 9136089, 13470576, 14051969, 15752],
      [5166985, 8033056, 2788214, 10461358, 3132107, 4753270,
       13397454, 7806955, 15753139, 6428047, 13360]
    ],
    [ //  2 * (16 ** 55) * G
      [16105289, 10594273, 9625693, 13923168, 4554093, 3339814,
       7828428, 7855280, 14507981, 9737884, 2653],
      [8073652, 1640234, 1506530, 11163520, 8051829, 9643085,
       10913607, 967286, 14306283, 10312991, 28013],
      [11567491, 10849001, 9118385, 12672056, 9818225, 333821,
       7767306, 11108643, 8336222, 5028539, 13112]
    ],
    [ //  3 * (16 ** 55) * G
      [10667957, 10643468, 14302319, 7321167, 5276164, 14081563,
       10245169, 15422260, 8887433, 11767659, 21112],
      [2198413, 6453798, 6370236, 13084684, 8434207, 10413802,
       2823998, 9722033, 3092569, 4701710, 1890],
      [1455962, 390676, 10769121, 8760299, 9940790, 8140524,
       402342, 2549429, 13957889, 15226611, 23792]
    ],
    [ //  4 * (16 ** 55) * G
      [15256244, 6845210, 12973769, 13324178, 2126878, 12336734,
       15043789, 2991419, 9899511, 16687721, 11741],
      [11748008, 13513021, 15646382, 8662455, 10707803, 1306571,
       2130303, 15240294, 7787974, 3713614, 7060],
      [7275290, 7831062, 2656848, 1030051, 8075761, 12416518,
       10879247, 1648073, 7604485, 11892172, 28153]
    ],
    [ //  5 * (16 ** 55) * G
      [16170447, 1648935, 13255361, 4210017, 9539962, 2056591,
       6720414, 14425178, 15470477, 292868, 5526],
      [13295169, 12802888, 7400671, 11678338, 8931103, 1796714,
       2375840, 7604810, 3890985, 5740032, 18206],
      [15546284, 12301228, 15391382, 15278220, 2368437, 12247674,
       3160238, 2411612, 6139439, 5681116, 20675]
    ],
    [ //  6 * (16 ** 55) * G
      [12780312, 12534593, 13502940, 8591389, 12191249, 2728430,
       13556766, 12679616, 4142512, 8096007, 7615],
      [3258724, 10280731, 15978477, 9217306, 8825221, 2065652,
       6679180, 1345906, 2804736, 5496211, 30794],
      [16533792, 16375572, 15019417, 12863903, 13415948, 886,
       12314063, 10752812, 15728874, 14164820, 16275]
    ],
    [ //  7 * (16 ** 55) * G
      [315013, 15165598, 4292995, 280147, 9418526, 15576167,
       9397896, 11375109, 2820506, 5296979, 23971],
      [14764408, 1233273, 6220460, 12315647, 9584627, 13510655,
       14943843, 4912739, 10876415, 8497169, 4051],
      [3596116, 11332772, 15266390, 11430358, 9134440, 224272,
       13331293, 2152838, 14856016, 5749246, 25945]
    ],
    [ //  8 * (16 ** 55) * G
      [131855, 11567017, 4435624, 16016337, 9205354, 8020216,
       6700152, 1421443, 6792360, 11605122, 2282],
      [184492, 4234192, 10927553, 11914457, 6685253, 8776806,
       12909278, 8532349, 14147341, 9653098, 766],
      [12053108, 15794383, 11333468, 10603330, 9008691, 8774178,
       5558002, 13946380, 1337941, 9176202, 12352]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 56) * G
      [3133147, 8930691, 6517661, 11430904, 3725001, 16709626,
       13285199, 3324941, 12379230, 8292372, 29587],
      [3901311, 51481, 7060270, 14736464, 14919824, 6594540,
       12596958, 15528887, 14589466, 264344, 24390],
      [8123533, 7411241, 3455235, 13955176, 13712162, 12437161,
       5719702, 14784277, 14018613, 10807441, 11512]
    ],
    [ //  2 * (16 ** 56) * G
      [1118055, 16615175, 4812179, 8140981, 4983251, 6981341,
       5030515, 8171882, 2435593, 12414552, 8265],
      [13659042, 4750871, 7023797, 3756057, 13776924, 9056292,
       8488343, 14116252, 14066934, 8333457, 31343],
      [10153801, 16616810, 752905, 5979577, 15622334, 12571888,
       2904478, 4989365, 4559901, 11198405, 24593]
    ],
    [ //  3 * (16 ** 56) * G
      [9828412, 9596367, 7429991, 7415952, 8291681, 8018812,
       15964559, 14066151, 6486496, 13376267, 28613],
      [13367440, 13682690, 11166686, 917354, 13670602, 15571451,
       16628150, 6442250, 3410718, 1619833, 27086],
      [9992651, 5580978, 9621999, 13926032, 1748540, 2314973,
       4331679, 1211908, 7406065, 7027429, 5465]
    ],
    [ //  4 * (16 ** 56) * G
      [9533858, 3789375, 13583911, 9950941, 8589873, 1346303,
       11883506, 1247198, 6245850, 3631227, 3362],
      [5317834, 3217022, 14617087, 14272325, 14947723, 5694731,
       2260725, 2698109, 11981112, 14827951, 15012],
      [3343861, 3718954, 12790977, 10676518, 5783439, 13822792,
       10638665, 539313, 8889196, 11169350, 13052]
    ],
    [ //  5 * (16 ** 56) * G
      [8231669, 7245253, 15891397, 10350781, 774893, 14983998,
       14557935, 11190292, 12413532, 15322878, 17959],
      [8899807, 10777383, 16265735, 15864803, 14883080, 9850391,
       14153229, 14004972, 6294505, 6502082, 29807],
      [7116572, 15943083, 2047818, 10044275, 8973170, 1600994,
       9044804, 3365226, 14049939, 1507454, 31561]
    ],
    [ //  6 * (16 ** 56) * G
      [8695908, 16473259, 1322373, 9040828, 7868626, 13503561,
       4487957, 4680412, 4521339, 10712824, 4651],
      [5481181, 1779933, 4150324, 14631676, 1544283, 16315562,
       14241234, 1045906, 9229181, 6426592, 7427],
      [11855188, 3329442, 8372738, 1137944, 13696322, 7985566,
       12484052, 3058612, 6876236, 783659, 711]
    ],
    [ //  7 * (16 ** 56) * G
      [733115, 15485789, 13279879, 477314, 6051728, 8477761,
       2015696, 14697638, 10417632, 5179968, 9779],
      [9269985, 3325765, 11906277, 8173372, 15165664, 12445531,
       9760395, 5689213, 11811331, 9954302, 27398],
      [6464448, 15747807, 6141640, 486820, 15728879, 13805886,
       5786096, 10263737, 1781678, 8340292, 7363]
    ],
    [ //  8 * (16 ** 56) * G
      [13054543, 5659228, 2248847, 15009449, 6407360, 11278800,
       14376005, 16455851, 8401226, 639235, 27752],
      [13545145, 5697993, 7001958, 1631589, 5969400, 2307100,
       3310668, 2549544, 1665080, 7305007, 14900],
      [14314184, 5313250, 15586005, 11659345, 12387121, 7496425,
       14520006, 9832262, 16238032, 1810286, 1425]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 57) * G
      [3669805, 14112438, 12904924, 13207536, 4994191, 13088748,
       8778747, 13555090, 14805639, 3491731, 13061],
      [16686996, 9011397, 13107649, 7434197, 6645609, 10520269,
       12833173, 8478789, 13400450, 8335974, 28203],
      [12801679, 2386167, 11783296, 1677132, 15317634, 1269917,
       10270136, 11253538, 12499554, 96879, 17634]
    ],
    [ //  2 * (16 ** 57) * G
      [14333812, 10961748, 1754306, 5156611, 6114364, 9377678,
       13779587, 12020771, 14476522, 626536, 29850],
      [13266637, 2945974, 12748792, 1635488, 1018174, 15030104,
       468484, 362800, 13736989, 6996566, 27819],
      [12705376, 14721068, 6020319, 5358935, 2516479, 12512003,
       15796026, 2886706, 8095238, 2102477, 27272]
    ],
    [ //  3 * (16 ** 57) * G
      [7634869, 9633444, 9020714, 2074027, 1221705, 10800860,
       4962375, 14167465, 1231950, 15584917, 19831],
      [5237614, 13728943, 10735889, 11745956, 768578, 7090181,
       3993268, 1528140, 12746101, 14387995, 21694],
      [14817436, 14763383, 4552648, 16751044, 14970730, 5456803,
       13135155, 3228895, 4331177, 5611132, 14998]
    ],
    [ //  4 * (16 ** 57) * G
      [2806510, 866292, 16061013, 10002939, 7921668, 5026443,
       8532873, 6116103, 4820236, 5131838, 712],
      [12233298, 9005184, 935059, 15893908, 10006468, 4765260,
       10200148, 15682215, 8040063, 12914853, 21112],
      [4983700, 13661225, 11969869, 14620927, 6112952, 8611573,
       12946862, 15757292, 9490789, 5727873, 22662]
    ],
    [ //  5 * (16 ** 57) * G
      [15692055, 1192218, 13096055, 2268818, 3420417, 10196816,
       8690965, 8033761, 6105545, 9804683, 9289],
      [14834883, 3469373, 9879384, 14057812, 8898734, 15241912,
       1741953, 5309730, 7487379, 15538679, 26464],
      [3531104, 10729388, 5662363, 12223520, 13432639, 5179182,
       1556608, 1764383, 5698791, 12321560, 3478]
    ],
    [ //  6 * (16 ** 57) * G
      [12922242, 12482421, 12137240, 5558442, 12018869, 4034892,
       2608247, 11259709, 2304138, 13730945, 15348],
      [7669217, 3453132, 8958421, 1491794, 13434932, 12754226,
       8390498, 13317797, 7998456, 6928675, 23550],
      [10572203, 11239032, 6494270, 10029367, 15306953, 14890427,
       7228103, 16740733, 15966088, 14529317, 19548]
    ],
    [ //  7 * (16 ** 57) * G
      [9479915, 12012897, 14991606, 2996468, 15368612, 5726240,
       8230705, 11058543, 11303969, 14025314, 13233],
      [11139330, 616423, 8279925, 5200710, 3669500, 12207660,
       3813751, 11690342, 2970411, 6191324, 14903],
      [5103082, 15150893, 13140289, 6473223, 15400600, 11522278,
       5789500, 2343556, 16347974, 4681551, 18105]
    ],
    [ //  8 * (16 ** 57) * G
      [9444956, 16688207, 8522783, 2196663, 749495, 14387243,
       9502996, 15042559, 8757570, 996935, 14099],
      [5780895, 5266445, 7016981, 16525508, 2102215, 6704682,
       11504106, 2400417, 1248799, 11942049, 17408],
      [15538627, 12018838, 3160577, 15544946, 14682800, 1421617,
       5735370, 5376648, 13418183, 12158810, 1706]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 58) * G
      [14618299, 10060789, 11321651, 5319756, 15955343, 10019264,
       658355, 2945299, 2559074, 15530410, 27452],
      [3074799, 11334481, 4805449, 1884619, 12665299, 6851872,
       502170, 2365452, 4926743, 16372166, 21854],
      [7585032, 7387707, 800423, 10727359, 4910856, 4649570,
       10007561, 5715967, 8483997, 5103923, 26463]
    ],
    [ //  2 * (16 ** 58) * G
      [1540860, 5374827, 11800108, 7122307, 8481921, 474724,
       14248292, 13687997, 6604064, 10352385, 5081],
      [14332701, 16177467, 16687407, 10315053, 2480143, 9733895,
       15964862, 105551, 13450307, 5290114, 24820],
      [15057098, 6210337, 10617163, 14096831, 13330889, 2334799,
       1602816, 5136156, 15576192, 14589525, 7174]
    ],
    [ //  3 * (16 ** 58) * G
      [4113634, 8050339, 9345295, 12463840, 588088, 4527462,
       12935976, 10264899, 2995725, 9052140, 19699],
      [7170474, 2834687, 12320725, 14434377, 5442328, 10000180,
       3121997, 6179420, 3324461, 7310973, 30729],
      [16407783, 11166989, 9216170, 4764999, 12885546, 7494649,
       8220675, 5179852, 596670, 11352614, 14140]
    ],
    [ //  4 * (16 ** 58) * G
      [13235580, 6507906, 3584660, 2396997, 13368801, 14375455,
       11747724, 10394701, 4463100, 15980869, 64],
      [14531501, 11074441, 13365694, 6401710, 13315260, 9280827,
       12263323, 9394343, 1222278, 8313425, 8532],
      [5867219, 15284733, 843517, 5311032, 2567305, 1686004,
       506673, 12004260, 2444788, 668490, 25429]
    ],
    [ //  5 * (16 ** 58) * G
      [6934327, 14085557, 14771463, 828718, 8661424, 14048535,
       9497451, 15367168, 16224081, 6473690, 16106],
      [5536585, 5784946, 14719930, 14861320, 378618, 15830515,
       6932276, 6351098, 8222330, 2863018, 14761],
      [9643854, 13046758, 7707940, 6872019, 6522231, 11770463,
       6351754, 7361109, 13223117, 6948453, 26691]
    ],
    [ //  6 * (16 ** 58) * G
      [3096359, 3532832, 11582466, 6617461, 6029538, 2365127,
       14001036, 9544937, 12028409, 15201930, 6070],
      [2101372, 13834216, 6626902, 8653545, 2517060, 16546501,
       12988943, 12705953, 6362226, 6724753, 21363],
      [938583, 1354650, 16538920, 13224627, 9379972, 2017936,
       8936237, 11520757, 16284945, 11904632, 7348]
    ],
    [ //  7 * (16 ** 58) * G
      [4914284, 12610361, 11646564, 10017375, 8969764, 14169100,
       1461194, 5213443, 7615650, 13269214, 13067],
      [10487783, 11166370, 11627380, 15757767, 1171632, 14820339,
       3670027, 5703652, 15691436, 16592258, 11712],
      [1668174, 16745489, 2398254, 2819911, 6905494, 5503993,
       5226441, 12946113, 10427637, 12458806, 15409]
    ],
    [ //  8 * (16 ** 58) * G
      [9734894, 8801544, 7319796, 9550364, 14424558, 10573831,
       11445932, 7960013, 6476987, 6361922, 13067],
      [13320818, 12358649, 10010984, 13094619, 12087583, 9271982,
       11154604, 8326738, 8213947, 12650878, 16846],
      [7176330, 1693602, 7206806, 1941013, 2086046, 14624699,
       7134113, 7591875, 2652029, 5036319, 9908]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 59) * G
      [3843800, 9450809, 13447178, 10562481, 5247281, 12722731,
       7860371, 8069110, 12069805, 12712138, 17161],
      [2645815, 8662448, 14659396, 4714440, 5445776, 9935495,
       9566240, 9794784, 6378873, 9265257, 3639],
      [481877, 9531779, 14473722, 7012511, 14375634, 15666763,
       2938429, 7874989, 16595063, 12929397, 1935]
    ],
    [ //  2 * (16 ** 59) * G
      [8884013, 12391464, 10586079, 2004001, 4601565, 4301587,
       5318003, 5183433, 2714808, 9259949, 24057],
      [3385738, 4938680, 3203584, 2968627, 7822828, 15274820,
       425644, 3842628, 9306281, 3204053, 10022],
      [13175636, 9425132, 10089319, 1180725, 83355, 12098544,
       12334936, 2519647, 10951086, 14985843, 17189]
    ],
    [ //  3 * (16 ** 59) * G
      [3945619, 13037379, 12805501, 8444920, 3628703, 2993765,
       4610871, 4717869, 7240007, 11237753, 18790],
      [6944157, 6462159, 16051492, 14506683, 4857038, 14056234,
       2053810, 3487178, 11645997, 6869059, 23948],
      [11807498, 2969059, 1895987, 1483872, 5134891, 10740952,
       7800715, 7873592, 5170231, 2012184, 30701]
    ],
    [ //  4 * (16 ** 59) * G
      [1587616, 14761760, 6406100, 4079089, 15728610, 2089902,
       15756125, 11950852, 6486976, 8780587, 21216],
      [9628954, 4454558, 12982365, 16664345, 4857578, 4149168,
       8955632, 4825022, 8756189, 864060, 23947],
      [5042874, 7989925, 15143488, 6950, 2385387, 16252375,
       16632186, 6833084, 15387906, 11807573, 1316]
    ],
    [ //  5 * (16 ** 59) * G
      [5523376, 6143716, 15662349, 598021, 15480090, 7981932,
       4478581, 10069112, 15202885, 4366870, 22994],
      [8560300, 14462363, 13679640, 11924857, 11435304, 4338467,
       2779448, 12797458, 13937801, 1094375, 6753],
      [6920108, 4156134, 10768259, 3545145, 4814378, 11871592,
       12687114, 6915550, 11662662, 6195676, 21252]
    ],
    [ //  6 * (16 ** 59) * G
      [5460955, 11749079, 2280331, 11424030, 16560715, 15134716,
       4248842, 13345933, 16239453, 12248564, 9955],
      [4587026, 3989133, 13796570, 14959842, 4375064, 3512509,
       7872382, 11030934, 1499826, 13188950, 30274],
      [9828580, 14329669, 11805475, 8747710, 6851723, 3305182,
       9837657, 4179086, 13220026, 7588373, 2862]
    ],
    [ //  7 * (16 ** 59) * G
      [8343590, 4466881, 10999483, 16472732, 11694627, 12993694,
       203033, 14908325, 10118658, 3673525, 8654],
      [12597845, 12562297, 13569599, 5028698, 7843589, 14917424,
       4578109, 14009682, 6966007, 6865223, 350],
      [420408, 2642464, 15974869, 3502254, 6307410, 9063829,
       10953323, 8595033, 9366985, 8980767, 24022]
    ],
    [ //  8 * (16 ** 59) * G
      [13879382, 8707775, 4508588, 11755506, 2409288, 11339542,
       13262236, 12056717, 12774376, 5721506, 15118],
      [3223684, 2462117, 7478530, 14034696, 2968238, 16589002,
       8728331, 8823083, 8234824, 12859821, 22246],
      [12434150, 16730434, 7980804, 11722271, 2207202, 16439390,
       15947346, 15293875, 584641, 11876239, 2082]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 60) * G
      [3699829, 4736911, 3953136, 10272459, 6143220, 2119090,
       4512159, 10136338, 1091030, 10382364, 11376],
      [7537539, 15897442, 2941367, 15452810, 5405183, 1250379,
       9093076, 14351479, 7495951, 1053852, 32235],
      [6745722, 11496071, 969570, 5592013, 13364228, 14988646,
       3673867, 5799937, 2941674, 9347062, 2278]
    ],
    [ //  2 * (16 ** 60) * G
      [12660909, 5245515, 10237101, 4000724, 3726153, 9027213,
       9981962, 10640445, 12204809, 4163566, 12063],
      [12120825, 644362, 14626605, 12933411, 12132749, 7125420,
       2519926, 4886324, 16194037, 3921720, 19633],
      [1422922, 9205221, 3733380, 14371472, 9765306, 1790117,
       4145013, 12717361, 11415272, 14898112, 6561]
    ],
    [ //  3 * (16 ** 60) * G
      [16385475, 7692474, 6389020, 13034846, 14786720, 6583219,
       1622230, 14897815, 799878, 7016898, 16724],
      [9878973, 7523797, 4240417, 10022652, 14697795, 636307,
       4699201, 10465619, 6729268, 13867266, 29547],
      [3453876, 2969747, 7570771, 6324581, 16585035, 8615238,
       3162716, 13393759, 8366940, 9806520, 16674]
    ],
    [ //  4 * (16 ** 60) * G
      [8312553, 10193141, 2431433, 7207112, 9685798, 13792083,
       1291018, 6090290, 2960948, 5499829, 5345],
      [9693894, 5399010, 14364261, 2175916, 5935619, 10054532,
       13334784, 4589941, 5954944, 12291353, 1888],
      [15106442, 1710029, 8667454, 15559072, 1404329, 13414743,
       9389770, 2932518, 3851762, 12491715, 27444]
    ],
    [ //  5 * (16 ** 60) * G
      [7913650, 3105850, 8188895, 15871490, 4101918, 11903820,
       6179265, 15498524, 2284845, 12685065, 8210],
      [7467731, 6907237, 7999996, 5443187, 13232197, 5256646,
       10671358, 14891751, 7197451, 13088302, 441],
      [13147433, 5629274, 6522891, 4563111, 8594463, 7085844,
       14664423, 4011759, 4959720, 5994574, 2223]
    ],
    [ //  6 * (16 ** 60) * G
      [2041139, 10083464, 11937844, 7836451, 337370, 4322461,
       16475956, 9009885, 3806861, 10318102, 12983],
      [13380683, 1364617, 9298547, 10651415, 14990609, 6606411,
       14088755, 1627432, 14254702, 12703151, 25635],
      [16561002, 16308717, 16370821, 3622629, 12370575, 13880610,
       3733989, 14982627, 4074956, 6224833, 18442]
    ],
    [ //  7 * (16 ** 60) * G
      [6430833, 15141633, 12913489, 9117103, 11863503, 11259142,
       6418266, 2911152, 12042033, 2580492, 18346],
      [13509151, 5039170, 2668129, 4982073, 1678796, 12452718,
       10804252, 6700980, 1871366, 1918825, 9395],
      [1439939, 2026944, 8137300, 8153407, 10813054, 7919121,
       1265314, 15773542, 14524564, 5790996, 21595]
    ],
    [ //  8 * (16 ** 60) * G
      [13908495, 2580128, 12478399, 564206, 15109684, 15150765,
       5035129, 4360467, 12211284, 16368434, 3938],
      [11739617, 14995683, 9789956, 2686750, 11166586, 12426811,
       16604057, 724175, 13160561, 14433892, 19746],
      [3891001, 6654422, 6421684, 5753807, 11430463, 16385372,
       13800762, 16693954, 3609654, 10492470, 7183]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 61) * G
      [8181394, 7621052, 14673748, 15136573, 10141354, 8268047,
       10944643, 4911132, 1819011, 1793343, 25515],
      [12926894, 15067220, 16040222, 2838335, 722625, 8024682,
       8446134, 3363855, 517103, 9421773, 5617],
      [2684044, 484272, 6238837, 5597702, 132928, 5986310,
       1229641, 13974488, 6246541, 7117702, 2160]
    ],
    [ //  2 * (16 ** 61) * G
      [3423743, 10660669, 1569660, 8432582, 9202221, 16763418,
       3527884, 9325024, 10604985, 7073466, 18612],
      [11801158, 1786168, 7064729, 7314114, 3906642, 11255076,
       5093323, 12185417, 8580352, 4406736, 24506],
      [9706192, 14898633, 8690761, 7621007, 7555806, 4086969,
       13657702, 4310014, 15143091, 15595752, 3791]
    ],
    [ //  3 * (16 ** 61) * G
      [13922521, 1023900, 554563, 10760032, 2804891, 11361974,
       8149421, 1611817, 9195648, 14495159, 30601],
      [4208482, 7627753, 13202511, 9305289, 10128878, 13493239,
       9852388, 1456740, 8713269, 7900594, 15201],
      [7272114, 2627853, 16429602, 4640331, 4875954, 7129001,
       8015627, 4637095, 7551183, 13434859, 16950]
    ],
    [ //  4 * (16 ** 61) * G
      [5628532, 4214029, 5473431, 12889387, 6710233, 5715052,
       14265769, 15478704, 12121916, 14753997, 9751],
      [7831030, 2998234, 10370008, 759862, 11630540, 3578225,
       6522124, 1904260, 14864881, 9722696, 23153],
      [5983042, 4052288, 618272, 1094213, 8308228, 8930866,
       3189802, 10237042, 16771946, 2751505, 30686]
    ],
    [ //  5 * (16 ** 61) * G
      [12023976, 5753219, 2928812, 14155409, 13487273, 5889107,
       5570335, 6406840, 14581164, 2945264, 14874],
      [13554378, 1282028, 10126174, 15373883, 10399507, 960140,
       12628502, 13197247, 8878226, 6747053, 22366],
      [9423674, 3811272, 11573632, 2580160, 5924745, 2876724,
       13696876, 4560777, 7383218, 8545566, 25336]
    ],
    [ //  6 * (16 ** 61) * G
      [16718820, 14862169, 11995226, 3870272, 9520585, 7567636,
       16416754, 12871655, 13056661, 13568725, 20206],
      [9050592, 2721385, 7433602, 7657354, 9970145, 2050012,
       3274443, 4302943, 14326865, 2212540, 13607],
      [4180357, 10048033, 4606002, 3574295, 8900365, 5940496,
       11626177, 9327201, 13782049, 2982958, 11611]
    ],
    [ //  7 * (16 ** 61) * G
      [13885137, 15456747, 7602895, 3736089, 5972343, 10598356,
       1310256, 7698168, 5174978, 11991459, 22161],
      [6997299, 13712665, 2842295, 14385342, 7484652, 11412535,
       16547061, 14763215, 4304108, 12384708, 21030],
      [15054151, 7107107, 7961070, 8597718, 6246518, 14477679,
       15297930, 15561697, 9227267, 14294557, 10179]
    ],
    [ //  8 * (16 ** 61) * G
      [14830708, 15708735, 97977, 1462718, 5305503, 9300542,
       14426501, 4106034, 12062969, 8116059, 5943],
      [981494, 3043683, 14690352, 2843854, 13935107, 9617090,
       3165026, 591904, 2809624, 7633576, 24522],
      [2461349, 246620, 15803178, 7064332, 15874604, 2188934,
       863812, 4042125, 7767595, 9649323, 1192]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 62) * G
      [9715199, 308770, 10539718, 4509619, 9223886, 8812732,
       15964032, 6104399, 1877695, 6377275, 4003],
      [9661008, 2821772, 11954440, 12704453, 13213749, 11941113,
       5555423, 7321406, 2867520, 4299549, 16389],
      [12485360, 16694713, 9478147, 3818668, 9028015, 16420384,
       9509204, 16271775, 4238146, 2198255, 8122]
    ],
    [ //  2 * (16 ** 62) * G
      [13169982, 9718010, 4303700, 8103479, 16181402, 6160769,
       8219691, 7667052, 13135426, 3852968, 14638],
      [8061332, 5702718, 8343358, 580271, 1916654, 14610856,
       11246044, 13121990, 7823829, 6099967, 27731],
      [9057711, 3467582, 1461437, 5801960, 491844, 11578158,
       7795354, 1651100, 704827, 8381653, 9697]
    ],
    [ //  3 * (16 ** 62) * G
      [325238, 10213150, 9767464, 14041615, 9313362, 2075424,
       11547753, 5342936, 10466129, 5325866, 9559],
      [15802791, 8385910, 14913887, 3132807, 4862503, 15017667,
       14568731, 13417007, 6916507, 8556425, 27578],
      [16660737, 12347024, 14017233, 10525050, 11880984, 6345804,
       1355652, 9903465, 7044068, 5263231, 21917]
    ],
    [ //  4 * (16 ** 62) * G
      [15422677, 8616115, 8169331, 10835260, 6935398, 47645,
       6486312, 665295, 8270359, 1234304, 427],
      [13788925, 9562102, 1809480, 198520, 4497819, 14826247,
       1925217, 8927375, 4969742, 10920757, 4670],
      [14888342, 1609793, 4723085, 14168408, 15590338, 4577721,
       7460914, 2009922, 1614164, 6415049, 19001]
    ],
    [ //  5 * (16 ** 62) * G
      [15121312, 3924216, 684508, 8323043, 13563956, 4680406,
       6283578, 11113026, 1947491, 12379131, 11478],
      [2309918, 14042355, 1442599, 3472624, 10102286, 12155209,
       1503962, 8631719, 13898015, 15642011, 26796],
      [14139920, 13176563, 800948, 12037380, 9334308, 4072240,
       15841255, 3694809, 587159, 6346165, 22871]
    ],
    [ //  6 * (16 ** 62) * G
      [11166615, 12574980, 13328681, 10790908, 9830408, 9721999,
       9010576, 4164544, 11702697, 10763996, 28831],
      [141200, 13364221, 6326314, 12849495, 11481861, 7599241,
       14908724, 6681746, 5331499, 12967764, 11442],
      [16591562, 6130787, 16771850, 3041614, 2867558, 11549394,
       7272651, 2565107, 13112095, 2747632, 28912]
    ],
    [ //  7 * (16 ** 62) * G
      [15547955, 504622, 15156755, 10769793, 274227, 222894,
       13834591, 13190217, 3229784, 6130284, 2941],
      [1093817, 11512414, 11086442, 15664154, 15770480, 14032760,
       7842362, 7814907, 4970977, 10855079, 17644],
      [9819459, 4731515, 1910228, 10695695, 13861632, 12921712,
       1859809, 14556243, 8251876, 2380076, 10018]
    ],
    [ //  8 * (16 ** 62) * G
      [12923950, 9613129, 13638332, 11724538, 15652881, 5122559,
       9305288, 15704716, 5031235, 14620836, 4533],
      [11105788, 12290626, 5816187, 9874851, 6044023, 11159692,
       7327213, 14843847, 12329126, 6281206, 6515],
      [13124198, 9490498, 8315819, 8329556, 8687119, 9943531,
       13657508, 2425761, 14649695, 9507217, 4079]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 63) * G
      [1863353, 8167851, 11776336, 1488519, 4493118, 9546685,
       8334458, 3429883, 2809537, 2268719, 30073],
      [1840823, 14465115, 10840757, 3963687, 12647656, 1556116,
       1733461, 10793244, 962474, 3723450, 18834],
      [12225367, 7230074, 8121588, 9163108, 10521671, 7335701,
       10903408, 8057286, 3813589, 16414960, 25413]
    ],
    [ //  2 * (16 ** 63) * G
      [1435553, 16342800, 6545154, 11121666, 967709, 1116025,
       10564586, 5061134, 3864777, 780259, 21751],
      [14217380, 13363645, 168915, 16586611, 1387547, 11040219,
       7175959, 8240604, 4353790, 7457935, 15898],
      [12238178, 10740624, 3393596, 168392, 15590247, 50304,
       13423481, 13140024, 12787617, 12591902, 11359]
    ],
    [ //  3 * (16 ** 63) * G
      [232271, 9508631, 8519354, 13229807, 1193761, 8926437,
       15162637, 1873892, 14433222, 11434531, 26799],
      [4550245, 14995714, 9552930, 13292667, 4278977, 16768391,
       12296886, 1413858, 12718095, 13811701, 30169],
      [2549788, 11826742, 14506969, 12361774, 9857334, 7844745,
       4022768, 672025, 13522033, 10633728, 12439]
    ],
    [ //  4 * (16 ** 63) * G
      [16300108, 7812295, 15292226, 111216, 4301118, 6596337,
       16692453, 184749, 8633672, 4035278, 19378],
      [9815174, 15148134, 500066, 3516566, 1925940, 2766611,
       6398161, 3166741, 11514723, 4959654, 22128],
      [16323257, 4892498, 13152108, 14182256, 6709100, 13457502,
       8627144, 4994476, 10848894, 2736144, 11130]
    ],
    [ //  5 * (16 ** 63) * G
      [12701379, 8353744, 16303104, 12240018, 1056950, 14331789,
       13991529, 3337257, 9829600, 554397, 22932],
      [2158, 664511, 8139649, 15152895, 13537886, 2282671,
       7397961, 4022502, 9831963, 10383695, 4558],
      [1424065, 16192472, 6037918, 4742114, 4277853, 3953137,
       13389393, 7164999, 16008083, 2539102, 5961]
    ],
    [ //  6 * (16 ** 63) * G
      [6018491, 11729404, 14792158, 14800912, 14329642, 1857938,
       14464810, 11519183, 12724772, 7897407, 18813],
      [15335982, 13899155, 14040821, 970990, 12370338, 2919516,
       13567800, 9425486, 14213549, 3058950, 28580],
      [7550751, 8538655, 3596918, 5200743, 8187932, 4646783,
       14877946, 8265759, 8424598, 3580759, 30810]
    ],
    [ //  7 * (16 ** 63) * G
      [85291, 12451171, 9142879, 7120727, 5387932, 6156488,
       2645003, 5976013, 298127, 2182232, 4779],
      [5340099, 4364381, 7866116, 11429174, 13457095, 7824234,
       8624218, 41593, 1205803, 15727333, 20839],
      [5489846, 11133199, 1359182, 9095450, 7593055, 1751574,
       5122764, 11073562, 3353125, 2783524, 13225]
    ],
    [ //  8 * (16 ** 63) * G
      [10054658, 16029991, 5414353, 14699799, 11776088, 2899468,
       9863120, 2064008, 9125553, 4352203, 12182],
      [9382618, 6004769, 13269929, 3346361, 15999623, 14223311,
       7165638, 14342729, 12512852, 12752628, 21376],
      [9014538, 2557030, 8035663, 720703, 624537, 12207421,
       6449114, 13672179, 1861276, 4546171, 30561]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 64) * G
      [4502585, 16648574, 14094952, 5703805, 5220483, 10173667,
       5714349, 3459989, 9301656, 6865020, 27792],
      [13525393, 6029645, 16569704, 4792221, 14963338, 450409,
       2720268, 13011233, 8313514, 6000636, 5112],
      [5698920, 7125721, 4653145, 6336986, 1513738, 5295555,
       13076444, 9008651, 10680953, 6202561, 12707]
    ]
  ]
];

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Basic arithmetic operations for big numbers used as modulus
 * in modular arithmetic.
 * @author mschilder@google.com (Marius Schilder).
 */

goog.provide('e2e.BigNumModulus');

goog.require('e2e.BigNum');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('goog.asserts');



/**
 * BigNumModuluses are odd BigNums that could be used as the modulus in modular
 * arithmetic operations in crypto schemes such as RSA.
 * @param {(!e2e.ByteArray|!Uint8Array)} modulus The value of the BigNum in big
 *     endian.
 * @param {!e2e.ByteArray=} opt_RR The precomputed Montgomery constant.
 *     RR is usually (1 << 2|N|) mod N, where N is the modulus and |N| is its
 *     length in bits. Usually |N| is the key size, but this library actually
 *     stores N as a ((key_size / 8 + 2) / 3 * 24)-bit number.
 * @constructor
 * @extends {e2e.BigNum}
 */
e2e.BigNumModulus = function(modulus, opt_RR) {
  e2e.BigNumModulus.base(this, 'constructor', modulus);

  // TODO(user): do we really need to drop leading zeros here?
  this.dropLeadingZeros();
  // Modulus specific initalization.
  this.inverseModulus_ = this.computeInverseModulus_();
  if (goog.isDef(opt_RR)) {
    this.RR_ = new e2e.BigNum(opt_RR);
  } else {
    this.RR_ = this.computeRR_();
  }
  this.R_ = this.montMul1_(this.RR_);

  /**
   * @private
   * @type {e2e.FastModulus}
   */
  this.fastModulus_;
};
goog.inherits(e2e.BigNumModulus, e2e.BigNum);


/**
 * Enable this bignum to perform fast modulus operations by specifying the type
 * of FastModulusType we should create
 *
 * @param {function(new:e2e.FastModulus, !e2e.BigNum)} fastType
 */
e2e.BigNumModulus.prototype.setFastModulusType = function(fastType) {
  goog.asserts.assert(this.fastModulus_ == null, 'Fast modulus already set');
  this.fastModulus_ = new fastType(this);
};


/**
 * Enable this bignum to perform fast modulus operations by specifying the type
 * of FastModulusType we should create
 *
 * @param {e2e.FastModulus} fastModulus
 */
e2e.BigNumModulus.prototype.setFastModulus = function(fastModulus) {
  goog.asserts.assert(this.fastModulus_ == null, 'Fast modulus already set');
  this.fastModulus_ = fastModulus;
};


/**
 * Creates a BigNumModulus from a BigNum
 *
 * @param {!e2e.BigNum} bignum number to clone.
 * @return {!e2e.BigNumModulus} a new object.
 */
e2e.BigNumModulus.fromBigNum = function(bignum) {
  return new e2e.BigNumModulus(bignum.toByteArray());
};


/**
 * Calculates base ^ exp mod this. Input and output are big endian.
 * @param {!e2e.ByteArray|!Uint8Array} base Base.
 * @param {!e2e.ByteArray|!Uint8Array} exp Exponent.
 * @return {!e2e.ByteArray} Result of modular exponentiation.
 */
e2e.BigNumModulus.prototype.pow = function(base, exp) {
  var base_ = new e2e.BigNum(base);
  return this.modPower(base_, exp).toByteArray();
};


/**
 * Calculates base ^ 3 mod this. Input and output are big endian.
 * @param {!e2e.ByteArray} base Base.
 * @return {!e2e.ByteArray} Result of modular exponentiation.
 */
e2e.BigNumModulus.prototype.pow3 = function(base) {
  var base_ = new e2e.BigNum(base);
  return this.modExp3_(base_).toByteArray();
};


/**
 * Calculates a * b mod this. Input and output are big endian.
 * @param {!e2e.ByteArray} a Multiplicand.
 * @param {!e2e.ByteArray} b Multiplicator.
 * @return {!e2e.ByteArray} Result of multiplication mod this.
 */
e2e.BigNumModulus.prototype.mul = function(a, b) {
  var a_ = new e2e.BigNum(a);
  var b_ = new e2e.BigNum(b);
  return this.modMul_(a_, b_).toByteArray();
};


/**
 * Calculates a + b mod this.
 * @param {!e2e.BigNum} a First addend. Must be less than this.
 * @param {!e2e.BigNum} b Second addend. Must be less than this.
 * @return {!e2e.BigNum} Result of addition mod this.
 */
e2e.BigNumModulus.prototype.modAdd = function(a, b) {
  if (!(a.compare(this) < 0 && b.compare(this) < 0)) {
    throw new e2e.error.InvalidArgumentsError(
        'Arguments must be in valid range.');
  }

  var sum = a.add(b);
  return sum.subtractIfGreaterOrEqual(this).setSize(this.n.length);
};


/**
 * Calculates a - b mod this.
 * @param {!e2e.BigNum} a Minuend.  Must be less than this.
 * @param {!e2e.BigNum} b Subtrahend.  Must be less than this.
 * @return {!e2e.BigNum} Result of subtraction mod this.
 */
e2e.BigNumModulus.prototype.modSubtract = function(a, b) {
  if (!(a.compare(this) < 0 && b.compare(this) < 0)) {
    throw new e2e.error.InvalidArgumentsError(
        'Arguments must be in valid range.');
  }

  var result = a.add(this).subtract(b);
  return result.subtractIfGreaterOrEqual(this).setSize(this.n.length);
};


/**
 * Calculates base ^ exp mod this.
 * @param {!e2e.BigNum} base Base.
 * @param {(!e2e.ByteArray|!e2e.BigNum|!Uint8Array)} exp Exponent.
 * @return {!e2e.BigNum} Result of modular exponentiation.
 */
e2e.BigNumModulus.prototype.modPower = function(base, exp) {
  if (exp instanceof e2e.BigNum) {
    exp = exp.toByteArray();
  }
  return this.modExp_(base, exp);
};


/**
 * Calculates a * b mod this. Input and output are big endian.
 * @param {!e2e.BigNum} a Multiplicand.
 * @param {!e2e.BigNum} b Multiplicator.
 * @return {!e2e.BigNum} Result of multiplication mod this.
 */
e2e.BigNumModulus.prototype.modMultiply = function(a, b) {
  if (!(a.compare(this) < 0 && b.compare(this) < 0)) {
    throw new e2e.error.InvalidArgumentsError(
        'Arguments must be in valid range.');
  }

  // Perform the multiply using Montgomery reduction.
  return this.modMul_(a, b);
};

/**
 * Calculates value mod this.
 * @param {!e2e.BigNum} value .
 * @return {!e2e.BigNum} value % this.
 */
e2e.BigNumModulus.prototype.residue = function(value) {
  if (this.fastModulus_) {
    return this.fastModulus_.residue(value);
  }
  return value.mod(this);
};


/**
 * Calculates a * b mod this.
 * @param {!e2e.BigNum} a Multiplicand.
 * @param {!e2e.BigNum} b Multiplicator.
 * @return {!e2e.BigNum} The result of the multiplication.
 * @private
 */
e2e.BigNumModulus.prototype.modMul_ = function(a, b) {
  var bR = this.montMul_(b, this.RR_);
  var r = this.montMul_(a, bR);
  return r;
};


/**
 * Calculates base^3 mod this.
 * @param {!e2e.BigNum} base The base.
 * @return {!e2e.BigNum} Result.
 * @private
 */
e2e.BigNumModulus.prototype.modExp3_ = function(base) {
  // accu = base * RR * 1/R = base * R mod this.
  var accu = this.montMul_(base, this.RR_);
  // result = accu * accu * 1/R = base^2 * R mod this.
  var square = this.montMul_(accu, accu);
  // result = square * base * 1/R = base^3 mod this.
  this.montMul_(square, base, accu);
  return accu;
};


/**
 * Internal modular exponentiation implementation.
 * @param {!e2e.BigNum} input Input.
 * @param {!e2e.ByteArray|!Uint8Array} exp Exponent.
 * @return {!e2e.BigNum}
 * @private
 */
e2e.BigNumModulus.prototype.modExp_ = function(input, exp) {
  // base = input * RR * 1/R = input * R mod M
  var base = this.montMul_(input, this.RR_);
  // Compute exponent window, 4 bits wide.
  var lookup = new Array(16);
  // lookup[0] = 1 * R mod M
  lookup[0] = this.R_;
  for (var i = 1; i < 16; ++i) {
    // lookup[i] = lookup[i-1] * base = base ^ i
    lookup[i] = this.montMul_(base, lookup[i - 1]);
  }

  var tmp = e2e.BigNum.createBigNumOfSize(this.n.length);
  // accu =  R mod M
  var accu = this.R_.clone();
  var n = exp.length;
  // We calculate (input * R) ^ exp byte by byte.
  for (var e = 0; e < n; ++e) {
    // The base of exp is 256 (8 bits), so multiply by accu ^ 256.
    // accu = ((input * R) ^ exp[e]) * (accu ^ 256)
    // We precalculate first 16 powers of input * R, so we do it in two steps.
    this.montMul_(accu, accu, tmp);
    this.montMul_(tmp, tmp, accu);
    this.montMul_(accu, accu, tmp);
    this.montMul_(tmp, tmp, accu);
    this.montMul_(accu, lookup[(exp[e] >> 4) & 15], tmp);
    this.montMul_(tmp, tmp, accu);
    this.montMul_(accu, accu, tmp);
    this.montMul_(tmp, tmp, accu);
    this.montMul_(accu, accu, tmp);
    this.montMul_(tmp, lookup[exp[e] & 15], accu);
  }

  // We are finished, let's calculate result = accu * R * 1 / R = accu mod M
  this.montMul1_(accu, tmp);
  return tmp;
};


/**
 * Demontgomerize a number.  To divide the number by R = (2^24)^(this.n.length),
 * we repeatedly divide it by 2^24.
 * @param {e2e.BigNum} b Number to multiply.
 * @param {e2e.BigNum=} opt_c Output.
 * @return {!e2e.BigNum} Result of multiplication.
 * @private
 */
e2e.BigNumModulus.prototype.montMul1_ = function(b, opt_c) {
  var n = this.n.length;
  var c = opt_c || e2e.BigNum.createBigNumOfSize(n);
  for (var i = 0; i < n; ++i) {
    c.n[i] = b.n[i];
  }
  for (var i = 0; i < n; ++i) {
    this.montMulReduce_(c);
  }
  this.montMulNormalize_(c, n);
  return c;
};


/**
 * Montgomery multiplication (see HAC 14.36).
 * Compute c[] = a[] * b[] / R mod this
 * Note that c cannot be a or b. a can be small.
 * @param {e2e.BigNum} a Multiplicand.
 * @param {e2e.BigNum} b Multiplicator.
 * @param {e2e.BigNum=} opt_c Result.
 * @return {!e2e.BigNum} Multiplication.
 * @private
 */
e2e.BigNumModulus.prototype.montMul_ = function(a, b, opt_c) {
  var n = this.n.length;
  var c = opt_c || e2e.BigNum.createBigNumOfSize(n);
  for (var i = 0; i < n; ++i) {
    c.n[i] = 0;
  }

  for (var i = 0; i < n; ++i) {
    this.montMulAdd_(a.n[i] | 0, b, c);
  }
  this.montMulNormalize_(c, n);
  return c;
};


/**
 * Calculates (a * b[] + c[])/ 2^24 mod this.
 * @param {!number} a Multiplicand.
 * @param {e2e.BigNum} b Multiplicator.
 * @param {e2e.BigNum} c Accumulator.
 * @private
 */
e2e.BigNumModulus.prototype.montMulAdd_ = function(a, b, c) {
  // Montgomery Reduction. See HAC 14.29, HAC 14.32 and HAC 14.36.
  var A = a * b.n[0] + c.n[0];
  var U = ((A & e2e.BigNum.BASE_MASK) * this.inverseModulus_) &
      e2e.BigNum.BASE_MASK;
  A = A + U * this.n[0];

  var i = 1;
  var n = this.n.length;
  for (; i < n; ++i) {
    A = ((A / e2e.BigNum.BASE) | 0) + a * (b.n[i] | 0) + c.n[i] +
        U * this.n[i];
    c.n[i - 1] = A & e2e.BigNum.BASE_MASK;
  }
  c.n[i - 1] = ((A / e2e.BigNum.BASE) | 0);
};


/**
 * Calculates c[] / 2^24 mod this.  This is the same code as montMulAdd_, but
 * optimized for a = 0. The incoming accumulator must be the
 * same length as this.
 * @param {e2e.BigNum} c Accumulator.
 *     as this.n.length.
 * @private
 */
e2e.BigNumModulus.prototype.montMulReduce_ = function(c) {
  // Montgomery Reduction. See HAC 14.29, HAC 14.32 and HAC 14.36.
  var A = c.n[0];
  var U = (A * this.inverseModulus_) & e2e.BigNum.BASE_MASK;
  A = A + U * this.n[0];

  var i = 1;
  var n = this.n.length;
  for (; i < n; ++i) {
    A = ((A / e2e.BigNum.BASE) | 0) + c.n[i] + U * this.n[i];
    c.n[i - 1] = A & e2e.BigNum.BASE_MASK;
  }
  c.n[i - 1] = ((A / e2e.BigNum.BASE) | 0);
};


/**
 * Normalize the result of montMul_ or montMulAdd_.  The incoming bignum
 * yas have the same length as this, and is in the range
 * 0 <= c < 2 * this.  c might be a slightly malformed bignum in that its
 * high word will be in the range [0, 2^25).
 * @param {e2e.BigNum} c
 * @param {number} n
 * @private
 */
e2e.BigNumModulus.prototype.montMulNormalize_ = function(c, n) {
  var accu = 0;
  for (var i = 0; i < n; ++i) {
    accu += c.n[i] - this.n[i];
    c.n[i] = accu & e2e.BigNum.BASE_MASK;
    accu >>= 24;
  }
  var mask = accu >> 24;
  accu = 0;
  for (var i = 0; i < n; ++i) {
    accu += c.n[i] + (this.n[i] & mask);
    c.n[i] = accu & e2e.BigNum.BASE_MASK;
    accu >>= 24;
  }
};


/**
 * Computes RR = 1 << (2 * |modulus|), the Montgomery constant.
 * @return {e2e.BigNum} The computed RR.
 * @private
 */
e2e.BigNumModulus.prototype.computeRR_ = function() {
  var n = this.n.length;
  var tmp = e2e.BigNum.createBigNumOfSize(2 * n + 1);
  for (var i = 0; i < 2 * n; ++i) {
    tmp.n[i] = 0;
  }
  tmp.n[2 * n] = 1;
  return tmp.mod(this);
};


/**
 * Computes the negative inverse of least significant digit of modulus.
 * That is m' = -m ^ -1 mod BASE used in reduction (see HAC 14.32).
 * @return {number} The negative inverse of the least significant digit.
 * @private
 */
e2e.BigNumModulus.prototype.computeInverseModulus_ = function() {
  var b = 1;
  var first = this.n[0];
  for (var c = 1; c < e2e.BigNum.BASE; c <<= 1) {
    if (b * first & c) {
      b |= c;
    }
  }
  return e2e.BigNum.BASE - b;
};


// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview BigNum to be used over a prime field (for DSA/ElGamal).
 */

goog.provide('e2e.BigPrimeNum');

goog.require('e2e.BigNum');
goog.require('e2e.BigNumModulus');
goog.require('e2e.openpgp.error.InvalidArgumentsError');



/**
 * BigPrimeNums are odd prime BigNumModuluses that could be use as the modulus
 * in modular arithmetic operations in crypto schemes such as ECDSA or ECDH.
 * @param {!e2e.ByteArray} modulus The modulus to use.
 * @constructor
 * @extends {e2e.BigNumModulus}
 */
e2e.BigPrimeNum = function(modulus) {
  e2e.BigPrimeNum.base(this, 'constructor', modulus);
};
goog.inherits(e2e.BigPrimeNum, e2e.BigNumModulus);


/**
 * Computes this - 1 - a, thus Vx,
 *     this.mul(this.pow(x, a), this.pow(x, this.negateExponent(a))) == 1.
 * @param {!e2e.ByteArray} input Number to negate.
 * @return {!e2e.ByteArray} Negated number.
 */
e2e.BigNum.prototype.negateExponent = function(input) {
  return this.negateExponent_(input);
};


/**
 * Compute this - 1 - a, with 0 <= a < this.
 * @param {!e2e.ByteArray} a number to negate.
 * @return {!e2e.ByteArray} The negation of the input.
 * @private
 */
e2e.BigPrimeNum.prototype.negateExponent_ = function(a) {
  return this.subtract(e2e.BigNum.ONE).subtract(
      new e2e.BigNum(a)).toByteArray();
};


/**
 * Calculates x^{-1} mod this using Fermat's Little Theorem. Only works if
 *     this is a prime and x is smaller than q.
 * @param {!e2e.BigNum} x The number to be inversed.
 * @return {!e2e.BigNum}
 */
e2e.BigPrimeNum.prototype.modInverse = function(x) {
  if (!x.isBetween(e2e.BigNum.ZERO, this)) {
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'The number to be inversed should be in [1, this-1].');
  }
  // x^-1 = x^{q-2} (mod q).
  return this.modPower(x, this.subtract(e2e.BigNum.TWO));
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Precomputed powers of the P_384 generator point.
 *
 * This file was generated by looking at the document
 *   e2e/ecc/create_fast_multiply_table.html?curve=384
 * in a web browser, and then copying its output.
 *
 * THIS IS A GENERATED FILE.  DO NOT MODIFY.
 * Generated: Mon Feb 17 2014 13:43:29 GMT-0800 (PST)
 *
 * @author fy@google.com (Frank Yellin)
 */

goog.provide('e2e.ecc.constant.p_384.G_FAST_MULTIPLY_TABLE');


/**
 *
 * The value of G_FastMultiply[i][j] gives the value of
 *     ((16 ** i) * j) * G
 * where G is the NIST-specified point that is a generator for the
 * P_384 curve.
 *
 * Each non-infinite point is represented as [X, Y], where X and Y
 * each represent a bignum as a base 2**24 array of integers in little-endian
 * order.  The point at infinity is represented by {@code null}.
 *
 * @type {!Array.<!Array.<Array.<!Array.<!number>>>>}
 */
e2e.ecc.constant.p_384.G_FAST_MULTIPLY_TABLE = [
  [
    null,
    [ //  1 * (16 ** 0) * G
      [7735991, 6174834, 7092820, 12539177, 193117, 2766933,
       14713428, 5896001, 10984344, 3891851, 7630365, 15933613,
       11650846, 341902, 2277003, 11175882],
      [15339103, 1932432, 10320451, 1932929, 6336974, 12107786,
       1291760, 15325745, 10097788, 1948968, 2750708, 9605852,
       10393791, 2912093, 4888102, 3545054]
    ],
    [ //  2 * (16 ** 0) * G
      [9822049, 11126610, 16276374, 12455524, 14739566, 7249487,
       13737913, 5362183, 16004310, 5855654, 15763714, 12934039,
       2490437, 13818217, 359331, 579993],
      [9703040, 1994762, 2974032, 5061090, 16597993, 11806047,
       6235498, 9457232, 7128126, 14185916, 7647861, 16608698,
       12576991, 3993015, 16407323, 9339121]
    ],
    [ //  3 * (16 ** 0) * G
      [51249, 15058693, 852695, 5252696, 572334, 7186100,
       4248406, 12494066, 3001606, 3739680, 10013597, 6282365,
       7945342, 16389220, 13918319, 490049],
      [3087857, 2646026, 10008159, 14988754, 4898155, 2010306,
       973841, 16214092, 1137317, 11803781, 10061088, 174588,
       769686, 4359037, 13241100, 13211127]
    ],
    [ //  4 * (16 ** 0) * G
      [4069429, 14037446, 2154991, 8272465, 9019737, 16555285,
       11358684, 10837448, 5021868, 638219, 15439847, 7811613,
       13150937, 9607361, 13456044, 1278545],
      [7400807, 1835698, 6902943, 3652517, 7571390, 10804461,
       13596970, 11210339, 12323315, 6132106, 6385092, 8498006,
       15245953, 3020337, 9988518, 13290210]
    ],
    [ //  5 * (16 ** 0) * G
      [7177404, 14402435, 15076028, 1876631, 8925002, 8630327,
       13362533, 5203553, 16355269, 15015359, 6812168, 10495460,
       3976286, 13072215, 10666577, 1170980],
      [12677434, 1354726, 3348548, 715003, 7825517, 1764145,
       3389072, 9214053, 14016232, 4486996, 12920907, 655591,
       5781481, 16329999, 13071424, 9414294]
    ],
    [ //  6 * (16 ** 0) * G
      [3524063, 15762766, 15010103, 196400, 3243378, 3682337,
       15884887, 1883457, 1007013, 12368767, 13878078, 7286037,
       7332050, 13808162, 11325540, 6454241],
      [15792436, 10750163, 3217203, 8708453, 12868493, 4462084,
       6371093, 10061391, 5207884, 5460580, 7713481, 12668693,
       15130022, 11649563, 5026808, 620138]
    ],
    [ //  7 * (16 ** 0) * G
      [11981025, 373903, 11666447, 5618155, 348783, 1855627,
       10353275, 2971852, 15359994, 15308795, 16690543, 2313951,
       10456767, 4688114, 7562702, 2636829],
      [1240972, 5036741, 10380390, 3319695, 14175966, 2250288,
       13639101, 14272812, 7968553, 14182381, 4659809, 9180816,
       5435355, 1804474, 9462244, 9729481]
    ],
    [ //  8 * (16 ** 0) * G
      [2279549, 11692504, 15525609, 15991765, 3299542, 1178458,
       7546223, 9440316, 5773578, 2260926, 3425727, 10943032,
       1131159, 14728821, 9348502, 1479287],
      [2820818, 12559362, 9269098, 13488496, 11395561, 15473003,
       12774414, 12393520, 5381332, 4906093, 926293, 4045053,
       5474490, 1075843, 5701844, 14471734]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 1) * G
      [1945551, 12096064, 1156194, 4003192, 9354359, 5782444,
       9709736, 10773754, 1387766, 14676197, 1731456, 11678033,
       12421346, 3578975, 3887746, 14014620],
      [11220595, 12015083, 2320418, 16030706, 2165944, 8043217,
       8274954, 10267557, 2767835, 5227534, 15848477, 10130504,
       8482142, 447041, 10346793, 14161186]
    ],
    [ //  2 * (16 ** 1) * G
      [16281302, 3138911, 13880552, 14817260, 8493960, 11492420,
       2933932, 6368463, 10071907, 6393197, 11837313, 2087346,
       11246047, 13002635, 12968187, 8352598],
      [6391675, 2943081, 12735470, 11166027, 6100243, 13062599,
       10049896, 15362880, 12838642, 6184416, 6433733, 10177702,
       13739515, 674371, 1958405, 14681011]
    ],
    [ //  3 * (16 ** 1) * G
      [2883721, 1283618, 13396080, 2925879, 6462532, 6999654,
       3643588, 2083518, 3166256, 15431472, 3769922, 11857374,
       14194085, 13500103, 10076130, 15439485],
      [11898694, 6958988, 1079597, 7764370, 14238661, 1175360,
       2830756, 11279146, 1046694, 1034715, 14329178, 8217625,
       2336535, 4467263, 2548958, 15285853]
    ],
    [ //  4 * (16 ** 1) * G
      [2580575, 13045651, 14556521, 13362751, 6528404, 2466794,
       16554628, 5875097, 6686962, 15051730, 6368933, 7757939,
       14899265, 7864390, 11147146, 12706169],
      [7311013, 15774853, 12094277, 12717534, 15931488, 1791726,
       2011042, 16246825, 4329131, 7749794, 11709888, 6620017,
       12214641, 10933769, 7228860, 12813359]
    ],
    [ //  5 * (16 ** 1) * G
      [3051705, 6385010, 5065633, 3957017, 2890992, 4980821,
       887093, 3625490, 4767352, 8119145, 12284368, 5791434,
       12748381, 8275928, 7709167, 16139680],
      [11495986, 1737119, 7978914, 4572560, 10088571, 4840714,
       5692660, 12921426, 2116857, 1246863, 11953008, 11542273,
       3479637, 6246165, 13904057, 6829317]
    ],
    [ //  6 * (16 ** 1) * G
      [6496049, 11507167, 12142603, 14934304, 14217436, 15773120,
       16760064, 10733930, 12677990, 14455446, 2523117, 11953516,
       2437628, 7182919, 11364919, 12572673],
      [2598865, 13586746, 1991818, 2397047, 6391891, 5542607,
       7818704, 14062645, 6289990, 13515436, 15278888, 6036164,
       465242, 8748456, 12989122, 6674157]
    ],
    [ //  7 * (16 ** 1) * G
      [5339272, 14576597, 1888441, 11352906, 12445835, 3682161,
       12338981, 4531820, 3323081, 8284542, 13670796, 15034947,
       270199, 4854694, 2158905, 2550009],
      [14907641, 7563746, 5157467, 15974292, 3181231, 16674758,
       15732257, 11422285, 15007993, 4723289, 15976661, 8945948,
       15953087, 4456761, 4152614, 261016]
    ],
    [ //  8 * (16 ** 1) * G
      [14012562, 576236, 564189, 11961957, 1408315, 13721708,
       9926870, 7986972, 14866905, 10841939, 4843567, 7140302,
       6849169, 7688866, 6170775, 7985694],
      [2398713, 7268344, 3761639, 15665864, 13639723, 12184470,
       13424430, 11622314, 10454556, 14998659, 486934, 9111965,
       6970107, 10247548, 2895147, 5744869]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 2) * G
      [15389412, 10979190, 14466398, 15389904, 14741564, 16641464,
       9611231, 10623295, 1819486, 4618805, 9090034, 3589377,
       14315270, 9590238, 13855014, 2204917],
      [15337419, 11850761, 8604170, 12358251, 5722012, 5799645,
       11179647, 6974066, 7528204, 5080579, 14735245, 8555829,
       10851758, 4559337, 3559505, 3703954]
    ],
    [ //  2 * (16 ** 2) * G
      [12148299, 16105426, 7228348, 5321883, 12575797, 1297640,
       16079540, 5707059, 1633472, 16521687, 4111721, 3812129,
       14589444, 3906420, 11498769, 11158270],
      [12341559, 1218244, 1944549, 11013353, 5586853, 14655984,
       12545308, 16221697, 1304196, 15914464, 12130139, 3532650,
       11695544, 199232, 5728516, 7965392]
    ],
    [ //  3 * (16 ** 2) * G
      [2100818, 12731858, 1849312, 8180021, 15259400, 16476638,
       3277821, 2044496, 8579837, 6878814, 3413845, 15489459,
       7797133, 16733024, 1030019, 7207413],
      [11367428, 15239323, 9272115, 16027908, 8610629, 15939430,
       6237251, 2289123, 5389297, 11533654, 5249053, 1391907,
       4653619, 13305190, 1969993, 4077715]
    ],
    [ //  4 * (16 ** 2) * G
      [7988994, 2285783, 4844099, 14373313, 13631736, 8755361,
       12523367, 4198280, 1182596, 14649866, 16743246, 4619323,
       4681001, 16573102, 12607245, 2839160],
      [7426384, 15119058, 15768620, 6802170, 4315069, 5382062,
       30245, 640800, 2330870, 4797302, 14907209, 14862297,
       13411279, 1083285, 14840955, 4816453]
    ],
    [ //  5 * (16 ** 2) * G
      [59274, 6235380, 1922297, 7516883, 446077, 10672131,
       6357637, 7989737, 15502600, 2345942, 10669455, 1243535,
       5741176, 15694608, 13170945, 7999899],
      [5242722, 8899290, 15475951, 8664569, 2717037, 16483288,
       7649752, 13707346, 12648249, 7989388, 5479141, 1367185,
       16311426, 4509177, 16052066, 339728]
    ],
    [ //  6 * (16 ** 2) * G
      [11452258, 14950952, 5312295, 3309679, 12685227, 9178835,
       16670035, 13469027, 10370451, 10358711, 4821361, 14031477,
       13871128, 5267695, 1187436, 12678726],
      [3675765, 10263573, 10253272, 2517641, 12106752, 2436797,
       5964807, 16223370, 2674443, 695215, 1965651, 6978509,
       1734327, 14922502, 10339266, 14885902]
    ],
    [ //  7 * (16 ** 2) * G
      [16158074, 6801305, 14315465, 5547019, 12751748, 11641366,
       420301, 14138400, 4798609, 214826, 1878229, 11830999,
       5493349, 10191817, 6425690, 5454638],
      [11183975, 3312021, 9807480, 16565817, 1881565, 1228686,
       11244829, 5961295, 15347693, 15699620, 14977719, 119385,
       8489869, 9684715, 16016189, 3145462]
    ],
    [ //  8 * (16 ** 2) * G
      [8653006, 10557240, 7047443, 10767773, 12881328, 10553681,
       14311932, 467306, 13267327, 11369917, 6596011, 10094190,
       15401586, 10121549, 7931453, 2722689],
      [9629719, 15727259, 14808608, 6589788, 6331293, 9491007,
       8153432, 8243788, 6574891, 14300160, 1946964, 6717710,
       1104368, 5669606, 7853256, 16578110]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 3) * G
      [11389420, 1071141, 12255464, 1602482, 9329228, 5839501,
       16342303, 10987650, 2618439, 1477228, 4676807, 3432915,
       9855680, 6471271, 3772892, 11686273],
      [124112, 11866343, 14645592, 1509614, 6237160, 2116206,
       2051961, 11579998, 15579406, 9843371, 2431559, 11541486,
       2999130, 12768548, 12056848, 11050941]
    ],
    [ //  2 * (16 ** 3) * G
      [14914913, 9518422, 11706629, 5016115, 15006911, 881003,
       6568657, 448365, 1042031, 3943643, 7778773, 11023570,
       4744120, 7358958, 8556782, 10570717],
      [12479401, 11548193, 3714370, 2313719, 14593810, 2651165,
       7359409, 10414526, 873554, 15533106, 5490238, 1783805,
       9119961, 1785637, 15514716, 9206860]
    ],
    [ //  3 * (16 ** 3) * G
      [2475044, 2604365, 754286, 14952097, 14663705, 12950968,
       2230082, 600840, 7026117, 14427434, 12997877, 9879866,
       8649963, 14679457, 8158962, 11822221],
      [3513865, 3496575, 15016537, 4851944, 4160975, 10785136,
       11363578, 9406680, 10019522, 729892, 4663493, 3737696,
       6970365, 11301577, 15708389, 9931340]
    ],
    [ //  4 * (16 ** 3) * G
      [14058691, 11789307, 14561917, 4589320, 1706195, 11272753,
       9055247, 11433361, 6399106, 4839697, 1343331, 15486260,
       15086949, 1224703, 8026679, 11373226],
      [5115852, 11430732, 9356858, 13173446, 10493705, 489693,
       7958598, 13973714, 2931743, 6957697, 736486, 13676770,
       6796025, 5529467, 11714094, 12871112]
    ],
    [ //  5 * (16 ** 3) * G
      [223316, 15490562, 9143457, 8491206, 6063144, 1558333,
       5288348, 9489962, 6647409, 13029221, 8788159, 7518170,
       2338625, 12752027, 1106420, 7539936],
      [13256470, 5252913, 4366848, 7117713, 6663224, 12535639,
       12133138, 109879, 9898595, 4205148, 15293705, 15057317,
       14653171, 2268794, 3972730, 2282783]
    ],
    [ //  6 * (16 ** 3) * G
      [9334563, 12588068, 10782910, 2702798, 8601833, 7445978,
       361097, 11227912, 2162057, 2332858, 5851832, 665331,
       9705137, 14063652, 4918461, 7467391],
      [5067962, 7883303, 10189556, 551641, 10663516, 16659085,
       10056627, 5844713, 4090527, 13345868, 14617064, 1511145,
       12171508, 8084299, 8603383, 8176419]
    ],
    [ //  7 * (16 ** 3) * G
      [2233931, 1317102, 2861830, 15264663, 9559669, 15518318,
       10064731, 3476753, 10924118, 5175434, 4165910, 7080589,
       7607994, 14223430, 14879935, 10823714],
      [13166801, 9357158, 15046849, 1307823, 1151722, 7230096,
       10577475, 14825278, 1984415, 8379126, 7303940, 7865513,
       13008014, 11221662, 11924969, 5039002]
    ],
    [ //  8 * (16 ** 3) * G
      [14009520, 14540917, 3285287, 1920650, 2739874, 6853091,
       9693154, 992048, 5336876, 3667942, 4845474, 7299573,
       4575350, 10691104, 9915679, 6968698],
      [13094845, 13299027, 10296702, 10160345, 3418631, 2164501,
       3419469, 7942891, 7118490, 4263465, 5028747, 1632654,
       4969820, 1969260, 11423022, 16681988]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 4) * G
      [904612, 7406405, 16481119, 2162693, 1945263, 16009113,
       11528169, 3772806, 10611108, 2881888, 7962815, 2881190,
       7558681, 7159633, 3971001, 1306159],
      [148664, 16195874, 4930736, 15107594, 13519199, 5352865,
       8080663, 12624195, 6164718, 16364789, 285450, 10272476,
       15882846, 15337328, 12344337, 4986184]
    ],
    [ //  2 * (16 ** 4) * G
      [5826367, 4799524, 16111519, 7123715, 2874442, 13484188,
       8648975, 12779413, 1484934, 14457476, 14013039, 4332454,
       5894359, 4271471, 4169644, 7682043],
      [10134986, 10896270, 12469090, 6970647, 1796435, 16319222,
       1878086, 9682822, 6038697, 7361247, 4549793, 15743570,
       9101862, 4527107, 3504338, 9978642]
    ],
    [ //  3 * (16 ** 4) * G
      [11953569, 7668920, 11954241, 7651158, 8646782, 15789217,
       2973878, 10612316, 12209342, 11728407, 7427895, 9352216,
       12934714, 7467984, 14821917, 6428859],
      [4397962, 6413614, 14179785, 7606779, 8006536, 7794315,
       235380, 9305684, 13546972, 15382485, 11860637, 6829728,
       1195382, 2223559, 154642, 5379954]
    ],
    [ //  4 * (16 ** 4) * G
      [13131467, 14733929, 2649655, 10064737, 11305218, 6765243,
       5813209, 14232697, 15874703, 9584469, 1443021, 4452062,
       4327529, 3286290, 9709078, 3178946],
      [14947560, 11921495, 14234397, 10638792, 10646129, 7585889,
       10471463, 13772630, 14801417, 1969466, 12530866, 9016735,
       11498776, 10647983, 4773510, 901988]
    ],
    [ //  5 * (16 ** 4) * G
      [2103223, 15461406, 1205786, 11233110, 11900542, 9636677,
       2501929, 9092344, 8552727, 11900062, 9306177, 11917202,
       12334529, 12699085, 11947051, 11000122],
      [4168248, 2374914, 5068885, 1013231, 4236533, 281347,
       10918544, 16213947, 12462599, 16555654, 11026053, 3594791,
       7385824, 9746362, 9338854, 12461221]
    ],
    [ //  6 * (16 ** 4) * G
      [796356, 16609310, 9909298, 13911650, 9662271, 1762101,
       6166609, 9620866, 5255099, 8272877, 8526662, 7233569,
       164300, 1549332, 7463267, 16482489],
      [8601652, 14637381, 8661931, 2048931, 2174007, 775462,
       8542782, 8593943, 7731445, 8174876, 6504726, 4535496,
       6114936, 3439711, 2003442, 688997]
    ],
    [ //  7 * (16 ** 4) * G
      [14152977, 4826419, 13397541, 5925021, 2770427, 1541934,
       711979, 5956915, 8340426, 1094719, 1550726, 12208282,
       16153623, 10725126, 7088559, 9777359],
      [15489883, 7579780, 8743259, 12670570, 3739660, 397234,
       14319184, 2931072, 5072528, 4164679, 6050892, 13253083,
       4383820, 12115412, 1211226, 2610337]
    ],
    [ //  8 * (16 ** 4) * G
      [5540157, 488324, 8771030, 12417938, 9433727, 1222721,
       7310204, 7802191, 5280798, 9098562, 5707611, 2763812,
       3075131, 12512519, 11004517, 13150489],
      [12558141, 11337514, 12604027, 1183725, 11627344, 14684459,
       6109839, 3565529, 53118, 3457448, 709914, 13227982,
       15511057, 16623267, 5039491, 2049772]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 5) * G
      [16707304, 8872809, 14528613, 9259633, 16644062, 2086065,
       8794034, 6932817, 13559820, 16405913, 4443353, 12698211,
       14091447, 9654591, 16495624, 16322795],
      [10700354, 8154744, 15689592, 10570803, 15615525, 10563301,
       461300, 2756782, 9053538, 15861334, 9900207, 11920976,
       4765960, 684918, 16205593, 12987946]
    ],
    [ //  2 * (16 ** 5) * G
      [7694156, 15955722, 333295, 15457879, 14964420, 10551718,
       5400288, 2290410, 2656561, 2576847, 5348484, 9115877,
       14971970, 8212777, 7230470, 15820645],
      [12995937, 4405434, 5711639, 13852133, 11372143, 957129,
       7301346, 8737617, 10301033, 2388693, 7901461, 15622081,
       6209152, 8863442, 991144, 15999493]
    ],
    [ //  3 * (16 ** 5) * G
      [2954434, 14798698, 16022741, 14768638, 7670635, 13900762,
       8792986, 13386912, 5476088, 1354350, 8974054, 7108303,
       3018842, 7689416, 7037024, 1912708],
      [2360061, 4291830, 14816222, 13123392, 4054077, 5079032,
       11466275, 14603553, 6624491, 16658707, 7558945, 1952157,
       12156016, 14910416, 16694139, 2529653]
    ],
    [ //  4 * (16 ** 5) * G
      [6476760, 7631886, 6536372, 1911863, 9509786, 9014683,
       10320340, 15933490, 4348824, 14684500, 10559310, 9097284,
       12751501, 7788406, 11384049, 822651],
      [11008041, 3466645, 1322394, 351674, 11647856, 15548721,
       3466090, 41144, 6445022, 3159995, 15853597, 10644148,
       7931743, 3944132, 8177800, 1779516]
    ],
    [ //  5 * (16 ** 5) * G
      [7497782, 15290954, 16641376, 7812321, 11333375, 2674173,
       8852352, 14915520, 16452049, 1649307, 15952202, 101720,
       3830554, 14361448, 684213, 4410277],
      [5973218, 1318539, 6605048, 10173928, 7139412, 4378069,
       714339, 9493653, 9016228, 2685526, 12277136, 10175673,
       4574593, 10313678, 8236924, 448882]
    ],
    [ //  6 * (16 ** 5) * G
      [4673336, 13065467, 15959915, 7441250, 5668832, 9413218,
       6441558, 12103570, 11898336, 12667392, 5471929, 4505238,
       2325707, 1391210, 11480099, 11211308],
      [13347802, 4093075, 8459202, 13180929, 539773, 14644237,
       7949631, 2851178, 7717156, 6184043, 14493484, 6295226,
       4911759, 5867201, 14133218, 4567244]
    ],
    [ //  7 * (16 ** 5) * G
      [15314106, 16504837, 5277693, 11021770, 10961333, 7362930,
       2411107, 16626281, 10181887, 55086, 2016754, 13003145,
       5796029, 10738255, 4351053, 5658819],
      [555609, 9312668, 12264629, 9772315, 16021643, 12253330,
       7596363, 1879119, 4197214, 2489736, 2530590, 4235912,
       15046208, 3859921, 5057329, 16729160]
    ],
    [ //  8 * (16 ** 5) * G
      [7295181, 3604960, 1185579, 5428213, 12229282, 5777484,
       1344598, 8528276, 12379585, 16337217, 14960981, 9833900,
       10725698, 954249, 8590565, 2862751],
      [5523295, 5662718, 13739145, 1667691, 16725537, 4968537,
       2715683, 3301572, 11959161, 4336477, 15578134, 1273834,
       990809, 4747851, 5350180, 9028424]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 6) * G
      [6224038, 4193211, 9446660, 13423733, 1653858, 11522786,
       10838261, 13198087, 7794294, 6706423, 9844386, 11147696,
       11161503, 1215914, 13795072, 4103213],
      [1238039, 8502953, 571830, 2121077, 15940602, 7017005,
       12823458, 6839692, 147204, 5376391, 5749760, 11546083,
       3670161, 5204909, 16080231, 9319223]
    ],
    [ //  2 * (16 ** 6) * G
      [10494283, 11508354, 15593187, 1526679, 12692518, 13045894,
       6272416, 7722914, 7026183, 13585604, 2434500, 739932,
       6031438, 4293938, 11540844, 1334975],
      [9125129, 16183321, 11245044, 8705340, 15904649, 8529913,
       8485857, 6234765, 15831238, 16181134, 11588399, 4925973,
       152902, 1888734, 2747729, 13832862]
    ],
    [ //  3 * (16 ** 6) * G
      [995113, 2957012, 15752077, 3064967, 12764353, 8973966,
       6910809, 1246322, 6075540, 10300419, 12362510, 14677037,
       952643, 9985234, 4419014, 743853],
      [5477551, 5472579, 6068066, 12512629, 4001586, 4426953,
       11693387, 3603901, 11000856, 9409690, 16236300, 15471757,
       13993271, 11776983, 2068326, 9465105]
    ],
    [ //  4 * (16 ** 6) * G
      [6138388, 13390534, 9104888, 2434044, 4693043, 7165805,
       945918, 8002742, 8173427, 256505, 4511438, 1529665,
       14828735, 10988105, 4839436, 6371200],
      [8236743, 16199486, 6926284, 10952310, 8961324, 5484620,
       14297595, 16395342, 3434252, 14856352, 4952529, 13766242,
       2395127, 12080546, 13166508, 4526694]
    ],
    [ //  5 * (16 ** 6) * G
      [10086270, 2586449, 2070311, 2829981, 4489829, 13855568,
       3283214, 14917767, 9798507, 8172292, 13725410, 14070398,
       10867079, 1074570, 10999727, 9206064],
      [7161643, 16310466, 15073111, 14602081, 581182, 7078379,
       15230693, 10680206, 14393621, 9957017, 5326975, 14440313,
       13391371, 12923450, 7376800, 437378]
    ],
    [ //  6 * (16 ** 6) * G
      [12156328, 3664170, 13395954, 13387909, 6814224, 2439376,
       5635438, 7558166, 9886258, 13295309, 7155978, 12988189,
       10124783, 9536685, 5737337, 14514133],
      [449119, 5172618, 2595939, 6596768, 3415625, 841578,
       1067429, 4735303, 11048532, 6476902, 15008899, 5487836,
       8658343, 5927367, 1458479, 8443415]
    ],
    [ //  7 * (16 ** 6) * G
      [4658083, 2011422, 8419816, 5608300, 9428338, 15598817,
       5626926, 2686248, 7016607, 4556787, 10052930, 7492087,
       1150127, 7821732, 12454678, 5389589],
      [7836027, 11020384, 7376561, 10515961, 2499048, 11440052,
       14478776, 14377794, 16477717, 537568, 4609992, 11555760,
       3685750, 182493, 15412314, 14462285]
    ],
    [ //  8 * (16 ** 6) * G
      [9023359, 10700919, 6054811, 7690237, 3401886, 2337662,
       2770036, 10972720, 9810754, 15648517, 7625578, 8034727,
       15619300, 10606868, 16584866, 1723316],
      [6889576, 8050081, 13639671, 16309261, 5341033, 8900580,
       11350075, 7463314, 8524629, 4302156, 15571367, 3793363,
       806919, 13544189, 8131483, 4535092]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 7) * G
      [1245090, 9686103, 14882985, 14077937, 7888363, 8824822,
       7285702, 3164246, 658839, 16599683, 6905741, 8526237,
       14443754, 8951960, 2765212, 10050395],
      [2700088, 15455085, 5578599, 5343898, 9676585, 1999000,
       6527886, 9040816, 16192242, 9506936, 5477810, 2564656,
       9857917, 6636255, 5190969, 2745774]
    ],
    [ //  2 * (16 ** 7) * G
      [8449635, 1245205, 7434868, 14914241, 11871021, 2465643,
       7470465, 14741595, 5209139, 435145, 174158, 2991521,
       13278498, 7002941, 885847, 15018907],
      [10945755, 8243172, 4489113, 4503775, 9868072, 13940125,
       14606606, 5093664, 4389259, 5896664, 4989766, 14640232,
       16668206, 42237, 12483128, 16209901]
    ],
    [ //  3 * (16 ** 7) * G
      [14902425, 14966123, 6427968, 2899219, 1197230, 11833928,
       1807214, 12557022, 2861630, 15316103, 6876956, 6082370,
       1415370, 14476932, 13070745, 15407057],
      [5614717, 892957, 4713690, 12568711, 13093063, 13060584,
       11102892, 15025566, 7136304, 13351583, 11015940, 15042699,
       8381448, 2615598, 10786262, 8142588]
    ],
    [ //  4 * (16 ** 7) * G
      [14438942, 541133, 6327216, 9197511, 7285494, 11126539,
       11374979, 10506973, 1898095, 8243310, 497989, 14118978,
       10594321, 4868458, 16080207, 10825827],
      [8683557, 16023618, 15311967, 1795089, 4517819, 3899688,
       5728987, 15775331, 8395157, 1418152, 8652659, 13840882,
       8768178, 5038347, 15601388, 1379344]
    ],
    [ //  5 * (16 ** 7) * G
      [2818144, 5580997, 7614101, 10440873, 11346969, 4115355,
       885694, 15657091, 5419302, 16244524, 11143245, 16249016,
       9196866, 11207764, 4100557, 15164333],
      [15917547, 3469348, 8668475, 13773553, 16396096, 15809826,
       14797505, 12832520, 6856076, 7929153, 4387565, 5110088,
       11669661, 12603077, 9333178, 167993]
    ],
    [ //  6 * (16 ** 7) * G
      [5499609, 3131769, 4694459, 4527238, 16276957, 379577,
       16094636, 6837998, 7192839, 3040441, 8370272, 6414764,
       4980421, 5313812, 14862470, 15598898],
      [8309048, 5074742, 15752664, 3116612, 7158173, 7930307,
       9385409, 11060503, 15676350, 14674272, 4892725, 7802223,
       10357801, 5221078, 8697408, 16557644]
    ],
    [ //  7 * (16 ** 7) * G
      [8540960, 8287035, 5687029, 2437519, 15204016, 10341440,
       13098218, 3615969, 13336369, 1494211, 5647805, 3037028,
       11214874, 7627265, 6096944, 3933601],
      [16655513, 12936486, 4553611, 9275971, 1687366, 16497320,
       4353985, 11511972, 1522660, 8521685, 2673155, 6883884,
       4869828, 15799308, 8544065, 380073]
    ],
    [ //  8 * (16 ** 7) * G
      [10886204, 16603297, 11924955, 6738448, 12175173, 11177113,
       7722086, 3665297, 14295066, 9734817, 7441805, 9134720,
       122105, 7248422, 11798875, 13770911],
      [6550361, 1701041, 12230199, 15503491, 13120459, 2848189,
       2054488, 4800977, 8155282, 7860051, 747567, 10369780,
       422085, 2300834, 13183635, 13057386]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 8) * G
      [15695566, 12179061, 13114051, 8668058, 3435565, 16484933,
       1502857, 6398306, 2748113, 8408590, 10659262, 5362264,
       7519979, 12096866, 13086050, 12198419],
      [2622619, 4596995, 15729187, 9307485, 11903168, 11242970,
       3679966, 4676065, 6233793, 4493023, 8556850, 1070771,
       8314060, 8822300, 3949677, 11075001]
    ],
    [ //  2 * (16 ** 8) * G
      [10839179, 14746571, 15445176, 12198457, 14793156, 6623330,
       11161328, 3374837, 9868905, 11483769, 670139, 2851271,
       12951090, 6132562, 3294638, 1764556],
      [12245272, 3036938, 13555247, 7414606, 13204937, 4009284,
       8345685, 4546562, 9249067, 938327, 9578131, 5544239,
       3037937, 3629489, 6142068, 14492841]
    ],
    [ //  3 * (16 ** 8) * G
      [1066687, 6700035, 10749989, 8407833, 3396237, 10224142,
       14101607, 10328038, 3705363, 876527, 3166950, 13333528,
       13310353, 3152711, 11174340, 7489699],
      [7454879, 1191532, 12539280, 2756569, 6785084, 6330989,
       8665585, 14660310, 1894305, 3064223, 12926833, 11067700,
       14789578, 16250352, 15859236, 4634309]
    ],
    [ //  4 * (16 ** 8) * G
      [597251, 12541956, 2462181, 13283441, 342439, 9728000,
       2402280, 15146857, 3690371, 10582090, 11684045, 1412395,
       7582240, 10904354, 1713051, 10783185],
      [8395726, 12587592, 6291886, 2189635, 14639258, 6967870,
       9885029, 2212252, 2227564, 7585865, 4254738, 8080933,
       12578018, 8860496, 14946515, 12456592]
    ],
    [ //  5 * (16 ** 8) * G
      [16324781, 15436211, 9819095, 16727313, 13788123, 672612,
       943800, 9823729, 7703461, 351374, 6757689, 3404901,
       15587433, 2061352, 4716444, 14769938],
      [6183520, 11671502, 3391099, 15052274, 5205078, 13814619,
       9388311, 644035, 14534567, 13736189, 776689, 13710388,
       11053120, 11012355, 1778279, 5314953]
    ],
    [ //  6 * (16 ** 8) * G
      [14789834, 12068438, 15129905, 7635346, 3815092, 12852099,
       13533971, 13848605, 7146355, 2477127, 9950213, 14575455,
       4275236, 2091859, 15496220, 13189100],
      [14513301, 6003057, 10329677, 13001985, 11396774, 12965060,
       9906809, 8113431, 6740554, 15425575, 15623158, 5858783,
       3265585, 9637837, 8882951, 5064845]
    ],
    [ //  7 * (16 ** 8) * G
      [9248499, 10602875, 6552677, 2119933, 12261219, 4572249,
       3210000, 3258171, 3008261, 5140907, 8488838, 12958532,
       11568551, 13719918, 12569210, 951256],
      [7821466, 14598052, 6156467, 16046520, 125025, 3912348,
       9577241, 14180453, 11715437, 6066511, 5121088, 5655705,
       12287504, 4977802, 12880674, 13925057]
    ],
    [ //  8 * (16 ** 8) * G
      [4175148, 9177514, 16093937, 6698579, 11387446, 5214228,
       4058976, 6754562, 12371310, 16467413, 694798, 4129485,
       10837471, 13370143, 7249226, 4932405],
      [184572, 15865499, 8157657, 4670786, 9169670, 569353,
       5837476, 2068430, 2209339, 13195879, 11620125, 555560,
       9522318, 15082953, 5799869, 12554788]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 9) * G
      [14256084, 16557794, 7880522, 10211154, 2722041, 15818457,
       16460520, 754165, 15789878, 1537070, 9628943, 11898353,
       8503553, 9881822, 9759674, 8515001],
      [14047599, 115759, 12797010, 3563540, 10229023, 16589266,
       1773796, 7227550, 10055564, 4489748, 11293888, 13491131,
       11552823, 5981067, 990062, 12895753]
    ],
    [ //  2 * (16 ** 9) * G
      [6331592, 7181288, 9247355, 15557688, 4165211, 16324628,
       11041325, 7423378, 10807405, 660503, 9088924, 11927339,
       5132925, 14775349, 8421452, 11142121],
      [8514426, 5216999, 11410061, 6123932, 11693745, 12488892,
       10471245, 1103412, 299368, 9288029, 9516991, 13566553,
       13986532, 6481346, 11566336, 13818999]
    ],
    [ //  3 * (16 ** 9) * G
      [6048256, 10381393, 12312820, 12608371, 3329717, 547132,
       14623939, 13553572, 15518330, 11630764, 16764475, 15865997,
       7381468, 4459494, 4204439, 12317792],
      [1682496, 15965368, 3297597, 221587, 10043306, 5757751,
       15530550, 9298865, 12944124, 10614987, 14187971, 2676011,
       7680991, 393945, 7549965, 9327843]
    ],
    [ //  4 * (16 ** 9) * G
      [13039358, 12353266, 14987166, 838072, 9729951, 2056683,
       8153668, 570968, 5754799, 8424816, 13926444, 11501932,
       16749053, 11905854, 10835235, 12551337],
      [11852578, 13842704, 9090263, 9238959, 15790337, 11186083,
       8586746, 3455323, 3695075, 11298784, 7550915, 4726204,
       14959663, 13967338, 8130399, 7371540]
    ],
    [ //  5 * (16 ** 9) * G
      [15452181, 1168225, 9480647, 4722831, 14288964, 8222308,
       16216367, 11683202, 7330649, 10364132, 12017380, 5400166,
       13294839, 14656822, 9873831, 3038841],
      [9550635, 11613953, 7442101, 16594572, 2977829, 6936173,
       15701758, 15786467, 11450471, 4446471, 16367245, 3586439,
       8526848, 14170364, 613356, 10679391]
    ],
    [ //  6 * (16 ** 9) * G
      [4088322, 11970953, 3494804, 7079433, 7954617, 15596138,
       13363395, 14322825, 7227937, 7551953, 14208890, 7718248,
       16365093, 7348317, 509942, 8835239],
      [1797367, 8013912, 14142237, 1910767, 3267266, 13363978,
       4390194, 8238424, 14548257, 10219802, 15138220, 104171,
       6857436, 11147744, 16741123, 8170064]
    ],
    [ //  7 * (16 ** 9) * G
      [3830680, 395441, 2863312, 2350434, 8019842, 4321103,
       7415918, 16015100, 5443105, 14636353, 137069, 5371903,
       3532670, 8013333, 8600007, 12500893],
      [12347805, 14414654, 2799635, 10478817, 4818914, 15352167,
       12725961, 7995177, 10467945, 16383396, 11191256, 4734999,
       23516, 3979516, 15862077, 16286694]
    ],
    [ //  8 * (16 ** 9) * G
      [6945807, 10253550, 8178648, 7830489, 11161975, 5476814,
       4850581, 14750551, 7327617, 9870363, 1415355, 6576413,
       13024485, 541393, 2472499, 2015872],
      [8560072, 4955700, 14613790, 5974701, 2001, 16020507,
       1844716, 3743214, 12192589, 15133808, 9884702, 11092659,
       13230865, 2596067, 13482650, 8109058]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 10) * G
      [2458848, 8721655, 8908376, 105162, 3920399, 6060413,
       9890426, 13078395, 10866440, 8667858, 15832093, 6335184,
       8713150, 9208461, 10887341, 16338430],
      [16018320, 9331947, 14084212, 189473, 8844327, 16613132,
       9104093, 5183568, 6180525, 8904886, 9223683, 9218140,
       1136452, 1853232, 11444555, 1620733]
    ],
    [ //  2 * (16 ** 10) * G
      [16465251, 13618246, 5050205, 1077843, 10888397, 6137493,
       14052039, 11971892, 7999556, 13566676, 6032188, 5585478,
       13758469, 7388452, 6261994, 7292088],
      [10407980, 9257366, 7708372, 1421911, 16252551, 15518766,
       3265410, 12688171, 9903502, 11091411, 14034382, 704647,
       15296769, 5161899, 11881509, 10005125]
    ],
    [ //  3 * (16 ** 10) * G
      [6009405, 15038926, 11926230, 188933, 10657687, 13191091,
       3676990, 16016436, 14289676, 5027514, 13275507, 3638150,
       7572032, 15607282, 583197, 7217452],
      [7995340, 5185624, 6728374, 16318901, 8260216, 2528022,
       11953129, 11312448, 16360391, 6165989, 12462219, 948672,
       5352357, 4986897, 9826808, 8413867]
    ],
    [ //  4 * (16 ** 10) * G
      [9938226, 4771761, 4578220, 11879034, 67913, 8702236,
       11592380, 10443621, 4978342, 4441057, 558735, 16735033,
       220662, 15719478, 13187839, 3745937],
      [7292422, 955715, 11043727, 8398332, 4684153, 3208020,
       6833112, 6065823, 11038693, 2856189, 16097765, 4283233,
       5067106, 9428660, 195478, 10917896]
    ],
    [ //  5 * (16 ** 10) * G
      [7771578, 7888919, 3297128, 15306101, 4769364, 8688814,
       15905402, 11631636, 4851247, 12877825, 7287796, 12310258,
       6705320, 6277422, 11970049, 152492],
      [11023286, 9906156, 5685139, 13209005, 15373141, 16744374,
       10399277, 15097206, 14815367, 1137980, 7700285, 5245820,
       7525609, 15398621, 11788729, 8207736]
    ],
    [ //  6 * (16 ** 10) * G
      [4205587, 2212666, 4330802, 14902022, 10219550, 14707959,
       7927226, 15813607, 3331683, 3034205, 7182867, 7355996,
       11842354, 15844251, 6479509, 5344678],
      [3796897, 5565968, 12086671, 14857956, 5747650, 3952783,
       5244270, 12348809, 4924186, 2524634, 8624154, 6516531,
       7820600, 12309192, 9182470, 6800162]
    ],
    [ //  7 * (16 ** 10) * G
      [7163701, 12548910, 12436602, 11519002, 1779610, 7061376,
       5894472, 6542260, 11693844, 16036617, 8012270, 4972075,
       4647127, 4429648, 384383, 9821568],
      [13177829, 10300131, 9358499, 10090209, 393857, 8107855,
       15123487, 12034432, 1225783, 2871258, 9771062, 3635547,
       16121777, 12225931, 1844772, 995107]
    ],
    [ //  8 * (16 ** 10) * G
      [9494299, 5615143, 6979036, 11629672, 2108102, 7954178,
       15273642, 15536250, 15852475, 8168438, 4507302, 2139398,
       4110799, 10000562, 4128070, 190315],
      [10014081, 3706594, 12729409, 4307966, 1210267, 4699356,
       13637946, 13231142, 12619180, 8111266, 9260756, 10600364,
       1500873, 16624314, 7852302, 5493312]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 11) * G
      [8874477, 15925564, 4003042, 7134786, 7657066, 8764471,
       129461, 11161911, 9844469, 8390849, 11372860, 11083930,
       9849522, 15272512, 2029793, 232432],
      [14294252, 8905359, 6320817, 3602274, 6829732, 8059877,
       4532885, 164616, 11971617, 9968370, 2572377, 10740534,
       5717821, 9408402, 2257113, 9118472]
    ],
    [ //  2 * (16 ** 11) * G
      [2756513, 13087693, 8286292, 15005480, 14572361, 8195159,
       6437185, 13457924, 5723933, 997879, 11732479, 505893,
       8066578, 381760, 6581960, 5949386],
      [15778281, 11280545, 2608497, 10485177, 15401357, 636463,
       9075885, 11375366, 11873286, 3673795, 1964489, 11369456,
       3398186, 14080247, 11223271, 5111597]
    ],
    [ //  3 * (16 ** 11) * G
      [3933505, 3053806, 11530108, 77183, 16250160, 787481,
       4368715, 8507129, 12018849, 10441414, 11811386, 14494319,
       12762773, 11201307, 8979012, 9057612],
      [8083648, 11340624, 12484340, 5367177, 11925306, 14231723,
       16732344, 15672649, 4029414, 16221896, 7154773, 2032618,
       2521884, 10926727, 15519190, 11880523]
    ],
    [ //  4 * (16 ** 11) * G
      [13096661, 12459162, 4331247, 16161064, 6501823, 6257234,
       2571073, 8074395, 12744300, 3011781, 3894039, 856626,
       6613085, 718371, 3514970, 15273298],
      [1741286, 3281389, 5322356, 5997982, 2978537, 7390241,
       8674151, 5991328, 12082330, 1926540, 8341845, 13544786,
       16292957, 15279185, 14772207, 12672186]
    ],
    [ //  5 * (16 ** 11) * G
      [11782419, 1458940, 10728442, 14626503, 4477406, 4889100,
       552890, 8459821, 8848128, 3924319, 9013751, 6868255,
       968341, 11916683, 16707505, 7072734],
      [11940020, 14553225, 15822295, 10078442, 12604195, 5925331,
       4805995, 11212255, 14148373, 3573728, 7197005, 11310975,
       3281011, 16579670, 2972720, 264543]
    ],
    [ //  6 * (16 ** 11) * G
      [670269, 11190845, 6906296, 4448071, 16037794, 2135914,
       4860824, 8161182, 4916656, 9475468, 6270169, 1012928,
       8346158, 13042034, 5278121, 6638904],
      [15408066, 4094750, 9624343, 13835445, 11593822, 14455770,
       5788899, 2121152, 11786221, 5381864, 3143598, 7638578,
       16767718, 3101048, 8837849, 6607837]
    ],
    [ //  7 * (16 ** 11) * G
      [10301043, 6212413, 1827735, 16574967, 2501002, 10719657,
       972990, 6007434, 13050127, 14109804, 7124331, 5812578,
       7868299, 621314, 858683, 9518236],
      [7043856, 8424813, 1324605, 6266957, 4872773, 10221011,
       13121180, 11074234, 5420041, 4762552, 5192946, 4147662,
       16232752, 4503525, 8624678, 16325176]
    ],
    [ //  8 * (16 ** 11) * G
      [7434213, 1576035, 12821411, 14526517, 12837989, 3942032,
       13006665, 633020, 1010085, 2681656, 8029722, 8297611,
       11391838, 3386171, 208568, 8935403],
      [11010869, 9013493, 1086495, 8316434, 11479399, 5169950,
       16167719, 15892309, 1667568, 12807439, 15842432, 779631,
       4670616, 14151986, 14135287, 884379]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 12) * G
      [7432364, 14893300, 364818, 9439239, 1561504, 14606137,
       10603647, 11966237, 1238154, 11150725, 8309720, 11007529,
       4260042, 11969408, 10175294, 15834175],
      [9130559, 11630125, 7095776, 3789519, 7370955, 2670107,
       9170505, 11485366, 6422857, 5064794, 4548050, 6109328,
       2005841, 592970, 7468560, 11428257]
    ],
    [ //  2 * (16 ** 12) * G
      [15389039, 11595672, 8503570, 426589, 7898695, 4733780,
       12606833, 10771599, 2461681, 4965751, 10748163, 9056702,
       16124376, 7538046, 14546025, 10775111],
      [4493035, 14299712, 970272, 10770938, 2483564, 16468252,
       7039478, 9213676, 7496979, 3700323, 10066244, 3250920,
       8736311, 10326405, 13882686, 3122987]
    ],
    [ //  3 * (16 ** 12) * G
      [11796717, 6048756, 8195902, 15031447, 7062219, 10275530,
       2349971, 5516595, 11687586, 12833251, 1783433, 8205007,
       4492050, 14884082, 12133882, 12555112],
      [15873615, 2793643, 682770, 12506086, 3395419, 14536210,
       15619368, 7011386, 12675792, 8763862, 11534988, 5946382,
       2883959, 11896507, 16143708, 4855965]
    ],
    [ //  4 * (16 ** 12) * G
      [207857, 7773265, 12924860, 2319426, 3298726, 10507946,
       12515590, 8918189, 9001018, 7189868, 3259259, 3879935,
       6778615, 5747497, 14766292, 15125065],
      [4023766, 1380600, 5136768, 4686345, 9470788, 12250258,
       6117097, 6916434, 15532631, 8644396, 12954406, 3453509,
       15036974, 14635314, 11379005, 16492516]
    ],
    [ //  5 * (16 ** 12) * G
      [6336305, 12490297, 15415788, 9290843, 1570502, 488399,
       13224441, 5414170, 15390656, 8696265, 16414419, 15630458,
       2823419, 10377933, 11094781, 15347184],
      [9170644, 14119237, 15976168, 16688902, 8060980, 15363556,
       5787792, 15449903, 5155425, 3281220, 3023082, 2683283,
       8219529, 10195870, 7297678, 8403637]
    ],
    [ //  6 * (16 ** 12) * G
      [2415606, 10499632, 7499255, 7179062, 7760003, 13054180,
       12753051, 9447428, 2965558, 5588565, 16356061, 11792545,
       15894898, 16380250, 14209674, 9032350],
      [7261568, 10942222, 16233502, 5421808, 12248099, 4783075,
       16122945, 15323363, 12875331, 804193, 15104002, 5984180,
       13495193, 5439092, 15732390, 1840553]
    ],
    [ //  7 * (16 ** 12) * G
      [2685217, 9359359, 9383690, 10964741, 13039067, 7152819,
       1618318, 4505816, 2004082, 4873511, 14166542, 2038070,
       6411622, 1845440, 4517417, 818108],
      [4173037, 1720682, 2762506, 16051012, 3629299, 9775762,
       1242578, 9344041, 14781550, 320043, 5617375, 14465563,
       16284451, 14729378, 617776, 10735358]
    ],
    [ //  8 * (16 ** 12) * G
      [4564771, 2796317, 12699904, 1324555, 15294286, 5678163,
       15011646, 6703968, 2353285, 8827193, 12219436, 2370914,
       6617902, 1728887, 14475357, 10951477],
      [9457250, 9148854, 8486468, 460089, 7368350, 803886,
       2314996, 13235608, 9032139, 176455, 11310740, 8830705,
       13278705, 15379473, 13304336, 3761694]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 13) * G
      [14149070, 4939214, 11318528, 3606245, 7584534, 11155552,
       8701747, 5219896, 12014467, 14334444, 13923016, 8867024,
       3434729, 4062443, 14991075, 14346614],
      [16614621, 5180456, 1832479, 14885699, 2856042, 15198451,
       9919910, 15254807, 10424012, 11089502, 11903265, 16747142,
       6004488, 7363565, 3167449, 7623678]
    ],
    [ //  2 * (16 ** 13) * G
      [8156486, 14471724, 2877209, 13613891, 4886880, 1548626,
       15910836, 14116836, 15843367, 6883871, 11454573, 4202084,
       14330931, 15534189, 11831639, 15701907],
      [10837136, 13916292, 5792870, 9637761, 10818657, 15256339,
       3698560, 3897908, 1506214, 10612827, 2951010, 4752156,
       16644569, 12536726, 9391906, 10340951]
    ],
    [ //  3 * (16 ** 13) * G
      [1740810, 2700767, 10969020, 610634, 381133, 2744468,
       12499423, 3829461, 48730, 5661929, 7006437, 16107530,
       13125001, 12651990, 5818575, 13931932],
      [16002856, 7294364, 16321436, 12255031, 2402972, 824383,
       4209566, 2691280, 12780453, 5317323, 632967, 5803055,
       15476756, 6470860, 7639186, 5358205]
    ],
    [ //  4 * (16 ** 13) * G
      [12485849, 7107007, 15640010, 10006683, 11419842, 8391733,
       4757567, 1335773, 3382446, 10714454, 13646696, 8574157,
       136462, 13009727, 5920408, 6367882],
      [12660567, 3154992, 441738, 1235879, 6570034, 7935497,
       9115133, 9188161, 14504536, 6101697, 11419253, 10065659,
       10822349, 14888670, 16053366, 5116481]
    ],
    [ //  5 * (16 ** 13) * G
      [12486536, 9866213, 3215168, 10997109, 1831180, 936781,
       14967912, 9786436, 1849870, 2304721, 3045193, 214423,
       11488644, 9413093, 11549414, 9164725],
      [7087666, 14296565, 4412771, 6722162, 7803556, 12891438,
       12083607, 6339908, 15860146, 8960676, 9104015, 9563364,
       13053361, 13860656, 15625757, 5242373]
    ],
    [ //  6 * (16 ** 13) * G
      [2291549, 8204172, 4271390, 10534841, 5396207, 9588161,
       7438859, 8727040, 15138992, 8809559, 7345416, 5243991,
       8447995, 11839537, 10971946, 9788208],
      [12538670, 6912182, 6713948, 3087874, 11873661, 15475294,
       9096159, 14188727, 16308266, 2594323, 13637926, 5394351,
       8467649, 4802481, 1157681, 14920194]
    ],
    [ //  7 * (16 ** 13) * G
      [5170767, 6008528, 9378849, 9210787, 6344687, 11485237,
       3497542, 10125598, 9096344, 13028326, 11802178, 2728515,
       4928225, 14809957, 9970421, 13406091],
      [460819, 2906133, 3890009, 1686936, 16057736, 16537661,
       10015797, 8981077, 12148370, 10999619, 2013189, 11640918,
       9462602, 14654315, 285349, 13977438]
    ],
    [ //  8 * (16 ** 13) * G
      [2227109, 13214709, 5665970, 6591518, 3448711, 7661601,
       4341649, 4126674, 7479820, 568266, 9111699, 2125681,
       12753837, 1342974, 8112008, 10938655],
      [11336982, 12457180, 12931527, 14709657, 12470829, 1171940,
       4620835, 1737564, 11411186, 5393877, 4354956, 8038684,
       6972317, 12545944, 6083256, 12709434]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 14) * G
      [9442834, 7711132, 14383232, 15416202, 2066428, 2437534,
       16023546, 10567098, 7558561, 16219622, 13497691, 5795984,
       16364707, 8495199, 8478661, 1873536],
      [7195294, 11977456, 6294619, 5231146, 7737918, 12945875,
       16196389, 15551171, 12290142, 197168, 13299150, 11929766,
       11487643, 2014090, 10987960, 7837814]
    ],
    [ //  2 * (16 ** 14) * G
      [5998177, 13452419, 16638918, 3061781, 13843913, 9433820,
       2104171, 14736423, 14268736, 3533219, 7516969, 3867290,
       16314331, 13302158, 2213958, 16524082],
      [10905635, 569076, 1791589, 12879081, 15395979, 5196199,
       11129517, 7082589, 9320965, 10715035, 8193786, 5038871,
       13661435, 16700406, 6890717, 7233340]
    ],
    [ //  3 * (16 ** 14) * G
      [1858130, 7392290, 14717440, 14426170, 6218044, 10191088,
       15880841, 1417316, 1066643, 8559415, 11188827, 4518261,
       8156081, 9530607, 4259889, 11151866],
      [12500798, 15118100, 1921492, 10894647, 8146668, 13416653,
       9189822, 5332325, 41195, 13162283, 15681654, 1893060,
       9494514, 6374284, 16038670, 14998146]
    ],
    [ //  4 * (16 ** 14) * G
      [720208, 14278919, 10488332, 11436487, 896998, 13343429,
       8006845, 5414316, 12231075, 8465981, 6282701, 2408833,
       4163495, 10952275, 3351223, 2432453],
      [4449691, 2973519, 16426138, 1745813, 9237636, 2943701,
       5045980, 11052566, 10349695, 15794426, 6148592, 4593987,
       1273793, 14100770, 9953196, 7149467]
    ],
    [ //  5 * (16 ** 14) * G
      [15646974, 10217696, 3710220, 15223773, 8418184, 11688065,
       13401394, 5571852, 14184197, 3614674, 86525, 4818298,
       13312321, 432452, 2254981, 15563908],
      [16697316, 15402786, 13536860, 284623, 10214330, 5206720,
       4504239, 14839074, 7103603, 4174438, 7119185, 6770291,
       3394171, 7422097, 10744730, 4242827]
    ],
    [ //  6 * (16 ** 14) * G
      [9461315, 11341812, 4865977, 3665061, 15173358, 14422063,
       3489144, 14885544, 9099521, 7947560, 4940655, 812796,
       12252914, 8060907, 4567646, 13023660],
      [11587586, 6176228, 16159607, 8935146, 13140548, 13098482,
       11369714, 16063466, 7187158, 14890260, 6349557, 2121353,
       10729398, 15844196, 9681410, 11316347]
    ],
    [ //  7 * (16 ** 14) * G
      [9588882, 11245474, 4982706, 7224732, 6533775, 2818937,
       15317466, 7666062, 7916164, 8891125, 5672359, 9480606,
       2530292, 8891592, 10055269, 5366147],
      [1124038, 3828575, 6343011, 14594160, 7023218, 7215030,
       2598157, 14118331, 11885942, 3824869, 15553508, 14106190,
       2545502, 3046397, 14317596, 8081852]
    ],
    [ //  8 * (16 ** 14) * G
      [10370214, 9497251, 15722300, 11589543, 6391598, 5653628,
       13621697, 7762147, 10148646, 12550457, 14986215, 9267381,
       770204, 3443049, 8264702, 13702632],
      [5992206, 10792339, 8569899, 15600116, 9973454, 14478726,
       3186987, 5057095, 13981821, 8223033, 9206480, 11601478,
       16600306, 5070427, 8963128, 13205775]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 15) * G
      [4742428, 2111949, 16349171, 15171315, 15797242, 10526474,
       6469056, 8920789, 1484290, 8956963, 16070848, 12620189,
       9953535, 9117622, 11430828, 5679117],
      [12958724, 5770490, 10754028, 15525077, 6883837, 7484103,
       698784, 2621698, 8676990, 11915587, 7143174, 11658430,
       6677092, 8399804, 12522073, 5221314]
    ],
    [ //  2 * (16 ** 15) * G
      [636208, 13791796, 9579590, 6006420, 16544067, 6768297,
       6071666, 1227261, 6893741, 15492710, 3196759, 10586626,
       16731983, 4388939, 9324632, 7548290],
      [10749346, 7646239, 10278628, 14047822, 10745118, 15614598,
       11856138, 9702624, 12748630, 14910208, 872292, 7559325,
       9394728, 16054154, 5781692, 1550257]
    ],
    [ //  3 * (16 ** 15) * G
      [4406603, 11928755, 10941194, 600030, 14375188, 9055406,
       16768526, 450415, 1703196, 6380114, 2148239, 9958608,
       13354101, 3821261, 9359121, 5560738],
      [1787918, 4953558, 1079510, 4890143, 4902295, 2840107,
       1241228, 15253144, 1462946, 12467044, 8390527, 686309,
       8336910, 16630021, 15311387, 209546]
    ],
    [ //  4 * (16 ** 15) * G
      [14614186, 13549936, 172018, 9811402, 10665438, 5470117,
       10929921, 2688020, 5668993, 3508565, 14231734, 13632767,
       1830143, 6667718, 1736284, 13576120],
      [3306661, 1378229, 8522162, 14885408, 3207348, 12055072,
       12098942, 12059001, 4911131, 13260414, 11966603, 10797185,
       404918, 4939842, 12679055, 6261312]
    ],
    [ //  5 * (16 ** 15) * G
      [16194359, 12247888, 2316609, 12382062, 3732887, 3386636,
       13500733, 14678438, 2793742, 1500339, 4714066, 5266464,
       4160194, 825677, 6751741, 14815945],
      [15914586, 10233315, 9251112, 13776993, 6907112, 13604745,
       8449582, 8275936, 11588366, 13839069, 4070174, 14702181,
       3828347, 34226, 1542807, 11339141]
    ],
    [ //  6 * (16 ** 15) * G
      [11241186, 11799945, 8242958, 1787795, 5537917, 517207,
       5998350, 14280831, 1969738, 8976241, 3780386, 5900513,
       6799328, 11587783, 7564236, 11811616],
      [10058019, 10462884, 9298242, 12626034, 122661, 4933505,
       6861336, 4007233, 12278808, 8952565, 1720320, 12080084,
       11907324, 6639857, 15775819, 7135753]
    ],
    [ //  7 * (16 ** 15) * G
      [7202078, 13472000, 5152120, 8854829, 12516879, 8840886,
       1380076, 6566714, 6893298, 10119234, 2645358, 4100709,
       1856650, 2151717, 2596947, 9255845],
      [3123962, 14705808, 8784635, 708829, 7959392, 13020344,
       4936855, 9446821, 7303861, 4337959, 8838441, 4711700,
       16679277, 8878911, 11966299, 12011336]
    ],
    [ //  8 * (16 ** 15) * G
      [7160554, 6532701, 5672104, 6142617, 764197, 12560990,
       8178993, 11956080, 14851930, 9078556, 12636424, 1625510,
       3488092, 15836989, 974539, 11258151],
      [11237259, 10064497, 12475989, 354586, 5810327, 6458747,
       2660336, 9361617, 2301171, 910230, 3039437, 2482720,
       2269234, 10749803, 3211349, 7633932]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 16) * G
      [5084738, 5839063, 7145146, 14655733, 14523614, 14938002,
       4033722, 7651756, 7289279, 9682783, 8138702, 14864358,
       3442583, 13048063, 6705420, 499141],
      [7058723, 14012609, 3121388, 13390276, 16031056, 5876009,
       3705124, 3549013, 8697329, 7827588, 8938083, 6062191,
       11027326, 8895625, 10116496, 10898848]
    ],
    [ //  2 * (16 ** 16) * G
      [6900879, 2839148, 6905832, 7698252, 14835523, 7497616,
       2545827, 6047903, 8164376, 2281996, 9562481, 4957289,
       10158597, 1324965, 12040373, 12899960],
      [539459, 9911456, 8908379, 13138253, 359805, 8745310,
       13826518, 12242151, 12402380, 10246745, 11715798, 5120931,
       14017208, 4022731, 6739184, 13814773]
    ],
    [ //  3 * (16 ** 16) * G
      [854726, 11997878, 9470303, 7571719, 15686213, 2077649,
       4714474, 15994276, 15236928, 13221653, 11157033, 13707783,
       10451914, 12985206, 10589106, 12541015],
      [1015968, 13214381, 8476290, 9291874, 9151160, 3186946,
       9383452, 5034826, 2947562, 3196484, 15874056, 15361300,
       4252923, 13503397, 1479626, 7299420]
    ],
    [ //  4 * (16 ** 16) * G
      [15397463, 1226331, 5842304, 12822079, 3006423, 1523622,
       4456598, 4262146, 11454227, 11208227, 10827497, 2523672,
       10512899, 9325010, 7850516, 6823686],
      [13255780, 1612836, 6370378, 8038696, 12981304, 16186449,
       14459605, 2631640, 4584173, 3934376, 16674450, 7947236,
       14880647, 125666, 11078288, 7570979]
    ],
    [ //  5 * (16 ** 16) * G
      [1965282, 11657842, 11995364, 15447072, 4054785, 10119222,
       14355576, 12660315, 8095903, 4186028, 14078513, 7310848,
       12438808, 9729948, 1520461, 9517008],
      [4917361, 7424632, 3687643, 14679728, 2627753, 14042331,
       7905742, 9178342, 11816806, 13051870, 3890897, 981995,
       12162152, 11587271, 7147398, 5130569]
    ],
    [ //  6 * (16 ** 16) * G
      [8337057, 6671796, 14031680, 3309847, 5268293, 11093012,
       4574247, 12296925, 1185388, 5756384, 7492425, 10493240,
       4298459, 2756412, 14258054, 11626430],
      [6638489, 5318605, 14438743, 11134036, 4031084, 16260402,
       4678747, 3820360, 6529209, 12724903, 5712661, 2497272,
       3158385, 11354897, 1696813, 10006410]
    ],
    [ //  7 * (16 ** 16) * G
      [7601657, 14643151, 5078019, 8121157, 3104612, 7029338,
       5837315, 16479857, 643627, 7733557, 8783935, 3357741,
       6223311, 4116789, 11325673, 15719173],
      [2802507, 5331822, 8791863, 4849897, 1295915, 12933462,
       8192320, 4146036, 12102403, 7634565, 6929236, 2990045,
       2643293, 14957290, 3728579, 12838070]
    ],
    [ //  8 * (16 ** 16) * G
      [1939519, 14883005, 8286431, 10252791, 8796582, 16668545,
       13427137, 4335542, 1070773, 5819009, 7354052, 3547892,
       11052036, 15929725, 16583050, 12803302],
      [5849452, 9979470, 12917929, 5871214, 3646342, 14771162,
       1171171, 14097439, 6156964, 6960408, 11346135, 4556531,
       14702129, 8292749, 6381535, 15408827]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 17) * G
      [8673320, 6078237, 3308128, 7042269, 3375880, 8024733,
       8004875, 11537620, 4477629, 16274070, 15574437, 8035641,
       3790559, 6997790, 6961815, 9022560],
      [16470163, 6149598, 12913119, 2533447, 7295939, 8974993,
       10936771, 8381005, 14143177, 14323438, 15224120, 14908347,
       16678680, 13415582, 3022534, 3214002]
    ],
    [ //  2 * (16 ** 17) * G
      [598164, 10088130, 9011706, 5882349, 265146, 16147217,
       9862487, 12754286, 11595974, 15384072, 11880275, 3106374,
       10072830, 14157843, 1863558, 13466148],
      [10919423, 15856500, 8453660, 13146946, 7933496, 612115,
       863666, 11663649, 5514249, 13072800, 6936412, 13289315,
       8776501, 7066887, 13768306, 13130005]
    ],
    [ //  3 * (16 ** 17) * G
      [11837089, 6152615, 12139225, 7461754, 14559537, 2070222,
       1736556, 1880425, 6013147, 1033364, 5029106, 7360067,
       13152357, 2119702, 2283961, 7668486],
      [3751041, 12196887, 7323532, 12412335, 13125709, 6283512,
       13731399, 16364793, 16425709, 12158861, 6601814, 11299685,
       40363, 16415705, 8606187, 1149981]
    ],
    [ //  4 * (16 ** 17) * G
      [5318728, 13522090, 7899295, 15793212, 1114485, 11329353,
       16272594, 6703874, 1289165, 13430814, 13848576, 10645760,
       419280, 4236368, 6376857, 12707727],
      [4197271, 11767385, 12888075, 5556169, 14990366, 16160156,
       11345234, 5714531, 15801287, 5667027, 4856238, 8183278,
       12062549, 6814879, 5779146, 4102112]
    ],
    [ //  5 * (16 ** 17) * G
      [14465329, 4517457, 13241668, 15506191, 4488929, 2591357,
       2095332, 6185481, 9299201, 3543234, 4398474, 16140288,
       4987771, 3959279, 15317370, 13318151],
      [2314138, 6292367, 3872847, 4681107, 14793716, 5738913,
       2476835, 6765631, 8019078, 5139146, 9079797, 11605812,
       5409780, 7805882, 11918588, 4412704]
    ],
    [ //  6 * (16 ** 17) * G
      [4652041, 11438972, 1311363, 3669337, 15070572, 15564554,
       15087677, 11823307, 9411825, 1144156, 12438902, 2958814,
       3707055, 12621349, 8762947, 4630122],
      [4191883, 2439020, 2470430, 4377024, 513356, 10167051,
       16316632, 11387811, 15744354, 1217596, 14614502, 50212,
       7013970, 11780456, 16172291, 2713142]
    ],
    [ //  7 * (16 ** 17) * G
      [15503900, 9609539, 13421126, 4420162, 15002220, 4822340,
       3231724, 1366087, 16130844, 12632384, 12254963, 9736038,
       5775361, 3590698, 800646, 16353821],
      [9604765, 6382165, 5895618, 13950982, 7169647, 9850133,
       2178401, 6726482, 1541504, 15681524, 5984974, 5607033,
       2924461, 6831075, 7946599, 5382401]
    ],
    [ //  8 * (16 ** 17) * G
      [9761536, 8644870, 3489064, 670808, 7539715, 322918,
       9046406, 3998586, 5896416, 16029645, 11584239, 6162079,
       11752207, 11254938, 3072366, 7830991],
      [3931958, 12362357, 4621290, 15736787, 15010594, 13866975,
       5372113, 16062359, 2730435, 13974957, 11609447, 6036101,
       372814, 6553239, 13481101, 9681554]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 18) * G
      [1178227, 1120914, 13937733, 435099, 6884051, 8150734,
       8248053, 1898119, 3219772, 11015512, 1799943, 11950114,
       12779579, 4991621, 5693492, 5889626],
      [6135349, 12896164, 15615626, 16030731, 14878108, 11320066,
       5345010, 3541151, 10091203, 10608769, 2466844, 10522460,
       11849012, 5323518, 10017046, 4267298]
    ],
    [ //  2 * (16 ** 18) * G
      [2854032, 12557563, 4676597, 10112929, 13722767, 1610442,
       798151, 5404239, 15837936, 10142352, 6282728, 16593309,
       13551057, 7133917, 3537462, 11721128],
      [5031648, 9311830, 10411824, 9717409, 1281442, 5156599,
       6494798, 13174781, 8369518, 14687206, 225344, 12672624,
       11616645, 3957252, 8193400, 15256665]
    ],
    [ //  3 * (16 ** 18) * G
      [4064302, 1513686, 7474486, 11601601, 1368866, 8453670,
       10073621, 3146217, 8627786, 1925098, 14031410, 11649242,
       14953288, 963155, 14845180, 3393095],
      [3204430, 4514003, 10992198, 6730098, 12855696, 3590991,
       8844905, 14486275, 3766507, 5056064, 3068429, 13602839,
       1417929, 2786389, 3517342, 8637375]
    ],
    [ //  4 * (16 ** 18) * G
      [5289525, 1001324, 6674314, 7266651, 16001636, 5263651,
       1620891, 4785054, 14588795, 1423207, 8897486, 7232450,
       16573447, 4835717, 16293511, 10040531],
      [2258614, 4183503, 12998779, 5159655, 9867989, 13224291,
       13425259, 12121713, 5494147, 10416744, 2748368, 13177695,
       15210206, 14092387, 5116715, 6290190]
    ],
    [ //  5 * (16 ** 18) * G
      [420954, 5936334, 6180846, 14827013, 15816382, 10356224,
       12626363, 1271765, 3900770, 10305484, 13549901, 3694061,
       15311168, 15714528, 6816256, 1258199],
      [13558370, 11813540, 9718410, 2072349, 833837, 6798502,
       689755, 5449333, 13104984, 10939031, 8366432, 4252609,
       16758446, 10789667, 12573786, 7340739]
    ],
    [ //  6 * (16 ** 18) * G
      [4927503, 10304733, 6802096, 13680315, 5421040, 13778625,
       894425, 3174762, 10464668, 10642475, 12730156, 15348040,
       14199007, 7840059, 14092418, 9566840],
      [3745411, 5690742, 9971686, 7895018, 2648164, 451333,
       11846555, 3028423, 12367145, 4331999, 15678201, 4640457,
       15355884, 12058208, 2982617, 13114856]
    ],
    [ //  7 * (16 ** 18) * G
      [13177387, 10363496, 10412379, 9355749, 1871347, 1334541,
       12453271, 7580401, 1407139, 1413234, 11437394, 6192232,
       15864696, 9563828, 9146742, 8945858],
      [1435264, 15500018, 3996907, 7415819, 4287272, 7769461,
       6938539, 14373049, 9645454, 9955875, 11120988, 2552063,
       8394996, 14559843, 723341, 4680481]
    ],
    [ //  8 * (16 ** 18) * G
      [9477766, 13067846, 13581009, 13723202, 15910015, 7890784,
       16033427, 9260617, 8977597, 15515334, 16708764, 5491145,
       6164691, 8007541, 9092677, 16694821],
      [6074097, 661867, 13724372, 13051141, 2624285, 3167336,
       4106581, 4823934, 4160615, 11820631, 5919173, 2747714,
       1124402, 3409190, 3678956, 6813801]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 19) * G
      [13100842, 15172795, 6024104, 15722878, 1925820, 11674092,
       3031423, 12370994, 14583983, 6460756, 6990761, 13173724,
       4195261, 12045243, 7917700, 5161261],
      [14275482, 1080259, 14586003, 7010788, 8881155, 6308098,
       12715667, 7211296, 9553311, 3672356, 13566361, 4846792,
       1494269, 16419815, 13201280, 6124710]
    ],
    [ //  2 * (16 ** 19) * G
      [4861306, 5587287, 8266058, 765942, 11692831, 11837067,
       1337436, 15263907, 15850473, 6567173, 9661141, 4283203,
       1214309, 8626610, 7922990, 16645981],
      [9317137, 15300247, 12117781, 13947793, 13053456, 8307932,
       14212397, 15663529, 6539601, 8362329, 4849719, 15797140,
       16110623, 11160595, 4356183, 5091516]
    ],
    [ //  3 * (16 ** 19) * G
      [13141544, 6558126, 6619867, 16455234, 16170099, 2298513,
       1051953, 13535415, 10861824, 10650082, 12186823, 615523,
       1131470, 3717649, 10700393, 703235],
      [4847722, 457455, 15291555, 7159307, 3915254, 13301041,
       15312677, 12899723, 3306953, 2359700, 14805130, 4040579,
       13336896, 2562961, 1332744, 1135944]
    ],
    [ //  4 * (16 ** 19) * G
      [11358289, 7049283, 3433416, 228784, 5915815, 12336702,
       6508395, 4605721, 5894341, 14916205, 3390654, 6983374,
       12065871, 4261769, 4447454, 7983762],
      [9384512, 845202, 6147662, 7698692, 3004890, 4650163,
       5827603, 2409562, 9538606, 11949716, 475652, 6773691,
       2481358, 12089314, 1823520, 10069455]
    ],
    [ //  5 * (16 ** 19) * G
      [12419641, 1401974, 5479038, 597065, 602581, 12793607,
       15783943, 5118060, 2758502, 13315606, 4100616, 1452354,
       945822, 2507145, 1715804, 1067992],
      [12823634, 7983452, 8670574, 11093179, 3159069, 4000921,
       2744958, 5226990, 772886, 8230259, 11888445, 16620513,
       1226401, 4718451, 7846384, 6093778]
    ],
    [ //  6 * (16 ** 19) * G
      [7022009, 6210688, 8344325, 275795, 7565936, 1921869,
       8388399, 2369631, 6059072, 10880872, 1419302, 9108684,
       7590444, 6559571, 6031811, 15896541],
      [3425463, 13549438, 7615502, 6309854, 11626094, 12133255,
       10371702, 14679362, 5900515, 6295351, 8420513, 9638844,
       12264782, 6884935, 2843829, 9261879]
    ],
    [ //  7 * (16 ** 19) * G
      [43394, 3907451, 7440494, 4840637, 1352927, 2321190,
       12141275, 6603312, 16029181, 14068300, 4465870, 10060694,
       8809985, 7772815, 2532204, 3652023],
      [1370938, 6487109, 14077157, 7423884, 10597397, 5443908,
       13814828, 237850, 8359891, 14888698, 8683486, 9421466,
       8942043, 6606428, 9495828, 3034531]
    ],
    [ //  8 * (16 ** 19) * G
      [7909085, 16362991, 2258926, 5168234, 4827269, 3359332,
       9933606, 12161398, 11466836, 11468889, 8940940, 6377414,
       13469699, 9910671, 14883643, 1847537],
      [2245328, 5695861, 2811374, 1113318, 10978295, 3833572,
       10586274, 9740191, 12300673, 9745852, 15621156, 4857416,
       13922705, 14089088, 4506365, 10740095]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 20) * G
      [14149679, 16658184, 15468386, 8753641, 1000577, 13939093,
       13573312, 11857704, 1537190, 3593278, 2980499, 8907925,
       10989074, 4671610, 13891705, 11737461],
      [2231460, 9454154, 178538, 3167754, 11157, 15928985,
       9134470, 4057009, 10591619, 9159068, 9331554, 15195325,
       5973380, 1255192, 9206839, 14618944]
    ],
    [ //  2 * (16 ** 20) * G
      [4932831, 10970681, 1589745, 13041898, 12065015, 4067451,
       10798301, 313831, 15347692, 12438049, 9055328, 748384,
       5256294, 3583421, 15935060, 14588775],
      [2593111, 15980807, 15020393, 5375058, 14666649, 10207630,
       11351374, 4090665, 16082624, 7496179, 12550879, 13193037,
       13824810, 3561525, 4901055, 14937184]
    ],
    [ //  3 * (16 ** 20) * G
      [13348510, 5437693, 15267860, 670139, 9964640, 8552460,
       3048930, 1283332, 12302740, 15724856, 4751844, 1846965,
       11463682, 11814777, 3848711, 9944229],
      [6464941, 15584421, 11601688, 14850766, 14537728, 417677,
       4991459, 4622097, 9028454, 5668722, 11449852, 16340438,
       14036303, 12530135, 11400471, 1113611]
    ],
    [ //  4 * (16 ** 20) * G
      [10325167, 7741242, 3373721, 13417143, 9820608, 13060941,
       13437701, 2737446, 11406839, 4966897, 10724642, 8990133,
       9224502, 4404468, 10521942, 4656626],
      [1323122, 6987372, 2182943, 8571023, 7037487, 3617893,
       3790522, 5534260, 1833284, 996135, 7849849, 10044119,
       5599596, 12291398, 13539068, 14902153]
    ],
    [ //  5 * (16 ** 20) * G
      [6688725, 14197641, 14347962, 9255472, 8010277, 367061,
       6880160, 9016643, 12482943, 16442710, 9538535, 14130277,
       5898947, 8251654, 11074722, 4400860],
      [6183973, 15036310, 5921696, 7413432, 7104643, 7707712,
       6300107, 1322960, 14935255, 8496711, 7987910, 14618973,
       4127057, 11373897, 12039224, 12044491]
    ],
    [ //  6 * (16 ** 20) * G
      [15379919, 16249707, 2930921, 6401025, 5954397, 7227869,
       9229740, 15224566, 12397917, 9351123, 967451, 8774139,
       8839902, 11758909, 2900943, 12442798],
      [1311544, 4585859, 7111753, 12207339, 12640707, 1730526,
       3628455, 2910381, 16046963, 4344266, 7523431, 11178422,
       8550237, 9516903, 6923128, 7648427]
    ],
    [ //  7 * (16 ** 20) * G
      [4062969, 1758731, 16288919, 1989654, 6530036, 16164089,
       3103681, 12949898, 7340608, 5980788, 9812848, 7385176,
       3349013, 13747576, 12252871, 2008291],
      [6398, 5957557, 6065844, 16401893, 5052136, 16492748,
       11985230, 5034629, 2247337, 11645821, 6646301, 8952533,
       2254663, 12006582, 7401043, 3133103]
    ],
    [ //  8 * (16 ** 20) * G
      [11232143, 11050319, 5480180, 11881722, 15732704, 1930855,
       2495201, 108551, 15718297, 1786364, 3180698, 11535319,
       15050978, 4626716, 381455, 2249082],
      [5171141, 16235980, 16047387, 5156108, 2175161, 16595836,
       12795783, 16754319, 39269, 4192610, 9402082, 9174752,
       13923970, 8702512, 1725725, 7781660]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 21) * G
      [8895963, 9061018, 15591269, 7642245, 12513042, 11874781,
       13470917, 16338038, 5965011, 15148569, 6484472, 12502184,
       3175438, 9893236, 2849740, 16272937],
      [11513234, 5926661, 503216, 14470442, 6355840, 14843503,
       8787691, 15071140, 11213990, 4398377, 14408013, 11321756,
       13223031, 8803865, 2059272, 3754233]
    ],
    [ //  2 * (16 ** 21) * G
      [15358194, 8540888, 3731973, 16007247, 11247796, 13483383,
       2869793, 14404772, 10722719, 14511928, 14971104, 12667982,
       2220136, 10540310, 9244109, 4044870],
      [12702370, 371623, 2553086, 15822444, 12582228, 4592402,
       3606710, 11013953, 7743173, 14526352, 16580743, 8590904,
       16497008, 3820338, 6463356, 3694249]
    ],
    [ //  3 * (16 ** 21) * G
      [1433832, 13316296, 11999528, 1675376, 8393037, 8706299,
       4174191, 1535938, 757458, 10857863, 5060057, 12543355,
       12123300, 3001968, 4933061, 10164721],
      [14960431, 13117920, 2723964, 9487523, 11048391, 2406769,
       15567231, 15001303, 1312878, 9105822, 340036, 7706052,
       5964313, 4981532, 8035843, 8029564]
    ],
    [ //  4 * (16 ** 21) * G
      [15265579, 11036497, 8052341, 11993193, 4854561, 9617716,
       6193304, 14245877, 7895502, 6209465, 7224626, 10341539,
       12333671, 7572767, 8972054, 5936346],
      [8381340, 488134, 13593219, 1625678, 8388137, 11426906,
       7492631, 2262460, 2651011, 13152623, 11455066, 5433794,
       5445521, 13605686, 16352058, 3764076]
    ],
    [ //  5 * (16 ** 21) * G
      [14758465, 11383915, 159998, 10308674, 7515671, 975272,
       15938316, 6901756, 8320266, 14400195, 6557775, 11779665,
       13647638, 12491267, 7653097, 2030029],
      [9121234, 4213025, 3833672, 5164340, 7565626, 9171581,
       8123311, 3303539, 5618054, 16258361, 6343987, 6800448,
       6583861, 1538248, 8308403, 1095995]
    ],
    [ //  6 * (16 ** 21) * G
      [4661147, 3300920, 6531600, 7221512, 7616930, 2056555,
       6103223, 16498520, 15102478, 4163846, 10530171, 6548229,
       5770444, 2680908, 6182096, 9304168],
      [16285141, 16271580, 7145644, 1707496, 12751390, 6839509,
       16610380, 14538567, 16568796, 5466748, 6085197, 12738475,
       2038545, 12599175, 3149013, 9443482]
    ],
    [ //  7 * (16 ** 21) * G
      [4687738, 8020541, 4549464, 3107895, 5312059, 11986950,
       6462237, 15625731, 12752798, 3844877, 8254178, 15951412,
       13570562, 6490255, 14065323, 6436716],
      [15412264, 16304540, 3074962, 6687726, 11396848, 7867348,
       15100776, 2494105, 9180896, 3891808, 8109095, 5379349,
       13113812, 3491334, 6550330, 11598933]
    ],
    [ //  8 * (16 ** 21) * G
      [12389558, 14436360, 6816653, 16522570, 6976492, 8707134,
       2747713, 13257825, 16448758, 4122201, 15519209, 13486815,
       4382816, 14475230, 3670654, 9018289],
      [13146565, 8273997, 13869569, 8129353, 605932, 2032349,
       1326640, 16742707, 3864635, 8670236, 2390886, 7457012,
       13698619, 13330751, 11694724, 7509509]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 22) * G
      [10839780, 8607296, 12328648, 5437526, 1847240, 9895239,
       7874103, 11061427, 987295, 10741163, 36411, 7401978,
       12519971, 11966551, 7335406, 15993179],
      [15625707, 3014579, 7772487, 3271175, 8058637, 3663203,
       363156, 2108249, 5354352, 9391750, 13535598, 9099062,
       9727056, 3978155, 5542049, 12545732]
    ],
    [ //  2 * (16 ** 22) * G
      [14032052, 8493180, 8867697, 10660200, 15416772, 780270,
       1936768, 9854024, 4538324, 11580328, 6110561, 297860,
       13663943, 5315297, 15684784, 15590665],
      [9125613, 8500556, 575579, 7888176, 2972623, 10482302,
       1028669, 14165081, 14751494, 1743357, 3295217, 16003164,
       5906419, 12580177, 3969780, 10238732]
    ],
    [ //  3 * (16 ** 22) * G
      [5983131, 13859386, 1173799, 11819507, 1870166, 15427863,
       5464089, 2779131, 14762347, 9763544, 2304112, 2912939,
       8368268, 12513859, 11485646, 12322477],
      [3510278, 2859108, 16525862, 1925229, 5481899, 783546,
       15176223, 3381393, 2699606, 12193732, 3252949, 3941211,
       6687332, 686235, 9851687, 10526622]
    ],
    [ //  4 * (16 ** 22) * G
      [8984801, 6445819, 9242208, 16486820, 15131276, 8370106,
       16360682, 7074538, 4631503, 2289739, 7927724, 13099091,
       16034936, 220328, 3163180, 2192345],
      [2896122, 14799041, 7181218, 4626798, 6682445, 2830479,
       5628788, 143697, 3832409, 8367441, 3211221, 3234592,
       583069, 16044958, 5557046, 3908297]
    ],
    [ //  5 * (16 ** 22) * G
      [9756857, 14107332, 146780, 9531371, 14233720, 11919176,
       13744063, 10326060, 5443607, 14028507, 13908086, 10600686,
       7476434, 6142707, 12082151, 10492270],
      [12531825, 11936031, 11101623, 11789140, 8091672, 3682733,
       4340385, 6253086, 13666292, 12030258, 5565348, 11310135,
       1087773, 13205122, 9647035, 9365238]
    ],
    [ //  6 * (16 ** 22) * G
      [8531958, 10396722, 3905863, 5800695, 11301995, 7352118,
       9474500, 5086063, 14936216, 13937803, 8584204, 12257169,
       4680363, 16065985, 14272003, 11637378],
      [813191, 15955198, 15691277, 12301353, 90708, 13500874,
       5386259, 7283351, 11576963, 16427613, 3432687, 2179488,
       8143907, 14696365, 10485594, 9288467]
    ],
    [ //  7 * (16 ** 22) * G
      [5568342, 13794804, 11976527, 8290171, 9771774, 4963792,
       15646826, 12013756, 10168656, 12795635, 377750, 1601588,
       12716729, 6296493, 2932095, 4207424],
      [1040324, 15035865, 3416939, 5818959, 4405019, 11532989,
       13334044, 2400226, 4470978, 13210859, 3986676, 13201830,
       9644647, 2406927, 3172844, 6419876]
    ],
    [ //  8 * (16 ** 22) * G
      [7546893, 8061900, 10488426, 13224576, 13528221, 1041322,
       4017969, 8177710, 3155661, 2610102, 14553054, 16217490,
       9231134, 4248064, 14123538, 1634748],
      [6293806, 9425787, 8080606, 2101517, 14275660, 1965808,
       15664940, 2876479, 2340720, 2301410, 7099724, 5180711,
       1423882, 11714997, 3777579, 7016442]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 23) * G
      [3364090, 2451076, 11946498, 7144375, 11607849, 6679833,
       2215196, 15128687, 12564940, 7502649, 9733226, 6898187,
       13335537, 14642553, 1254222, 10319197],
      [9452520, 3406695, 15573375, 4225273, 1436307, 16340474,
       11490022, 1017282, 1963038, 10773298, 9731298, 16116407,
       11827802, 15383363, 8072155, 12882004]
    ],
    [ //  2 * (16 ** 23) * G
      [3034434, 14226018, 2189661, 3574497, 4398490, 435523,
       9218976, 7230620, 8206612, 5413018, 6030205, 6322990,
       31895, 14930600, 14744928, 6921712],
      [14011403, 6113008, 1318023, 209486, 2060100, 16274319,
       9866982, 5952955, 4506278, 5326526, 4311757, 4529515,
       13477899, 13409150, 7003578, 14363845]
    ],
    [ //  3 * (16 ** 23) * G
      [8420523, 4576413, 13313027, 4959290, 3556757, 12324503,
       10262281, 5466186, 10251142, 15690841, 7047569, 705394,
       1068747, 412584, 15886241, 9222176],
      [11397944, 10162879, 3083658, 15399694, 9369508, 1365359,
       2705962, 2565708, 7983080, 8723718, 7763795, 2281242,
       13050944, 3021021, 14338847, 10077250]
    ],
    [ //  4 * (16 ** 23) * G
      [2318487, 6362220, 12123475, 7457782, 3368988, 14004274,
       11657139, 12762803, 3856727, 14589666, 13236340, 13896636,
       9472846, 12701806, 15798964, 15965869],
      [256272, 5353571, 7138419, 5302260, 16289317, 6507851,
       337983, 5408310, 8412994, 7677018, 14550625, 10829546,
       12777281, 2750829, 7781888, 13004227]
    ],
    [ //  5 * (16 ** 23) * G
      [2345110, 9427243, 6094984, 11063997, 12622256, 15120138,
       9743855, 4945182, 4159350, 6208413, 12858812, 9140266,
       13024637, 4495202, 966778, 100428],
      [5516061, 14271774, 16436227, 10071312, 2069971, 1937920,
       11174079, 13673215, 6112924, 12966182, 1288616, 12200398,
       3359801, 2178368, 1690496, 2733258]
    ],
    [ //  6 * (16 ** 23) * G
      [14846187, 1152508, 13496676, 842275, 12277625, 11954970,
       10925293, 4008898, 16631248, 15852512, 3555711, 7543898,
       4081513, 220584, 1401308, 15781381],
      [4461565, 11140003, 2402222, 853646, 13127886, 15287278,
       13078599, 8751895, 14953159, 3879919, 4321558, 13413637,
       16549692, 998872, 4610311, 856044]
    ],
    [ //  7 * (16 ** 23) * G
      [10390682, 14177541, 11687525, 12475469, 10430425, 5816865,
       319888, 7764681, 4977280, 3505132, 15097776, 10936657,
       14138716, 3229874, 3773603, 6170864],
      [997029, 3989377, 3248848, 12871951, 12294948, 11515438,
       9699337, 16536325, 12615952, 5096599, 2530337, 3696690,
       302140, 3009810, 726800, 16213656]
    ],
    [ //  8 * (16 ** 23) * G
      [9448080, 4657612, 5234946, 15038891, 11644082, 4934999,
       11501962, 4834270, 8158188, 6982561, 4730226, 3883648,
       15771919, 1215952, 12843580, 4425665],
      [13589562, 15164739, 9374252, 15621877, 10935916, 16406044,
       4210242, 13342513, 5560057, 5239228, 16328187, 12349781,
       3258297, 4889831, 7067570, 2492679]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 24) * G
      [15606217, 11741400, 14367169, 5605143, 4066449, 8825132,
       9125766, 4937856, 1317658, 3737880, 12338016, 3656314,
       15305485, 12393430, 10094092, 16069176],
      [14184141, 1587491, 10123902, 547406, 15348145, 3539761,
       5946980, 12337358, 1196387, 13611682, 12238114, 14563970,
       314018, 9333103, 2933683, 12178053]
    ],
    [ //  2 * (16 ** 24) * G
      [10462568, 2605687, 9082521, 12716901, 978983, 3589355,
       329731, 3399491, 10159373, 970702, 10222425, 1104564,
       12430188, 12612561, 8232970, 10863148],
      [8214911, 9972919, 14149067, 9233234, 3842718, 3595119,
       4839413, 14777771, 6776730, 15572875, 4141291, 4367980,
       13221813, 8806366, 14298249, 10217672]
    ],
    [ //  3 * (16 ** 24) * G
      [12541413, 10903455, 3833038, 8345821, 7355464, 16237260,
       8172984, 9081291, 8118014, 9805419, 6319642, 2217629,
       11794704, 15193956, 5927486, 268376],
      [7962082, 6061147, 1862270, 885559, 9464202, 2397354,
       9561277, 5680527, 983308, 13502346, 151171, 1236401,
       1803775, 3216500, 8279892, 15831230]
    ],
    [ //  4 * (16 ** 24) * G
      [3283310, 9354169, 12492328, 4643696, 6721551, 9114193,
       6180503, 854320, 6941573, 12365654, 185950, 4778867,
       16182180, 3904751, 1457106, 15270179],
      [3141016, 9609346, 4103013, 12391765, 1731309, 16403729,
       14625695, 15878412, 7607191, 5144010, 4710028, 11834356,
       29424, 6526010, 519106, 12339302]
    ],
    [ //  5 * (16 ** 24) * G
      [2149441, 12535480, 3773020, 14819466, 8475135, 12339409,
       15151236, 6463188, 3726110, 10304275, 11138571, 6460149,
       9725926, 13919835, 9376415, 1734415],
      [4551740, 16122232, 3381345, 2009281, 11209350, 4183968,
       8871356, 11241684, 6986864, 15929640, 11489022, 4621080,
       9684477, 12727673, 16006340, 14330859]
    ],
    [ //  6 * (16 ** 24) * G
      [5936912, 1924125, 2114075, 11476254, 1912488, 2696489,
       6187594, 10441955, 889680, 9424220, 1937547, 7393182,
       4409128, 793589, 11412676, 13190956],
      [12330721, 987380, 13698299, 16524373, 12438558, 16243686,
       2913020, 2328758, 2835112, 6367991, 11458866, 10039074,
       15534226, 5338681, 13980916, 10385051]
    ],
    [ //  7 * (16 ** 24) * G
      [14059652, 7748554, 7838299, 14691430, 10662745, 513370,
       11444562, 10733275, 14778450, 2723508, 7050224, 8247094,
       9842497, 12321910, 15006462, 12707557],
      [13599116, 3515063, 9940399, 12947255, 10484136, 4416706,
       14743768, 4580239, 8322101, 4213544, 15949680, 9966592,
       13560899, 11015406, 7696746, 16293111]
    ],
    [ //  8 * (16 ** 24) * G
      [9143575, 3535989, 11445189, 11940810, 16333141, 11560561,
       3792569, 16052683, 14610224, 8616505, 9047225, 6373554,
       7895780, 6689835, 16765343, 10889068],
      [16739349, 5565396, 4147162, 16438369, 8514602, 9397083,
       11789016, 5912849, 15673225, 10516198, 10791964, 7898796,
       1014497, 9103882, 11202577, 1238922]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 25) * G
      [5193115, 11728438, 7771907, 7527613, 14878553, 3511039,
       4215974, 691433, 2231451, 5566682, 6504996, 12696908,
       12491134, 14200701, 7757163, 10746227],
      [11938495, 12588063, 175293, 13285889, 15142540, 15494303,
       2623342, 1655384, 5365743, 15902002, 10745643, 5145796,
       1780686, 5853958, 2634563, 2264098]
    ],
    [ //  2 * (16 ** 25) * G
      [12220790, 2730045, 15737236, 7899587, 15461626, 8212735,
       2525221, 9330315, 6067816, 11901574, 12697154, 13252644,
       14199205, 15535018, 5651215, 5244895],
      [11845700, 9603428, 10233511, 10560055, 11047478, 13154673,
       16211277, 320013, 15502273, 16419187, 4158254, 8465916,
       2663022, 1312220, 10901383, 6880096]
    ],
    [ //  3 * (16 ** 25) * G
      [16013600, 4601506, 7802382, 4234941, 10460165, 7069237,
       13971449, 7029131, 8375927, 15024366, 6803477, 13998384,
       10488264, 1072817, 16704709, 3756635],
      [8759995, 14668639, 14098335, 4001059, 2746842, 10869687,
       13480183, 4688350, 2173886, 11137396, 10637957, 1504288,
       9315547, 4450979, 14995421, 5011597]
    ],
    [ //  4 * (16 ** 25) * G
      [6382186, 3968227, 7263652, 4378298, 4113943, 5704200,
       5466157, 13918382, 10008283, 5573163, 324784, 10628498,
       15664363, 7195124, 14015979, 11456178],
      [11035636, 6710047, 11094597, 1904717, 16249393, 7272224,
       4580376, 14311851, 13119831, 12613466, 14623915, 5657829,
       10055958, 10357141, 3296108, 8749429]
    ],
    [ //  5 * (16 ** 25) * G
      [15366121, 9048508, 7099219, 8873424, 3162672, 11975526,
       109004, 9144464, 5916983, 15412361, 12846397, 10948563,
       3716713, 16492267, 11618186, 12483232],
      [7198407, 13537486, 2605858, 15432803, 8303747, 13809263,
       14948344, 3543007, 8175861, 8736020, 2613460, 1559644,
       10009246, 6079330, 8761191, 4895795]
    ],
    [ //  6 * (16 ** 25) * G
      [4274877, 16511427, 13112987, 5803250, 12482557, 1427792,
       12207347, 4289349, 9720837, 10698438, 2415467, 14488397,
       16511160, 9266314, 12759695, 797911],
      [270175, 6318433, 4206621, 9798362, 1905208, 5216040,
       3356092, 12846187, 5707045, 2251208, 7133207, 6660234,
       7084808, 15125310, 7239966, 11394494]
    ],
    [ //  7 * (16 ** 25) * G
      [8924202, 13235403, 16710801, 15139915, 462710, 9402738,
       12110016, 3348192, 16715251, 5024724, 1882828, 5544405,
       14232252, 15763724, 11085006, 11085264],
      [11423856, 15552120, 12593212, 16136402, 13360560, 14664286,
       14417437, 6338668, 14191622, 8896989, 1324214, 4448013,
       13256395, 5864478, 7340986, 6950268]
    ],
    [ //  8 * (16 ** 25) * G
      [10854426, 16537539, 15899409, 16476596, 2920205, 16661830,
       12859012, 9874398, 9552661, 5730799, 7388490, 16063913,
       5004302, 5595248, 6317204, 1176465],
      [4409994, 3347928, 13888822, 11842277, 3846521, 14373953,
       10951492, 5245516, 6783549, 1447862, 8345381, 5155420,
       236060, 677320, 901348, 376471]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 26) * G
      [1380448, 14212574, 13968126, 712065, 8806835, 10897590,
       8300652, 13133588, 10463440, 15088749, 2330278, 7470516,
       11454533, 11851324, 8857969, 1803783],
      [1745295, 8851934, 2370670, 5987646, 815738, 6187363,
       10593513, 1949424, 12112150, 8543800, 12007248, 4153433,
       15705491, 7538635, 4198233, 12411040]
    ],
    [ //  2 * (16 ** 26) * G
      [1738489, 7746178, 9076756, 6569918, 671732, 14029029,
       3417032, 13810784, 6472063, 15209221, 3039222, 12610250,
       13080667, 4178920, 15298864, 411474],
      [8525972, 11005129, 11788499, 16234659, 11122232, 14653231,
       16256450, 12725800, 9215625, 16234461, 3652342, 2693929,
       1406823, 2056, 3250908, 9634929]
    ],
    [ //  3 * (16 ** 26) * G
      [7372499, 11314778, 1211992, 10484273, 7421829, 13487916,
       10820940, 5773341, 10783944, 6586724, 8329445, 8553090,
       9655919, 2644745, 1666272, 14184806],
      [3384596, 9535201, 13678269, 3140145, 7662870, 5212290,
       2683255, 5139218, 14058615, 8751501, 5875407, 11088432,
       8015511, 2780291, 12754479, 11711093]
    ],
    [ //  4 * (16 ** 26) * G
      [10946087, 5651863, 14927965, 5071518, 2865016, 216933,
       1498232, 14283413, 1184504, 13238242, 11598954, 8778528,
       901207, 1192870, 379384, 7502622],
      [5357831, 9862230, 5142847, 12372293, 9028442, 74404,
       7183143, 10754789, 4200317, 15961553, 1534306, 4724479,
       10883182, 714692, 12696777, 12199510]
    ],
    [ //  5 * (16 ** 26) * G
      [6529840, 14258159, 13095309, 16420853, 3408776, 4223697,
       16086092, 13336396, 10092475, 14835082, 7816570, 161571,
       6559321, 13585245, 1920681, 4134174],
      [10260760, 2579453, 2725114, 9060071, 12978286, 6781551,
       586843, 2929868, 2915364, 6238406, 2395601, 10131755,
       1975447, 9797232, 11916815, 9605657]
    ],
    [ //  6 * (16 ** 26) * G
      [2214301, 15705635, 14545321, 3064201, 15839255, 15063209,
       9314964, 7432970, 13277144, 7839344, 15124441, 9456461,
       14340854, 4949556, 834974, 513372],
      [16341306, 12352820, 537622, 149947, 12904261, 10182085,
       13038618, 636139, 7631670, 2242804, 14928271, 10972951,
       12156608, 8015693, 15139225, 11757244]
    ],
    [ //  7 * (16 ** 26) * G
      [2799278, 15415376, 15560144, 3340301, 9115871, 8205751,
       9334223, 11214176, 4574278, 11476209, 4307943, 14502706,
       9093928, 2245360, 867243, 10178090],
      [12276750, 6010809, 1560363, 15306232, 2962144, 11119120,
       4644488, 10551872, 2819626, 7166723, 8012948, 8669938,
       7572103, 4568871, 7305054, 3318288]
    ],
    [ //  8 * (16 ** 26) * G
      [5202552, 14101443, 16520415, 1460676, 7074011, 11694974,
       16630684, 9623734, 14538527, 8375763, 168662, 8964418,
       16584536, 11488779, 16458632, 3230407],
      [3119949, 16543466, 9224021, 1744645, 7046886, 10392629,
       6572560, 16008818, 15545271, 6240405, 4970512, 8442511,
       14862245, 2746614, 9529922, 6306996]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 27) * G
      [3296391, 6028789, 6408631, 4124376, 4078104, 14611978,
       13779896, 10228399, 2375294, 1020933, 7193669, 5894259,
       13014664, 7359092, 14569159, 3034778],
      [10490941, 7560388, 3326623, 5078221, 13382866, 3879502,
       8625250, 198448, 8855907, 8999999, 8210384, 14167501,
       10882929, 6919404, 4111299, 15474425]
    ],
    [ //  2 * (16 ** 27) * G
      [9368528, 6823548, 11017237, 2246206, 9701674, 13417330,
       13058061, 3683792, 10111838, 8980012, 15391899, 15983000,
       8624133, 9609409, 352305, 16183368],
      [8561345, 11807925, 9499167, 1948284, 4039303, 5685174,
       2710363, 3498441, 1794034, 570060, 9255646, 1865577,
       12023834, 3614155, 14020266, 11433552]
    ],
    [ //  3 * (16 ** 27) * G
      [7882793, 10858581, 764364, 8538555, 3380320, 8382830,
       4357994, 4779726, 13277568, 706941, 16249775, 5382489,
       10954987, 6175980, 11102279, 11310376],
      [2075827, 12840366, 15618079, 14830763, 10819305, 1296003,
       11605176, 12284082, 8052272, 9781713, 1495858, 14449535,
       15407596, 5344669, 16001155, 6603051]
    ],
    [ //  4 * (16 ** 27) * G
      [690494, 1715387, 1798063, 13614669, 11084316, 12036965,
       7261553, 13189994, 4577147, 8146726, 7763609, 15486168,
       3798279, 1904849, 13436401, 2933009],
      [630600, 4039564, 2494934, 5714130, 3781329, 9610696,
       3203522, 1062817, 2568457, 8490871, 8843578, 12880678,
       917275, 4559578, 8719104, 3825447]
    ],
    [ //  5 * (16 ** 27) * G
      [15368741, 16477293, 11832052, 5484641, 9000273, 8967518,
       2623554, 595261, 1188302, 14799292, 1721089, 3958314,
       15129569, 11903321, 13221284, 6029921],
      [4434927, 13359788, 5689481, 9055452, 15270530, 7202515,
       8681406, 2969553, 8875043, 2677068, 42123, 14019948,
       5551874, 11881302, 9573039, 11848329]
    ],
    [ //  6 * (16 ** 27) * G
      [12183903, 16497587, 15226176, 14149474, 10465160, 12842071,
       12562984, 14577765, 512389, 9533571, 10052181, 8951812,
       7224190, 1670710, 14457151, 16165224],
      [12258763, 3046216, 10432471, 2517335, 16665709, 2839242,
       10348027, 1332347, 14356856, 13006352, 2905514, 9125985,
       8159320, 14369439, 8104373, 5716992]
    ],
    [ //  7 * (16 ** 27) * G
      [2017917, 1759033, 8413821, 10838046, 4069982, 3988790,
       5611192, 6106276, 8009206, 12274792, 4833763, 3158020,
       16502788, 9302270, 8587554, 96176],
      [11745287, 16741681, 5805425, 1379017, 4969490, 8346632,
       12174872, 10001431, 15955683, 5789236, 10264690, 3339497,
       9328401, 6274550, 12754320, 11442203]
    ],
    [ //  8 * (16 ** 27) * G
      [5255132, 2025359, 4289505, 8400711, 15015863, 6670428,
       7198500, 10509387, 1248294, 15137894, 829384, 15911979,
       11997036, 4520104, 3045564, 7318014],
      [9657760, 10509030, 6336314, 2514105, 10897171, 12169039,
       14673972, 11126263, 11842160, 13574560, 3997237, 16477167,
       7903529, 2523229, 11104380, 14279941]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 28) * G
      [8455851, 3939366, 15066444, 5394901, 5602400, 7290832,
       8186147, 1572751, 8121667, 3858336, 551446, 10742416,
       14658130, 15877691, 15889087, 11009063],
      [14642610, 6694713, 10656124, 8161169, 11756964, 5888565,
       14215400, 6052479, 10837487, 2547113, 2724754, 8501607,
       8166111, 15865622, 14228610, 3427031]
    ],
    [ //  2 * (16 ** 28) * G
      [11624585, 8112925, 12395315, 4958246, 14737977, 11955839,
       10822529, 12679557, 5815604, 8575409, 9442904, 4671968,
       11138239, 8921389, 7416758, 11431688],
      [16685972, 5022933, 2322254, 11084502, 13010602, 1673311,
       9809429, 2193974, 4813568, 11797974, 16103485, 4881889,
       5989569, 5962784, 999009, 3431502]
    ],
    [ //  3 * (16 ** 28) * G
      [8457531, 6686154, 5520603, 12240817, 7104818, 893223,
       15580341, 5818770, 13805381, 3038546, 16673634, 8710129,
       6738128, 8518013, 1144585, 1449653],
      [1484232, 2708516, 2240150, 10311943, 13157768, 9484753,
       16224964, 16151850, 600196, 5156652, 11527054, 387936,
       68929, 8848160, 12492648, 14116105]
    ],
    [ //  4 * (16 ** 28) * G
      [10512580, 1994244, 6350785, 13596994, 3757503, 13638612,
       100924, 1507778, 16430817, 2224006, 5660128, 5858972,
       1897646, 2706750, 6367289, 14311997],
      [7711275, 7306221, 3857970, 12771037, 2477468, 11906406,
       11582144, 2748078, 3200299, 13898106, 9628904, 9592369,
       11080091, 12966312, 9952105, 14877028]
    ],
    [ //  5 * (16 ** 28) * G
      [12976507, 10552153, 8229540, 1356937, 15162161, 14735639,
       16275861, 12238786, 15067909, 11320895, 6976361, 11464263,
       1226205, 10944385, 13671866, 12025709],
      [14091578, 10372023, 4685212, 12263852, 5838846, 10934330,
       9489003, 15204367, 15718782, 4752914, 10995650, 7663116,
       12062981, 14075103, 8589480, 11935774]
    ],
    [ //  6 * (16 ** 28) * G
      [7687098, 8273390, 1733848, 5760186, 4494227, 11937143,
       14208237, 11916520, 11052847, 10007809, 1959193, 15918556,
       6965966, 2909587, 13281591, 4686175],
      [2132716, 3526545, 5091548, 8326692, 2403719, 16237595,
       12992038, 12199042, 2382604, 5769338, 1245644, 14059983,
       1607969, 15029710, 1646097, 9754395]
    ],
    [ //  7 * (16 ** 28) * G
      [7949973, 4999611, 7002675, 7265075, 10451213, 15789649,
       2846736, 13425254, 9992054, 8953418, 8436150, 8198641,
       13807289, 2591065, 15572250, 11189094],
      [10076675, 3738091, 10695187, 14212460, 3239907, 9296566,
       3897928, 3017786, 6736538, 2453286, 1418668, 10893444,
       11330839, 14359085, 214414, 2625165]
    ],
    [ //  8 * (16 ** 28) * G
      [5260995, 1105553, 14558064, 6274101, 11956457, 15792013,
       10937645, 4461367, 14623456, 12153904, 9785465, 15189021,
       2788842, 4596219, 2266984, 972490],
      [6371944, 11899920, 566928, 7011197, 4437198, 2376396,
       2175124, 8195631, 9959357, 2653249, 16565366, 6191949,
       762903, 11047259, 6689506, 4654556]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 29) * G
      [11074264, 16663132, 16157970, 13699440, 12449465, 5213711,
       14338005, 4127424, 1917441, 7742728, 12613849, 13857354,
       12465487, 5629613, 631240, 13070437],
      [15613864, 880861, 8339041, 8555158, 5724500, 9789119,
       16168250, 2810005, 9492620, 3437179, 677379, 9289892,
       1123201, 6804284, 13555136, 5045959]
    ],
    [ //  2 * (16 ** 29) * G
      [8445718, 4649309, 9134578, 9340720, 2898483, 5254184,
       919708, 913568, 6517394, 12351372, 10788754, 7108797,
       2441877, 16655801, 11506602, 13957967],
      [12525875, 4786045, 1207631, 882750, 6583190, 7979593,
       10401473, 3206665, 16186588, 7318489, 13872877, 6514468,
       10398901, 9419046, 1290000, 11936329]
    ],
    [ //  3 * (16 ** 29) * G
      [8343853, 638621, 15171393, 13742451, 10838723, 12905980,
       1974603, 12609462, 15232238, 9685492, 11771316, 16086455,
       9565119, 1047009, 4969566, 12013723],
      [8331830, 13148489, 15149214, 14295747, 7311860, 10901337,
       8957690, 7868982, 13069324, 7659066, 10735252, 14293835,
       1211455, 11128412, 1498637, 3298098]
    ],
    [ //  4 * (16 ** 29) * G
      [6371873, 8594294, 10600485, 4653620, 1948435, 11250381,
       13206552, 15836925, 10282530, 6494048, 13238199, 3985888,
       2867624, 8763420, 3614937, 3436085],
      [16038544, 535148, 2931084, 5321565, 12302023, 1918303,
       11780094, 11931147, 1816600, 5784036, 12449052, 2376772,
       14455180, 7305635, 3461445, 11883365]
    ],
    [ //  5 * (16 ** 29) * G
      [10622186, 7518509, 2385876, 13119756, 7072709, 12579216,
       16441577, 9299095, 1069470, 1084848, 639061, 3230531,
       682613, 8887660, 4813863, 13053768],
      [14095119, 6361769, 119457, 11029923, 4297718, 16660260,
       3159692, 10797363, 13526381, 12968996, 8148118, 8499619,
       16169066, 8675729, 6366967, 10935626]
    ],
    [ //  6 * (16 ** 29) * G
      [16398670, 15765204, 10245342, 13021797, 10115743, 14185395,
       2552677, 16119244, 5950110, 4750830, 5534743, 10239019,
       3385081, 1384990, 15313597, 256638],
      [6976999, 940807, 14559046, 6789587, 4009042, 12168710,
       13571039, 12119738, 8639102, 2336878, 14234375, 10587914,
       932162, 13800271, 5592296, 422687]
    ],
    [ //  7 * (16 ** 29) * G
      [7749907, 10271359, 4685200, 13747186, 9077887, 4912222,
       2342772, 16544270, 16346998, 6690806, 8183125, 4711897,
       12400632, 8784394, 3067474, 3550322],
      [8936491, 3936225, 13715414, 14040698, 16148712, 9367347,
       11332628, 9145594, 12115064, 14865400, 9994361, 10253997,
       3058551, 2603829, 3145655, 10296769]
    ],
    [ //  8 * (16 ** 29) * G
      [3671204, 1129735, 6426577, 8886827, 13472994, 9906027,
       7109352, 15755513, 14429455, 15736370, 15542700, 573527,
       8662100, 10652423, 6284483, 4822689],
      [15611098, 882098, 15153964, 3181499, 1447116, 14117080,
       1584403, 15607821, 13420152, 11536978, 6514033, 8414408,
       8641074, 1547802, 10299748, 10095050]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 30) * G
      [184417, 5746411, 3056880, 3095488, 11960075, 563717,
       3340398, 5680813, 3270432, 3074608, 3618542, 11647202,
       5355605, 11876699, 3251083, 8861843],
      [6185705, 15616288, 6445121, 12848802, 15568986, 6043286,
       11948138, 2922458, 11466712, 8330148, 13373233, 9776266,
       12681916, 1777838, 876554, 5283367]
    ],
    [ //  2 * (16 ** 30) * G
      [3716017, 7502080, 66209, 5342403, 5383557, 60810,
       13444971, 6290207, 16489349, 16026511, 15740514, 9001809,
       11556611, 9375603, 1807816, 11644756],
      [14585435, 6693319, 12978218, 4015139, 3425684, 15317918,
       2459078, 12140744, 7723576, 3776825, 11866614, 14389088,
       10026832, 1129308, 13445314, 13508857]
    ],
    [ //  3 * (16 ** 30) * G
      [6049921, 8045091, 12163458, 7680142, 11686867, 483199,
       333134, 3419877, 12507581, 16079772, 16175160, 368793,
       144125, 16241172, 13150051, 2098083],
      [5287579, 6634588, 7523800, 1797897, 8475993, 11314574,
       6908018, 15777720, 13090106, 2033664, 15521589, 11060385,
       9258614, 1119377, 12598889, 14276413]
    ],
    [ //  4 * (16 ** 30) * G
      [5570082, 16614996, 7702257, 15570606, 10583277, 6721558,
       913029, 6449683, 10033065, 5542081, 11817333, 8175338,
       13566903, 12125513, 5246611, 7737531],
      [8132556, 4537833, 12829471, 13992272, 6456330, 2628391,
       13582969, 11220545, 15377471, 11010570, 15579277, 6262080,
       12766604, 10316991, 13290034, 8709159]
    ],
    [ //  5 * (16 ** 30) * G
      [12046689, 9068770, 15658704, 8293281, 10809661, 724592,
       1739762, 9073719, 11373663, 8563157, 14752960, 14540317,
       12544100, 15078366, 10248216, 9360494],
      [11481343, 11334781, 7038950, 2422770, 265190, 14972901,
       8227242, 3648342, 13909280, 10560736, 6679904, 1880379,
       14145529, 8942632, 13393671, 5929433]
    ],
    [ //  6 * (16 ** 30) * G
      [433893, 9532522, 2042849, 5943343, 6685282, 14051136,
       10715729, 3859793, 2510803, 16173367, 10751410, 15145130,
       455555, 8658814, 16211562, 10170728],
      [5972410, 14276287, 14644277, 10451602, 2447576, 3226357,
       15157594, 5095039, 6136366, 10751932, 14305051, 12889920,
       7798947, 8382514, 7938782, 649516]
    ],
    [ //  7 * (16 ** 30) * G
      [11706719, 9568278, 8983568, 13892695, 15076261, 2158868,
       12101373, 8744191, 7744142, 12482498, 8907485, 8259750,
       2805300, 9924964, 5447523, 13143707],
      [1495481, 13545672, 14541597, 4072376, 6060358, 13188747,
       4620261, 16111182, 238982, 15123351, 4326518, 2278116,
       10110237, 5612320, 15256972, 12989224]
    ],
    [ //  8 * (16 ** 30) * G
      [959537, 166080, 13834223, 13004250, 3782575, 4593639,
       11463118, 9573060, 5587649, 5459769, 6311151, 9133296,
       13382667, 5777751, 10452031, 10512528],
      [12534394, 11459932, 6385599, 3350263, 4271751, 15372044,
       4610258, 10096822, 10220111, 7183263, 14025053, 15036191,
       1826497, 16576367, 3480253, 12493761]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 31) * G
      [7459906, 15933965, 9477, 7407471, 6618523, 9726833,
       1004862, 12605314, 5341744, 12616544, 6812396, 12537513,
       12438697, 11566544, 9986189, 13952401],
      [12072143, 223221, 15066296, 16568716, 8616357, 9611617,
       8069445, 12390496, 14877167, 2122221, 4309480, 298571,
       12780194, 5304728, 12391543, 9880813]
    ],
    [ //  2 * (16 ** 31) * G
      [11455920, 12081220, 1811123, 15800192, 13053344, 2709931,
       12810647, 3200768, 311534, 2554090, 13599749, 13853243,
       4423107, 15160280, 9792291, 14780019],
      [9462266, 933692, 242739, 10298335, 4642163, 4950308,
       6830691, 933301, 8607389, 874842, 4636449, 3146792,
       14473238, 12462985, 15445031, 2816279]
    ],
    [ //  3 * (16 ** 31) * G
      [9074604, 3817110, 9014385, 12327091, 4017884, 5868442,
       12726259, 975181, 1193385, 3058866, 4753645, 9958442,
       7674809, 8396779, 9739032, 6468723],
      [15019051, 6331420, 433031, 5769479, 9908368, 687058,
       12192064, 13886670, 8732888, 5817594, 3824338, 2151019,
       11786964, 15090142, 4917023, 5721622]
    ],
    [ //  4 * (16 ** 31) * G
      [14554365, 5532920, 773170, 8307776, 3339391, 11049812,
       1966634, 5580396, 2659543, 4786946, 8076092, 9855155,
       10699271, 12882925, 7733268, 10684997],
      [8599609, 14509813, 13371699, 10690186, 6974522, 5714,
       15799952, 13151839, 11081919, 8670554, 15208796, 7458791,
       14632117, 10471247, 12699903, 10410786]
    ],
    [ //  5 * (16 ** 31) * G
      [14411369, 11901875, 2759338, 9129052, 9485225, 13217122,
       15113825, 2520704, 7940240, 4409439, 10574445, 14926071,
       3216893, 7175330, 12085478, 2125961],
      [11660374, 12613461, 6758095, 10153645, 9866031, 6575925,
       10982113, 7266540, 52682, 8694354, 2050924, 10900877,
       3667311, 9709930, 4275851, 10765447]
    ],
    [ //  6 * (16 ** 31) * G
      [3319084, 7046373, 5393177, 12058283, 2481474, 12890564,
       8230886, 4151929, 14508399, 9810045, 9419087, 4210433,
       6231981, 10929523, 822096, 4282176],
      [10934097, 5547866, 14188098, 12169864, 8720215, 9087448,
       7073809, 12047313, 1020822, 192402, 10550410, 6563270,
       3200339, 11425987, 10794792, 1171617]
    ],
    [ //  7 * (16 ** 31) * G
      [377142, 11734758, 4630450, 11464728, 1487926, 2058794,
       4681587, 869434, 4219747, 5651410, 15835612, 10845603,
       5922245, 7743858, 1017630, 15924120],
      [11126968, 6340045, 5282313, 3560506, 8475513, 14425743,
       2619385, 10988536, 5664485, 4560867, 3967694, 10952525,
       1813464, 14205900, 9040197, 5876746]
    ],
    [ //  8 * (16 ** 31) * G
      [10718564, 8297798, 12721449, 3988447, 5667937, 4187864,
       3431818, 7927113, 8666172, 6684624, 4049833, 11104607,
       15923915, 12022430, 830745, 315377],
      [10201791, 8422985, 695739, 3543380, 13970921, 8189968,
       12152313, 13785946, 1559754, 1983119, 13896543, 16339495,
       1024922, 9058124, 14448742, 10607268]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 32) * G
      [2111022, 11416832, 4818082, 1687391, 2825716, 10179562,
       1583228, 2864718, 8061929, 14640427, 2363842, 8770981,
       10759844, 5271075, 7147981, 14748851],
      [14348226, 785962, 4122101, 3583413, 6712149, 13804644,
       8382734, 7825659, 13403328, 7870214, 737885, 3266219,
       15499370, 13853522, 7489175, 14149241]
    ],
    [ //  2 * (16 ** 32) * G
      [11785073, 3019746, 14768251, 7461310, 6660527, 4076288,
       4632442, 15104874, 2748929, 9706945, 3075469, 8139973,
       11754027, 1486603, 3491639, 15780766],
      [15416203, 6475572, 9243824, 10249961, 9625215, 7122033,
       12328558, 2279550, 6677151, 5276450, 10830798, 3013315,
       11969405, 12601925, 16291093, 12003290]
    ],
    [ //  3 * (16 ** 32) * G
      [9533145, 1976788, 2442310, 6639089, 1826150, 6724849,
       208923, 3385536, 12129455, 14675292, 12622143, 2565343,
       1390089, 10961925, 7340847, 15375067],
      [954169, 2439641, 2309158, 4859525, 12928704, 6703112,
       15054715, 11325872, 8949063, 12882307, 9826370, 12319015,
       11422857, 574636, 3371543, 15181757]
    ],
    [ //  4 * (16 ** 32) * G
      [584145, 1930280, 981175, 8262239, 5062610, 14363241,
       10748073, 8055064, 5138896, 8288075, 570262, 8089023,
       14570527, 15126332, 4505112, 10394531],
      [8483992, 1584660, 645469, 9118242, 5773120, 2788787,
       6701303, 14806510, 11079419, 155700, 1541954, 11419751,
       11697209, 13275355, 14020391, 16052571]
    ],
    [ //  5 * (16 ** 32) * G
      [2324397, 8545035, 8568479, 1753356, 2257367, 12794951,
       13984854, 6323188, 4848802, 14545587, 16136657, 7204383,
       2563528, 3820856, 4072955, 15580649],
      [10808938, 14700423, 16110558, 3144617, 9252057, 10704282,
       7841537, 2046091, 2675477, 3063176, 6486286, 4966564,
       10904839, 4030151, 13504583, 15622119]
    ],
    [ //  6 * (16 ** 32) * G
      [571260, 14178633, 4138451, 282358, 3422677, 2643693,
       6254535, 1511501, 10035216, 9115520, 14220033, 598213,
       2927346, 6012332, 5373596, 11807938],
      [9046176, 1689369, 9877796, 14206159, 14405638, 13160909,
       181338, 12338706, 14652843, 109467, 12869410, 8230924,
       9911516, 4934180, 2191, 3414504]
    ],
    [ //  7 * (16 ** 32) * G
      [11523941, 7502996, 7716330, 14123955, 8483611, 15093187,
       11371129, 8371586, 5265181, 15666236, 15783897, 8344018,
       2977716, 15186211, 13302385, 9076730],
      [6743016, 11518353, 13171014, 11731565, 716418, 13055095,
       1508359, 1619091, 11052789, 11536710, 4693055, 10565854,
       11866958, 6847598, 10328807, 1699662]
    ],
    [ //  8 * (16 ** 32) * G
      [9605597, 1896714, 134481, 4319042, 6294312, 5302791,
       1968475, 15420115, 12617449, 3035957, 10651349, 191475,
       10965832, 2489924, 11527568, 7506745],
      [697509, 5802590, 4131627, 540332, 571415, 1255083,
       9256407, 1541004, 13110794, 4583484, 14968965, 1697914,
       9197053, 6585783, 283678, 13159116]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 33) * G
      [12831914, 4388919, 879110, 8110496, 9258701, 7173775,
       126915, 6241010, 7852005, 10443606, 11193861, 9818728,
       2020006, 3017943, 1371833, 1728748],
      [1122006, 15745856, 16486551, 9841283, 9786917, 6347450,
       3347208, 5642259, 2773488, 10742901, 14718484, 2618552,
       9042484, 7329181, 8314297, 8935919]
    ],
    [ //  2 * (16 ** 33) * G
      [1100314, 16735945, 3179284, 6435096, 16105220, 14292827,
       7259148, 12544991, 3715248, 6794076, 7392532, 11831810,
       6891640, 10901030, 15785915, 9546907],
      [16760250, 7165392, 15321886, 9438575, 15499460, 10967384,
       473340, 4661448, 1567962, 2100844, 10574800, 14900306,
       9033333, 10882998, 14113114, 11241420]
    ],
    [ //  3 * (16 ** 33) * G
      [6074204, 15210594, 5601106, 3933357, 9185271, 3893964,
       9902494, 14120165, 1250218, 12236417, 6310206, 10057851,
       9131870, 11760947, 12953633, 3538781],
      [15485789, 109717, 1440209, 12670466, 16196452, 4339590,
       3630567, 11595958, 14194075, 16442002, 14898809, 1839361,
       12741732, 9669230, 11169322, 4466850]
    ],
    [ //  4 * (16 ** 33) * G
      [8135753, 7783648, 4292646, 2621216, 2629727, 3508138,
       11230611, 8006044, 11666711, 11245760, 847862, 2206748,
       10633818, 15121565, 10826480, 15760732],
      [9987374, 223551, 1222867, 15352126, 130176, 2163737,
       3069396, 8089807, 9903017, 15633657, 4080983, 2017082,
       13308172, 913720, 3978362, 2263204]
    ],
    [ //  5 * (16 ** 33) * G
      [5564326, 4678323, 2374331, 5391879, 12103172, 7954590,
       13286468, 11324734, 15832044, 8678208, 8769257, 13669048,
       1652260, 8354338, 13044595, 14149276],
      [280737, 5298578, 6038739, 13519621, 14064655, 518249,
       11626522, 2942945, 2506149, 4463607, 14269049, 9844536,
       4944082, 16006619, 16186186, 14211497]
    ],
    [ //  6 * (16 ** 33) * G
      [9731378, 1312881, 16570110, 65751, 14399323, 12547668,
       3608659, 10316408, 10007645, 14882883, 4047644, 16166558,
       8581513, 10614888, 8238999, 10040664],
      [6076235, 3355199, 11187488, 3725936, 1882687, 7978173,
       13607374, 299803, 251866, 16429470, 12786494, 5130882,
       1539880, 7268494, 9652885, 13096297]
    ],
    [ //  7 * (16 ** 33) * G
      [3293105, 12679263, 5390980, 7832280, 6421311, 3729088,
       12353772, 9502850, 5504351, 15938836, 10744672, 14555811,
       3230309, 13289511, 397259, 9227776],
      [16497634, 4870619, 450505, 8954687, 14255298, 9751324,
       166369, 16563378, 7626212, 14772040, 13340268, 14793491,
       7236918, 14919855, 3920882, 778505]
    ],
    [ //  8 * (16 ** 33) * G
      [1857107, 14098160, 4444046, 6654158, 4487975, 3168473,
       6743430, 11271278, 3371397, 1422122, 102547, 10416603,
       153750, 14890320, 3671474, 2762869],
      [2825526, 15959320, 8940558, 12987201, 15212306, 16436870,
       16649593, 4733901, 11954993, 9346952, 11112816, 10091898,
       12062883, 11141427, 14502797, 14089209]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 34) * G
      [7255367, 15157541, 573542, 13765568, 2129363, 11883211,
       4297144, 8236248, 12911733, 9224470, 4915208, 3579142,
       15218139, 1598303, 7574139, 222472],
      [15124866, 9123950, 5133204, 8101527, 7877166, 14014629,
       5598130, 3694849, 5405283, 9484134, 9453266, 8294817,
       9140895, 14921784, 11608684, 8461861]
    ],
    [ //  2 * (16 ** 34) * G
      [14025422, 13925827, 509351, 14618612, 4779506, 16449138,
       12817098, 9530564, 7422532, 4899518, 16340362, 2354612,
       13758766, 5104734, 14530728, 10291382],
      [10332111, 16722590, 15144731, 5550760, 13885394, 4648166,
       6945263, 1063320, 7663973, 4693759, 14066903, 1462226,
       14500285, 15147248, 13766128, 1620632]
    ],
    [ //  3 * (16 ** 34) * G
      [10393412, 13745004, 9583330, 13555719, 936422, 13262695,
       10763623, 7779735, 11475844, 15804921, 11733968, 401001,
       4598072, 10632277, 4403448, 4118171],
      [4749259, 5735966, 10328445, 10954950, 12884081, 8300039,
       11241723, 13286275, 13976602, 16322480, 900882, 14006597,
       11664813, 1056987, 4102991, 1203431]
    ],
    [ //  4 * (16 ** 34) * G
      [3779993, 14692792, 8698884, 157110, 9402498, 4647417,
       11128434, 3075098, 3610616, 550018, 3833959, 1112734,
       9953955, 14225695, 14795956, 8641731],
      [9820649, 6310997, 2904999, 10952869, 13039582, 7780912,
       14792327, 2229241, 12352571, 2134984, 14319594, 3809890,
       12004156, 12043096, 13791679, 16076671]
    ],
    [ //  5 * (16 ** 34) * G
      [3829332, 9863457, 267031, 5896807, 2775409, 2047033,
       3230736, 8837569, 497226, 15902149, 13003717, 14252078,
       15423991, 3305301, 6017736, 6958257],
      [5585948, 14438227, 10961480, 11114797, 6574074, 5358955,
       14766620, 6973573, 8175849, 4500151, 3869357, 8143621,
       10905497, 15707907, 15971007, 13022754]
    ],
    [ //  6 * (16 ** 34) * G
      [6450714, 3870987, 888558, 4493330, 612163, 3157652,
       1931411, 1886303, 11995070, 15814399, 954027, 6911635,
       11935760, 8230300, 15074642, 1678288],
      [12953723, 8501644, 13817468, 12476096, 13212661, 14207644,
       5353526, 8017363, 3219090, 10583069, 3168355, 1960350,
       1316956, 9021753, 16437855, 3802369]
    ],
    [ //  7 * (16 ** 34) * G
      [15927031, 12192829, 15846603, 1181081, 11728529, 5834816,
       3903825, 13307121, 4605376, 3513650, 4375616, 859941,
       10354307, 7108032, 6814397, 329341],
      [12781440, 319445, 12027133, 7542292, 5987948, 8726740,
       1344192, 8271847, 8546065, 1599349, 6464369, 11779940,
       1252693, 5560578, 11172052, 3949416]
    ],
    [ //  8 * (16 ** 34) * G
      [9453295, 4368060, 6584988, 13002153, 16664610, 2659075,
       154597, 15751629, 7920333, 553701, 11573938, 9842946,
       15721783, 5573774, 10322899, 6800340],
      [5939310, 13658386, 10944191, 16266862, 4113661, 6892242,
       961590, 16218636, 3792243, 657299, 3048568, 2959392,
       8330445, 12263282, 2280131, 8305383]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 35) * G
      [3369256, 6535967, 13426616, 14345453, 6786856, 5771684,
       1372425, 4481205, 10789262, 6629515, 16720397, 1438808,
       6059266, 15037163, 3380256, 8198983],
      [3790658, 4211823, 1660595, 10547893, 3052429, 4231838,
       9402357, 7547897, 2169934, 5764612, 8720235, 8616555,
       6644201, 11912720, 418818, 16211711]
    ],
    [ //  2 * (16 ** 35) * G
      [10122333, 6051227, 629672, 3622430, 3876319, 14998639,
       9331790, 5979543, 11373490, 213656, 15015955, 7404899,
       14904894, 13660321, 12098347, 10472253],
      [8006293, 2900381, 12673354, 7191468, 4886911, 15906715,
       8858791, 9466891, 1841391, 3261153, 15610527, 7807337,
       13408248, 14970017, 3492527, 353550]
    ],
    [ //  3 * (16 ** 35) * G
      [1301294, 2963233, 10980987, 14545019, 9672449, 14869859,
       10804055, 726618, 2576661, 15210062, 5405126, 2913353,
       5494405, 13566755, 1979113, 11722800],
      [14399430, 15162942, 12649304, 9221, 5532163, 2919744,
       6813485, 5501975, 9832450, 10234807, 14839580, 3064661,
       9649460, 13279630, 10554148, 15378198]
    ],
    [ //  4 * (16 ** 35) * G
      [588625, 6425567, 687046, 11480575, 1609294, 2743648,
       13603229, 13745703, 15258983, 3258075, 1937239, 12979492,
       5105678, 3172768, 2356610, 12050021],
      [16237902, 2612163, 15847879, 2396719, 14503847, 13598007,
       708011, 15271282, 3997768, 5728205, 14621995, 7236541,
       1400509, 670573, 490291, 10296326]
    ],
    [ //  5 * (16 ** 35) * G
      [4795560, 9893762, 10782715, 15176098, 2263976, 354589,
       14431205, 359553, 4630677, 14124573, 3729744, 16378090,
       12582039, 1687079, 3254511, 9917662],
      [10396397, 11208725, 600115, 103700, 892692, 9267943,
       13629154, 12468973, 897527, 984421, 16692238, 4754800,
       13192403, 15260935, 15662559, 1664385]
    ],
    [ //  6 * (16 ** 35) * G
      [14143721, 11689215, 7055759, 871394, 5944094, 3515350,
       13481764, 14609935, 16529125, 5153341, 2937928, 5263281,
       16178626, 5775364, 6990461, 14248235],
      [15926443, 13053200, 7187199, 9294314, 7989636, 401073,
       443952, 4931911, 12459381, 9674925, 5526145, 14651380,
       7676998, 12710712, 3028212, 16443516]
    ],
    [ //  7 * (16 ** 35) * G
      [8553478, 3389311, 11757074, 9045464, 8538415, 13594476,
       2029167, 12821714, 3445709, 11144427, 15717608, 940836,
       13159850, 3489658, 8863196, 3196488],
      [14149357, 16078239, 8199631, 3342850, 4634590, 13096157,
       9161692, 14194647, 13181098, 11277197, 9379690, 1625930,
       16390174, 9696664, 15919740, 9127813]
    ],
    [ //  8 * (16 ** 35) * G
      [2150314, 3322016, 8075627, 552893, 11110113, 14597875,
       4424834, 8674611, 15851330, 14947304, 6890302, 16582310,
       4488351, 3745272, 295889, 14181107],
      [875856, 12296085, 8384920, 7595615, 16148416, 2041533,
       11158636, 4538373, 11207034, 2485931, 7396306, 1743350,
       4813820, 13035590, 1058211, 11799068]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 36) * G
      [386454, 1006888, 5271390, 2500624, 12296221, 1198985,
       5500429, 7417362, 14436859, 11895738, 53780, 11202752,
       10457748, 12840708, 16673474, 5135005],
      [81445, 2279057, 1349206, 13555431, 9384475, 14702411,
       3997777, 11903072, 6183461, 11950202, 1212834, 3173207,
       14516134, 15823227, 521900, 5402395]
    ],
    [ //  2 * (16 ** 36) * G
      [10620687, 13565012, 16092428, 2980395, 5100517, 2671543,
       8797521, 12078419, 1329058, 10861444, 11841986, 12384323,
       13214189, 10224010, 15256041, 6985823],
      [14038691, 12241040, 8174838, 4389955, 4143037, 2434275,
       15713313, 12400178, 10559491, 1449599, 16673451, 8404771,
       4983104, 11468332, 9126282, 13669906]
    ],
    [ //  3 * (16 ** 36) * G
      [9733937, 2228654, 12456713, 2453686, 623603, 13425907,
       7152166, 1480039, 5579910, 7740931, 12099710, 8219726,
       1214852, 10552304, 11615322, 13867577],
      [14310522, 7079511, 13993000, 7102756, 7081522, 13371102,
       1702681, 11371877, 14258572, 12124871, 2190264, 223002,
       10113841, 7715931, 12041607, 14106518]
    ],
    [ //  4 * (16 ** 36) * G
      [3405400, 15086301, 12096289, 13662705, 5613122, 4981155,
       7970132, 13897007, 4306606, 10570481, 14806764, 697024,
       13526590, 4641054, 5531437, 16102960],
      [2993016, 6563913, 2366085, 4071756, 5208307, 16044465,
       12836931, 1895212, 12067002, 7922004, 15188148, 9791559,
       1836147, 2808275, 6755757, 13671241]
    ],
    [ //  5 * (16 ** 36) * G
      [3605493, 10119735, 8505623, 8606162, 2389148, 15618126,
       16337634, 9543142, 2653200, 14956856, 223220, 7497358,
       820561, 5744281, 5249055, 4603572],
      [2029980, 4342880, 12568337, 7345026, 5108764, 7245674,
       4206624, 3099722, 16584658, 9970514, 3748338, 3963945,
       9523599, 4228741, 3860946, 9267800]
    ],
    [ //  6 * (16 ** 36) * G
      [5880312, 15223613, 12718568, 9734876, 4056617, 6282999,
       13639214, 15259237, 10910734, 9899509, 8193583, 975660,
       8014418, 14084441, 8435180, 2197742],
      [16312316, 1200893, 5505761, 12450122, 7078993, 8793470,
       569975, 16187902, 11812056, 3300918, 10829008, 13800695,
       2445399, 2631477, 9428775, 16556119]
    ],
    [ //  7 * (16 ** 36) * G
      [16327922, 12657065, 2361060, 5936685, 12577841, 5795354,
       4571075, 8008093, 282759, 6737916, 12576871, 15571418,
       601855, 6718218, 9500208, 7671996],
      [4992031, 8244989, 8011465, 4303239, 2326775, 11239545,
       13066662, 10112043, 1824224, 2215390, 11000588, 16062593,
       12333308, 8792656, 6164669, 8035127]
    ],
    [ //  8 * (16 ** 36) * G
      [12935746, 7002542, 16733367, 4549207, 199431, 14807785,
       2796490, 16214891, 3269870, 8564970, 2289787, 1938277,
       11399815, 8122547, 12831197, 12799966],
      [8908745, 15530304, 8212250, 12155578, 853135, 13066260,
       16308688, 13415934, 2375967, 5285308, 6424226, 1154868,
       12137931, 10157946, 14157827, 13550414]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 37) * G
      [14074295, 3217463, 15214086, 16356753, 7774447, 2122849,
       12151514, 9201488, 12202760, 6199870, 15594755, 9573173,
       290564, 9389346, 4785744, 5207708],
      [1595422, 3082028, 14785502, 4501746, 10789907, 10282408,
       10930777, 15711945, 7694423, 2637196, 10852685, 6873837,
       9662505, 8964929, 165017, 8271313]
    ],
    [ //  2 * (16 ** 37) * G
      [7553873, 8667459, 15730348, 13297007, 2081681, 16687830,
       3838238, 9543917, 16727260, 7198470, 859497, 14641337,
       1359953, 8270790, 10330831, 11139864],
      [8296831, 2493703, 2828168, 3742984, 4630266, 12643708,
       4009895, 2035974, 13128637, 1011261, 8496814, 11607161,
       5666917, 4097243, 6819502, 11796791]
    ],
    [ //  3 * (16 ** 37) * G
      [12259216, 1965208, 4166371, 6727001, 2065174, 13635737,
       16701093, 9319490, 10032937, 15158138, 15503569, 2063873,
       10969885, 181448, 4552335, 12533346],
      [12356535, 681184, 1283826, 13032523, 11109276, 15451215,
       9574007, 14698152, 2123761, 14150950, 13943166, 2515026,
       5997802, 6222528, 7743497, 4986799]
    ],
    [ //  4 * (16 ** 37) * G
      [11803798, 3724126, 9823695, 10666715, 14507831, 14883220,
       14321789, 4484797, 5457893, 1496749, 12545035, 11667565,
       14916031, 5507234, 11291178, 11811957],
      [9681520, 15834193, 140407, 13345952, 8301088, 14151063,
       16498948, 7377812, 8916160, 2708949, 3333741, 12137325,
       16191775, 5284566, 16512921, 16105995]
    ],
    [ //  5 * (16 ** 37) * G
      [500287, 9715475, 13133809, 12828234, 6580313, 14680449,
       16649252, 2337607, 6568302, 11190413, 15124949, 1609174,
       6566337, 5019613, 5098580, 14331208],
      [14436167, 2681849, 903457, 4987561, 271045, 16654285,
       9048382, 16719542, 3962369, 15086939, 10639552, 6317283,
       12557048, 14055878, 2064738, 4532403]
    ],
    [ //  6 * (16 ** 37) * G
      [8924612, 7822217, 16061516, 4155573, 3709924, 1870463,
       14972350, 16384254, 13242568, 1639987, 3946763, 6912761,
       16041458, 13585972, 15004721, 15484863],
      [15559546, 11366736, 1916450, 3503763, 14210107, 8863428,
       3987520, 10819594, 8226163, 16124408, 14925477, 8865455,
       10806123, 2778408, 16022380, 5770642]
    ],
    [ //  7 * (16 ** 37) * G
      [12335481, 1160664, 6920770, 5643892, 1446778, 6356214,
       15646440, 3771652, 4371731, 7121155, 16257207, 4043201,
       2735071, 5051416, 7516131, 12327690],
      [3358622, 11171988, 7682801, 3748980, 3951412, 7078844,
       5736687, 11131512, 2312781, 13489798, 16573065, 5757512,
       4810342, 784144, 12066630, 6069075]
    ],
    [ //  8 * (16 ** 37) * G
      [6009207, 14424537, 7744103, 6590511, 2350701, 368087,
       9001422, 12234106, 3889857, 14438633, 1006954, 2304629,
       12023435, 3530829, 13594844, 9280802],
      [13913866, 9183191, 6178039, 16230278, 3252539, 6323391,
       5021531, 9462573, 8255933, 2994998, 1667873, 13227109,
       14410578, 11456176, 250375, 4990432]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 38) * G
      [737686, 12215194, 15493231, 11839287, 11838850, 15090439,
       10167791, 6631527, 1609033, 4967006, 7949813, 603875,
       7869533, 4345996, 5462228, 9122259],
      [15839926, 853211, 7821443, 16686888, 8173690, 13245989,
       14233001, 12811033, 4122961, 4293990, 245825, 8332014,
       9191375, 16655644, 5992068, 12335694]
    ],
    [ //  2 * (16 ** 38) * G
      [2478168, 14861291, 13814837, 4959430, 933889, 8411716,
       4102490, 14605186, 2813603, 10744872, 1802732, 13663835,
       11633478, 1479670, 10494900, 5309751],
      [2025583, 5301968, 5716941, 5637319, 6106851, 9158453,
       1620436, 3764253, 15975154, 14309611, 13907637, 10788073,
       1923116, 6278935, 15886849, 3830351]
    ],
    [ //  3 * (16 ** 38) * G
      [15906561, 13440979, 6919002, 6456280, 8582685, 2497704,
       10145947, 15228059, 2725856, 5585202, 413178, 9118000,
       7699617, 2381354, 15870555, 16373069],
      [3240928, 3238966, 4476636, 2102891, 4197342, 7419862,
       7299707, 2935984, 16012203, 11234190, 14874625, 16457388,
       5016730, 12495871, 3668278, 5049784]
    ],
    [ //  4 * (16 ** 38) * G
      [12445890, 11543008, 9884816, 13259440, 12749420, 14047596,
       16630539, 13573620, 16690962, 16015440, 15011427, 8344262,
       9801605, 9413069, 15414475, 2692052],
      [8641712, 8907184, 14207993, 11642996, 8357434, 8234932,
       3060667, 2967666, 261471, 6116214, 3286917, 7824801,
       13428128, 16757157, 6248980, 293768]
    ],
    [ //  5 * (16 ** 38) * G
      [10626870, 13836113, 3577340, 9338021, 337945, 14642476,
       12918586, 7213097, 14435824, 15028332, 16592556, 6503647,
       9724584, 924635, 14098605, 14986553],
      [7564891, 5061851, 10077814, 1128448, 2279971, 16297461,
       655751, 4627892, 9906297, 8662871, 12211547, 3943776,
       14238226, 3775347, 947138, 9223943]
    ],
    [ //  6 * (16 ** 38) * G
      [981287, 2025917, 11451567, 15714085, 689076, 10438114,
       7267349, 945249, 5365702, 10818461, 12436993, 6377590,
       15844612, 10590353, 16238056, 5419267],
      [12913229, 11329772, 15112577, 5283489, 6356098, 11139169,
       10358256, 9223810, 15900563, 4454547, 11190817, 14774234,
       2010659, 864616, 9408899, 6084635]
    ],
    [ //  7 * (16 ** 38) * G
      [11731775, 2321351, 3920441, 6809773, 11926139, 9664463,
       10733000, 14540396, 6478419, 8080417, 13076916, 5677950,
       7551560, 13104757, 7654336, 10817059],
      [2745309, 14708129, 1005873, 10075019, 14343126, 1051222,
       180453, 11688009, 13748704, 1996315, 13039251, 5045410,
       7696863, 844444, 8149227, 551152]
    ],
    [ //  8 * (16 ** 38) * G
      [16725748, 12462056, 3012507, 8106233, 628165, 3057090,
       14625617, 3828818, 5346723, 2639501, 12867601, 4700436,
       6165687, 4623541, 4293860, 2968680],
      [12022612, 13510716, 2542920, 12759723, 6417954, 8319637,
       10315247, 9918440, 3456878, 4742190, 6089799, 12703385,
       13768491, 1995671, 1663046, 3149765]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 39) * G
      [15871301, 4003729, 5806102, 12938901, 5683094, 5050843,
       7695631, 8705321, 3473, 888786, 2625148, 14737760,
       8645343, 8544221, 11857103, 13721567],
      [11542182, 4514194, 792635, 110085, 1341196, 14188660,
       4052741, 15940021, 11071537, 4516858, 3386147, 6663039,
       11422694, 6042628, 12815033, 1818278]
    ],
    [ //  2 * (16 ** 39) * G
      [16051562, 6883359, 12668599, 6294576, 14337674, 11288277,
       11895060, 13284574, 886271, 13475343, 16656168, 5977591,
       12015753, 10629220, 10176963, 9535493],
      [9129948, 14086938, 12010281, 14084724, 13983875, 7744054,
       11687705, 6882850, 9051067, 10607891, 12909048, 6363029,
       6488605, 4179333, 1881120, 6605049]
    ],
    [ //  3 * (16 ** 39) * G
      [972683, 502648, 3362280, 1214337, 1367387, 14455764,
       11820248, 7451874, 3006050, 5387639, 15212361, 10452868,
       11413819, 7729825, 8456789, 8083403],
      [3893714, 5624335, 16468255, 12605548, 12173210, 15578241,
       2741941, 3280970, 1348582, 4747631, 12747102, 5734799,
       5428121, 6128338, 10997194, 11085226]
    ],
    [ //  4 * (16 ** 39) * G
      [6939806, 7987495, 10152518, 3847453, 14857880, 14412208,
       4269877, 2944920, 11966516, 9442429, 707200, 1650056,
       12378110, 14851246, 8903934, 13785267],
      [4319843, 10065172, 12479218, 4309775, 8177195, 332631,
       15997773, 14088995, 11286966, 8164238, 7220412, 14864017,
       3324503, 9099825, 13240629, 12695288]
    ],
    [ //  5 * (16 ** 39) * G
      [10846438, 3962320, 5460863, 3079428, 12427084, 5087349,
       16546443, 13341301, 15193149, 3185080, 1710532, 2824089,
       2088608, 3896069, 9482432, 2117856],
      [6207143, 11572056, 14586120, 16080421, 12468053, 9467696,
       1838533, 1696215, 15760984, 741446, 5601048, 7751734,
       44579, 1463015, 12861782, 5888673]
    ],
    [ //  6 * (16 ** 39) * G
      [3561798, 15256824, 15016747, 14849441, 12391008, 9504351,
       4866148, 2598669, 14625276, 11241579, 834023, 1342804,
       6649869, 16026036, 5777111, 6306402],
      [9927317, 15597767, 1986466, 11174234, 2560656, 15238597,
       5594682, 13814097, 9302428, 16462800, 8940195, 10457037,
       16143436, 3861186, 5579275, 10107316]
    ],
    [ //  7 * (16 ** 39) * G
      [2147151, 6789411, 526160, 3506890, 999943, 15763387,
       9575055, 913731, 6986821, 13064328, 12802068, 4184914,
       11164226, 4528343, 9207016, 11878706],
      [4384963, 9876130, 15442821, 16487138, 1805461, 3118165,
       15494290, 745505, 5140305, 5966786, 11747023, 1436202,
       14986119, 13944494, 16036752, 3139527]
    ],
    [ //  8 * (16 ** 39) * G
      [12718773, 1985976, 14388753, 7883602, 11183209, 5532856,
       1502001, 10302484, 224616, 4986997, 16739365, 1614449,
       8756056, 9016216, 14273075, 679790],
      [7895586, 11719849, 1980568, 6565888, 446174, 7551107,
       9338567, 13561522, 15611439, 8305530, 14901555, 7540695,
       4950972, 7004537, 1294281, 3456568]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 40) * G
      [5682394, 9833604, 11240808, 6815430, 1765587, 9680977,
       10198191, 347351, 14209071, 14818935, 5848452, 8679023,
       9766896, 9297247, 3153273, 7834622],
      [8992255, 10578715, 196247, 16413528, 11060670, 3258876,
       194404, 16250602, 15888072, 10235762, 10958726, 2016856,
       427711, 10384917, 7971758, 12468708]
    ],
    [ //  2 * (16 ** 40) * G
      [6134960, 7641779, 1237277, 10801881, 5125172, 1954493,
       13679404, 6877341, 8936714, 9767247, 6229472, 8829075,
       11222987, 14895175, 4750700, 1731707],
      [9147747, 15784828, 6014790, 12447931, 16211039, 1614116,
       8876848, 2374974, 16724046, 6535671, 12621404, 8616950,
       1634226, 9071902, 4260590, 13205915]
    ],
    [ //  3 * (16 ** 40) * G
      [7615696, 593463, 15733547, 15842656, 508259, 7070255,
       12519645, 14676901, 11292953, 16037337, 6237729, 13936750,
       6508787, 8349545, 11004371, 906530],
      [14858322, 135506, 8336978, 2941608, 15276306, 6782038,
       15287388, 518509, 7613785, 13996437, 11653964, 7181242,
       15646014, 6542847, 13112887, 9534457]
    ],
    [ //  4 * (16 ** 40) * G
      [8849476, 947836, 8002351, 7446118, 7876194, 9035476,
       5453181, 4848060, 14516046, 11722505, 15688606, 4042694,
       8364792, 9374948, 422083, 8466635],
      [2187655, 13508046, 2748023, 3697994, 2615856, 12638772,
       16001746, 10344280, 29515, 6163911, 3993305, 11063006,
       3181940, 4867849, 12089262, 14674612]
    ],
    [ //  5 * (16 ** 40) * G
      [7345200, 15573416, 3762790, 15111926, 4326837, 13518830,
       12807837, 9132181, 14714892, 16491340, 4694534, 12997619,
       8229931, 12391776, 16215876, 4382704],
      [13187142, 12462302, 4112228, 8840043, 16616268, 1519989,
       4418172, 103204, 9370984, 1041373, 3639492, 8347424,
       12020014, 12475690, 13645656, 3851475]
    ],
    [ //  6 * (16 ** 40) * G
      [8911841, 6291001, 9461526, 16662535, 7388054, 2952130,
       4958114, 877752, 13293625, 3714281, 8776377, 3646665,
       14970388, 7233979, 8512603, 3468893],
      [14034576, 14189884, 15020171, 9200129, 14438374, 10682973,
       3847736, 6099005, 9143767, 6580042, 15657300, 11625873,
       9270965, 7711288, 2133137, 13256516]
    ],
    [ //  7 * (16 ** 40) * G
      [1375981, 6671896, 12570966, 6177737, 15320226, 13629729,
       964439, 3100144, 6094856, 650872, 2684949, 8551252,
       8494306, 5555966, 7419502, 13796267],
      [15828955, 14000493, 4360428, 232853, 15119026, 7465503,
       16112890, 4400315, 7940128, 5323715, 14361535, 10697150,
       7574851, 7599146, 16185793, 737008]
    ],
    [ //  8 * (16 ** 40) * G
      [4576163, 7734809, 1196646, 13414380, 4318792, 9065148,
       3645153, 14985102, 8415002, 16396129, 16657441, 10741207,
       7916875, 11993351, 9288901, 7898007],
      [8782405, 3582699, 15834806, 15747304, 9614012, 13906923,
       11598091, 14666534, 16112321, 330358, 3218560, 9091195,
       10762576, 15122657, 4107335, 14254101]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 41) * G
      [13178455, 9659982, 10648226, 646428, 12298887, 1334361,
       1278322, 10497345, 14537705, 10790130, 14529898, 10291197,
       6641406, 10596405, 7505662, 1277192],
      [7413455, 10651183, 1393385, 12732204, 11788046, 8779789,
       868831, 1213201, 4310662, 5525358, 1160707, 5506074,
       3081632, 14851699, 9205792, 9799330]
    ],
    [ //  2 * (16 ** 41) * G
      [4853613, 9197753, 8466674, 14560007, 994409, 13559072,
       10820185, 8771908, 9694664, 5943617, 12458453, 11303170,
       915870, 5328438, 10832246, 3456244],
      [1497884, 2023720, 15410157, 11266160, 13039018, 12323050,
       3977746, 5825118, 4605299, 4746574, 16582895, 989480,
       15564141, 14223193, 1733258, 14660449]
    ],
    [ //  3 * (16 ** 41) * G
      [9858404, 5164397, 8491479, 7530344, 9443407, 6923538,
       15764224, 13586685, 16027502, 11771816, 4979583, 5035337,
       4652526, 12028700, 175339, 101013],
      [4317760, 6431790, 16126395, 14793678, 6002368, 15830888,
       4382713, 12497486, 13239031, 2155021, 14530005, 6152380,
       8172368, 7011932, 16225960, 12903395]
    ],
    [ //  4 * (16 ** 41) * G
      [9290581, 9560715, 8541061, 6311561, 16283627, 13521292,
       8209581, 11999490, 14314574, 16773026, 111159, 1414648,
       1606451, 10145759, 7979277, 13351914],
      [6480609, 11470065, 14102885, 7659221, 9752565, 11963038,
       13751308, 3814799, 4695559, 6744268, 13395366, 10548917,
       11079020, 12606777, 3409689, 7712395]
    ],
    [ //  5 * (16 ** 41) * G
      [3341494, 10984511, 15812928, 15123409, 6052998, 2011950,
       8037079, 13465994, 846096, 9176539, 4967442, 9219696,
       1362496, 10474065, 8939168, 5599343],
      [16295919, 5968435, 1169162, 7863290, 14157992, 6972133,
       368660, 2934070, 6239609, 4696681, 7578021, 2120487,
       15114465, 2602042, 10217087, 14303998]
    ],
    [ //  6 * (16 ** 41) * G
      [9915458, 13600072, 11272837, 10730627, 14110550, 6638574,
       8952562, 15970613, 7974406, 7647002, 5050609, 9786485,
       4361292, 4801945, 10122765, 2290447],
      [6398592, 7948347, 658900, 2518362, 2244344, 9897065,
       6127536, 16508807, 2640383, 15555526, 4110128, 2720506,
       3168575, 12242518, 3710024, 14412050]
    ],
    [ //  7 * (16 ** 41) * G
      [15728460, 7115868, 3881618, 14121419, 11365746, 4497943,
       6432583, 6022598, 2796520, 9635988, 10091986, 4962279,
       12325215, 9602941, 8400410, 3616601],
      [11181036, 11399310, 15265522, 14573146, 1801871, 10846923,
       14153182, 14220213, 10812025, 16199956, 15327990, 4032373,
       7693712, 7121501, 1730318, 8045934]
    ],
    [ //  8 * (16 ** 41) * G
      [7071868, 5307231, 14454126, 2558585, 15815562, 5155155,
       11051210, 13214024, 2273124, 12020026, 14640705, 12887570,
       14337577, 9125758, 16307192, 9650474],
      [16523627, 12988965, 11398209, 4863452, 10751706, 2072396,
       5257499, 4159954, 16543673, 1920569, 6148812, 10181955,
       5208434, 6095267, 8212085, 10857730]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 42) * G
      [8017538, 16204549, 11459362, 5371681, 3002156, 12966177,
       5032273, 6731303, 2771404, 16647192, 2932828, 16766552,
       3267134, 6241456, 11108029, 11786653],
      [4001924, 4484474, 6180222, 13050025, 3656562, 5776013,
       13276923, 15995367, 115209, 15240547, 9827774, 16064565,
       3630891, 13751123, 1824084, 7714590]
    ],
    [ //  2 * (16 ** 42) * G
      [16330688, 8069172, 1494073, 3736589, 12921381, 14439339,
       619743, 1020607, 3230381, 7304345, 9714247, 5545065,
       4834308, 4417181, 9404890, 10582445],
      [7632351, 921493, 12822548, 13169800, 15605013, 1267420,
       12634798, 5616285, 3084673, 1810007, 11482634, 8704282,
       3806302, 11064979, 427331, 14327768]
    ],
    [ //  3 * (16 ** 42) * G
      [853120, 972206, 9032828, 913358, 4628752, 4763248,
       12686206, 1320198, 555531, 9469505, 15005336, 8410944,
       16152332, 13551117, 12902293, 10832677],
      [3870073, 12570822, 8432077, 15614815, 12128929, 11987718,
       9672556, 7116521, 14232204, 9457390, 13770640, 8440556,
       9887272, 14183681, 7273911, 9622479]
    ],
    [ //  4 * (16 ** 42) * G
      [12262108, 3227625, 1942495, 8480480, 10785609, 13443097,
       3722030, 1559891, 3530169, 10775267, 12758499, 7703819,
       11101444, 8335649, 4802028, 7575046],
      [7979737, 13809627, 14172532, 14182730, 14594006, 1265837,
       7610797, 438867, 4158365, 4060799, 2066955, 16231316,
       1199893, 4590403, 10541310, 10793629]
    ],
    [ //  5 * (16 ** 42) * G
      [9125192, 14608040, 5329217, 8711144, 11973585, 3990122,
       12709668, 10903526, 2476940, 1116, 10268532, 1863763,
       14838338, 3480926, 12139487, 9951550],
      [3799244, 5991677, 14346407, 3911232, 7632350, 1894560,
       84586, 1964678, 8993516, 8155878, 10186295, 9887431,
       6565252, 10686869, 6242380, 9481398]
    ],
    [ //  6 * (16 ** 42) * G
      [12306502, 880893, 9606726, 14373221, 5417028, 10964653,
       13579274, 4678859, 8687950, 12161937, 7573694, 11712337,
       8022214, 9080142, 198032, 16353973],
      [2704485, 9194428, 5568571, 15141003, 7757621, 7858230,
       15659754, 9764663, 12835020, 10515110, 9243396, 7165215,
       5260345, 4782497, 5651935, 13850892]
    ],
    [ //  7 * (16 ** 42) * G
      [4708647, 3981895, 16037137, 10222723, 6903009, 6840370,
       3067088, 14610867, 4000983, 15023456, 12627840, 10635187,
       786967, 13283380, 13098810, 15776016],
      [13196014, 2659691, 245214, 10477189, 7281519, 11553808,
       15404724, 16353325, 3950338, 5998199, 5403937, 1467462,
       3537926, 16702274, 3586973, 16062264]
    ],
    [ //  8 * (16 ** 42) * G
      [10560170, 11711666, 61198, 15665738, 619892, 12735602,
       14993328, 6947906, 2752057, 10713378, 3425492, 13899546,
       662939, 7566376, 14001753, 14555992],
      [6781458, 7813222, 8967083, 12317093, 3462170, 1910812,
       8988074, 1331891, 5974918, 1757280, 9133615, 6270899,
       6493872, 10650699, 14159528, 12760942]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 43) * G
      [16102477, 13140700, 16381414, 3588826, 13866919, 10152202,
       16696524, 2037330, 15896894, 14307479, 8578575, 11759073,
       3536820, 5519031, 13254687, 5838589],
      [4278869, 3185103, 14909509, 11970683, 11038367, 3873966,
       15394139, 15557756, 1671039, 7537395, 4207250, 4340387,
       1905384, 2571600, 5163465, 12586061]
    ],
    [ //  2 * (16 ** 43) * G
      [9749201, 4957888, 16530134, 6520952, 10605781, 6046188,
       5421431, 7527565, 15656404, 11835797, 9832471, 4815298,
       7468531, 7623425, 7657478, 13026881],
      [8706294, 4768517, 740882, 9731403, 6212989, 11101727,
       11845083, 4829080, 9593782, 13177438, 13073412, 10924588,
       15646864, 10646454, 6111585, 15718354]
    ],
    [ //  3 * (16 ** 43) * G
      [8749358, 14454122, 6069861, 8459935, 1124811, 9548042,
       278037, 12522156, 4635794, 3041572, 9266677, 6976674,
       6773351, 16461360, 11269863, 7676300],
      [15801004, 4721247, 3964520, 13959073, 3584159, 5255488,
       542833, 7922477, 8761783, 2423450, 10178091, 773623,
       4771659, 15437164, 8050288, 14511928]
    ],
    [ //  4 * (16 ** 43) * G
      [11600617, 1292149, 15551104, 7037162, 14093757, 8842987,
       5538589, 6362105, 13713089, 1256781, 4137413, 40184,
       5061559, 16653020, 6233615, 6676539],
      [2549517, 8665494, 1205897, 14686178, 14464460, 14714113,
       3132435, 5614585, 8728841, 8497317, 9394151, 5741579,
       8941850, 9641416, 10402468, 15395607]
    ],
    [ //  5 * (16 ** 43) * G
      [12528352, 12961509, 1613067, 2750383, 3202540, 7815408,
       14538683, 9974956, 15143512, 7637985, 3336074, 15116365,
       6282083, 7746527, 6864687, 14616180],
      [925505, 10796703, 13908334, 1088274, 14664662, 5521907,
       11053334, 14026482, 6205751, 5591540, 1457436, 4333211,
       1187680, 9725214, 8039857, 7465762]
    ],
    [ //  6 * (16 ** 43) * G
      [7491834, 1060979, 137663, 3397537, 14531282, 10499622,
       11846307, 16439699, 14700411, 14839542, 6827643, 6896117,
       10554361, 12216425, 8206699, 428492],
      [2324720, 1644472, 2131284, 4012588, 13695406, 13004369,
       2902395, 7021968, 11721319, 15754119, 13243556, 8547321,
       5270539, 3701426, 15897170, 1105133]
    ],
    [ //  7 * (16 ** 43) * G
      [12200716, 10151941, 1809525, 11330569, 16712178, 15986495,
       6927905, 7542445, 869741, 2367688, 8819203, 12821158,
       1328620, 13833417, 15882060, 7570104],
      [15152927, 12984743, 6418616, 11152840, 4114441, 5938679,
       243102, 2339837, 15779636, 12859197, 5730021, 3267649,
       14364047, 12255867, 7067507, 14188615]
    ],
    [ //  8 * (16 ** 43) * G
      [4538092, 10947144, 9897899, 11972634, 16323490, 166869,
       9956684, 14554742, 7226933, 2745651, 7427838, 2049869,
       5064111, 8059652, 3958458, 5468359],
      [16011699, 1482086, 1647076, 10405411, 8938230, 8262434,
       9076286, 2279664, 1253621, 15436184, 16644225, 8063271,
       400244, 14937111, 10965797, 2927386]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 44) * G
      [9733308, 7200643, 7234369, 4790183, 15102950, 11667704,
       10446971, 3576342, 9061706, 14234154, 12002863, 7967138,
       1839813, 4634073, 6695824, 11340973],
      [14779564, 5786956, 14465508, 9821783, 6990671, 13575635,
       2160032, 10077319, 16544199, 1503147, 1898669, 5160749,
       3912607, 1758048, 1059726, 8417213]
    ],
    [ //  2 * (16 ** 44) * G
      [12360393, 16627803, 12333461, 4161184, 6156176, 15806068,
       9838253, 10199452, 2364587, 16454824, 13796919, 1016042,
       462367, 1595761, 10719669, 7582506],
      [8491409, 8567278, 13146124, 11348677, 3189367, 5028054,
       16272967, 1460692, 99945, 157252, 11436969, 6287926,
       5575644, 6812370, 14220833, 11686519]
    ],
    [ //  3 * (16 ** 44) * G
      [10055407, 7203667, 3966920, 13459371, 12486174, 7706632,
       11946154, 4126964, 7996282, 13315506, 7970180, 3372082,
       9598137, 11307238, 12740084, 8298009],
      [4093116, 9548701, 13145254, 8551735, 8294246, 3584035,
       11659639, 6881980, 8742433, 3149398, 16270543, 7139146,
       9295176, 12492579, 3644230, 14299729]
    ],
    [ //  4 * (16 ** 44) * G
      [5992343, 124792, 7969185, 596755, 2915786, 3841794,
       16066555, 6084582, 16175401, 892980, 10283205, 2837994,
       8291003, 11258228, 7497775, 2908807],
      [15291139, 1681590, 9286967, 10245723, 13371515, 169752,
       9680913, 11656686, 13750196, 11969029, 4850512, 8085105,
       5866300, 9884526, 15199464, 16482906]
    ],
    [ //  5 * (16 ** 44) * G
      [6859963, 12619040, 4958591, 5876212, 1874972, 6087266,
       4000837, 7915575, 8386590, 6432417, 982034, 7778624,
       7239570, 737016, 576273, 13823294],
      [4136525, 2596671, 15246325, 3700283, 15186467, 6469872,
       589577, 11298060, 8321662, 10616736, 6709859, 1539970,
       13934718, 15123303, 12315922, 2695549]
    ],
    [ //  6 * (16 ** 44) * G
      [14875759, 2916671, 12566405, 12129439, 2526789, 8049766,
       14232871, 4162770, 1942113, 3644744, 8819059, 1483215,
       4685891, 6236699, 6023027, 1150600],
      [14533029, 2863296, 11405979, 9403535, 10983917, 11692708,
       14970962, 10914466, 3061933, 14923177, 8049670, 14078667,
       9666174, 5476438, 2648871, 11679841]
    ],
    [ //  7 * (16 ** 44) * G
      [108822, 660554, 8401264, 12095622, 8665025, 4142460,
       12051520, 5143187, 2347211, 15537262, 4502195, 12637082,
       1084355, 9481110, 16753067, 9545594],
      [13038195, 6876027, 16773905, 1635686, 16042259, 4315996,
       6215345, 4092217, 3007774, 16076576, 63729, 8276819,
       16429816, 1960257, 12951308, 6720202]
    ],
    [ //  8 * (16 ** 44) * G
      [9106292, 3037725, 5505317, 7271731, 15772026, 13840544,
       9593634, 6130863, 4827925, 13983159, 10323644, 15727064,
       1327583, 11501947, 776242, 7796457],
      [137918, 10681079, 11672116, 4438662, 8457522, 10863756,
       5061234, 1551833, 9907683, 4244048, 730120, 14769092,
       1004109, 7671093, 6004162, 8647495]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 45) * G
      [3846211, 1013677, 4916811, 5718630, 196442, 15531488,
       11536511, 16269196, 1123014, 7916171, 15655371, 3134223,
       8222208, 12440717, 62413, 14492328],
      [8308650, 16012584, 15567711, 16547331, 8051417, 6231377,
       4099702, 2484005, 5879724, 8869927, 2565237, 1058655,
       13684386, 4389254, 3010072, 10036870]
    ],
    [ //  2 * (16 ** 45) * G
      [10544583, 6567874, 1769286, 9980544, 8145430, 5713501,
       8885914, 3163622, 14685837, 7965378, 12030649, 533129,
       6626421, 1275159, 11993846, 14516314],
      [9430014, 5665005, 14362429, 10346020, 2348806, 5281499,
       6935990, 14318049, 3335832, 13439734, 2938706, 9055034,
       14827760, 6280712, 9490866, 416559]
    ],
    [ //  3 * (16 ** 45) * G
      [8077974, 8973053, 1477508, 12663575, 11277951, 2398330,
       13426539, 14465159, 12743656, 12845666, 11059800, 6168434,
       13616039, 15959754, 15562443, 14561164],
      [8805715, 3409805, 5197518, 1787272, 2549774, 8527070,
       7096747, 1363116, 13095537, 4122604, 396461, 8491382,
       12445671, 7141339, 13020680, 2821669]
    ],
    [ //  4 * (16 ** 45) * G
      [8224559, 7121016, 9941365, 12560983, 4486688, 6526016,
       16315955, 3559740, 6826157, 4416137, 14650018, 7089944,
       5882415, 13301491, 1489928, 8881871],
      [4223727, 2339097, 476273, 3460480, 14591357, 2192658,
       13038471, 10960649, 10742088, 16625941, 3806493, 5686376,
       14517822, 16159698, 4261229, 10191057]
    ],
    [ //  5 * (16 ** 45) * G
      [10665484, 13437327, 9577344, 4003931, 3013730, 2797234,
       918810, 8725118, 13731198, 5913470, 8958505, 13167558,
       5235221, 2774564, 14472152, 14675914],
      [8426360, 3483256, 5669066, 12201622, 9095037, 9737527,
       2643066, 7844549, 9073378, 12512171, 13187536, 8440116,
       14508006, 9306907, 10425344, 2880502]
    ],
    [ //  6 * (16 ** 45) * G
      [605686, 683111, 6636712, 2573252, 16382766, 8904291,
       6349971, 5253442, 13042918, 1028361, 12189337, 257905,
       6425715, 5716658, 10991875, 1193792],
      [11922664, 4727600, 3778679, 11988015, 13834568, 9774676,
       8004766, 5584276, 5669742, 9289845, 3149820, 11162433,
       10786368, 10633827, 16545431, 6789012]
    ],
    [ //  7 * (16 ** 45) * G
      [7460494, 1926241, 9850265, 12388429, 16493999, 3373034,
       10827765, 1455214, 5522677, 8926325, 3317527, 1053362,
       7971148, 1724027, 2721170, 1025390],
      [14052647, 1766025, 2700403, 9414477, 7633317, 3303167,
       3369718, 6389928, 5807897, 12081174, 1142327, 12971010,
       662077, 12689630, 2261525, 3478517]
    ],
    [ //  8 * (16 ** 45) * G
      [4512920, 9183270, 3712302, 4400303, 8158756, 446856,
       1653604, 11196062, 6705615, 6366214, 13257117, 1028692,
       6388876, 6549162, 13756325, 7784907],
      [14832112, 9453845, 13787664, 10217511, 12871977, 6552299,
       10735873, 11578635, 9176937, 11559331, 15993929, 7523052,
       4296874, 5056758, 596469, 13814573]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 46) * G
      [8695045, 10274684, 7169152, 16388624, 11395801, 10599064,
       276237, 2998866, 12455548, 10602805, 14600762, 1963792,
       13947154, 6031227, 2394075, 5220792],
      [8526717, 2836124, 16735142, 2609641, 11514826, 1632208,
       338090, 14841435, 2714924, 15505846, 10349855, 1483608,
       1250206, 8005920, 6079091, 3358429]
    ],
    [ //  2 * (16 ** 46) * G
      [10084808, 11400444, 6115454, 10144147, 11818232, 16709835,
       4632848, 2604744, 1343206, 6192359, 7975200, 3103374,
       10286305, 11138574, 4217770, 8284918],
      [4377705, 4487044, 13645741, 2174761, 2289899, 15621762,
       15554808, 6299826, 3091029, 14378314, 8919622, 16183431,
       14358920, 2041848, 2135387, 10701606]
    ],
    [ //  3 * (16 ** 46) * G
      [15893381, 394178, 8960355, 8758905, 9271080, 9683759,
       15999351, 16111681, 4025758, 12455728, 1611939, 8880904,
       13741893, 5941120, 2805, 11691052],
      [3391983, 9260582, 16276578, 2389170, 10175338, 16014067,
       7687955, 16654907, 11913798, 16669096, 6249627, 9309166,
       863332, 7741057, 13030778, 5883647]
    ],
    [ //  4 * (16 ** 46) * G
      [2532267, 9755414, 8996711, 9489186, 3044414, 14859802,
       458013, 4319648, 10533137, 5389263, 13375652, 8399083,
       5302166, 11452219, 10368464, 14034948],
      [15518792, 10908059, 1620642, 9718633, 10273863, 13778311,
       9919436, 5165221, 12740407, 4344559, 10746271, 11324149,
       3186475, 8203182, 45432, 2175531]
    ],
    [ //  5 * (16 ** 46) * G
      [5870181, 4535852, 4458111, 5314234, 8045541, 14361053,
       14126779, 716783, 4219908, 1379556, 10483482, 8259264,
       7013860, 1377257, 7915902, 4226037],
      [10569639, 1182808, 9928006, 9672813, 4477770, 1673190,
       10969517, 16360112, 10413479, 10742488, 8244265, 12088917,
       8945260, 851751, 8079380, 4630127]
    ],
    [ //  6 * (16 ** 46) * G
      [8446578, 8385155, 940627, 1645111, 15248278, 8755765,
       4682723, 12376839, 14346260, 4002526, 15637955, 13798996,
       9658821, 3612955, 3669273, 16351772],
      [565951, 10457777, 2151855, 2398081, 8284986, 4259193,
       10348659, 14601506, 2514221, 12104215, 2251888, 9524822,
       903061, 4499784, 1881234, 4516058]
    ],
    [ //  7 * (16 ** 46) * G
      [4191303, 13300537, 16548364, 5279931, 10032963, 9177942,
       12703154, 11929118, 791987, 9505975, 1459511, 2503600,
       10016638, 10817808, 1385813, 8206526],
      [7090859, 8258570, 6850294, 13965861, 15920678, 7682118,
       2547693, 12229977, 4253255, 1315436, 12828843, 16430505,
       9251081, 11411992, 15378101, 6796299]
    ],
    [ //  8 * (16 ** 46) * G
      [11511699, 1625147, 14764768, 8676009, 14457813, 8671586,
       15233067, 8916996, 3911388, 11977345, 15658678, 5075755,
       5883313, 7715547, 53967, 14343590],
      [9790510, 13858182, 5561163, 6299902, 1499929, 5902076,
       5899409, 6537903, 937946, 10376384, 4313689, 13194489,
       4828297, 14415331, 10080291, 13293975]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 47) * G
      [5636074, 12602608, 12870906, 1834748, 6273338, 6187040,
       15643834, 9289466, 16365279, 9169656, 3773242, 5725473,
       16721788, 13054517, 14032221, 8724133],
      [6285652, 2799151, 6268611, 8937121, 4587821, 14034556,
       11952569, 16068735, 12073039, 2855472, 8336120, 333473,
       6060935, 15519352, 9404954, 6145774]
    ],
    [ //  2 * (16 ** 47) * G
      [13047258, 1769111, 5016221, 2408340, 16705562, 8313602,
       5591081, 11259509, 9231132, 16595073, 16004625, 7526278,
       3027167, 4418479, 7802946, 16385543],
      [7383608, 12864504, 16553823, 11425333, 15872822, 7678402,
       7884902, 7199494, 15820082, 8676821, 12857744, 23719,
       9098862, 14662525, 11796449, 12787410]
    ],
    [ //  3 * (16 ** 47) * G
      [6822570, 4325693, 1468896, 938898, 4157798, 11789736,
       12011239, 6790291, 9329573, 15369222, 14364515, 12048165,
       10166019, 6697661, 62406, 12294866],
      [13002585, 12688303, 13562076, 8752930, 11477874, 3973007,
       5664357, 5842805, 1133275, 4968921, 6910651, 13749998,
       13565936, 4426948, 8421584, 6858532]
    ],
    [ //  4 * (16 ** 47) * G
      [16586299, 3149364, 709493, 14372493, 6329065, 16131575,
       2444265, 7515752, 2904460, 14572113, 15819454, 1154044,
       5663971, 12555073, 12403151, 13459829],
      [4900623, 16667311, 4751485, 10300764, 13632021, 7277304,
       11863249, 16115276, 5791249, 616212, 3706371, 7440838,
       13367903, 16757360, 2898247, 10098137]
    ],
    [ //  5 * (16 ** 47) * G
      [6367314, 3193736, 15844278, 12303305, 5887138, 3375262,
       6970978, 1900576, 11150694, 964333, 6089735, 5228603,
       2157393, 3652121, 2364097, 11619429],
      [14793186, 1738988, 2931936, 14825322, 7392382, 1891169,
       15328322, 16561068, 7991409, 15031799, 15951387, 9501895,
       11374064, 2337589, 5706126, 9199217]
    ],
    [ //  6 * (16 ** 47) * G
      [16641156, 2806570, 817475, 3596574, 10623164, 13307040,
       13942598, 1374829, 9391479, 7603098, 2024339, 8824442,
       14489459, 14876434, 3402523, 12476011],
      [7904620, 4887746, 6698709, 15631735, 9140597, 14965010,
       16449015, 12992836, 11981100, 5210380, 2737491, 10711277,
       13721936, 7263007, 10652708, 3670093]
    ],
    [ //  7 * (16 ** 47) * G
      [11208995, 8044692, 7431191, 11241163, 1842005, 16463813,
       14867556, 12115403, 9075435, 1111631, 9343974, 15412865,
       4143381, 1773212, 10021964, 11791383],
      [7037128, 4085249, 9646267, 8771684, 6427189, 12078193,
       10960200, 9719909, 349872, 13037691, 6036260, 9645753,
       4922674, 1665127, 4288739, 13881538]
    ],
    [ //  8 * (16 ** 47) * G
      [7679269, 1726131, 9331167, 4511727, 6915051, 1070955,
       9019919, 5452709, 12298344, 8152456, 578222, 11451634,
       3639186, 15996472, 13234665, 8545093],
      [6695286, 12626307, 10990338, 3958853, 15788175, 11514209,
       9697031, 14091039, 2304069, 6390639, 11846493, 11691124,
       3666057, 2073313, 10561656, 6399542]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 48) * G
      [245075, 11573930, 7906856, 10810669, 414808, 14543546,
       8998160, 14363015, 4073853, 3256202, 7975978, 410130,
       16251367, 1688640, 5013505, 12688907],
      [13143105, 1033702, 5800493, 15088088, 6859373, 15463087,
       13710838, 12699594, 5667577, 3205859, 16144250, 2055031,
       10492189, 11731429, 12518230, 1504253]
    ],
    [ //  2 * (16 ** 48) * G
      [1472888, 10871362, 7808136, 294070, 6300678, 3740449,
       14043987, 12572074, 7239204, 2017035, 7479633, 11285910,
       9345046, 12444595, 16013481, 10189114],
      [10066541, 9105476, 16558148, 2035809, 13643394, 9590511,
       3399263, 3081437, 7802753, 6056058, 15696426, 6155537,
       5008874, 3061938, 8241392, 11826255]
    ],
    [ //  3 * (16 ** 48) * G
      [14573794, 4034645, 11060945, 3429667, 5395217, 982664,
       14578226, 4269960, 598724, 14747934, 2777659, 5037880,
       2148999, 12793848, 14839723, 1724574],
      [10828701, 11943997, 16458019, 8159142, 14604010, 6315949,
       11607927, 4706229, 1546423, 695896, 1879869, 921338,
       4737864, 10607801, 4197324, 10128701]
    ],
    [ //  4 * (16 ** 48) * G
      [10424674, 10331864, 1707699, 3492990, 9998758, 9846889,
       782469, 15667935, 3264619, 10297046, 12637913, 9731108,
       16025143, 9861612, 9202826, 547786],
      [8586729, 2015374, 1588560, 2763254, 7520755, 13728144,
       913899, 15092292, 6674316, 15722416, 4237989, 7491276,
       14157560, 1885486, 633035, 2358505]
    ],
    [ //  5 * (16 ** 48) * G
      [4022775, 5592817, 13354304, 3890835, 15491617, 15659698,
       12541268, 10068043, 6956916, 69164, 13393608, 13826117,
       9352253, 4462963, 13166796, 4882967],
      [2554837, 492176, 5387863, 10723395, 10839404, 14877922,
       10857070, 9677055, 2521860, 11070739, 10320488, 4119137,
       10471077, 8791404, 12438473, 9515117]
    ],
    [ //  6 * (16 ** 48) * G
      [3529386, 10386204, 6423655, 7636134, 6993812, 2057363,
       7216550, 15318220, 11766684, 13413532, 13138063, 4424964,
       1864284, 13502864, 15501521, 3902847],
      [16361484, 11962310, 8459449, 14173928, 1857880, 1383470,
       3775358, 6580628, 6160126, 3748811, 10039540, 1424510,
       13728364, 2254631, 16456910, 13842736]
    ],
    [ //  7 * (16 ** 48) * G
      [3928251, 3558735, 2117304, 2291598, 8144589, 10192431,
       3716482, 2437, 7667984, 16210567, 2952535, 13995595,
       14238653, 4295775, 9103358, 14540355],
      [1522775, 1336294, 2092774, 10066653, 3314267, 14339535,
       10331890, 7375044, 14044467, 13870724, 15823694, 1314612,
       16666733, 8300814, 4839313, 8900202]
    ],
    [ //  8 * (16 ** 48) * G
      [3548731, 10919741, 569086, 10481522, 15571643, 8664064,
       8357053, 3314037, 7659412, 6920339, 4991631, 3052531,
       3081167, 11353885, 1593005, 10261352],
      [7134729, 11206545, 11571563, 14036469, 1526141, 5812355,
       4340233, 16110622, 1251306, 7170687, 4033917, 4016279,
       4307114, 8783114, 4391556, 9780103]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 49) * G
      [8128405, 5079484, 6147193, 12281525, 16189554, 1387326,
       4195583, 14137827, 1462249, 3992967, 3085908, 8854067,
       8916476, 25238, 13347302, 9876206],
      [15408330, 10761171, 9539456, 768704, 11068413, 6704679,
       15640812, 7570832, 13335822, 14233010, 12888637, 3664423,
       13125327, 3272054, 4884404, 12188498]
    ],
    [ //  2 * (16 ** 49) * G
      [15256753, 1927358, 891682, 2059163, 9128349, 3801988,
       16283345, 10318658, 16415050, 10748739, 2758884, 4020196,
       10629416, 14071009, 2774455, 1016621],
      [4271822, 916979, 14089750, 3216171, 4070362, 6255772,
       9033146, 16299445, 12127404, 8541010, 5838377, 14970004,
       16403668, 14734358, 5998806, 2651156]
    ],
    [ //  3 * (16 ** 49) * G
      [6601288, 6415733, 13972376, 15289576, 16589326, 8635767,
       3371532, 16270017, 7503754, 6317232, 385804, 6311903,
       4076664, 6802492, 5937079, 3809721],
      [12846403, 8786967, 14102860, 11527193, 5924561, 9684765,
       14758840, 4620009, 3811854, 1759794, 14601084, 15537627,
       14509333, 15118010, 7283921, 11031018]
    ],
    [ //  4 * (16 ** 49) * G
      [7959750, 15820082, 10929376, 8148293, 14908487, 1640812,
       15267121, 15502661, 2478465, 15073260, 8271635, 1262459,
       15200429, 10372231, 6921955, 2212372],
      [4942207, 5153231, 16580059, 2635020, 2221335, 15640287,
       16743955, 1931471, 10169886, 3761566, 9606006, 12783756,
       1481304, 13867009, 16713355, 551682]
    ],
    [ //  5 * (16 ** 49) * G
      [9678304, 7069596, 11877973, 1021870, 598145, 13128184,
       10171037, 13294325, 9934984, 6773501, 15306540, 16242416,
       7784180, 14737311, 12545698, 294216],
      [4107409, 9066113, 5613118, 10769907, 4655796, 4941427,
       7534377, 14782733, 14526448, 14895693, 3401887, 14369731,
       4325150, 14956390, 11305057, 327]
    ],
    [ //  6 * (16 ** 49) * G
      [8626424, 1653326, 15418400, 15990274, 2602144, 14387989,
       8929789, 8503929, 6228572, 7303873, 13013375, 11362690,
       11071208, 12416744, 10189210, 2068083],
      [8950095, 10835802, 15342626, 7508211, 10778702, 5273269,
       8044434, 8772299, 5707062, 15637357, 7963056, 7143161,
       7553244, 13317098, 1440457, 12168892]
    ],
    [ //  7 * (16 ** 49) * G
      [298198, 15868246, 990675, 7772298, 16315181, 475109,
       8565258, 1535281, 9845206, 11198005, 2151627, 6772246,
       7696538, 8994863, 15514398, 5152082],
      [758181, 13108741, 9797773, 8410389, 9989933, 8528579,
       3815014, 15247070, 8689182, 764617, 7184106, 16176205,
       12938443, 14089866, 206594, 16259768]
    ],
    [ //  8 * (16 ** 49) * G
      [10188624, 14456942, 738032, 10439638, 860838, 2370832,
       15033743, 557735, 12445823, 4919258, 6150099, 6331249,
       11352987, 7581678, 13259312, 7770883],
      [16083812, 4791889, 16062183, 7499501, 5407965, 2957831,
       13762473, 2860688, 8677420, 12243052, 13126362, 9023331,
       2958197, 12511625, 2911695, 5254624]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 50) * G
      [9547046, 4561516, 3373386, 3612072, 2460834, 15985003,
       2636083, 10418197, 15792894, 15898125, 9259450, 127537,
       12351596, 9195513, 3281535, 4048234],
      [12728340, 3402064, 340635, 4623978, 3120606, 2766756,
       2937267, 2671523, 11317028, 13017288, 14426371, 4436683,
       8302386, 3110298, 4050888, 15376066]
    ],
    [ //  2 * (16 ** 50) * G
      [4172195, 12561052, 11877022, 11008979, 3351167, 7256083,
       7654561, 14000911, 6553405, 3026465, 1574648, 15068240,
       4209757, 8664346, 3896593, 7962551],
      [2019140, 3159495, 7321388, 14760337, 10056483, 2156351,
       14488630, 348666, 15731749, 16092250, 9880845, 2678531,
       8204462, 7272281, 9391945, 1133232]
    ],
    [ //  3 * (16 ** 50) * G
      [11465765, 1493798, 12890180, 1688992, 2781395, 13266194,
       15574354, 4180906, 7786715, 737191, 12779103, 8228850,
       14605494, 12967428, 7891738, 5517818],
      [4870728, 6405128, 16331553, 1632740, 6027678, 3985225,
       288658, 7363923, 8401649, 9811921, 505604, 4437147,
       6132508, 9798221, 1886978, 15741246]
    ],
    [ //  4 * (16 ** 50) * G
      [384776, 7778368, 12827293, 8957985, 3891012, 4732559,
       5322646, 10881822, 15252157, 14533124, 15996779, 1590079,
       7750117, 13707649, 3207734, 12407389],
      [10832349, 5580468, 6391835, 8814455, 7968974, 1008365,
       1527359, 5421446, 1080147, 15806757, 2466604, 11240206,
       3055022, 8972598, 2628298, 13193164]
    ],
    [ //  5 * (16 ** 50) * G
      [16222527, 15929417, 8006370, 3238704, 6815359, 10573658,
       1964067, 8363903, 8110265, 4908364, 2300788, 6931396,
       10771078, 13238730, 9750986, 11797496],
      [3814136, 103773, 162977, 6590636, 5107760, 13460358,
       15180389, 7109842, 8486759, 8165035, 15599926, 8848034,
       16337029, 2400221, 15857792, 14953238]
    ],
    [ //  6 * (16 ** 50) * G
      [4974248, 13262741, 13552548, 14029234, 15448629, 2464892,
       14145806, 6644995, 4211611, 3403101, 15457926, 13964943,
       7170639, 6376359, 11034748, 13882526],
      [2527865, 15648808, 15351874, 9123785, 2522588, 7669736,
       11776174, 4571308, 2893640, 4950581, 1445307, 15938746,
       9448799, 6116051, 12713708, 12421280]
    ],
    [ //  7 * (16 ** 50) * G
      [9132830, 6265771, 5303148, 13278633, 15724568, 10480527,
       8304943, 6067708, 1120556, 11383641, 13556632, 6357451,
       4640044, 11238779, 4650520, 2372428],
      [13463535, 8211956, 14384111, 11752900, 9301597, 7985275,
       3615481, 10528334, 15874118, 5627332, 7881897, 3707911,
       9054544, 16196321, 10851678, 7787608]
    ],
    [ //  8 * (16 ** 50) * G
      [5404847, 5667880, 4834605, 13387323, 7983750, 7160092,
       2164510, 11979974, 1720429, 132312, 603504, 2014009,
       11196791, 5944795, 751739, 4735781],
      [990092, 14339579, 4592973, 6199651, 8443163, 7779414,
       11417402, 2973798, 4844412, 14762508, 3352923, 16087722,
       7171108, 3959788, 7632429, 341119]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 51) * G
      [6508576, 3401243, 14349962, 1863283, 14917243, 8616038,
       14691725, 1618370, 1752444, 2021589, 16389304, 4195381,
       4198716, 630809, 9782817, 12943217],
      [10267772, 5087783, 32451, 1806020, 12494725, 12207898,
       11857646, 2487977, 2021930, 15387090, 881529, 10154725,
       4205914, 11262216, 10731701, 13702014]
    ],
    [ //  2 * (16 ** 51) * G
      [11414177, 14337048, 3576730, 16114936, 8241697, 16285116,
       1022446, 9459167, 877601, 11401813, 14358066, 15519393,
       11948098, 11783487, 16163962, 5384864],
      [7592038, 7126240, 1787130, 1372042, 7920116, 14640960,
       15099032, 14885101, 12823648, 7840767, 5981804, 8962808,
       11851532, 14338390, 8695865, 6402663]
    ],
    [ //  3 * (16 ** 51) * G
      [1698205, 2395637, 5860144, 15640330, 4812138, 13600432,
       11566471, 12511314, 5322156, 16486340, 15960583, 16172738,
       10989844, 2270450, 312946, 4216677],
      [15722470, 10113657, 1679103, 15012749, 5437045, 1136884,
       6355222, 10470723, 5278127, 10851474, 9751938, 258682,
       15425076, 5941719, 7443773, 6330596]
    ],
    [ //  4 * (16 ** 51) * G
      [2211934, 6746024, 1951823, 2657847, 2828876, 11652815,
       8838868, 1602032, 8922341, 7139366, 14512550, 1854169,
       6008181, 13708628, 14594786, 5678863],
      [7074733, 8639892, 7714079, 12178489, 10148223, 286456,
       15365944, 9474848, 10977089, 1606160, 4508671, 8758203,
       479953, 9513338, 3507826, 12616827]
    ],
    [ //  5 * (16 ** 51) * G
      [13391279, 8906087, 7914945, 1304760, 4814681, 14104485,
       16737760, 3563785, 3989873, 8051208, 12598345, 7182154,
       3755791, 9995986, 806507, 12746889],
      [434847, 3502009, 3972739, 4567117, 839459, 3689283,
       12101512, 6800498, 5145452, 4812365, 16517897, 475292,
       5224677, 10082459, 12157427, 1515058]
    ],
    [ //  6 * (16 ** 51) * G
      [12418811, 8929975, 1202576, 13370674, 3267426, 1310610,
       12390880, 13215496, 6121933, 5786525, 9102693, 10690908,
       7554560, 12740583, 9356995, 16715365],
      [2613647, 12697387, 2491407, 14731161, 424624, 1469598,
       3305439, 1656682, 538364, 753080, 800579, 13891700,
       8196549, 6187674, 1520941, 4076547]
    ],
    [ //  7 * (16 ** 51) * G
      [5553336, 15535933, 814815, 9120483, 16668254, 15191433,
       6230, 1224298, 9612006, 2243293, 4522093, 3899627,
       5348119, 2824815, 11839238, 10816139],
      [12717544, 14507103, 12353107, 2622940, 2295030, 4787780,
       8371048, 11545956, 14471604, 1910537, 6038003, 4092024,
       13708441, 15448078, 9078257, 15119585]
    ],
    [ //  8 * (16 ** 51) * G
      [4955584, 9544357, 10170613, 16415388, 5343823, 7127129,
       259168, 11021402, 15051443, 11519745, 15472270, 10710125,
       1335499, 9080433, 4249181, 1647642],
      [10220351, 3562973, 3163586, 1750140, 14471615, 7016217,
       13881196, 1030328, 15511423, 11025092, 11359673, 11295206,
       15734887, 2822942, 6172591, 14380602]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 52) * G
      [13278629, 9786550, 6428477, 3868271, 12456619, 3141538,
       75433, 2574049, 6565041, 10004203, 915536, 15487148,
       9773054, 14062599, 12271848, 8526966],
      [8613141, 3706385, 7116073, 7695127, 7210828, 13266225,
       16255364, 2861127, 9178353, 13815527, 14397922, 3821072,
       13646230, 11037777, 7577152, 5095277]
    ],
    [ //  2 * (16 ** 52) * G
      [8108195, 2896506, 14261881, 14935686, 9490061, 11831978,
       10157348, 8826632, 16568936, 13483136, 12144718, 5468525,
       10112540, 13750009, 854620, 10551112],
      [14716806, 9736664, 7901627, 9905592, 6184246, 15249332,
       13108238, 16626735, 8232170, 4692104, 8878782, 4123176,
       3079755, 6819446, 7175657, 2666754]
    ],
    [ //  3 * (16 ** 52) * G
      [3106813, 11201151, 247949, 15431981, 3137868, 2769020,
       1140854, 7706716, 4140227, 11914767, 16388156, 15477733,
       13757522, 5306286, 6314682, 8868763],
      [6262872, 2435625, 8417022, 6583489, 7590488, 16027991,
       12899969, 6215274, 10419198, 13642739, 14706052, 4397522,
       4998117, 3284861, 745582, 15094362]
    ],
    [ //  4 * (16 ** 52) * G
      [16158276, 7362128, 9139725, 16002468, 8362704, 13410666,
       6720599, 14097846, 5750619, 15903961, 8880847, 7013160,
       1576673, 1438408, 2468848, 11571365],
      [1021949, 6449419, 16256225, 2395663, 5639731, 15017739,
       10414369, 15013010, 10151568, 15419312, 15525115, 15391230,
       1089391, 8757659, 2289625, 1768884]
    ],
    [ //  5 * (16 ** 52) * G
      [15882014, 462176, 5315011, 12785260, 13325140, 9370291,
       3471220, 2987782, 919671, 10163068, 7231449, 4698785,
       16048734, 10140032, 14464225, 741112],
      [12682290, 2007051, 6963817, 14455589, 6918138, 6416733,
       500777, 1409856, 3785354, 12135445, 8445352, 10797198,
       9882564, 11742201, 15729246, 15151309]
    ],
    [ //  6 * (16 ** 52) * G
      [5926730, 699805, 4806424, 13711371, 16155265, 10508694,
       9080791, 15266077, 5228790, 2689134, 16534709, 13066717,
       3166945, 3519299, 9593420, 5702004],
      [9897354, 13628005, 6650533, 4546897, 6737953, 14895309,
       6510387, 9735840, 8711475, 16315573, 1490326, 16627140,
       7994482, 12485754, 5431592, 14852427]
    ],
    [ //  7 * (16 ** 52) * G
      [6897231, 12949756, 11977913, 5090942, 5672774, 11464908,
       1074571, 12429033, 11374550, 6789718, 6561724, 2469064,
       802571, 1543978, 8178783, 3768855],
      [16275458, 13002826, 719427, 3539734, 15325836, 8287512,
       2150827, 6080144, 13758563, 15742441, 2696644, 16472177,
       7721073, 880665, 7482801, 12613056]
    ],
    [ //  8 * (16 ** 52) * G
      [1506259, 8703583, 3781524, 13397902, 4372156, 7793215,
       5317721, 2751138, 10061066, 3787606, 2547231, 13841820,
       5923663, 13884700, 16251292, 2072767],
      [2395384, 826894, 11318570, 817864, 1499174, 8372275,
       769156, 14465157, 6783253, 6072554, 1595324, 5269298,
       7457440, 10433923, 1578623, 15764690]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 53) * G
      [3133953, 7966114, 5377762, 4811342, 5126751, 7604687,
       917896, 13334582, 15845200, 8202128, 2348846, 16515505,
       9516538, 8242797, 16385138, 14131370],
      [10059057, 5096232, 3817135, 11670221, 3931303, 7031133,
       13804024, 10752344, 15542591, 11363480, 11967137, 15827085,
       9702976, 479862, 12231133, 14925790]
    ],
    [ //  2 * (16 ** 53) * G
      [15352719, 1645591, 16404031, 12726824, 13163430, 1651310,
       3313586, 14646658, 2357676, 2748102, 12300909, 10512943,
       11679401, 10585153, 1699252, 2758223],
      [16675935, 15244254, 2235718, 7807252, 181203, 5240086,
       13381981, 6182160, 16586712, 14262553, 10125313, 6645170,
       16761389, 820218, 9201365, 3463736]
    ],
    [ //  3 * (16 ** 53) * G
      [3290174, 9590146, 3756606, 9391181, 15608793, 4867309,
       295913, 14495207, 13021932, 14891991, 16213192, 3555696,
       4744209, 3144223, 7130759, 8164113],
      [8738761, 15874401, 14686078, 6668262, 626988, 10617625,
       8427886, 3247708, 6532818, 9845758, 10645336, 16648828,
       9607548, 6219019, 7475462, 14296216]
    ],
    [ //  4 * (16 ** 53) * G
      [12578097, 16577678, 10713185, 13727555, 14834267, 544441,
       4264265, 13031210, 4402215, 4435743, 1233612, 6686713,
       13967099, 16683505, 661833, 14406060],
      [8387722, 13681697, 9215600, 1004973, 245640, 6697850,
       8955694, 8917916, 1355593, 13417941, 4679990, 6708933,
       6615351, 898654, 6172885, 14529203]
    ],
    [ //  5 * (16 ** 53) * G
      [6871505, 13849144, 5314746, 13442313, 10108271, 14574352,
       884977, 1895304, 1332601, 2464399, 11884402, 864975,
       14984421, 3990801, 16509981, 2911091],
      [4968782, 13210571, 8844407, 11592341, 2744951, 2469255,
       971771, 4208831, 8984584, 852261, 450798, 11874595,
       9174757, 12407653, 3130699, 8650981]
    ],
    [ //  6 * (16 ** 53) * G
      [6771820, 9345276, 10045412, 1726284, 11130194, 5126714,
       11956548, 16136090, 15699917, 5760303, 10921704, 15254548,
       2017703, 1967121, 13602137, 2515573],
      [16555708, 9199994, 7899424, 16598930, 4608927, 2231129,
       10770067, 102486, 12495406, 10242414, 12154453, 10817264,
       2904993, 10066044, 11520360, 1971270]
    ],
    [ //  7 * (16 ** 53) * G
      [8334193, 1925664, 5099949, 7083289, 3922980, 11748473,
       8025428, 4937457, 2567045, 4097770, 6258401, 7522067,
       14920661, 3220919, 1391743, 15784296],
      [1292451, 13206390, 10894424, 16284135, 8237974, 2707818,
       2776969, 10459909, 3985981, 16254186, 12103123, 9598282,
       927764, 11838583, 494983, 7646358]
    ],
    [ //  8 * (16 ** 53) * G
      [4589491, 253415, 9436654, 9284766, 9894623, 4281777,
       11394586, 8512868, 10147450, 4368485, 5299048, 16471458,
       12651524, 13487084, 3116309, 9087874],
      [13538665, 10322150, 4406574, 10550967, 16508577, 2310771,
       6809943, 2979499, 5146530, 13228583, 5001076, 2999214,
       12493939, 5903623, 13861817, 2752540]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 54) * G
      [2287480, 12238826, 14745913, 14630130, 6456492, 14909932,
       14157001, 8400510, 1996234, 5839518, 7729075, 13453062,
       16367912, 11908562, 13130688, 16093992],
      [11191817, 8092184, 13594833, 329785, 12675929, 15294180,
       816184, 13966654, 13498595, 14256781, 5138476, 2462379,
       1350088, 1288906, 9077334, 8718908]
    ],
    [ //  2 * (16 ** 54) * G
      [15240771, 10095414, 10477548, 10232316, 16326506, 7490627,
       14677815, 7804427, 2071897, 12195856, 8804836, 10336238,
       12774216, 2476207, 3710651, 1058642],
      [16431330, 152233, 4593289, 7611766, 9458725, 13454380,
       7479054, 11592230, 14920377, 14164172, 3158351, 7816500,
       6243571, 3974074, 554063, 16684529]
    ],
    [ //  3 * (16 ** 54) * G
      [2773092, 15487944, 911707, 4708318, 10547387, 2759329,
       6627081, 11486889, 2265937, 16568062, 10032401, 16366542,
       7306068, 10452585, 2924178, 2069267],
      [14326545, 10683401, 1486498, 10421330, 8781330, 4827915,
       259325, 314665, 11355074, 7022097, 2730828, 15135406,
       5087870, 5847596, 13986091, 16663818]
    ],
    [ //  4 * (16 ** 54) * G
      [10584620, 200398, 9737934, 13067013, 2576205, 13421825,
       14024860, 8193153, 16095105, 12901740, 4606444, 10996383,
       12619360, 507673, 11436485, 13418352],
      [3470404, 8507754, 482588, 10171391, 10833747, 15762524,
       15924125, 5298269, 6889432, 1203375, 6337364, 2916010,
       971622, 15186896, 3210781, 8923367]
    ],
    [ //  5 * (16 ** 54) * G
      [13621588, 3146961, 7407963, 13937715, 2941859, 2956421,
       4306455, 3335125, 14574804, 9429524, 16224645, 12158505,
       11011200, 479166, 5219588, 11010306],
      [7798659, 6874226, 4178039, 15086985, 7777843, 15345868,
       9707394, 2326932, 15968489, 6072877, 8297849, 14689500,
       11828217, 12485603, 5049484, 477324]
    ],
    [ //  6 * (16 ** 54) * G
      [233394, 830908, 15696931, 11912034, 5862875, 15394313,
       4622339, 15816677, 3715023, 15366013, 5280181, 14518730,
       2686071, 16435615, 794447, 13306002],
      [12584776, 3057932, 3171154, 3097458, 14465813, 2454694,
       15530584, 14810386, 16483366, 13622298, 14749586, 12059998,
       11937333, 1432348, 3459363, 14349673]
    ],
    [ //  7 * (16 ** 54) * G
      [9087673, 2306149, 9548788, 16428898, 2777437, 11967692,
       9316850, 8952099, 9482302, 5482630, 2780752, 9479570,
       4332139, 10210526, 9455365, 15083701],
      [3321378, 14623472, 8145570, 3806258, 5340514, 13442160,
       3648777, 2806047, 9780741, 13666116, 15992572, 2341348,
       10410075, 8172923, 2493372, 10489082]
    ],
    [ //  8 * (16 ** 54) * G
      [14834180, 12974700, 10621479, 10376396, 7737268, 9162648,
       14845852, 5101797, 657431, 11841577, 13600155, 4874955,
       299152, 12122226, 973938, 13962660],
      [3144797, 12029876, 11453735, 3739682, 8343662, 14317811,
       7170904, 3501332, 15998018, 11832225, 7487236, 1544751,
       15664746, 14602516, 176073, 1166580]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 55) * G
      [1983408, 2730200, 3227522, 5606356, 12946109, 158457,
       14655978, 3247147, 6189088, 10610242, 14681486, 13945420,
       15186018, 7052742, 10360547, 9810426],
      [13367876, 1433826, 12733265, 5838068, 13954986, 13622801,
       16028864, 2876076, 89506, 2307735, 6748163, 703691,
       773001, 16594493, 9008593, 2762104]
    ],
    [ //  2 * (16 ** 55) * G
      [14762753, 3275943, 435054, 16490215, 13035703, 12780149,
       12866642, 14744214, 2635220, 14248837, 20773, 11075265,
       82487, 5987506, 10399935, 15604655],
      [2065799, 14805545, 3487697, 13231058, 10678139, 15716168,
       5431083, 14133957, 3972143, 2684635, 14274083, 128385,
       16564419, 11091079, 9434600, 5027392]
    ],
    [ //  3 * (16 ** 55) * G
      [5448927, 14143115, 1726291, 11850806, 2037937, 13020627,
       7093484, 13066687, 14873430, 9516684, 7790084, 3383326,
       3998552, 8932749, 344765, 754561],
      [5914524, 10868830, 7010771, 12287572, 9034985, 8559297,
       7671497, 7040327, 14482981, 15379354, 14521295, 6699729,
       1481477, 8857382, 6569525, 9463680]
    ],
    [ //  4 * (16 ** 55) * G
      [2282634, 7023338, 12325771, 16467359, 14594913, 5211858,
       5165293, 15340444, 11667589, 4734240, 2008256, 1968292,
       11997592, 13483413, 14493391, 7417472],
      [10716057, 13472526, 2193522, 12033094, 5600199, 10955880,
       11220059, 8665821, 11493647, 4509749, 9180981, 7511106,
       5505511, 14406508, 2131650, 6763318]
    ],
    [ //  5 * (16 ** 55) * G
      [14063815, 3383752, 12987658, 1883065, 15352788, 1801742,
       228785, 2751727, 11985966, 14797743, 16721853, 6121521,
       2568204, 8679529, 11769851, 15421161],
      [2942664, 3246682, 14145719, 6997949, 2264225, 659425,
       9775070, 565751, 15901387, 583534, 4682483, 11185886,
       1045733, 8815653, 13093142, 16749294]
    ],
    [ //  6 * (16 ** 55) * G
      [10490229, 14070823, 11142783, 6180918, 14135771, 10017856,
       13486559, 7005850, 1929017, 5794383, 256531, 6681671,
       6171014, 15446185, 10526913, 7354147],
      [13957659, 2291443, 286661, 11095590, 14266180, 13319347,
       3623124, 3106912, 84638, 1768898, 14927836, 10410314,
       1694769, 7042532, 3351209, 9247865]
    ],
    [ //  7 * (16 ** 55) * G
      [5897776, 10206652, 3208500, 5496638, 2490, 12990103,
       16433945, 14630741, 14012941, 2216147, 1059320, 13936329,
       8860940, 8025022, 4548565, 13501638],
      [4434538, 6628001, 7235210, 516089, 12916200, 2003475,
       8228119, 14963443, 11602925, 12359507, 1830892, 3085563,
       3324825, 7496244, 9971006, 11386988]
    ],
    [ //  8 * (16 ** 55) * G
      [10481788, 6570474, 5212019, 10349204, 15706355, 7290825,
       16269492, 10468983, 15910293, 619706, 14232919, 3338838,
       5365792, 3396135, 7421369, 3247319],
      [2244036, 214990, 1755651, 11412667, 15932080, 9722803,
       11766158, 12439578, 7397249, 6013897, 7232180, 4862945,
       11596353, 1661614, 6477317, 10134159]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 56) * G
      [9489606, 4243142, 11952624, 5372389, 5361019, 7262122,
       14582037, 2696235, 3637944, 14224012, 9122275, 15043071,
       2035921, 9326127, 7832715, 6562940],
      [14832031, 13824647, 1261572, 3349006, 13494950, 14371761,
       10055202, 384961, 7554408, 414655, 3465310, 16499917,
       6704955, 10911891, 14606713, 12825996]
    ],
    [ //  2 * (16 ** 56) * G
      [14199915, 4481082, 9392367, 4325435, 12058156, 7683394,
       5316289, 5783943, 13029988, 12591048, 16254042, 8385016,
       4404925, 7860274, 741816, 9439088],
      [13644513, 11567368, 5236457, 11820917, 15702714, 13619941,
       3612255, 7101901, 13621680, 1601147, 5439310, 6092800,
       13632323, 3360744, 7738484, 6805647]
    ],
    [ //  3 * (16 ** 56) * G
      [11793940, 4532675, 9039200, 9640472, 5389810, 6596390,
       5151349, 5412008, 11132756, 11664756, 1456336, 1831589,
       9709522, 1149317, 12974984, 6277085],
      [2252323, 12270141, 12646098, 11715037, 1299065, 9852032,
       4683484, 11251008, 772465, 11274058, 1893344, 10069716,
       10024658, 413763, 5423394, 355169]
    ],
    [ //  4 * (16 ** 56) * G
      [12861807, 6756262, 13970551, 3184695, 1567133, 13721561,
       2303288, 3609903, 11875934, 6649363, 2684179, 825359,
       7387540, 2722436, 10158750, 8255899],
      [2698411, 5898802, 9833134, 14543267, 3772620, 6574758,
       7412114, 14889815, 13550311, 11715710, 3381011, 12530718,
       13337246, 9262165, 16180026, 12582996]
    ],
    [ //  5 * (16 ** 56) * G
      [3627389, 9617584, 11381267, 10438799, 915111, 225946,
       13108715, 16016262, 4609769, 3690373, 1807617, 16331411,
       8235935, 15030396, 7332317, 9070939],
      [14663968, 3412037, 9056267, 9010544, 1858846, 5978333,
       13513759, 8862040, 535137, 11667791, 945521, 12284036,
       11666336, 12881446, 7955415, 7802234]
    ],
    [ //  6 * (16 ** 56) * G
      [3361496, 15055498, 285259, 15772368, 15615441, 6888489,
       2923709, 12331138, 1384426, 10814125, 247721, 16616194,
       14412866, 1949851, 7414481, 5836861],
      [2625239, 6888813, 510882, 2468704, 861736, 1667393,
       14475054, 7235748, 15446114, 15854502, 7855298, 8318460,
       7007037, 2101364, 9835147, 2393366]
    ],
    [ //  7 * (16 ** 56) * G
      [10325010, 1264483, 234318, 6049991, 15976451, 886408,
       12413760, 5821142, 3946455, 10759378, 6575828, 3465704,
       12144351, 8926689, 11162838, 11418538],
      [11096162, 4496042, 3461506, 11401478, 8157619, 11362481,
       4635226, 7626247, 1306737, 2882915, 12545957, 15872032,
       6427603, 8099170, 16483154, 7871859]
    ],
    [ //  8 * (16 ** 56) * G
      [14319829, 2556640, 4351443, 7056320, 2411419, 13257661,
       10544705, 9884518, 11101501, 16490311, 6495180, 12307156,
       12539179, 9405244, 10595892, 5277564],
      [2063539, 6083992, 12838572, 11956148, 13802792, 9665434,
       5860637, 13121751, 3738283, 10532867, 3331823, 210163,
       14158864, 16385840, 15181936, 15539400]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 57) * G
      [1092204, 9435310, 1637596, 6525163, 561124, 13914034,
       5835365, 13445652, 4394221, 14857292, 5884932, 13800842,
       1260222, 6735252, 14231082, 3941338],
      [6684917, 9694117, 13955659, 14978803, 7333091, 2938578,
       11993252, 1942926, 7375657, 2074379, 9681944, 4640709,
       2429160, 4929071, 9773896, 11316278]
    ],
    [ //  2 * (16 ** 57) * G
      [15900110, 13636342, 9835153, 141724, 3417080, 1190319,
       10818908, 3242570, 9535170, 14532267, 5763699, 1722925,
       1654894, 7481876, 14688126, 7454941],
      [16699807, 3747317, 15447059, 10684088, 6621501, 2782775,
       2530498, 8533148, 12445446, 6313878, 3191512, 5184190,
       3801280, 4129516, 5684136, 12575029]
    ],
    [ //  3 * (16 ** 57) * G
      [891232, 5784300, 13079094, 2871510, 983950, 647548,
       2089099, 11587298, 2979948, 333331, 13469032, 8907672,
       8245786, 2075293, 1674808, 4416852],
      [2111655, 6061661, 8221941, 14762512, 13558015, 9599551,
       7052697, 11007065, 10433578, 468374, 7230065, 16188839,
       14016830, 9980710, 6679054, 2673419]
    ],
    [ //  4 * (16 ** 57) * G
      [5776225, 7213231, 14061356, 8192582, 2769894, 4480802,
       8251890, 8734961, 11925377, 12562413, 10038088, 15215507,
       7220805, 8118728, 9859057, 10213428],
      [7822194, 13997752, 10612301, 4678094, 9035812, 11018157,
       9697809, 10881290, 14223174, 8563409, 8261232, 10573032,
       9748916, 275172, 3009144, 6015289]
    ],
    [ //  5 * (16 ** 57) * G
      [8237053, 16062058, 3508505, 11419662, 12537559, 5304795,
       16451727, 15445585, 5555055, 1712830, 15734060, 16593826,
       10978559, 1550077, 6431658, 14128272],
      [12003021, 13972031, 14515616, 4676622, 11828687, 14879337,
       11616397, 11653229, 6139689, 13821712, 13307988, 4994385,
       11038056, 7657585, 16635848, 7897438]
    ],
    [ //  6 * (16 ** 57) * G
      [8664899, 15526858, 16152574, 2676476, 10438549, 14233835,
       5714863, 9585786, 14940510, 1426730, 4935912, 15576537,
       10460145, 13990945, 11393722, 16199940],
      [16335291, 2332275, 1621280, 7716467, 11099700, 12790347,
       4494302, 7028940, 16255380, 3482641, 13374195, 12486578,
       622755, 3359083, 8926408, 9622848]
    ],
    [ //  7 * (16 ** 57) * G
      [1748771, 6319176, 13225794, 11104809, 7225025, 6711345,
       1863527, 1175868, 15840508, 13497133, 2053918, 8394030,
       6987446, 6813416, 1776736, 15169065],
      [1348547, 11060520, 7427518, 15656872, 15544095, 2986121,
       15270412, 8979791, 8122523, 10881309, 8861583, 11954945,
       2322972, 15514323, 6199766, 202930]
    ],
    [ //  8 * (16 ** 57) * G
      [3936423, 98985, 3918689, 223995, 5265865, 3627709,
       260780, 13325187, 1770228, 9758380, 9159514, 9103317,
       6111753, 4308363, 1310786, 11070241],
      [3124268, 5589542, 4762172, 3223659, 13810911, 12471750,
       11139766, 711400, 10976530, 9104654, 2394545, 10643293,
       4424447, 2734636, 15077461, 11253260]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 58) * G
      [6299859, 8076494, 12837393, 4861423, 10737470, 14759262,
       9047991, 240492, 4036136, 1815093, 3607250, 12688942,
       11422144, 9039699, 11376914, 3439278],
      [9495978, 13680080, 10500055, 10646936, 8096249, 8736311,
       8737070, 16318814, 1830876, 1070132, 2510639, 613868,
       655492, 14273646, 3142189, 8581924]
    ],
    [ //  2 * (16 ** 58) * G
      [11198378, 16654812, 11067671, 15416868, 10448955, 13217368,
       1923232, 5491122, 4156958, 5382182, 5674319, 2874578,
       12815347, 16540706, 994774, 4426497],
      [11813712, 9236490, 9420677, 4443700, 15730452, 2500139,
       443560, 9878081, 9383726, 15540476, 13571658, 5301497,
       3555849, 5569711, 13840461, 16327028]
    ],
    [ //  3 * (16 ** 58) * G
      [12248679, 5716357, 7686249, 2546534, 1164487, 7003912,
       3181035, 1299150, 142351, 6843923, 9024220, 6881038,
       8671178, 10159969, 5869545, 5632111],
      [1147768, 15284154, 13502107, 5151887, 6683438, 16499731,
       12995226, 14494161, 5363154, 12584882, 782555, 3173508,
       7034431, 14472879, 10851448, 3865123]
    ],
    [ //  4 * (16 ** 58) * G
      [14248790, 10813744, 6679615, 4671858, 12535170, 11803772,
       9101904, 14113192, 10965707, 11851909, 2810894, 13416307,
       10378101, 14105433, 15412691, 10675228],
      [4708391, 14133282, 4471849, 10270988, 9089778, 13152771,
       4051405, 5160652, 15468945, 5745156, 9151931, 13674624,
       16540737, 5229029, 14927597, 2488927]
    ],
    [ //  5 * (16 ** 58) * G
      [676354, 15909803, 7559823, 7743456, 2865115, 9423051,
       6365230, 2476486, 1846218, 14332867, 10055048, 4549842,
       9758354, 6894450, 3188869, 744098],
      [2288284, 7432610, 13579778, 3545211, 8120488, 8259155,
       12414367, 15621178, 3553568, 5881728, 9157295, 3561263,
       273208, 15320731, 14597033, 6771492]
    ],
    [ //  6 * (16 ** 58) * G
      [3902831, 6928694, 9053654, 14415489, 13122955, 7791680,
       10138364, 2058631, 10121821, 12724926, 5843224, 7100705,
       8871157, 1136045, 14403369, 10868503],
      [14686569, 7755840, 14857993, 16596573, 6220467, 9564147,
       11601512, 5787127, 54965, 11654586, 11257481, 10832582,
       15854585, 2030280, 15355094, 1239529]
    ],
    [ //  7 * (16 ** 58) * G
      [472051, 2135118, 12641770, 1284866, 16106537, 4468579,
       7609446, 5273415, 14658188, 6722645, 15993837, 7881754,
       2874418, 8199698, 10675097, 3613159],
      [9640722, 12422833, 9028051, 11133706, 848979, 1645785,
       8729783, 2427125, 14621331, 15382062, 6462083, 15633399,
       2312313, 3844684, 12740643, 1439283]
    ],
    [ //  8 * (16 ** 58) * G
      [14211827, 2912997, 3593439, 1842640, 14730291, 8701303,
       12099849, 6561357, 6242685, 3138190, 2856470, 7490374,
       15206075, 12981015, 16150076, 15445248],
      [6403969, 7673378, 4188896, 8163605, 15586027, 9361926,
       1716255, 1097493, 5898543, 9988627, 2091728, 11281448,
       15618346, 5700161, 8928496, 10008722]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 59) * G
      [2933931, 14978094, 15001622, 645222, 10704743, 10763998,
       9397983, 13435792, 8210045, 1382934, 12951644, 5510833,
       10406454, 4122338, 3828361, 15312653],
      [2154982, 4111030, 5457304, 1990555, 6449009, 5803962,
       7552955, 12815668, 3298667, 11908223, 12223062, 5227989,
       15355527, 4460808, 11558716, 16608519]
    ],
    [ //  2 * (16 ** 59) * G
      [919237, 7151141, 16257021, 15084754, 3176578, 11541707,
       6177395, 16630420, 1788496, 4546591, 11096782, 6328050,
       16256697, 5330036, 10668940, 12243901],
      [10770066, 5876670, 4463459, 15197552, 11799547, 771476,
       3066149, 11430515, 3046320, 14151132, 12876795, 3000885,
       4466308, 10617577, 2072385, 12044137]
    ],
    [ //  3 * (16 ** 59) * G
      [3671212, 357532, 13892978, 15958855, 15816659, 11976182,
       7016566, 14002219, 7063693, 4793784, 12222829, 1956130,
       11140978, 16433927, 9411108, 11097047],
      [9381407, 11345435, 2528309, 9127177, 2752592, 5250355,
       9378728, 10703477, 9013973, 15354557, 1761313, 11314441,
       12130954, 10192467, 365702, 9785483]
    ],
    [ //  4 * (16 ** 59) * G
      [1291298, 3400986, 12420990, 4821901, 11925753, 1449048,
       8312569, 3340743, 14244580, 10090749, 1212430, 7970890,
       16691158, 11497382, 15735623, 6889056],
      [12245922, 12917370, 12431710, 14304844, 1090806, 12659468,
       7863398, 3798353, 12357891, 14938580, 8995553, 8264446,
       14024657, 7393028, 10479602, 11414263]
    ],
    [ //  5 * (16 ** 59) * G
      [8516466, 1851343, 15300696, 11813451, 13185541, 13293830,
       4363362, 4259054, 14031464, 15048594, 8694382, 5065517,
       5517685, 3664423, 9365702, 4605106],
      [12654820, 10830372, 14535265, 4199533, 11222117, 14346538,
       13696134, 15470966, 5944980, 7478257, 12640585, 13809521,
       8950628, 1176102, 4354873, 10313267]
    ],
    [ //  6 * (16 ** 59) * G
      [9776789, 2178141, 8501785, 15737527, 1165698, 2845975,
       6931872, 13603551, 9796749, 15263934, 7942447, 5817397,
       2235138, 8614380, 2441272, 13221947],
      [11364538, 3983153, 8178889, 8776230, 16407199, 3563646,
       3554138, 12010084, 13567931, 8424434, 4976809, 8709289,
       9553639, 10008527, 16260084, 2678088]
    ],
    [ //  7 * (16 ** 59) * G
      [11972720, 15319765, 7242432, 3169353, 11415255, 4627483,
       5875816, 3156182, 11088964, 4021418, 4906898, 7019469,
       3578982, 13401104, 1617713, 1005966],
      [3440831, 7020395, 5766917, 14977507, 16565648, 6728212,
       11376641, 9779762, 5786824, 6599718, 8278594, 2836867,
       16209871, 16293853, 11841162, 8079618]
    ],
    [ //  8 * (16 ** 59) * G
      [9983738, 1799219, 12949186, 12402218, 6028695, 7478787,
       14175521, 5291217, 3305843, 10223711, 14822653, 4871423,
       14569781, 14108244, 211059, 7950295],
      [10711488, 7820237, 15922693, 5610799, 6984734, 13659683,
       5948349, 13078173, 8820388, 7707395, 4294130, 16611590,
       10271399, 1643996, 14827859, 3590092]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 60) * G
      [1304635, 5425058, 9614302, 5626659, 4887248, 7391558,
       8365935, 1004688, 6036610, 1156421, 12382264, 10951678,
       12616363, 16416731, 2658015, 13022213],
      [6512662, 11566563, 3850363, 4980787, 11706010, 12656914,
       480238, 8949273, 460745, 12636516, 10577068, 217503,
       9216255, 15399863, 7521988, 6064379]
    ],
    [ //  2 * (16 ** 60) * G
      [8939068, 120385, 7962433, 2620072, 39720, 15949674,
       2571866, 132199, 2132239, 14387303, 14121700, 10140573,
       2347222, 11570207, 5804877, 1623900],
      [11509399, 3598095, 11933675, 6867126, 4761702, 14120537,
       1000826, 1438618, 9290816, 15800961, 16313284, 766118,
       517799, 14288038, 7718483, 16406792]
    ],
    [ //  3 * (16 ** 60) * G
      [16219062, 11666315, 16432596, 11762833, 6990827, 7019587,
       11994749, 13084761, 12311750, 2162353, 19048, 16704509,
       5356197, 2985348, 16278416, 7347476],
      [8524285, 998342, 1897596, 421955, 4464274, 9998529,
       15815697, 5616314, 14124491, 3836686, 2714043, 1862756,
       50882, 4837958, 11884981, 13335399]
    ],
    [ //  4 * (16 ** 60) * G
      [16344872, 15544803, 8305479, 5765814, 11153740, 12168592,
       11976024, 14742999, 7632912, 9500465, 9934779, 2169127,
       300117, 10936140, 12595302, 9218410],
      [3975744, 11500491, 10578606, 7853472, 9179887, 2987971,
       6918237, 2614098, 2808127, 10261013, 13740020, 5112377,
       957858, 11297424, 569676, 5151733]
    ],
    [ //  5 * (16 ** 60) * G
      [13833288, 3266169, 12261949, 3952021, 8605803, 2789675,
       15551957, 12111927, 15179413, 12920015, 9724398, 15593949,
       14570926, 7409114, 4810239, 13892373],
      [2545586, 1982991, 16021616, 329407, 52282, 1710923,
       16373906, 61914, 7940757, 16770026, 7864052, 12078948,
       11539247, 2464021, 809485, 7768808]
    ],
    [ //  6 * (16 ** 60) * G
      [10969149, 1689473, 6828198, 1570033, 3508761, 9785848,
       6609436, 2206690, 12451723, 11337621, 321341, 14709384,
       9514795, 6590974, 4347747, 13474303],
      [6835890, 3763738, 5804380, 7148743, 7067666, 15021207,
       2057311, 2167055, 14031453, 7619685, 14904462, 12641218,
       260604, 4886553, 9740432, 2076557]
    ],
    [ //  7 * (16 ** 60) * G
      [10013644, 7480040, 11477074, 5150950, 14281918, 11248940,
       12884223, 6497718, 9607241, 16580239, 4542812, 11623721,
       1347637, 1730436, 8556787, 8270134],
      [3381435, 8619633, 5837964, 13686176, 10533719, 13988761,
       16417837, 5167002, 12080227, 5251028, 6071436, 12747911,
       5073862, 8491403, 4381476, 15696316]
    ],
    [ //  8 * (16 ** 60) * G
      [12569419, 2045945, 16572845, 6374171, 8737270, 4331140,
       1837118, 3541120, 8943701, 6010845, 14531072, 12918555,
       13692796, 10195842, 3559091, 13258885],
      [10010143, 4122218, 2577264, 346533, 2587625, 3390463,
       14179574, 10902581, 15612681, 15412929, 16374547, 16132387,
       3340570, 5066034, 15102363, 4564457]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 61) * G
      [4795150, 9980584, 11209384, 3310001, 13990585, 6639272,
       5941108, 557139, 9104010, 14184343, 13749013, 14349550,
       7211417, 10375058, 7587468, 8954573],
      [16162206, 11275260, 16062432, 14260864, 16481754, 12375288,
       7089112, 3980305, 3326497, 1431959, 14893248, 2615593,
       966190, 538670, 8594082, 9686869]
    ],
    [ //  2 * (16 ** 61) * G
      [1843734, 4318546, 1239399, 10919975, 8356991, 15315082,
       8968822, 3511075, 12665028, 6880029, 4867795, 13273186,
       10391899, 3932502, 11508536, 16763420],
      [9131751, 5745334, 5226168, 11652140, 8080909, 1043302,
       2364133, 12075764, 10729429, 5797945, 4509659, 9114559,
       7824094, 3383565, 8445389, 15649112]
    ],
    [ //  3 * (16 ** 61) * G
      [996185, 1891211, 10027899, 6646412, 11795704, 1696831,
       126181, 13540156, 483313, 10766730, 5997454, 886603,
       102106, 14563761, 1553809, 13668806],
      [8555218, 9453794, 5399160, 7737435, 724451, 3209883,
       10646013, 7052672, 13846409, 15740199, 11160309, 13863805,
       1341670, 7853291, 13648716, 14438550]
    ],
    [ //  4 * (16 ** 61) * G
      [774428, 13952220, 6701801, 600629, 9037596, 3366929,
       11276109, 8161423, 381485, 9914430, 16724142, 8851536,
       11028072, 14107191, 9538653, 11781038],
      [9938803, 6449776, 7267100, 7621826, 966012, 813760,
       11036001, 6682058, 6031391, 13288185, 7170315, 8947438,
       16722480, 9483393, 558489, 7357554]
    ],
    [ //  5 * (16 ** 61) * G
      [3821570, 6937711, 15879650, 12402932, 11797234, 10296880,
       15909358, 9115816, 2500753, 2664249, 11119710, 15413007,
       1989383, 3857759, 12789148, 5983712],
      [13008013, 4801674, 2110659, 75193, 4511521, 8203767,
       1613607, 1323057, 1655789, 9964122, 12024937, 16709913,
       6585308, 15134833, 7548766, 12427318]
    ],
    [ //  6 * (16 ** 61) * G
      [7549418, 11386150, 12863464, 13619045, 703865, 15626274,
       7905511, 12290341, 151150, 2313555, 9413457, 7457915,
       3245684, 13024052, 557086, 554003],
      [13812172, 13258980, 4284186, 9660583, 15456892, 1717169,
       15408713, 12257106, 16263078, 8337865, 11552387, 1540458,
       11630659, 3597607, 11760502, 6223706]
    ],
    [ //  7 * (16 ** 61) * G
      [12170246, 518953, 14566283, 3077063, 11547024, 13178002,
       15351541, 13223565, 3723560, 2619273, 16451211, 15389636,
       3565686, 8519370, 6951418, 1629903],
      [12298360, 14101795, 12540932, 3544805, 7237553, 8433351,
       14991139, 10374299, 8339815, 12707766, 4930470, 9891548,
       5594684, 2459331, 8235030, 11388293]
    ],
    [ //  8 * (16 ** 61) * G
      [5961020, 7489811, 9301297, 6025573, 1816544, 5972471,
       4112248, 9975104, 10656959, 10076364, 5635267, 14649270,
       8334015, 9126587, 2541324, 7670869],
      [7250316, 7752468, 13735748, 10554865, 6417970, 3150255,
       6147357, 639450, 13519282, 15056486, 16571536, 13390140,
       12657343, 14373580, 3492039, 8581634]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 62) * G
      [6862040, 14105566, 6523990, 16331746, 14950847, 11750954,
       7848985, 4492383, 14568792, 6098686, 1087409, 7910981,
       10560940, 7480849, 13894411, 11724436],
      [5997669, 14974386, 1726166, 4105377, 16206749, 8304202,
       6700475, 11049200, 2064647, 6149888, 8980171, 6306561,
       3564796, 2680467, 5714802, 1823140]
    ],
    [ //  2 * (16 ** 62) * G
      [9221534, 10251514, 1738991, 12935371, 6028275, 2452956,
       986920, 1341684, 8608298, 15771150, 14189086, 4198925,
       13303155, 1534578, 10470196, 6837149],
      [12442076, 15098597, 5481428, 1255508, 12448448, 4751249,
       12580543, 13181893, 13690145, 4513345, 512275, 3293770,
       1089216, 308924, 3136627, 8207199]
    ],
    [ //  3 * (16 ** 62) * G
      [9250773, 8385828, 4634497, 10552061, 9047226, 9957494,
       13300207, 1704261, 566498, 5522558, 5815743, 1975841,
       14138801, 12835846, 15652821, 4539598],
      [7234218, 15754789, 7167519, 8695303, 10775980, 5045150,
       1619422, 10247195, 15322134, 5666183, 16030676, 6849740,
       4499645, 8110249, 16159683, 3300786]
    ],
    [ //  4 * (16 ** 62) * G
      [13435903, 6294958, 7418964, 5769076, 630714, 1300577,
       8741483, 8093751, 16567959, 11298071, 3780170, 14712243,
       5815104, 12739793, 14734271, 4553836],
      [9536206, 15006938, 11283147, 1199190, 7044594, 14596834,
       5830507, 16246135, 15698906, 13587771, 14091533, 1977230,
       5694064, 267676, 1107495, 10993200]
    ],
    [ //  5 * (16 ** 62) * G
      [985977, 1185517, 5799185, 13813135, 9837827, 6455649,
       11457219, 8440741, 7984662, 10968017, 4031502, 12447493,
       5464875, 5222950, 2828753, 9487889],
      [1771950, 2797848, 9373825, 4574780, 15000334, 2177951,
       12302617, 700334, 4230066, 1834692, 4506751, 736716,
       9273936, 15020876, 1751824, 1125114]
    ],
    [ //  6 * (16 ** 62) * G
      [15422756, 9412355, 7568005, 5937947, 8222303, 6848882,
       633836, 9180388, 4875069, 6211561, 11734345, 7035028,
       1224166, 4514047, 407426, 961675],
      [6876599, 16378634, 1746263, 15927915, 13826350, 6734189,
       15729530, 5470834, 3385676, 14092428, 3945614, 10467353,
       13270082, 10980950, 16142504, 1127491]
    ],
    [ //  7 * (16 ** 62) * G
      [15441866, 3884775, 7316323, 7396058, 1890292, 12827676,
       105212, 16096062, 4368485, 8258250, 5599738, 15280811,
       11858157, 1746794, 10203007, 11426742],
      [4969305, 9320875, 3811016, 7277088, 13823041, 14909235,
       7724944, 16211995, 3155572, 4906565, 2720009, 2781986,
       14274507, 138621, 8211808, 5580452]
    ],
    [ //  8 * (16 ** 62) * G
      [4580801, 1025787, 10476942, 6919076, 15491813, 7481357,
       14366296, 13891730, 8176451, 2618221, 10736834, 9726317,
       16520328, 12172790, 16286039, 12427347],
      [6933650, 11937758, 266723, 5917974, 1458271, 8830357,
       11025697, 175672, 8812692, 5249810, 535548, 8715677,
       13392672, 12485783, 5465930, 3296412]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 63) * G
      [2090821, 9489565, 15087928, 10902538, 206922, 13859304,
       4857581, 2634304, 5600265, 672292, 4171178, 8661107,
       9332105, 10203252, 1590841, 4658504],
      [3624580, 13843856, 5136318, 3973855, 5350383, 11226379,
       14909407, 12161187, 2363532, 16427008, 1360316, 8800252,
       9425541, 14542951, 6433555, 692820]
    ],
    [ //  2 * (16 ** 63) * G
      [12115343, 5438872, 8704441, 14869028, 1140680, 11815985,
       5955977, 11117645, 5854849, 12042700, 4069706, 7902290,
       11550707, 3082265, 6017974, 1249757],
      [5448020, 3260434, 4023839, 4202099, 2547115, 13913927,
       14133672, 9201516, 15095546, 11995961, 4975568, 2122200,
       2680016, 16377206, 3267628, 7192679]
    ],
    [ //  3 * (16 ** 63) * G
      [12109156, 7615513, 7665707, 12059783, 9115716, 10022031,
       14503403, 12200347, 14987396, 12501142, 2805461, 14132934,
       9488955, 16597479, 7874652, 12992438],
      [2942455, 11932390, 9712457, 13088750, 3149528, 2756094,
       11866268, 11996682, 10323671, 13067406, 11577300, 13724608,
       13888556, 3029275, 5682171, 12431467]
    ],
    [ //  4 * (16 ** 63) * G
      [14583299, 8516328, 991744, 184135, 9399126, 15722469,
       4808104, 6011699, 15621537, 95108, 2848964, 5588319,
       6196245, 414916, 159600, 951357],
      [1190651, 2840850, 12455605, 12092273, 14972632, 8138311,
       993021, 9202949, 7910686, 8879762, 15224514, 3180149,
       2332277, 3805714, 11427554, 8650828]
    ],
    [ //  5 * (16 ** 63) * G
      [7309849, 15866903, 2763884, 2545984, 5380095, 9111778,
       4596190, 8986861, 9586022, 6776461, 12008657, 150334,
       8743074, 16017718, 1073380, 1973340],
      [7236437, 4817536, 9330673, 3709572, 10209795, 11527991,
       16535978, 11858089, 2031844, 8587276, 552943, 15466675,
       2869105, 1129919, 2530077, 2770749]
    ],
    [ //  6 * (16 ** 63) * G
      [4209495, 3444692, 13186259, 9266672, 13875310, 12518877,
       11880341, 15431738, 16671282, 412019, 6952244, 10221943,
       15467422, 14599787, 3694410, 7724628],
      [10214427, 8684362, 9302827, 3658498, 8717850, 11135887,
       3322204, 15164569, 4243145, 13824506, 3417483, 2089610,
       12815438, 2773229, 12229573, 5380595]
    ],
    [ //  7 * (16 ** 63) * G
      [6713290, 13530149, 14824365, 11910135, 15259362, 14671501,
       7910637, 5395220, 13084329, 14927141, 16357251, 12034701,
       3690538, 8697082, 15667730, 16663908],
      [1954857, 4206099, 5572463, 14473511, 15069165, 16314191,
       428928, 3800288, 8734412, 15141012, 8168236, 7165265,
       14543965, 13417407, 16303647, 10410934]
    ],
    [ //  8 * (16 ** 63) * G
      [10841658, 8434162, 5146306, 13925105, 14438009, 5395751,
       7546463, 8130429, 2393757, 12056299, 7896477, 6379898,
       2732245, 16759640, 2400355, 9196121],
      [349913, 3435288, 14335041, 16141918, 7528600, 9124601,
       15810619, 7367764, 12723548, 14601266, 4097579, 6501829,
       7256050, 15384187, 14773968, 4551860]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 64) * G
      [10203306, 12661274, 10957295, 12259180, 7650802, 301018,
       16305469, 1765376, 11154513, 12120618, 9255340, 15596425,
       15398093, 13699363, 3001043, 15184884],
      [6902676, 6403422, 3381450, 946342, 5837058, 7460207,
       13050219, 8431934, 6546360, 6066116, 10861490, 8787431,
       9322426, 2695345, 6290465, 5922140]
    ],
    [ //  2 * (16 ** 64) * G
      [1205695, 9017015, 6468988, 86891, 15816463, 8997918,
       11164893, 13026717, 13154511, 6635069, 14216426, 10946905,
       14367093, 7263517, 11840698, 15488656],
      [12950854, 13990624, 3354520, 2513088, 3485526, 4296785,
       15338575, 6321565, 13609074, 8120949, 15056038, 244572,
       10394289, 12307180, 3756163, 10986351]
    ],
    [ //  3 * (16 ** 64) * G
      [1796600, 13884241, 13470091, 1023075, 1470922, 12285998,
       1155327, 2524862, 12233017, 7065779, 5084078, 2926442,
       11499810, 11184522, 5987174, 6747127],
      [16182408, 11037527, 13571606, 13424979, 3287129, 12338801,
       7316067, 4608857, 9554726, 8258154, 3293774, 1843090,
       6245207, 597489, 8460126, 12326715]
    ],
    [ //  4 * (16 ** 64) * G
      [4454049, 10579345, 7885032, 3346378, 14462, 1287771,
       10236402, 10082960, 3859907, 12332739, 7595736, 7110461,
       14338671, 3758012, 15186080, 9632622],
      [1178408, 2068458, 9364844, 5594948, 8057613, 8175831,
       2091031, 7849920, 15922451, 15941625, 4872807, 13768797,
       2515855, 1002999, 8261941, 11875322]
    ],
    [ //  5 * (16 ** 64) * G
      [9038663, 15670190, 2090852, 3941301, 9237883, 8456140,
       13939357, 14549111, 10012482, 4663319, 12734004, 10644367,
       8455779, 12182369, 15848695, 12752139],
      [7743053, 14175346, 14575611, 9417124, 486893, 16261203,
       7110673, 4061475, 4792113, 6148480, 7337335, 1681957,
       14758701, 15281421, 13131200, 4126309]
    ],
    [ //  6 * (16 ** 64) * G
      [3456920, 5964384, 15631269, 8887082, 7668243, 11891942,
       12914011, 5734603, 14203945, 16268230, 1539552, 15421132,
       2351282, 6212472, 8595770, 14790456],
      [6230962, 13490402, 11833330, 2626991, 3986366, 10534518,
       10711299, 11924670, 8648561, 16012946, 10269371, 5590882,
       7911552, 8802404, 16624255, 4424877]
    ],
    [ //  7 * (16 ** 64) * G
      [12756222, 15141514, 16276373, 11408531, 12843530, 10112848,
       14201343, 13411591, 9616519, 13725752, 3331477, 14476931,
       3684454, 1469931, 14149138, 4534422],
      [6311165, 13164940, 10119031, 2242187, 3947145, 10826381,
       4399329, 5286701, 2197693, 13671370, 5926202, 1751842,
       2450828, 15524822, 3812558, 10148660]
    ],
    [ //  8 * (16 ** 64) * G
      [12267213, 5048816, 9829524, 8861960, 13825215, 14703999,
       13017229, 12591515, 4884416, 11872770, 8654015, 13241268,
       7272751, 5189073, 13002926, 5481304],
      [4669064, 12125299, 9518287, 8492990, 16650527, 11029678,
       6801598, 13135350, 2492215, 2919566, 10677477, 16563738,
       15039883, 4961609, 4791634, 2187618]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 65) * G
      [8551175, 455850, 7110042, 8181337, 3965668, 16300236,
       14423243, 2545663, 8542122, 3348459, 3651505, 12029107,
       10739473, 16688014, 4580703, 1253176],
      [15976090, 15749513, 9179688, 14479392, 14758017, 2336729,
       9604354, 9772209, 5885524, 2878423, 13034815, 6352314,
       9620741, 1547635, 3677807, 10710604]
    ],
    [ //  2 * (16 ** 65) * G
      [8472984, 10583488, 6181848, 4698872, 14507696, 1643796,
       2428483, 12095437, 15601933, 1460643, 4011861, 5304669,
       10703180, 523203, 7793216, 16447950],
      [13430410, 6302208, 4105373, 16332981, 9920670, 11939771,
       11377612, 11715291, 11363481, 11830992, 4275189, 14153611,
       6889036, 3245119, 13410641, 1720345]
    ],
    [ //  3 * (16 ** 65) * G
      [5357065, 2288835, 3643840, 16763189, 8185821, 2314579,
       7535526, 15655937, 1186362, 2255235, 13919316, 4060635,
       9063985, 1369469, 7964459, 14856362],
      [460924, 4492881, 16659065, 8846019, 9348095, 14439230,
       9300525, 5694725, 16294332, 8762914, 4581278, 5594137,
       4424032, 11076976, 10767383, 15107087]
    ],
    [ //  4 * (16 ** 65) * G
      [12252495, 5461705, 16232174, 13999375, 16374906, 14069736,
       10599201, 7784397, 4177529, 10949984, 11139903, 1180012,
       11662257, 11541751, 9156673, 8291609],
      [9489746, 6132824, 3556719, 9918704, 4475722, 11912474,
       8915101, 2687502, 14440568, 14326635, 4040061, 16661687,
       5461018, 9091614, 7003832, 11332609]
    ],
    [ //  5 * (16 ** 65) * G
      [5058663, 12299361, 3373398, 10341804, 715644, 880871,
       10927432, 6469127, 11779312, 8623972, 16308653, 3852097,
       6057851, 1128052, 9449303, 3381776],
      [13634429, 15843151, 5389780, 5155460, 856087, 9936325,
       11864871, 7227536, 3265707, 5398076, 1058616, 6664344,
       8296407, 9504452, 6606697, 4268082]
    ],
    [ //  6 * (16 ** 65) * G
      [464388, 4956463, 3882423, 438081, 5556245, 3060046,
       8301624, 2033424, 1689498, 109505, 15408483, 1971611,
       14215508, 4136283, 6140874, 10900169],
      [7044611, 7034712, 8891433, 9614861, 16427674, 2979491,
       16515571, 7159954, 1538018, 15313653, 415394, 12635661,
       2565513, 3210526, 5379182, 1378281]
    ],
    [ //  7 * (16 ** 65) * G
      [10701892, 3229749, 3127315, 13507455, 4797750, 4138102,
       9898495, 7845175, 14977168, 9867548, 1734351, 5049702,
       8084993, 14033112, 5341660, 8664687],
      [9426304, 9075198, 15125878, 7724337, 960794, 14748712,
       6390581, 1720178, 2222411, 9955711, 10612770, 13018065,
       11018478, 9954276, 15556343, 6597329]
    ],
    [ //  8 * (16 ** 65) * G
      [5314674, 14413255, 5612775, 6796626, 4905347, 10710750,
       13493593, 13243393, 6602565, 1989030, 7571327, 5530468,
       2605984, 2642336, 547513, 2500888],
      [13445616, 7194019, 15824960, 10463129, 1473485, 10395908,
       9335919, 5133081, 4834397, 9179264, 8334195, 14973289,
       5321546, 14012509, 3197794, 12974432]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 66) * G
      [9613576, 11098969, 8521480, 2635001, 661718, 6909440,
       12312494, 9126579, 5322126, 2602819, 11428613, 3613101,
       7645789, 16094735, 9256798, 6002405],
      [6572409, 5411498, 11314125, 12541720, 164422, 985447,
       10975667, 8740853, 624410, 8541544, 11637830, 15793157,
       1496947, 13555464, 9487396, 16061220]
    ],
    [ //  2 * (16 ** 66) * G
      [580551, 10462099, 16103858, 8130336, 6755799, 8901102,
       15054497, 3832217, 10284085, 16677410, 11643509, 16769665,
       13729568, 5805378, 235873, 2572282],
      [12651585, 13694779, 11881333, 6817263, 14293801, 16515972,
       666125, 14831382, 9237668, 10314878, 10695213, 16341591,
       4852581, 15782179, 3106618, 13492898]
    ],
    [ //  3 * (16 ** 66) * G
      [2842983, 3958152, 14876272, 746429, 5895094, 12442106,
       7935889, 10076078, 11408014, 2899043, 10898904, 11417727,
       7601388, 8085908, 949231, 10574865],
      [10255391, 16603935, 5713451, 16408257, 6413992, 8106964,
       5656629, 7517061, 8053146, 4946045, 1566215, 15445972,
       6694171, 15149715, 11983179, 6491838]
    ],
    [ //  4 * (16 ** 66) * G
      [5605450, 116927, 10856023, 10799220, 3747919, 14272472,
       14072673, 2271214, 1979071, 1190914, 15733905, 4860160,
       9031289, 5210442, 3346546, 8432682],
      [14881965, 7506800, 11932726, 13653246, 1191407, 13715989,
       200952, 4863729, 13237320, 12638659, 6728967, 13070273,
       7890423, 1666952, 9988743, 190928]
    ],
    [ //  5 * (16 ** 66) * G
      [4491595, 9947860, 6083916, 929633, 2237569, 7566351,
       16139581, 2258490, 8526474, 11842893, 11013044, 9181618,
       9384272, 1641106, 6699346, 1031730],
      [10860678, 10524013, 10030373, 7467120, 5082629, 9001730,
       8441066, 12053657, 16262351, 2995110, 2898930, 1073466,
       7879254, 5452429, 14579380, 4548623]
    ],
    [ //  6 * (16 ** 66) * G
      [2486058, 3829164, 3647268, 1230499, 7841494, 13137370,
       16673, 4926791, 8330658, 10987292, 13261587, 5686454,
       13957944, 11572033, 14934589, 5645929],
      [10214349, 15107484, 9035043, 14308161, 13011627, 3987764,
       15152945, 13495374, 13389927, 9491789, 7326072, 3664387,
       10245324, 13469904, 12817563, 6470106]
    ],
    [ //  7 * (16 ** 66) * G
      [13372768, 3461541, 8904416, 4908855, 7808394, 16537897,
       5663163, 9141347, 14050597, 5051146, 5272082, 8277827,
       4894858, 16493007, 7728998, 11644813],
      [14782753, 8237509, 12082150, 2790310, 7009434, 2775091,
       11662652, 14461666, 16401384, 14784379, 15576965, 8086602,
       943704, 6910569, 15197533, 8751035]
    ],
    [ //  8 * (16 ** 66) * G
      [15457907, 15486820, 12971581, 4782626, 15827265, 3957505,
       9536375, 5869296, 4207902, 4445824, 327336, 15778982,
       2487938, 1519491, 10404559, 15061733],
      [2207341, 12095187, 6968975, 6741925, 7449947, 10981572,
       16546849, 8651490, 13164106, 15122519, 8101160, 14251461,
       11538327, 1403490, 13606321, 2850231]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 67) * G
      [2692725, 13507202, 12820189, 2080102, 14953324, 5767165,
       248977, 16220824, 8745654, 747076, 995110, 1010593,
       7845834, 1105908, 4876054, 16431206],
      [9991299, 10121844, 9773181, 10501662, 2887991, 4317306,
       7718902, 5519782, 3723511, 11785424, 7224545, 13789041,
       5328479, 12463927, 3250689, 16282813]
    ],
    [ //  2 * (16 ** 67) * G
      [50745, 2670426, 9723415, 7529751, 5017488, 10482094,
       1268766, 9734016, 581756, 6738530, 15620100, 6155558,
       13829519, 7900234, 12315847, 16301633],
      [11719115, 7000331, 16091221, 2714053, 9415328, 9201650,
       12797960, 16320130, 5719741, 9670032, 1140140, 11714426,
       4496017, 689741, 7301267, 10062714]
    ],
    [ //  3 * (16 ** 67) * G
      [10880809, 11616443, 1168622, 15232402, 9950660, 12180854,
       7597822, 10891589, 1589826, 1294249, 13629966, 3563914,
       1375946, 3208219, 9588449, 6348715],
      [13914215, 6914794, 12737122, 16557728, 14550813, 9337671,
       15803349, 11735159, 11506734, 2883598, 9406487, 14887072,
       1900486, 2266280, 2391374, 7073112]
    ],
    [ //  4 * (16 ** 67) * G
      [15486411, 10390440, 10850269, 4103468, 8368059, 3398796,
       2070626, 14222059, 6198588, 1038921, 971901, 3336691,
       994830, 1606400, 6234735, 744887],
      [6760092, 13533599, 2453544, 10224728, 480138, 14063297,
       2878546, 5402456, 15680848, 16655157, 16685479, 4961711,
       3594398, 6443216, 9604034, 14777168]
    ],
    [ //  5 * (16 ** 67) * G
      [6728642, 15005594, 5593443, 15709299, 7428622, 12934462,
       8972435, 15336874, 8896931, 9642649, 13313885, 2504568,
       6590435, 10946221, 2550890, 15393646],
      [8890607, 8478109, 13879339, 4410497, 6283000, 5452482,
       16548782, 2136080, 6116243, 13014450, 647929, 14545832,
       14298481, 10357856, 6011546, 9127066]
    ],
    [ //  6 * (16 ** 67) * G
      [4630002, 228665, 11448297, 15795998, 4181605, 80928,
       4284472, 3107565, 13895030, 11678637, 15718320, 6891149,
       1586532, 11390256, 6073383, 12969541],
      [12152189, 2303013, 6052459, 1434938, 9543349, 5991409,
       15891789, 3099747, 13514607, 7684356, 5243345, 3535745,
       7370272, 5289627, 8021149, 7732728]
    ],
    [ //  7 * (16 ** 67) * G
      [5962230, 12835041, 15909455, 12385323, 12280099, 1938658,
       6295457, 7565621, 8195891, 1217354, 2490864, 7367252,
       7968403, 15470104, 8142651, 9481616],
      [3475840, 4881845, 8235357, 13995856, 10103801, 8456282,
       5645837, 12738989, 2804588, 16170625, 3029187, 5373265,
       7838167, 652788, 12343595, 14026642]
    ],
    [ //  8 * (16 ** 67) * G
      [16185274, 10630974, 13290313, 7569538, 4937075, 1189604,
       7907705, 5620738, 7468718, 14266695, 16468515, 6039643,
       891351, 779695, 2373667, 2748730],
      [713127, 901243, 917673, 10152457, 5417561, 4491567,
       7815547, 11242550, 9860225, 13089432, 2276036, 2871890,
       12433427, 1032568, 12650510, 13509599]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 68) * G
      [16312040, 4942151, 5627338, 1199158, 11461359, 13640911,
       6159705, 6497182, 7432830, 14286271, 1315442, 5914445,
       3456059, 9197028, 2000915, 15250214],
      [5551208, 5405700, 1654353, 1762729, 3133036, 11534564,
       4757216, 8908869, 1924862, 11357226, 6154695, 12862806,
       4127457, 5185768, 605584, 12580401]
    ],
    [ //  2 * (16 ** 68) * G
      [16250718, 3481785, 10776124, 15404069, 16172253, 6686201,
       7622037, 12658742, 14822393, 7900202, 3899748, 2629199,
       9054926, 3111668, 10698389, 15053049],
      [2605862, 8974083, 4154590, 3128640, 12684513, 9581046,
       12634868, 4090899, 5919223, 4792525, 1623079, 12624655,
       15407224, 1758093, 1690597, 5310938]
    ],
    [ //  3 * (16 ** 68) * G
      [16617063, 1947177, 9103857, 443512, 7332810, 1774529,
       13687346, 3639664, 6428987, 1334684, 7785148, 8548112,
       6919677, 15266072, 15887161, 14742661],
      [14122027, 16538471, 172819, 6014885, 1778158, 7206314,
       8069628, 10119668, 2395911, 4349993, 7081424, 8239503,
       15649711, 7787025, 3179290, 3750257]
    ],
    [ //  4 * (16 ** 68) * G
      [11797819, 335670, 16655972, 8180268, 14276640, 15016691,
       8436584, 5049430, 9033769, 11118764, 11069079, 4242307,
       3704998, 1794527, 12998699, 6811775],
      [15779275, 8867214, 5002935, 910623, 3095327, 2165851,
       9247557, 1159280, 14183697, 16574301, 5504414, 985437,
       13041020, 7557254, 5582898, 6566108]
    ],
    [ //  5 * (16 ** 68) * G
      [13401018, 16691425, 10329223, 11818283, 10490555, 11846808,
       8768408, 15944927, 6008500, 7116380, 15936342, 6369974,
       5811673, 8487107, 5773001, 15182775],
      [14633622, 13999017, 10249497, 2855226, 6513803, 8846607,
       7081765, 1418681, 2869568, 10473965, 4208175, 7853483,
       2205338, 15347570, 3470036, 11777685]
    ],
    [ //  6 * (16 ** 68) * G
      [4513999, 1845482, 4890163, 11761007, 15694885, 15116174,
       7032178, 12939593, 2628220, 2327121, 612950, 10730540,
       13848192, 3267423, 12078964, 14510265],
      [349032, 3900614, 12678655, 12248830, 8929363, 12681298,
       15753270, 14333769, 6774906, 8112299, 15965767, 2537877,
       9130471, 881831, 12805182, 7141162]
    ],
    [ //  7 * (16 ** 68) * G
      [14529217, 4907221, 2064212, 7115490, 8896881, 3659645,
       997030, 12732211, 2945845, 4689121, 7687570, 13739083,
       5333139, 15977918, 9700522, 2483592],
      [11799748, 117984, 11371459, 1024258, 2432160, 10235602,
       7382701, 13927344, 3622115, 1055620, 6728788, 5114366,
       4465660, 1656067, 11038023, 899787]
    ],
    [ //  8 * (16 ** 68) * G
      [3014893, 12067795, 8906844, 7534498, 5325152, 14440441,
       571180, 4068210, 12613381, 10340158, 8473871, 8289745,
       9800922, 4690181, 2275255, 5491992],
      [13663248, 14918262, 5895064, 1797830, 1054391, 3994256,
       10273597, 4738705, 3102048, 4549242, 2587721, 11692330,
       14495808, 1795859, 16691668, 8705210]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 69) * G
      [13714287, 9465246, 5990130, 10497230, 9679097, 639421,
       16423303, 6718769, 12012572, 6019614, 12096760, 11424199,
       7506180, 2599033, 4316756, 3157659],
      [9331498, 15431051, 2137509, 2779067, 16335626, 8222468,
       1258363, 14412903, 12829149, 11585675, 13865830, 16750787,
       14747546, 6546879, 6180356, 1553236]
    ],
    [ //  2 * (16 ** 69) * G
      [2725544, 5144232, 606797, 12790809, 15962745, 15300160,
       14574519, 11705454, 191432, 12565318, 10903609, 2116050,
       1350335, 6313619, 7190835, 366422],
      [16607765, 6314494, 13457038, 13087189, 3210359, 2710444,
       12771104, 6636053, 16036889, 14130191, 15339062, 6665580,
       9176454, 2287222, 2258346, 2553872]
    ],
    [ //  3 * (16 ** 69) * G
      [7180503, 4181011, 1021443, 16593891, 12749925, 7160910,
       16309853, 840922, 6284691, 5399388, 8874347, 9699247,
       12088571, 11348796, 12486902, 14633380],
      [12086780, 14961317, 13389342, 4825705, 7601020, 14518455,
       6036120, 7457056, 16143681, 13212349, 3762473, 8378482,
       8559813, 11306060, 7031489, 394732]
    ],
    [ //  4 * (16 ** 69) * G
      [16570229, 12385645, 2416365, 11073911, 14663161, 1884554,
       6507872, 4669669, 11791348, 1935533, 14628219, 6172125,
       13611555, 13504606, 10347680, 7280041],
      [3835081, 2554224, 1323204, 10858382, 2665515, 10766788,
       6423312, 7993980, 1073501, 6165173, 7630478, 10362546,
       9641514, 14540807, 14554995, 10445936]
    ],
    [ //  5 * (16 ** 69) * G
      [1363538, 6015722, 10270433, 12375127, 2928014, 8987337,
       3664678, 15238102, 70102, 9897768, 1856332, 13093433,
       9696465, 3222202, 3474002, 6840882],
      [2488553, 4912839, 6304113, 2982858, 14776317, 14448977,
       11747704, 9343181, 14696351, 14950333, 6476071, 8146508,
       10071683, 12462468, 11132632, 7793934]
    ],
    [ //  6 * (16 ** 69) * G
      [7752551, 1721263, 13669950, 14259577, 2131023, 9342279,
       6156597, 9555752, 1068703, 13753191, 10483935, 10625015,
       6462832, 14351407, 13046506, 14536449],
      [1340842, 14107376, 4122025, 325754, 14661610, 8220762,
       5271496, 10536862, 15868044, 4177131, 3432317, 12586158,
       10457022, 9666602, 3960300, 16479167]
    ],
    [ //  7 * (16 ** 69) * G
      [1881814, 16402545, 7132518, 2354929, 6256754, 11850222,
       11155385, 7621369, 4435992, 16392293, 4588986, 16224729,
       3151783, 11644139, 2565663, 8809127],
      [3375350, 5614381, 14373100, 11969841, 8301823, 1385528,
       7532848, 13734969, 11510479, 11946318, 7467703, 7523493,
       13443547, 8883252, 7230150, 7075220]
    ],
    [ //  8 * (16 ** 69) * G
      [3466152, 9212358, 11584709, 11236093, 3640420, 3524485,
       6835715, 674373, 13119672, 7203993, 8201588, 3445773,
       3006005, 8659969, 4996070, 4942242],
      [8039959, 5562698, 4980686, 1723556, 16159357, 2869618,
       248386, 16444106, 16047944, 12799299, 12619440, 303473,
       2068527, 2423235, 6823170, 9171550]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 70) * G
      [4374512, 8269943, 14172109, 15856031, 1827838, 16361176,
       6649634, 5271691, 835315, 10128769, 8555856, 12850118,
       587367, 1838335, 4815889, 1970911],
      [5353603, 11654842, 14952360, 11803199, 11857379, 3942880,
       827552, 9694646, 4468546, 564668, 2156893, 3596383,
       14715823, 16232668, 7382610, 93247]
    ],
    [ //  2 * (16 ** 70) * G
      [1715608, 15230612, 16613622, 10947749, 13552609, 8193088,
       10753879, 12725880, 3500257, 1900072, 4706732, 13434811,
       8644219, 5898926, 8771238, 4396086],
      [4700229, 13099622, 13374632, 9006477, 14196685, 11926859,
       15434706, 16760173, 10372369, 10290682, 13443603, 13830994,
       8226934, 4739692, 3161053, 10833825]
    ],
    [ //  3 * (16 ** 70) * G
      [14527996, 10685971, 9591227, 12402688, 6387734, 6272999,
       575025, 12150191, 12200054, 4966593, 291200, 6538799,
       14648659, 48159, 13576055, 4091776],
      [7861243, 15233517, 5849912, 6830802, 16444789, 10181244,
       944900, 12797796, 74516, 940479, 8292038, 6562959,
       14109673, 9054714, 1151585, 3665003]
    ],
    [ //  4 * (16 ** 70) * G
      [12540445, 13086673, 9556788, 14877714, 4041202, 9895511,
       14593283, 13036646, 11328297, 2241784, 12150856, 15895642,
       5050112, 6056581, 14856889, 10637322],
      [8528573, 4801482, 9428993, 9051474, 8344371, 5689811,
       661557, 14977115, 3445818, 1819350, 3345621, 3374875,
       15759349, 1097065, 11161377, 6740537]
    ],
    [ //  5 * (16 ** 70) * G
      [1904350, 1660314, 12399046, 14137374, 14109722, 7786432,
       13745524, 8847828, 15298055, 13751663, 4881282, 1718305,
       2685890, 1238649, 8538410, 5756062],
      [15098186, 12511505, 189343, 13944437, 8413467, 11248535,
       15074661, 10157303, 1186836, 7055826, 4491623, 16640636,
       1524668, 7767652, 6942524, 8985514]
    ],
    [ //  6 * (16 ** 70) * G
      [1854918, 7574749, 1056436, 13212813, 2810595, 11631412,
       2160359, 2141717, 11709403, 8781181, 5555753, 7859384,
       15426422, 1623386, 14604579, 12961977],
      [4007808, 8605276, 15579502, 1877556, 4842739, 1400764,
       7045671, 5028087, 15891747, 12712062, 10821372, 7049789,
       14365495, 12055441, 4023131, 9834200]
    ],
    [ //  7 * (16 ** 70) * G
      [7039053, 10087217, 5353381, 2221432, 6051919, 3577754,
       8934334, 1878628, 12142407, 4162935, 6567830, 7439791,
       278151, 7468419, 7124402, 11752251],
      [7265613, 11422136, 16280810, 2561242, 12851071, 10044711,
       4101167, 8500246, 5011551, 11146104, 6248151, 3773648,
       5487036, 6259947, 4392545, 2693075]
    ],
    [ //  8 * (16 ** 70) * G
      [15534105, 13135505, 6003117, 12699381, 12119346, 1579672,
       5619873, 10083747, 15482414, 12016521, 7358951, 1512206,
       8115978, 5412042, 645455, 6688256],
      [11726568, 15247782, 16113941, 12045275, 625797, 7039600,
       11225399, 9737491, 9339926, 2188650, 16487610, 10201464,
       15619213, 9687527, 12712093, 13325788]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 71) * G
      [7022201, 10066, 13640684, 1872342, 2180741, 8650660,
       10370887, 1491423, 5372598, 14426859, 8621775, 2084369,
       15601559, 6916318, 5768030, 15847531],
      [15651714, 7721642, 13308900, 2239002, 5838872, 16689831,
       10557467, 6932674, 7796778, 2522, 6353289, 15321531,
       9528019, 7406354, 16607313, 9221270]
    ],
    [ //  2 * (16 ** 71) * G
      [12892274, 6079071, 16048398, 1102622, 5660351, 13704834,
       6414571, 7297575, 14689801, 3054198, 16532582, 8262630,
       9032537, 4370434, 1510792, 2420873],
      [15727590, 317408, 15477782, 8174180, 3557591, 7184798,
       8480433, 2670728, 858639, 5569899, 16569463, 10093145,
       5075551, 13395006, 13081620, 8065267]
    ],
    [ //  3 * (16 ** 71) * G
      [2304991, 14736025, 4710121, 8046783, 12147039, 5061400,
       7653524, 4152845, 10539701, 6033942, 11611889, 6507998,
       14555710, 14134223, 9503926, 5440997],
      [7392013, 15589130, 7147551, 3229388, 7988411, 1164483,
       14644769, 5454609, 14050382, 8792348, 15264467, 12363,
       12020347, 15787186, 1277623, 15274172]
    ],
    [ //  4 * (16 ** 71) * G
      [13089414, 9584339, 16042648, 7017479, 6960909, 2188257,
       12813606, 9386980, 2322804, 12352851, 8148624, 3490758,
       13827431, 11595982, 3139554, 14004182],
      [15193837, 754623, 16765454, 12530097, 7058737, 4261849,
       4571998, 8486653, 15731953, 16725521, 6917767, 2194964,
       1199838, 14782614, 2878313, 4434949]
    ],
    [ //  5 * (16 ** 71) * G
      [5050265, 3033937, 5754621, 5365908, 1986347, 2211247,
       8048052, 8099783, 13783388, 14649366, 15938056, 13630037,
       16070372, 14010046, 10334508, 11162247],
      [14991591, 2332463, 9199784, 1634533, 347394, 13391831,
       9096128, 740987, 6078985, 5190512, 14602455, 8305074,
       3746624, 7706282, 4643318, 14730022]
    ],
    [ //  6 * (16 ** 71) * G
      [14180067, 12595038, 12401954, 15510861, 14417597, 14174398,
       3356250, 13487201, 3263976, 9949999, 96705, 12593393,
       3576743, 6109646, 5877082, 4949195],
      [5288711, 14145651, 7871998, 6961929, 949052, 11393877,
       4710809, 9458465, 12564115, 3831832, 8394586, 7600034,
       3035825, 12706112, 6813478, 15059492]
    ],
    [ //  7 * (16 ** 71) * G
      [9234500, 9558486, 5539811, 11979410, 13218964, 4556665,
       12128402, 7690979, 101197, 7358295, 7468978, 49402,
       9893988, 11216603, 7492825, 12311264],
      [3475414, 2470921, 12201880, 12680667, 11254834, 1626443,
       6296570, 14411781, 10358120, 12345490, 10655233, 514165,
       1838190, 3511470, 11243650, 2081269]
    ],
    [ //  8 * (16 ** 71) * G
      [10392181, 14318703, 1710165, 10453718, 11172733, 11595872,
       15436641, 10020029, 2022334, 7819774, 7040105, 3510864,
       9258981, 580050, 377084, 16626207],
      [7421246, 1817829, 13129409, 891285, 8572194, 1758280,
       13401589, 13638376, 6842434, 7083925, 13970861, 15871296,
       13948048, 16018063, 3295709, 12131486]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 72) * G
      [379505, 12763209, 6415551, 13719287, 3818762, 4768499,
       14405768, 4033321, 3184262, 10720674, 14092669, 6244722,
       1639683, 11145761, 5773259, 11718917],
      [4121380, 12277109, 7331278, 6890598, 8040572, 1730792,
       7622351, 10176349, 6436544, 15267118, 7075883, 3996933,
       8129978, 13357603, 7521222, 3493080]
    ],
    [ //  2 * (16 ** 72) * G
      [16384842, 12740156, 15453030, 10366586, 14243160, 8563154,
       5257084, 2503029, 16599405, 9498600, 15776510, 16605771,
       14622669, 673001, 12575600, 10114698],
      [9168463, 16378499, 14810980, 13641623, 977384, 13380358,
       14608634, 12039112, 15501956, 8864182, 15224096, 11782967,
       3446273, 243126, 12090633, 7952031]
    ],
    [ //  3 * (16 ** 72) * G
      [15043823, 16201077, 9868949, 2644067, 10133435, 6251441,
       13921765, 5530628, 5279869, 5347592, 16212320, 11719451,
       1581893, 16443360, 6518276, 8680121],
      [11701773, 1279817, 14783170, 5413359, 16478903, 9674565,
       15301341, 14037476, 15324876, 13620759, 11997095, 13349111,
       10531030, 1217602, 15911028, 2430055]
    ],
    [ //  4 * (16 ** 72) * G
      [8109920, 5878966, 11960536, 10862594, 4511776, 1580819,
       3391487, 8519557, 9798432, 15803276, 7243876, 2710861,
       16126214, 4770295, 2929749, 10930969],
      [4140778, 11529174, 14582599, 12493689, 9186494, 12718593,
       7023715, 13861761, 4734337, 16548694, 11769796, 1500836,
       4106706, 5081028, 6808174, 13454663]
    ],
    [ //  5 * (16 ** 72) * G
      [14521402, 15541698, 6681547, 4345682, 8233553, 13076480,
       12329760, 16109845, 7683631, 15503665, 14981387, 7581986,
       11345381, 13397756, 8077690, 11095216],
      [5336371, 16202425, 14361123, 8880248, 16404866, 16484416,
       7436649, 3975077, 12481152, 760584, 12512694, 3765602,
       1087558, 14463963, 13941748, 10970438]
    ],
    [ //  6 * (16 ** 72) * G
      [10270781, 15229927, 7197437, 9894896, 3685346, 15538009,
       3293315, 2828576, 8954125, 12697889, 12549915, 16583859,
       13896449, 2406271, 4963173, 12623025],
      [5019382, 10058584, 6673200, 11118234, 3000595, 16189519,
       16397061, 10062273, 11669104, 16196390, 2179686, 5365047,
       1226592, 4720958, 1854138, 11953468]
    ],
    [ //  7 * (16 ** 72) * G
      [9625685, 499066, 2619250, 13023450, 16099467, 13483688,
       3012521, 12765517, 2484985, 8895606, 7152853, 6350571,
       14585606, 12097807, 3417114, 1600872],
      [4990558, 15091118, 8462995, 15716004, 3383988, 2012400,
       11429141, 16417222, 8321316, 13417268, 400749, 957720,
       8977890, 10095615, 1511532, 696250]
    ],
    [ //  8 * (16 ** 72) * G
      [9456253, 16245063, 5651781, 9384440, 3104862, 1204156,
       8692133, 4030310, 951147, 16144649, 4922994, 6751740,
       2693566, 8455503, 1925250, 460108],
      [13612684, 11815844, 765804, 862766, 2300713, 14459053,
       8407662, 9375085, 1014778, 12529860, 7551557, 11530585,
       11004903, 707939, 9917974, 3979968]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 73) * G
      [9713477, 14113599, 8780277, 12842139, 9569119, 6749251,
       5452278, 13946986, 3880051, 10416274, 915632, 15524581,
       9932475, 985430, 5316061, 8618891],
      [4503254, 10825017, 11914854, 2160541, 8671727, 12450968,
       120194, 4391088, 8107752, 10000148, 5354031, 1075282,
       12141806, 96248, 9618850, 4994293]
    ],
    [ //  2 * (16 ** 73) * G
      [1982319, 3988904, 995407, 865618, 243060, 6345550,
       8057764, 6995577, 12092868, 5151101, 7221070, 10280628,
       5447053, 11303589, 10729598, 2275950],
      [6732280, 10317202, 2947734, 9901244, 13892622, 6437324,
       5392042, 9202818, 15114944, 4907290, 10946401, 3848083,
       959927, 6042852, 16593899, 13425107]
    ],
    [ //  3 * (16 ** 73) * G
      [15539709, 12176148, 14984955, 100246, 15006009, 14539151,
       14349723, 9902612, 3540614, 597014, 5813124, 3226545,
       7718534, 6265514, 8969048, 980028],
      [5135796, 5351850, 3967810, 12543324, 8592056, 16171256,
       3094030, 4966830, 15147131, 3953891, 2318652, 3849144,
       275054, 10483223, 362094, 9898736]
    ],
    [ //  4 * (16 ** 73) * G
      [15080070, 3234106, 12945042, 9799922, 9463390, 4744184,
       14101703, 15023304, 13792550, 7316293, 12862404, 15662366,
       5209642, 2893251, 2433045, 8879463],
      [3641245, 3104826, 5754448, 3567886, 12994059, 12304579,
       8351523, 2106473, 15958056, 5880192, 10938210, 5094159,
       5925749, 9243153, 16522972, 12481805]
    ],
    [ //  5 * (16 ** 73) * G
      [177609, 3090942, 15570599, 13027686, 834254, 4069971,
       2651965, 6239694, 1720490, 9894627, 6421532, 8526205,
       14426065, 9423525, 15333084, 10218400],
      [4985773, 9725024, 6004350, 14733696, 6559143, 1280851,
       3677603, 11927901, 11036154, 8076788, 12168053, 6302640,
       6028619, 7653935, 14617985, 16353911]
    ],
    [ //  6 * (16 ** 73) * G
      [7293734, 15821672, 14063539, 5501289, 2392311, 13774835,
       15422027, 5826839, 1623521, 2564666, 2491301, 11034553,
       1425819, 10417370, 38454, 11608377],
      [11983996, 8574596, 2865699, 5976067, 9013309, 15178731,
       14414563, 10567006, 11900663, 10797180, 16328482, 2214793,
       8394288, 7166061, 5364126, 11756723]
    ],
    [ //  7 * (16 ** 73) * G
      [8408228, 7034790, 219731, 7238804, 7639776, 471304,
       15863683, 10980279, 8065981, 8742992, 9457252, 16561563,
       9995699, 3117433, 15011906, 15025222],
      [12179248, 9845159, 2416603, 6012266, 8628269, 6576568,
       10869631, 12289642, 10907705, 7221587, 2513804, 13243418,
       12700857, 2417228, 8222148, 7767440]
    ],
    [ //  8 * (16 ** 73) * G
      [4592234, 4082766, 7470970, 455188, 11246702, 14407763,
       6413427, 5833402, 10740160, 4791851, 6992527, 13065601,
       6847853, 4170817, 4683216, 13146470],
      [13316344, 14385190, 3193553, 7478048, 10482466, 5929389,
       8163624, 1331145, 5355110, 201938, 2352593, 10842295,
       8146866, 3007904, 10122999, 12395324]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 74) * G
      [882070, 5664046, 7508443, 8694302, 5982592, 14996925,
       8029170, 4441876, 1518756, 8916090, 9131993, 12153893,
       8286694, 3667678, 5373651, 2264222],
      [8119841, 12918310, 6948521, 6849856, 551379, 3146885,
       16725461, 7894322, 369555, 2924858, 10153761, 13199311,
       9609944, 12905942, 15116921, 12734069]
    ],
    [ //  2 * (16 ** 74) * G
      [7841046, 16637008, 833781, 6437638, 15678196, 13252257,
       10590795, 6051664, 1196362, 9866345, 6872716, 4468233,
       4254793, 2667327, 9173341, 8111869],
      [13440608, 3480410, 6370980, 9068566, 9615689, 12105941,
       10072190, 14410730, 13369598, 2489481, 997250, 5176549,
       8042203, 10312537, 9372424, 209750]
    ],
    [ //  3 * (16 ** 74) * G
      [11070271, 12859720, 3624805, 10235600, 7882151, 3141634,
       10298560, 9571901, 13888884, 9788870, 5677307, 9390497,
       1729481, 5481540, 2146909, 1028403],
      [9507568, 12768783, 6744029, 10163216, 9675208, 4270022,
       15784061, 6963046, 9849879, 10444232, 12312012, 782753,
       14263360, 8846686, 939626, 5340740]
    ],
    [ //  4 * (16 ** 74) * G
      [3890220, 4877405, 13950539, 967053, 10693516, 10910636,
       14594402, 12951477, 10432380, 4681702, 5233422, 14023607,
       1682842, 147432, 12383101, 2460945],
      [2052409, 8972600, 13810203, 14289956, 5647752, 12894923,
       2055112, 12550050, 11768991, 7545956, 11129830, 15269635,
       7731086, 879792, 11248505, 4962368]
    ],
    [ //  5 * (16 ** 74) * G
      [14920033, 2619350, 12007701, 10443717, 12385494, 6959330,
       4910038, 14525239, 8773407, 13479524, 11129771, 704837,
       4859411, 660982, 16307404, 4499509],
      [11267626, 6239485, 15889107, 5632351, 7247984, 8753706,
       9565182, 12146530, 3543993, 10006142, 7946749, 3178471,
       386356, 3067993, 15518648, 15607620]
    ],
    [ //  6 * (16 ** 74) * G
      [5966526, 5729566, 10342260, 7035542, 7506896, 11845834,
       7960538, 4711137, 3253269, 165963, 11234448, 5555298,
       780670, 1683007, 14423117, 10041615],
      [12963580, 13141884, 9540093, 13903807, 10940256, 5816104,
       12496898, 6089154, 666095, 5007631, 7971742, 14711728,
       5331065, 9720859, 2047801, 570919]
    ],
    [ //  7 * (16 ** 74) * G
      [853763, 12601730, 5324394, 10552633, 3625116, 6808163,
       8089616, 2093996, 1281711, 10292721, 6309777, 14790349,
       15196948, 13120316, 6008669, 8239448],
      [8508720, 14424247, 635762, 8479153, 14984619, 13032772,
       6247557, 14260262, 1098339, 2580373, 12773986, 5153759,
       7224525, 5678792, 10770303, 9132374]
    ],
    [ //  8 * (16 ** 74) * G
      [15984574, 15498919, 12971317, 13945674, 11869170, 5281201,
       1462573, 14251805, 15684055, 962467, 2048262, 9551132,
       13249543, 14495053, 7860376, 11270683],
      [7310467, 6428231, 15650651, 10327561, 16172602, 5700163,
       14011226, 16612791, 16035224, 7312471, 14994690, 12235649,
       1360234, 1100958, 7568053, 15188008]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 75) * G
      [13492031, 12007411, 10239213, 4441940, 4931865, 10217002,
       7022873, 9253240, 15879177, 2198313, 5286572, 14229769,
       16434497, 4119057, 10498252, 1834358],
      [15925655, 14115328, 6490027, 13953477, 6594639, 14550499,
       11064143, 661719, 15686191, 4445773, 31075, 13499265,
       4832074, 2607500, 4091887, 4977172]
    ],
    [ //  2 * (16 ** 75) * G
      [10664790, 7501929, 353033, 12366719, 16265535, 11459850,
       11859252, 11435548, 11412980, 16665985, 1889986, 11305642,
       3144025, 11331966, 3980622, 7333784],
      [8708727, 9797786, 6281138, 8466394, 893606, 8084613,
       8081374, 354472, 12382041, 5359609, 16704965, 16447255,
       11450740, 5908411, 11881056, 16393184]
    ],
    [ //  3 * (16 ** 75) * G
      [2238969, 3183547, 14569501, 7492223, 9468640, 7583696,
       2190645, 14716755, 4201605, 15271901, 16729515, 15186322,
       8255815, 589905, 3600117, 4122243],
      [1640732, 9527956, 12194954, 5039829, 5013693, 643322,
       6550922, 15803204, 1035252, 9147727, 5642534, 16450962,
       14120919, 15121424, 11326320, 9688877]
    ],
    [ //  4 * (16 ** 75) * G
      [14496512, 8559236, 8338743, 14169766, 16009084, 13780710,
       3454249, 12595871, 2341846, 13850321, 8318308, 4862403,
       5678732, 10960865, 14128989, 10644577],
      [2452737, 13904710, 7792317, 12309389, 11107351, 3608168,
       16659113, 13946057, 8166949, 5014549, 2411115, 4145481,
       12877353, 8763191, 8684626, 3520783]
    ],
    [ //  5 * (16 ** 75) * G
      [15572793, 11760832, 3771404, 4640180, 7155549, 724158,
       3697088, 3666037, 15728379, 10439233, 16204995, 221195,
       2782596, 11111645, 2022228, 8727078],
      [12280462, 5357217, 8720039, 14303419, 11308737, 12433198,
       14063464, 5937523, 8772215, 15395676, 1327934, 13991837,
       4849186, 8036607, 14944630, 9689395]
    ],
    [ //  6 * (16 ** 75) * G
      [15265785, 9416529, 6208149, 1410545, 4253862, 15869098,
       7268242, 15298619, 11091268, 15861548, 5853781, 740660,
       6924944, 14944248, 7478866, 5381000],
      [13553512, 2060194, 1366111, 3389660, 15204582, 15174160,
       2084667, 11616647, 15047244, 6441117, 2860629, 9802661,
       4975500, 14942041, 4948160, 9848292]
    ],
    [ //  7 * (16 ** 75) * G
      [3275454, 4225667, 7459071, 6096775, 445311, 801990,
       339442, 2221997, 1875876, 6956693, 2984319, 9367981,
       8552482, 6438828, 13692696, 12910745],
      [1963449, 16567820, 6563953, 3385994, 2957385, 15381009,
       4290567, 9779681, 9078181, 3505901, 12304645, 15714423,
       9801339, 12538633, 4735469, 13197579]
    ],
    [ //  8 * (16 ** 75) * G
      [1753510, 5047560, 12396366, 10615755, 13055792, 13431935,
       3676676, 6312283, 1155333, 15881188, 13097437, 4852849,
       9491988, 11518085, 10345973, 4181973],
      [8046536, 4483496, 4058558, 15362267, 12173370, 5904335,
       6735031, 10890852, 5937633, 15097584, 6675865, 7332881,
       13951425, 12937613, 15329457, 3896800]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 76) * G
      [4901989, 8798468, 11713688, 4762690, 2997837, 9122229,
       10606782, 13775671, 12585777, 8565762, 11306842, 937303,
       1475322, 13334968, 13480731, 10985075],
      [15737700, 11475220, 3415784, 9524581, 3281397, 10833206,
       10610101, 7386049, 12995414, 2206913, 9118015, 8165444,
       4190646, 15631061, 6690817, 16345258]
    ],
    [ //  2 * (16 ** 76) * G
      [4430580, 10650283, 6738438, 1196551, 8097311, 15402852,
       15668857, 11362110, 13596133, 7909580, 2386620, 6804814,
       8059333, 12641589, 9713837, 8290966],
      [5878366, 184989, 6629512, 1318936, 5422936, 934284,
       5617995, 5501165, 9511852, 8402692, 1476313, 4459363,
       4588318, 5580686, 9046260, 12721541]
    ],
    [ //  3 * (16 ** 76) * G
      [5392924, 11901094, 8850122, 575992, 1818619, 12334272,
       12532373, 10866700, 3627198, 8599538, 262597, 2481343,
       10851333, 4370998, 15034997, 6559328],
      [1049707, 5119918, 5620683, 15284719, 3609571, 4532898,
       6115876, 11586043, 10588823, 3318747, 3503676, 2909453,
       9491608, 1024525, 1561773, 11339167]
    ],
    [ //  4 * (16 ** 76) * G
      [5056850, 7010006, 11357801, 7638894, 8252262, 4727791,
       13095251, 9475772, 2657661, 16319197, 8134740, 8216177,
       6124630, 16345080, 12761969, 6268084],
      [4740455, 7253867, 8345720, 11815639, 8821771, 14680825,
       9889966, 517825, 11524714, 16473954, 7311296, 14091856,
       8556794, 5565105, 14997644, 1704181]
    ],
    [ //  5 * (16 ** 76) * G
      [762858, 4786479, 6317836, 10306687, 4536300, 14651438,
       1448773, 4177988, 11050676, 8223082, 2807617, 874501,
       4844589, 4441964, 7128736, 14590716],
      [10354427, 7635766, 242533, 11462387, 9489372, 1402071,
       9326227, 7115186, 14592956, 11315876, 4370961, 639503,
       693321, 4951345, 14616844, 11159399]
    ],
    [ //  6 * (16 ** 76) * G
      [2152926, 10280691, 9561768, 972414, 10494474, 2420657,
       5107358, 422018, 6445336, 10071553, 13474930, 16270465,
       12238459, 1285241, 5189196, 1151623],
      [6631200, 13631251, 13191889, 3381775, 4206381, 868174,
       13425938, 8171131, 5206450, 2520521, 9098867, 2506187,
       7364914, 15185257, 14695390, 8262337]
    ],
    [ //  7 * (16 ** 76) * G
      [1020917, 10943273, 4833753, 5248998, 12009928, 15032545,
       7420749, 10060278, 14333424, 9237262, 14954455, 7137939,
       11085058, 1453440, 15882971, 10725354],
      [6804779, 1248221, 9500164, 4767717, 5487309, 13018527,
       1145806, 2142511, 4987256, 11018771, 16494697, 14378558,
       16649083, 13774841, 15407228, 9819077]
    ],
    [ //  8 * (16 ** 76) * G
      [8032401, 3689570, 14001990, 12662574, 2901045, 5145930,
       2890857, 3690770, 9797723, 14660618, 10914484, 10859071,
       4246748, 3663263, 4545039, 4101565],
      [3324980, 7893395, 9295677, 7240909, 9100381, 4897238,
       9549499, 2926346, 9938795, 6086694, 1401533, 997573,
       7925658, 12286170, 16127580, 6391045]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 77) * G
      [15163936, 13803825, 12990866, 16740355, 13805067, 4636282,
       3772181, 14379597, 10592931, 2666984, 176434, 10042682,
       7345564, 16046356, 1941147, 5983883],
      [13631953, 8775948, 14839755, 4059615, 7871133, 2513888,
       5949602, 16142376, 11122041, 559671, 624423, 2279238,
       8670706, 7156667, 9753927, 12809248]
    ],
    [ //  2 * (16 ** 77) * G
      [13722103, 8845170, 7173236, 16590864, 2668426, 2799505,
       10752192, 9830984, 8677219, 11693892, 14503155, 16734568,
       16620542, 6262696, 7853478, 2299936],
      [8627156, 9298998, 6484889, 5729762, 2300482, 12690916,
       4745457, 8301775, 12637839, 8474082, 1929199, 10154985,
       8789994, 949144, 15201546, 9749118]
    ],
    [ //  3 * (16 ** 77) * G
      [947050, 4675971, 10558083, 3910666, 14412576, 1895491,
       2366019, 15713029, 11544872, 9746096, 16326483, 1017648,
       9291915, 2590583, 4456058, 11717610],
      [6337631, 8669967, 15561648, 15136730, 505045, 15043979,
       14274259, 16494556, 4032743, 2514240, 15130434, 12642580,
       10321292, 5406662, 3559051, 8372431]
    ],
    [ //  4 * (16 ** 77) * G
      [9481395, 4977672, 9047563, 4170921, 4050175, 15428163,
       7563123, 714264, 6104490, 5023198, 5428700, 14985444,
       8594413, 5567455, 12343833, 3185491],
      [13030346, 3106467, 1146915, 8608708, 14857226, 9180533,
       15446902, 14238427, 12498413, 1757545, 6820413, 16711808,
       10096402, 8591992, 13985255, 1479474]
    ],
    [ //  5 * (16 ** 77) * G
      [14210103, 5541907, 465402, 16516195, 1523045, 14976077,
       537224, 10055926, 11635865, 16246178, 13017854, 8039227,
       7319467, 3569603, 5389007, 16085239],
      [8164988, 2069030, 1084767, 2010453, 8656979, 12447093,
       14701734, 892319, 16259145, 14679574, 15900494, 95858,
       14487434, 10027418, 6286952, 6257456]
    ],
    [ //  6 * (16 ** 77) * G
      [2625077, 14237764, 5269969, 14533629, 3922445, 9930463,
       2890643, 4507946, 2176976, 15525282, 1533877, 7700298,
       8581071, 5196360, 935255, 15476916],
      [791870, 14815744, 13434428, 15294489, 15549116, 7938649,
       2717976, 3710762, 9710220, 13672616, 9598614, 9859548,
       16684684, 15521336, 4897716, 5685975]
    ],
    [ //  7 * (16 ** 77) * G
      [15693015, 4169184, 15002228, 7379817, 15413190, 15891611,
       9428379, 155061, 5148654, 7675158, 3263956, 885179,
       3030329, 6569965, 11373210, 14802837],
      [16653504, 14768398, 12839312, 4225160, 7314809, 5616855,
       15614417, 1503265, 5334174, 9034557, 7063837, 16160046,
       16426108, 14255365, 7876969, 3258724]
    ],
    [ //  8 * (16 ** 77) * G
      [649336, 12308523, 16654232, 1583530, 15927256, 96594,
       7832297, 11887279, 4151724, 13915657, 13410094, 11249995,
       5954152, 4965237, 9784519, 12759563],
      [13850359, 11448951, 6600881, 11518615, 5282113, 8290577,
       4891019, 12328757, 9285588, 6675651, 5119301, 12539483,
       10062553, 8904716, 14798597, 8549587]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 78) * G
      [10540822, 5877977, 2623962, 3908993, 991846, 7446761,
       8778502, 15230943, 10628492, 850859, 15223793, 1589358,
       8367956, 21249, 1358204, 5029732],
      [2264018, 9492912, 9785696, 8418384, 10060863, 114213,
       469157, 3137618, 10811926, 1075966, 12304382, 14695342,
       3815271, 6830072, 4034246, 7450638]
    ],
    [ //  2 * (16 ** 78) * G
      [255020, 8935541, 1568994, 16551095, 4200068, 14590782,
       12308817, 4658163, 2425657, 1522614, 5113418, 6074000,
       2578918, 2008686, 11718218, 3956194],
      [5421569, 12779243, 14668408, 4803609, 2213768, 10591906,
       750708, 14324672, 4338874, 10709679, 5782309, 10344822,
       12025045, 9580967, 14961004, 4769780]
    ],
    [ //  3 * (16 ** 78) * G
      [2447724, 2454604, 871097, 3107401, 10519561, 2257957,
       3407522, 10408870, 15473382, 3511480, 10808840, 16315078,
       7735789, 5829876, 10506688, 16432620],
      [16271419, 2373699, 13667680, 16319032, 10486813, 893816,
       7774888, 12055432, 275208, 13880924, 14385080, 2666163,
       779270, 13291200, 14117846, 4752897]
    ],
    [ //  4 * (16 ** 78) * G
      [15237264, 10205013, 8669477, 10025180, 2646860, 158015,
       5327308, 12087438, 15055108, 1247566, 5862558, 959041,
       3447552, 4786429, 11869636, 5240365],
      [11719031, 16250834, 5556768, 7021498, 8997843, 1445843,
       12922701, 13308324, 14940758, 6867447, 3723429, 1116926,
       12441927, 7829426, 11626539, 6981811]
    ],
    [ //  5 * (16 ** 78) * G
      [6985248, 14432942, 6824677, 6554241, 12154213, 818054,
       634971, 15373051, 12324718, 8447211, 10912334, 14918353,
       3726449, 6437233, 8079056, 15459376],
      [10890210, 5251074, 10185368, 15488190, 13700101, 813649,
       2847808, 13633542, 11075568, 14477307, 7878016, 1413214,
       11787436, 16108577, 4528389, 12249318]
    ],
    [ //  6 * (16 ** 78) * G
      [8004297, 9156846, 12933356, 11385382, 9265383, 4017261,
       6909332, 2669916, 1660409, 16085521, 2242905, 12202556,
       9154276, 6876735, 4835646, 15086013],
      [2933236, 9401856, 11238654, 4129920, 56613, 5574677,
       12965036, 5378298, 6783460, 5688188, 11423102, 87115,
       14110155, 13559217, 8762444, 12723323]
    ],
    [ //  7 * (16 ** 78) * G
      [5480460, 14935780, 7166439, 15032614, 11358029, 11841095,
       13619971, 9866392, 12915889, 5463346, 11773345, 13678951,
       15669986, 14336104, 15203382, 15383103],
      [16697010, 174290, 11943088, 9259350, 9467131, 11141855,
       15504037, 6579324, 2559337, 1871824, 5255303, 3074684,
       14374025, 1672487, 9362192, 6417051]
    ],
    [ //  8 * (16 ** 78) * G
      [13381676, 14001065, 3703457, 8330055, 5884852, 8134948,
       2149119, 7054429, 14454061, 13184519, 5950277, 7716647,
       2211420, 11363150, 5854960, 3446522],
      [13366790, 4365850, 7119288, 7148553, 16125568, 4584053,
       4737182, 15830552, 13236468, 3962685, 2322442, 5700247,
       10364469, 12003344, 2442999, 12695451]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 79) * G
      [12785631, 1218338, 5264581, 9697162, 7380623, 170779,
       10504360, 15621196, 10638767, 16655004, 10204508, 16502293,
       10483718, 4052846, 131361, 13191328],
      [3321378, 15619968, 14580166, 8614499, 13194096, 448820,
       93342, 16237907, 12306491, 13750765, 15554807, 15211629,
       9066157, 15769671, 14833804, 11616604]
    ],
    [ //  2 * (16 ** 79) * G
      [3836504, 6081345, 1617604, 8966046, 8577680, 3178787,
       15650719, 3314049, 7556227, 7500101, 5220518, 1080409,
       8187253, 16495602, 8549023, 11442908],
      [13036668, 15061292, 14444666, 6626297, 6160212, 16577774,
       16654307, 937455, 7510243, 5765117, 9671609, 8120685,
       2472897, 5620257, 1667548, 9363726]
    ],
    [ //  3 * (16 ** 79) * G
      [4856498, 8002717, 1122780, 4865370, 1535859, 2336813,
       312095, 5269739, 16448336, 10519050, 5654289, 15540901,
       9021845, 5845471, 4725193, 3314667],
      [8567718, 15905500, 10138728, 418190, 7631202, 14717629,
       3423919, 4951597, 59977, 10146153, 4777524, 296074,
       5783633, 15214478, 6362216, 15720512]
    ],
    [ //  4 * (16 ** 79) * G
      [7082297, 16375985, 9324240, 13919077, 13215140, 4329764,
       4955192, 12724566, 8369952, 2197824, 14394153, 373159,
       10579376, 10953782, 6317439, 10781449],
      [5863437, 2208633, 9676415, 8499574, 5818809, 838445,
       2018594, 7682236, 2715148, 4255275, 3563174, 9003926,
       415443, 15906316, 15056748, 8863476]
    ],
    [ //  5 * (16 ** 79) * G
      [415715, 1104092, 4128355, 7030790, 16062820, 6170344,
       7986500, 11729326, 4728212, 1604495, 14070159, 4534768,
       11078955, 13408093, 14092674, 963057],
      [7539685, 10962193, 10604771, 6428909, 14335351, 16437654,
       13727535, 2447655, 15772935, 15687924, 12431642, 3344635,
       11245288, 10805006, 5935049, 11551140]
    ],
    [ //  6 * (16 ** 79) * G
      [9627771, 4578626, 16673780, 901712, 15294899, 5461616,
       12986685, 368179, 11756906, 2712937, 14761673, 16594783,
       15436481, 4059178, 4372658, 7148896],
      [14028980, 64175, 13388350, 1270206, 10414398, 12212707,
       15023757, 904127, 12705461, 12936318, 9290933, 11941480,
       918274, 10714239, 3334116, 1273970]
    ],
    [ //  7 * (16 ** 79) * G
      [14973406, 5878229, 12892106, 7521976, 9161156, 8443909,
       12421427, 8587606, 13082804, 4856711, 3934635, 15567597,
       15102192, 13822470, 11388362, 16415918],
      [14874439, 13739253, 11313257, 14649404, 14068835, 8820730,
       2543970, 8189931, 6208309, 12030260, 5434863, 8971957,
       2346357, 1074299, 13832417, 3957721]
    ],
    [ //  8 * (16 ** 79) * G
      [307744, 6010479, 13475409, 8755473, 7876036, 11327379,
       16583954, 886056, 15930414, 9636698, 3358623, 12922420,
       9740215, 4118559, 8122320, 4477701],
      [12543569, 335507, 9897872, 8692852, 7475635, 16107685,
       16165541, 8375943, 11802107, 7372915, 2258300, 1409217,
       7899098, 5367302, 1740571, 13978584]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 80) * G
      [9128543, 6484630, 4002049, 12193675, 2359039, 7252499,
       12628326, 9022660, 500866, 11764528, 10585567, 6060699,
       5523943, 15867487, 27644, 3675978],
      [292092, 12735567, 9150333, 4246385, 15962327, 11343635,
       1587781, 15075612, 366445, 6127638, 9476985, 2119150,
       12375983, 8138464, 16159470, 14039035]
    ],
    [ //  2 * (16 ** 80) * G
      [1967123, 7222792, 189882, 3792850, 2347079, 11101888,
       2687423, 7041927, 11754316, 2142929, 5057776, 7151991,
       11700122, 7030154, 3541604, 8102675],
      [12027114, 15766251, 980534, 7496198, 14375817, 10162851,
       8606568, 7279975, 16648026, 5572275, 12725191, 8174602,
       10901334, 5399402, 14210070, 1987673]
    ],
    [ //  3 * (16 ** 80) * G
      [10689677, 12631935, 8503281, 3836824, 14513429, 12987131,
       3712407, 791593, 14855114, 7598529, 15841044, 11680466,
       8402693, 13631395, 10479664, 16613598],
      [7300063, 1657631, 6320942, 1392754, 38997, 12881957,
       15822802, 4597593, 7397080, 4624372, 8042582, 4887652,
       15634016, 7221072, 11072320, 15424312]
    ],
    [ //  4 * (16 ** 80) * G
      [6470124, 11003533, 9290895, 2026222, 8113970, 10892925,
       13612554, 9277317, 13790934, 9320201, 7848767, 104468,
       7388543, 7054627, 15483675, 6343253],
      [13759593, 768024, 2086863, 48413, 15392114, 70821,
       11762081, 7563061, 14713089, 7299938, 6875083, 7056821,
       13231693, 6108170, 917292, 762153]
    ],
    [ //  5 * (16 ** 80) * G
      [15163809, 8251847, 16583538, 12253, 14039458, 13333091,
       2324702, 4026466, 150348, 15686462, 773069, 6618092,
       6878303, 10037561, 10554425, 6141458],
      [1214268, 15803114, 10345928, 1689898, 9453417, 7229429,
       7657887, 12264310, 12772726, 15540364, 11247605, 6163598,
       3091483, 15295222, 14117067, 3287729]
    ],
    [ //  6 * (16 ** 80) * G
      [14210210, 987336, 3388922, 12552463, 8622843, 10693354,
       13339045, 6055085, 3457927, 65033, 5693251, 3079490,
       12232698, 1893194, 5341024, 9633857],
      [9534708, 423209, 16002702, 10354958, 13700898, 7500204,
       9861818, 9666454, 15297866, 9210310, 75173, 3192156,
       12722507, 9515480, 8938551, 6225020]
    ],
    [ //  7 * (16 ** 80) * G
      [1382956, 13516217, 586340, 3008860, 10330893, 7213344,
       14954464, 14366519, 13384590, 8710607, 1414704, 1182893,
       8420726, 8754105, 6817945, 15200478],
      [1403120, 419561, 12245378, 7886798, 6930283, 5071527,
       16011444, 3245775, 14790149, 226924, 691779, 216220,
       4526978, 8784186, 12860822, 7677928]
    ],
    [ //  8 * (16 ** 80) * G
      [4127899, 9142677, 15857387, 7423968, 11560363, 10144154,
       12992764, 12139717, 15989236, 11261895, 6176744, 6665370,
       197869, 7577795, 15431393, 3481319],
      [1277222, 10641058, 6752757, 8097766, 3575867, 5387821,
       2924883, 10337473, 9400639, 726951, 10391874, 15507221,
       6303584, 10652134, 13669725, 16244118]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 81) * G
      [6714725, 813027, 12947373, 13298551, 8425749, 9007030,
       598596, 9378976, 2549106, 13252215, 8025610, 336237,
       6805384, 15879331, 10503375, 12455576],
      [15692745, 1267850, 14844553, 9428208, 7928264, 10562562,
       14578539, 14308386, 7440352, 5851530, 4230874, 5656927,
       10262819, 6471323, 2712056, 5880127]
    ],
    [ //  2 * (16 ** 81) * G
      [11563615, 9379051, 11136867, 8195323, 7084163, 16589478,
       6807620, 5158164, 5400862, 14595118, 10236542, 1858538,
       11997792, 5470299, 5393002, 4483289],
      [14662879, 259334, 15944691, 12520490, 10216976, 13866076,
       1077947, 3381607, 2450175, 13878335, 9965704, 10038297,
       8131567, 2132304, 14706460, 5226687]
    ],
    [ //  3 * (16 ** 81) * G
      [2331843, 7539936, 16284085, 6235308, 16443285, 12141651,
       8213599, 9195793, 13654121, 8406043, 15811339, 1008207,
       14070529, 4786225, 6064357, 307340],
      [8481507, 6398435, 5879388, 16435383, 7072374, 1891624,
       3343246, 9926738, 5413986, 10727142, 5592021, 4107002,
       14548921, 13600924, 11120989, 1736448]
    ],
    [ //  4 * (16 ** 81) * G
      [6784501, 14484045, 9735512, 10298596, 2594136, 934042,
       15815710, 3222142, 6895314, 15805777, 4479308, 7014401,
       15880313, 4358162, 12387129, 1461207],
      [11446496, 11014989, 5543380, 14409184, 10205342, 1439937,
       1937697, 11414114, 16111468, 5470263, 14613401, 9514150,
       1564152, 2753304, 3074152, 6634577]
    ],
    [ //  5 * (16 ** 81) * G
      [11997208, 11282592, 13231145, 8307917, 11828890, 3532589,
       7796975, 5262932, 8549309, 5673545, 8902070, 9829856,
       2297260, 8938311, 13721301, 15927972],
      [11306201, 4614083, 8766405, 9505411, 2989374, 7421814,
       5128307, 10701098, 296930, 8531314, 10271694, 6478126,
       240100, 4068693, 13301198, 12149985]
    ],
    [ //  6 * (16 ** 81) * G
      [496972, 12935718, 9716126, 10124527, 15911482, 16739627,
       7963812, 2168771, 10432497, 15868398, 1974803, 15432658,
       16051043, 14976480, 3681689, 1696707],
      [8099677, 10008008, 6142804, 7028378, 3254214, 13728382,
       5020233, 1311587, 14550403, 1609213, 4619272, 6060,
       12651655, 2096768, 14267320, 14607128]
    ],
    [ //  7 * (16 ** 81) * G
      [12828488, 5269469, 5963343, 89940, 10865135, 1694047,
       11785857, 10287324, 15847987, 14921788, 5347438, 894321,
       964844, 7367985, 16499329, 6425886],
      [5150559, 13510296, 1216138, 9309641, 5603438, 3284023,
       8671830, 9962344, 2363915, 9403723, 7745276, 16100877,
       13283423, 7110244, 5104812, 12421283]
    ],
    [ //  8 * (16 ** 81) * G
      [4179625, 8402553, 4008251, 1000517, 5313242, 13128476,
       3539746, 8334545, 7777190, 10343973, 660750, 10821941,
       3722227, 3191172, 15026385, 15253664],
      [15098026, 8605025, 8545908, 6230627, 6164045, 4260537,
       10543592, 14812051, 13092223, 12073964, 4013441, 1472250,
       71415, 14531764, 8600577, 14855611]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 82) * G
      [14538532, 10921621, 4608988, 9319160, 3978043, 12806362,
       3224560, 15527669, 3036263, 3115969, 8214156, 10376145,
       15406315, 4034415, 9156160, 15712829],
      [9778157, 2373464, 12007337, 11515826, 13647096, 7079624,
       385480, 5900724, 5053085, 8821180, 3298035, 12517766,
       6097301, 856895, 3487754, 6677742]
    ],
    [ //  2 * (16 ** 82) * G
      [3428044, 12097846, 12138817, 13791538, 13462416, 10859561,
       6203565, 7955219, 335609, 16603785, 8165148, 4752743,
       6633011, 11031598, 14443555, 2081512],
      [5849314, 1246408, 220967, 377004, 6201925, 6667363,
       1782926, 8059102, 14916396, 10347149, 422982, 2185406,
       215354, 8192970, 13224492, 5623063]
    ],
    [ //  3 * (16 ** 82) * G
      [9946022, 7423733, 5989163, 5112148, 3650158, 3614329,
       9675509, 15070830, 9407059, 3207848, 4244808, 4284805,
       9435537, 13860171, 6430167, 2567844],
      [13894837, 9023077, 7047097, 3026496, 9555561, 13658076,
       13532286, 11824878, 693434, 12010480, 7540258, 10320774,
       4038719, 15991920, 3378234, 16263000]
    ],
    [ //  4 * (16 ** 82) * G
      [14084844, 1180338, 13654392, 6666626, 2777849, 11112596,
       15504459, 2678434, 14649171, 9940123, 4279687, 10167784,
       16329810, 16680644, 1299384, 386648],
      [3484895, 15303968, 8717992, 11149493, 13427759, 9060437,
       644977, 8657605, 15835927, 12493354, 1275636, 13969218,
       353668, 8792424, 8674885, 13644892]
    ],
    [ //  5 * (16 ** 82) * G
      [433043, 15528036, 8198197, 14617105, 14851390, 7005703,
       5042521, 9341014, 3716922, 8191505, 14376522, 9816721,
       12446576, 12390563, 720100, 13109631],
      [12118141, 11710578, 9729855, 5980401, 3126255, 3522753,
       1664653, 3502884, 12510036, 3065973, 12596643, 6195369,
       9899104, 6037810, 14640756, 8084219]
    ],
    [ //  6 * (16 ** 82) * G
      [10149778, 10804735, 16513210, 5102181, 13555993, 4208073,
       5519500, 14146457, 15778317, 12710877, 15167526, 12137317,
       8231929, 11082370, 5477981, 3190041],
      [10439164, 13192010, 4136504, 4682760, 8926549, 3057944,
       16244264, 15440622, 14319410, 15420298, 11312756, 16438294,
       5752994, 213989, 5545401, 9642210]
    ],
    [ //  7 * (16 ** 82) * G
      [12404520, 5778695, 9404000, 5839617, 10671899, 7535512,
       2335112, 15922729, 9045265, 8202617, 3174872, 391656,
       10648714, 11141228, 2783321, 4020860],
      [1064269, 12392169, 9166303, 15490963, 5381055, 10213703,
       4398188, 15634738, 10463409, 9714357, 6428419, 8685264,
       7400328, 14033551, 4863581, 13579814]
    ],
    [ //  8 * (16 ** 82) * G
      [5126192, 11061119, 935258, 12293079, 113526, 2221761,
       9821392, 14219097, 5186717, 1028579, 7704111, 13750390,
       15364430, 11398519, 12283070, 2702949],
      [2440830, 8017155, 4890266, 9503396, 1894976, 2530770,
       5419784, 3160584, 14169243, 10219404, 741735, 7665641,
       12636699, 16424307, 14498703, 13719111]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 83) * G
      [2515115, 7282293, 6251955, 11886607, 6654145, 2654126,
       1391312, 16640952, 4976888, 10525789, 16044629, 1841461,
       4713709, 9626788, 7198349, 7173748],
      [15496816, 15523686, 16589717, 9028221, 8898403, 3020559,
       7679584, 7002357, 6983854, 12360349, 14841426, 16283679,
       13976985, 933966, 10809038, 12654492]
    ],
    [ //  2 * (16 ** 83) * G
      [4764445, 4336095, 645141, 3074759, 2573568, 10675149,
       3324758, 2652109, 10770233, 8362171, 4008127, 11035835,
       5897914, 7599040, 11096691, 12497240],
      [15546853, 13923783, 4339990, 5150819, 14946791, 15878070,
       5059230, 8105641, 3414614, 14445691, 10759410, 10244090,
       5566259, 14924547, 4489565, 7382364]
    ],
    [ //  3 * (16 ** 83) * G
      [11232893, 1358092, 10183482, 8341173, 6290125, 7071447,
       3966711, 11025226, 4425184, 16362484, 10759545, 6652055,
       16777098, 2717650, 10983513, 15806179],
      [6507158, 7390756, 12487218, 16146219, 10441314, 9517466,
       8302108, 2097427, 10697051, 4007920, 11022972, 6657007,
       1564600, 14429293, 2876578, 14200866]
    ],
    [ //  4 * (16 ** 83) * G
      [8121547, 8199701, 2010164, 5306030, 7521949, 6846187,
       3113101, 16458041, 4868490, 12649038, 8995691, 11727429,
       16539499, 2587802, 14882276, 8508205],
      [10813985, 9584116, 9148156, 3821023, 4688331, 8944648,
       8986144, 9633817, 1518655, 11111206, 9646904, 11699090,
       14156171, 1449805, 1262045, 14605286]
    ],
    [ //  5 * (16 ** 83) * G
      [1283278, 7440552, 4788666, 3265135, 1957393, 13155661,
       1654762, 6320243, 2581901, 13631257, 4928156, 8760353,
       8929861, 13147868, 4249394, 13021059],
      [3373042, 15585790, 6198502, 2625214, 13197639, 3498237,
       7533029, 12535308, 1198856, 2016387, 10043131, 512892,
       9314552, 15147390, 4098128, 8346404]
    ],
    [ //  6 * (16 ** 83) * G
      [2122760, 6417373, 9039501, 15649441, 883551, 499317,
       13300626, 10795723, 10343053, 4024800, 6351823, 14507418,
       877914, 7074782, 128026, 3384665],
      [10171277, 8735643, 1753707, 9360607, 15930869, 16696760,
       16486182, 3227877, 194543, 5529981, 13347544, 13900296,
       8806684, 15749293, 16059902, 14717855]
    ],
    [ //  7 * (16 ** 83) * G
      [8918257, 12265644, 7577585, 1435333, 14898907, 10424945,
       7928783, 690316, 9778258, 11316180, 9613339, 7542080,
       16496932, 3081694, 8129338, 14745541],
      [1772742, 9734538, 4606333, 14424322, 6828515, 5586109,
       13046553, 229057, 9669751, 2297444, 7873944, 4034892,
       3358119, 15924142, 9849374, 6085070]
    ],
    [ //  8 * (16 ** 83) * G
      [4373508, 11531650, 15414953, 15071567, 14236494, 1627707,
       7311919, 3580869, 15338539, 7995797, 15172598, 7822026,
       10569916, 5230474, 15798948, 9107331],
      [31285, 3117937, 1443848, 9707947, 6839548, 1626990,
       16074500, 6328509, 2704615, 6668487, 5930589, 12564453,
       3199053, 8937855, 10831360, 426471]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 84) * G
      [3693867, 14956607, 7157170, 9644881, 6720196, 5873518,
       16667043, 9049670, 2887482, 633809, 8761059, 12873123,
       3228219, 15287042, 11821950, 15875088],
      [2395648, 2186530, 5488828, 13918053, 13912035, 8199582,
       7461549, 11470919, 2982265, 12546079, 16641684, 2522035,
       9204397, 11302942, 1478119, 12854750]
    ],
    [ //  2 * (16 ** 84) * G
      [13579542, 6971364, 7394416, 15436033, 16240184, 16125130,
       3906195, 2643881, 538721, 7648195, 1161026, 13402813,
       16204915, 3723588, 4273163, 7901963],
      [5997856, 3330560, 11488561, 6797249, 5083816, 14442338,
       5664244, 11044312, 8228251, 9813078, 12564966, 6804525,
       11108102, 9713322, 1699291, 15872565]
    ],
    [ //  3 * (16 ** 84) * G
      [732752, 13633234, 4866724, 15541037, 1491470, 14525756,
       9022926, 15490443, 5006612, 12392552, 14984114, 2370159,
       11281493, 6274636, 10801459, 9615910],
      [1051474, 16193047, 102497, 8979492, 14446330, 11937635,
       15250879, 11317982, 10837104, 2234737, 16772251, 12345960,
       2334081, 7494620, 5855664, 6849061]
    ],
    [ //  4 * (16 ** 84) * G
      [11133913, 14054088, 1263791, 4103786, 14583048, 954597,
       1127331, 15553871, 15367410, 16586757, 14458154, 10996752,
       14522516, 9085660, 9817875, 7149917],
      [14201950, 15042234, 7405034, 14483528, 15155074, 11489858,
       15708890, 10487441, 658475, 6045565, 11701089, 7024619,
       8170116, 14561836, 6128849, 3909921]
    ],
    [ //  5 * (16 ** 84) * G
      [11367501, 15040256, 5495378, 10979807, 6522152, 14617737,
       2969057, 13778874, 8173915, 11042243, 11625834, 3391574,
       6132582, 10741402, 774640, 12536563],
      [8475354, 1244921, 6646448, 6875915, 13827877, 10138750,
       11479366, 6797446, 2702419, 14403368, 8334599, 13857885,
       8969175, 15659998, 5573074, 7138155]
    ],
    [ //  6 * (16 ** 84) * G
      [8342150, 5019715, 163727, 6646861, 582771, 4893359,
       11458521, 9824451, 9388613, 1635427, 13640068, 4690923,
       7417917, 6163906, 2522991, 6820230],
      [4430646, 567109, 8084875, 6559631, 13032584, 10005929,
       2027105, 3596686, 8410516, 10758118, 9497369, 14558120,
       2066682, 11790851, 12565141, 8911277]
    ],
    [ //  7 * (16 ** 84) * G
      [668607, 2948797, 6307489, 16365644, 3805013, 5438799,
       9049635, 4712252, 64225, 3155946, 6340760, 4557850,
       13839590, 9373568, 11901163, 6064650],
      [15273282, 11710787, 14134204, 12726203, 13394969, 5894632,
       3580752, 8509665, 6704510, 13248658, 9581565, 5518060,
       16007643, 422752, 10697871, 2115545]
    ],
    [ //  8 * (16 ** 84) * G
      [79875, 6883100, 15012564, 527900, 5554833, 8828107,
       6976744, 2023833, 3184930, 7095851, 6774225, 12228755,
       12342463, 13065980, 10370615, 16288284],
      [15680818, 2310617, 6214430, 16059123, 16530468, 13973193,
       8806785, 7782129, 11063888, 10419444, 16762837, 5879827,
       6046174, 13225740, 4108633, 359685]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 85) * G
      [103683, 4754858, 1446114, 727464, 788568, 12753672,
       1219858, 11129924, 14421240, 6841504, 13365754, 4547214,
       5959152, 8181480, 3320794, 318903],
      [15831295, 7166878, 7735739, 3466403, 1601398, 11108442,
       7851298, 9884981, 7378056, 551526, 2003066, 8228415,
       5668362, 7793278, 7686240, 3564851]
    ],
    [ //  2 * (16 ** 85) * G
      [12711815, 436127, 2947175, 12094112, 12692112, 11621117,
       5526651, 11513283, 7721320, 8867791, 15233520, 8541003,
       15406860, 10975729, 1280813, 5183560],
      [15747714, 13476270, 4695938, 12701874, 13701913, 10311260,
       14829994, 15178961, 12930286, 10334612, 7649664, 5826769,
       10749629, 2455261, 12031065, 12597665]
    ],
    [ //  3 * (16 ** 85) * G
      [890671, 11787165, 9232800, 12524855, 1985237, 14165919,
       4740664, 1845184, 9579006, 1149250, 14528311, 10742447,
       12925099, 1003864, 16172550, 8673096],
      [15985926, 15590782, 5409732, 6478686, 1173490, 1632420,
       16336744, 12109231, 8952302, 12433575, 5579716, 16344747,
       1310867, 15285984, 16319522, 9912127]
    ],
    [ //  4 * (16 ** 85) * G
      [2020936, 16373842, 15128501, 2154618, 759559, 250487,
       9478360, 3931161, 3775400, 5219005, 9985211, 14470320,
       11693054, 10819502, 8329484, 13045908],
      [12145302, 16593437, 4541463, 3993962, 8582917, 16111147,
       8987445, 7330044, 11757630, 5184550, 1729379, 3760949,
       1729157, 16155307, 9801380, 13615125]
    ],
    [ //  5 * (16 ** 85) * G
      [6491644, 11588936, 15554636, 5171657, 12666745, 362941,
       11746498, 16397323, 12395256, 1166180, 5238531, 11431023,
       11468601, 5744640, 1112074, 210489],
      [4542667, 285238, 3690373, 309359, 7287740, 6231071,
       7315270, 10015918, 7502810, 14395125, 15523427, 2834797,
       13691888, 11447538, 10724604, 4886426]
    ],
    [ //  6 * (16 ** 85) * G
      [10672955, 6180585, 11781070, 3248417, 11303065, 2760207,
       2968610, 4438946, 2190988, 8029059, 11025659, 7266866,
       4015414, 9893126, 13007367, 2818339],
      [12649177, 1174255, 16426958, 10445796, 1842991, 6570722,
       11894091, 15057400, 8415018, 1329886, 10214475, 786384,
       6402752, 292805, 4333718, 11591821]
    ],
    [ //  7 * (16 ** 85) * G
      [2672834, 11421623, 4386009, 1768014, 8622073, 13588188,
       6326171, 16592258, 7550257, 11440711, 5736016, 7107473,
       15953041, 5473432, 2832010, 12401892],
      [13630308, 973861, 15089135, 8117346, 16773693, 1748827,
       14505845, 13306166, 14024928, 2607777, 5088329, 12330059,
       5278499, 16000180, 12426090, 2578235]
    ],
    [ //  8 * (16 ** 85) * G
      [1442615, 5275109, 12903754, 12260931, 15628656, 2357803,
       1953022, 10013175, 3764592, 10681401, 15926175, 8218866,
       5319574, 4852852, 16207119, 10281602],
      [7303247, 11446690, 10432639, 2437023, 3361751, 10241084,
       12741718, 12615841, 5755981, 4879243, 11109417, 13566949,
       1242083, 7533034, 14871453, 11207422]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 86) * G
      [4088348, 16457676, 13000926, 11702776, 5578410, 3167292,
       4568325, 6989028, 8063632, 12148269, 11132214, 1456974,
       14759812, 6550264, 6339471, 14774860],
      [11611696, 16758069, 16470187, 6223591, 796194, 5286449,
       13525689, 7772935, 7415489, 6843631, 2235919, 3585237,
       6299243, 1564100, 5097622, 13585743]
    ],
    [ //  2 * (16 ** 86) * G
      [10715729, 9468854, 2752186, 1243620, 12899609, 6525653,
       8764329, 9694056, 14637437, 13051268, 10355745, 12668655,
       1833646, 10452237, 2752325, 12899860],
      [16770072, 4578326, 9714221, 11367334, 771153, 4265239,
       15038165, 15628751, 3197107, 7607894, 7496402, 11565849,
       4741158, 14989455, 11273080, 3158910]
    ],
    [ //  3 * (16 ** 86) * G
      [740829, 949745, 9959654, 5788201, 8623771, 9681589,
       2694621, 6617633, 4917284, 1946946, 10510317, 4873361,
       14216241, 8880414, 8063086, 4858791],
      [3007426, 14815041, 5117469, 12527040, 9478728, 4566274,
       1297827, 406899, 15638091, 15220899, 3542203, 55182,
       1444794, 14030906, 12411329, 5619478]
    ],
    [ //  4 * (16 ** 86) * G
      [15414355, 12032268, 8313429, 14445068, 9545292, 12393154,
       6586554, 11799402, 1760843, 2716927, 10309798, 11357303,
       1228925, 9991667, 2804346, 12601936],
      [13831815, 9856644, 6300327, 8273176, 10726729, 11348136,
       1962381, 16024692, 8099937, 6257407, 1064101, 495728,
       10799481, 3466240, 10208634, 136882]
    ],
    [ //  5 * (16 ** 86) * G
      [10026676, 16040360, 16295279, 12230472, 9388571, 9293099,
       5354640, 15201490, 1237332, 3526574, 14739656, 16684715,
       2140690, 15255250, 5685465, 1017348],
      [16234509, 5105824, 13330390, 2730783, 4059320, 186990,
       6806301, 16333773, 14362569, 4699148, 15150196, 6691730,
       607605, 10955624, 2335238, 15924535]
    ],
    [ //  6 * (16 ** 86) * G
      [11103315, 1626044, 1428277, 8724831, 3626199, 10946539,
       2247204, 214938, 7468163, 16660182, 2741934, 12566828,
       11090368, 6069806, 10189996, 9449035],
      [6948118, 10752551, 2975840, 10133055, 959148, 12141296,
       3721709, 7365924, 9714746, 6464209, 11945633, 6702009,
       15747293, 9443080, 254928, 14738389]
    ],
    [ //  7 * (16 ** 86) * G
      [1388227, 10175437, 16343084, 1129941, 16314822, 11745508,
       14038230, 3092859, 9196446, 11321785, 9391238, 13895650,
       6614618, 7694286, 2927464, 385478],
      [15629320, 7003845, 3177368, 10803425, 10229054, 12596655,
       14486439, 1950890, 8329482, 1747980, 8810472, 10868020,
       5189627, 6285063, 4872759, 13068046]
    ],
    [ //  8 * (16 ** 86) * G
      [15268808, 93821, 14978134, 1087505, 16035869, 9930514,
       16723598, 6035264, 1742225, 1748221, 11869943, 13659096,
       627705, 10236095, 8610901, 9372686],
      [10332925, 15923889, 11858895, 8025335, 2799472, 16663146,
       5602419, 5896429, 11630276, 7522721, 4245740, 5804103,
       5225016, 10056158, 835471, 11797579]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 87) * G
      [6623405, 16036540, 5769391, 7616343, 6391565, 6292704,
       4950702, 5964403, 9839314, 1275086, 6807563, 7488263,
       14929191, 9232314, 14416564, 11224714],
      [8496649, 5072374, 5920647, 2637816, 14205538, 10735064,
       10206274, 13570990, 11037830, 15529867, 9330787, 13741569,
       12405110, 16259593, 15785194, 1096054]
    ],
    [ //  2 * (16 ** 87) * G
      [7669356, 9937944, 634873, 16070508, 16751334, 4735989,
       2598146, 13720791, 7947403, 794333, 2365169, 11898654,
       5430890, 9052745, 11916821, 3236173],
      [2964677, 1114793, 10277658, 681403, 10141083, 11518241,
       893156, 205451, 11919500, 9240, 15898471, 4346461,
       8769837, 5532587, 8486077, 14585418]
    ],
    [ //  3 * (16 ** 87) * G
      [4330940, 3044447, 10023346, 8449230, 15155944, 10515838,
       14642783, 6300287, 2696679, 846791, 2698876, 8582066,
       13135559, 14701229, 5713145, 16299981],
      [14796277, 14948591, 929540, 1076609, 12067999, 14792493,
       12973081, 6493733, 316835, 562967, 9463701, 7290969,
       15885157, 13421686, 9214811, 9039373]
    ],
    [ //  4 * (16 ** 87) * G
      [10171685, 7914972, 9936981, 14151648, 12494879, 11801180,
       101743, 4818161, 16422945, 2419321, 10861197, 10012128,
       16217913, 18235, 13955610, 8445582],
      [6017732, 6574194, 6588216, 14066034, 1249496, 9574428,
       12363430, 16238707, 15434880, 8154040, 221040, 1500860,
       14082597, 11024144, 14315850, 8655276]
    ],
    [ //  5 * (16 ** 87) * G
      [14686890, 2069699, 15282772, 7813350, 15624935, 9750944,
       7548251, 1475002, 10842449, 15257829, 8834613, 2873987,
       9705112, 6270876, 6823933, 14499956],
      [9955899, 8929900, 5375444, 16245165, 14916104, 8329176,
       4290755, 16297570, 3106157, 13619365, 14633193, 15267983,
       14408462, 9894963, 5664586, 6380634]
    ],
    [ //  6 * (16 ** 87) * G
      [2568151, 9456925, 15563760, 2936191, 7158169, 12251363,
       1486746, 3263596, 5408514, 2216554, 3205911, 1475515,
       4416256, 9013338, 4564570, 1984892],
      [8541994, 8520993, 14486172, 6110565, 14568789, 2933090,
       10360240, 9844843, 12333982, 16122550, 6029576, 2312216,
       8620313, 11952833, 3449109, 8116683]
    ],
    [ //  7 * (16 ** 87) * G
      [9412225, 16718555, 3532413, 3330162, 2634087, 12265337,
       3707196, 2385551, 10219496, 9949463, 1909551, 11359166,
       7566032, 2793931, 3693658, 7891225],
      [6300475, 7461316, 13129987, 12422957, 942037, 13443569,
       14350813, 13829062, 14679915, 1439231, 9568803, 4008474,
       6995451, 5762731, 9160034, 9112377]
    ],
    [ //  8 * (16 ** 87) * G
      [12567111, 7745804, 1422055, 502931, 2539680, 4905709,
       2205733, 12795425, 14603920, 6041129, 8300736, 9335016,
       6673504, 9637533, 13970208, 6381828],
      [12861576, 10451205, 10942312, 6064006, 15857148, 5459199,
       4235995, 8463903, 9428416, 13470030, 16613779, 12791548,
       8616826, 8618554, 12633815, 540988]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 88) * G
      [9854316, 11464387, 9270869, 1406286, 383231, 4156322,
       2161039, 2905215, 16394952, 14909745, 5865719, 3466799,
       10530327, 7119585, 9213992, 1187295],
      [389336, 3049474, 6513388, 5450197, 4798748, 14366606,
       13772061, 7470299, 13560083, 1717737, 9474729, 14174958,
       13034955, 9656473, 5239207, 5527890]
    ],
    [ //  2 * (16 ** 88) * G
      [13986535, 13283623, 3809912, 15194308, 14048996, 2435414,
       7910045, 16406661, 6248756, 12884925, 7297981, 1565074,
       16230271, 1173063, 2307370, 6181463],
      [13020990, 11768844, 3756929, 8040054, 1018577, 13249243,
       3038581, 1621738, 8862865, 8988986, 15999794, 9470716,
       80093, 7753563, 7437203, 6538380]
    ],
    [ //  3 * (16 ** 88) * G
      [6885790, 4584020, 7245568, 6589187, 9143026, 5925467,
       1108119, 12751025, 14560479, 9961688, 13307066, 11445045,
       9557065, 14410069, 3941098, 1931572],
      [2340911, 14962155, 12986817, 425747, 15194588, 4110402,
       7433121, 9426770, 9569359, 2665364, 86861, 11019159,
       12122099, 9088932, 12127672, 11642728]
    ],
    [ //  4 * (16 ** 88) * G
      [1201269, 12530725, 15035145, 5304735, 7506596, 6355390,
       2512069, 9858959, 579189, 7702049, 6959793, 9063628,
       6642359, 13017652, 10971679, 16458130],
      [7841927, 4946131, 1835700, 7696745, 2959959, 10834920,
       3359417, 7910541, 875516, 1895816, 16556717, 7609850,
       12284494, 676324, 2546270, 13734952]
    ],
    [ //  5 * (16 ** 88) * G
      [713811, 12344180, 586241, 9227058, 8359967, 12649626,
       16424454, 14871046, 6690947, 10296003, 5446883, 13945116,
       1541877, 511049, 7931474, 10150499],
      [485375, 10717058, 553214, 6649094, 12334833, 11951063,
       15628191, 14228416, 8973665, 2852656, 3275827, 9722366,
       15106095, 4373364, 1938797, 11048610]
    ],
    [ //  6 * (16 ** 88) * G
      [13829004, 4615349, 10939448, 13785950, 10559630, 3116731,
       7299640, 5924079, 2602820, 9785499, 11602741, 10464728,
       13848881, 3856501, 11861936, 10698468],
      [13405695, 9004030, 6246937, 16631245, 15170262, 2324444,
       430523, 9434173, 10376896, 8350879, 8293775, 10663602,
       7199864, 5857229, 8085601, 10336550]
    ],
    [ //  7 * (16 ** 88) * G
      [6359388, 7441759, 3184479, 5126453, 3929581, 713167,
       7562900, 987402, 2983878, 332545, 10164244, 3621810,
       2131911, 12754785, 8548415, 14896636],
      [998062, 5946379, 7267360, 3226115, 1966825, 7237415,
       12191577, 11745004, 14361912, 1615415, 15877710, 254589,
       10098025, 1295380, 9727464, 12254548]
    ],
    [ //  8 * (16 ** 88) * G
      [476632, 14161962, 5656881, 11681190, 643809, 5429585,
       4043772, 4177538, 5597036, 8578133, 7066786, 12523208,
       15574427, 9370932, 6559118, 5585140],
      [7434160, 9295464, 12789211, 1386380, 5790668, 5618949,
       8076444, 6880695, 13893483, 2743771, 3351051, 1041835,
       10000797, 51030, 5070762, 13386267]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 89) * G
      [10190660, 12623265, 9652672, 4502645, 13570283, 11260193,
       2040247, 15641944, 9308982, 12645932, 1516063, 4801887,
       14930868, 11071383, 8007954, 3191169],
      [5719498, 374495, 16445038, 10432586, 7592894, 182403,
       9716514, 11238388, 500755, 16502887, 12605277, 2803653,
       12275929, 15264623, 13942850, 8405687]
    ],
    [ //  2 * (16 ** 89) * G
      [6449141, 9258013, 8433168, 6294615, 12280460, 2140938,
       8695106, 1251361, 138297, 7258320, 13401898, 5311497,
       5572098, 3093800, 12626886, 14333294],
      [14882831, 2640060, 14438245, 1444969, 7101558, 8442598,
       1306647, 10047658, 246497, 12267059, 6700122, 1407856,
       7850256, 13857635, 2648346, 5177246]
    ],
    [ //  3 * (16 ** 89) * G
      [13578800, 2781468, 12004083, 7240139, 15771180, 7230127,
       7390169, 14970933, 16076106, 13148638, 15941393, 5046712,
       1035334, 24639, 9240099, 3399253],
      [12378270, 14420110, 11082983, 16528041, 1245725, 7173231,
       4941732, 3423085, 14422165, 5004611, 13287210, 2579624,
       16155150, 7693327, 16585157, 5083691]
    ],
    [ //  4 * (16 ** 89) * G
      [14244012, 98812, 1433260, 11397268, 11895089, 11286657,
       2322812, 1181071, 5784108, 8293943, 7702102, 13183401,
       3373866, 8145138, 1965554, 11450187],
      [12111140, 8528866, 14607721, 4913766, 15828661, 6172010,
       10690298, 10787765, 10987790, 5723638, 4495491, 4889447,
       3955917, 12046247, 1136963, 14652506]
    ],
    [ //  5 * (16 ** 89) * G
      [5084192, 13771988, 4151579, 14690530, 7294600, 2880194,
       15283733, 15156707, 3498982, 10966989, 11892228, 14275755,
       500072, 9707651, 6738800, 8815956],
      [6694856, 4400548, 11746800, 4690730, 12420361, 9801807,
       8357900, 8208444, 96629, 1059032, 10680143, 1775872,
       8468817, 9079396, 4511599, 11648862]
    ],
    [ //  6 * (16 ** 89) * G
      [5147918, 9412221, 9863904, 16692872, 16160730, 9976936,
       9027914, 643920, 10456567, 15961663, 11611313, 15232212,
       6536170, 6298759, 4373286, 12647973],
      [3312460, 1389028, 9513505, 3298743, 9961788, 12429375,
       4221771, 8817564, 15436501, 7005518, 14505849, 10182271,
       13521819, 8543398, 6403510, 9085477]
    ],
    [ //  7 * (16 ** 89) * G
      [8529239, 12514954, 6512774, 8906385, 5444121, 8637276,
       1837782, 5725870, 1166598, 8115154, 6081047, 14304727,
       16336670, 15331474, 14115522, 4064312],
      [11066556, 14389889, 5486212, 8088144, 3879535, 10298537,
       1198368, 37614, 3030356, 6821804, 2160145, 4764028,
       15922147, 2523219, 6797552, 8579596]
    ],
    [ //  8 * (16 ** 89) * G
      [65970, 2383343, 11610263, 4737046, 11237233, 6292807,
       1343476, 11549436, 14422289, 13044126, 7045160, 10299397,
       15425678, 7909568, 405240, 10604072],
      [11057193, 12298473, 7818610, 8480591, 2750278, 14293233,
       12034818, 6806131, 13510512, 9174634, 14796289, 3938053,
       4865917, 4654874, 8134239, 93900]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 90) * G
      [929607, 11858773, 16192158, 7414072, 3660957, 4889699,
       8328165, 4074015, 9929898, 5367805, 4316620, 15365183,
       3397009, 8053388, 10289513, 15638895],
      [8318658, 1295785, 1800094, 3433242, 9175986, 6555212,
       16332639, 7194752, 3966911, 5339172, 10837483, 2096712,
       10496240, 11116427, 3060307, 7966920]
    ],
    [ //  2 * (16 ** 90) * G
      [13581429, 14315687, 10475038, 5216667, 6132734, 1642501,
       1294039, 8614007, 6771675, 2720078, 15207820, 3866489,
       8622138, 5925360, 2578889, 296629],
      [14070343, 3428420, 13189643, 10194271, 14308005, 5571410,
       8473342, 12250821, 8354592, 9354254, 16381711, 8037692,
       873147, 15866653, 14611060, 14480513]
    ],
    [ //  3 * (16 ** 90) * G
      [9902885, 12949127, 13544082, 16077206, 15337942, 1314697,
       11716810, 16005937, 3575665, 6553269, 1446287, 6080601,
       12455868, 14990701, 8729319, 7332607],
      [9648709, 13942765, 14227719, 9330486, 10820602, 8521750,
       9426884, 6334264, 10259157, 4112526, 13932337, 911774,
       4125047, 6275446, 3606804, 2637581]
    ],
    [ //  4 * (16 ** 90) * G
      [5274592, 8581844, 9776420, 16054221, 4201417, 8984495,
       2860868, 14658580, 12072548, 7716198, 8719503, 12113702,
       9487614, 4399659, 2088947, 9940022],
      [4399185, 16559247, 1330750, 16707951, 2095415, 435471,
       7435294, 4882744, 16257329, 9953990, 10066234, 1388948,
       11912235, 864891, 13475670, 12461927]
    ],
    [ //  5 * (16 ** 90) * G
      [1256189, 7267493, 4227170, 5957198, 8264354, 6490558,
       13963037, 13711995, 13199050, 9406713, 5907903, 2532519,
       16588973, 13352510, 6017080, 12113879],
      [13951042, 9588637, 4808485, 8789344, 1579031, 15548529,
       8952174, 12342510, 13392618, 4850817, 1449287, 14696788,
       16195640, 2769292, 13604845, 3230848]
    ],
    [ //  6 * (16 ** 90) * G
      [456633, 13916663, 543690, 3719758, 11264924, 3028686,
       5530145, 7003001, 15279956, 15657141, 1235562, 7282385,
       1615057, 4151651, 3137350, 10203808],
      [3128479, 10014802, 2795691, 2907624, 2795150, 11700984,
       7297815, 15858136, 12084571, 10734335, 622528, 11306982,
       2604309, 9767252, 9452149, 15083294]
    ],
    [ //  7 * (16 ** 90) * G
      [12224457, 6942143, 16619651, 11873365, 14219932, 2057134,
       10797162, 9733597, 3116646, 16500076, 5798848, 8004168,
       9873978, 8733762, 1256077, 2032923],
      [12815077, 12011314, 5824867, 14921405, 7626552, 2286839,
       11358952, 10136840, 16406004, 2043257, 9574045, 15405013,
       9321781, 11755139, 11312692, 12922573]
    ],
    [ //  8 * (16 ** 90) * G
      [5194447, 11703468, 13739160, 7680142, 824990, 3274010,
       2272072, 4825284, 7001315, 8509049, 13271734, 9694774,
       12085251, 15747503, 7363629, 14726640],
      [10857159, 1514573, 11621932, 12223386, 14348173, 3973428,
       2137468, 12064008, 5846317, 13296583, 7383969, 4701236,
       16013145, 6783688, 4975593, 5666579]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 91) * G
      [13260459, 14601292, 979482, 10687019, 7830270, 11962969,
       15197662, 8260949, 1528800, 7530928, 5517234, 9135689,
       1881642, 2331538, 13763769, 13904459],
      [1655683, 9974746, 16631331, 11359665, 13810993, 10112692,
       10549913, 11557000, 8237351, 4636186, 12344398, 15349556,
       7341434, 13265065, 10165044, 7033274]
    ],
    [ //  2 * (16 ** 91) * G
      [8984355, 518994, 265285, 11169875, 2437751, 9504569,
       6853024, 14516684, 9603390, 6925365, 5277196, 14509426,
       14861586, 5184151, 1919155, 6499174],
      [15316527, 12456532, 7567603, 10979549, 13553122, 8303865,
       6253857, 7944963, 15751404, 16112434, 2187933, 9506408,
       8685707, 7285812, 1631462, 4755602]
    ],
    [ //  3 * (16 ** 91) * G
      [16113054, 11174224, 14581581, 13599942, 11157993, 1934038,
       6504499, 280291, 5045130, 13550107, 7287171, 9512026,
       2240652, 12944098, 9036113, 9488239],
      [4078412, 1761730, 6750550, 3843975, 5426349, 14632899,
       14297659, 2673942, 8920971, 10847895, 24896, 3930975,
       10978652, 9119035, 9099173, 1669931]
    ],
    [ //  4 * (16 ** 91) * G
      [1764140, 5307437, 13962839, 15155509, 3334935, 15497838,
       16685371, 299053, 1689693, 5284044, 2735215, 13279657,
       5181796, 1267487, 5434640, 8898073],
      [12849603, 4441750, 4611226, 15855483, 3350261, 14681068,
       179004, 9284047, 4187167, 11752135, 4069683, 5724998,
       16576999, 6787740, 887116, 825161]
    ],
    [ //  5 * (16 ** 91) * G
      [5071270, 15448761, 2303156, 1588437, 502647, 3735991,
       6897952, 2915454, 7314516, 11976492, 5935903, 11378939,
       14113466, 12542902, 3114250, 8128139],
      [9286728, 13615492, 12266181, 16003457, 16564270, 3255260,
       4042819, 12756726, 13621339, 13980770, 10378741, 8879741,
       12837740, 10745005, 4753749, 10945042]
    ],
    [ //  6 * (16 ** 91) * G
      [13252349, 11179645, 3782471, 9030891, 9686106, 6087590,
       1858947, 9045213, 7805032, 16732150, 12087797, 9056149,
       4196390, 8747315, 13424400, 5424597],
      [16647268, 3860479, 12685616, 13354571, 9136573, 8929941,
       1379894, 6801346, 7441399, 1619699, 15704188, 13731006,
       16679202, 12133717, 14745353, 10444410]
    ],
    [ //  7 * (16 ** 91) * G
      [5611137, 14035235, 9716838, 5544359, 14078888, 15006239,
       13137318, 5020881, 16027917, 5268641, 1730071, 2637284,
       8637121, 13344739, 13491682, 13150501],
      [4005633, 84947, 2859653, 2106179, 16454303, 16179262,
       12135550, 14769612, 2513974, 16435577, 3681173, 11580899,
       143130, 4986489, 15746147, 2219825]
    ],
    [ //  8 * (16 ** 91) * G
      [9326784, 7616752, 9365201, 16472351, 15217976, 11696270,
       4937723, 7198732, 972843, 14847501, 15682721, 10607560,
       5071309, 9621951, 13343302, 13175400],
      [9487058, 11151317, 11812429, 7337887, 9992515, 16239413,
       7289950, 13324056, 12998317, 247274, 15030670, 9308982,
       7349685, 10089868, 9820138, 13740999]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 92) * G
      [10752852, 12167218, 14299227, 5843393, 861682, 3012533,
       10273197, 337634, 11347233, 12780499, 8709982, 5962181,
       14711028, 4202807, 9656315, 7716149],
      [11522186, 10824046, 4559872, 3084156, 2993447, 15597725,
       16603834, 11072917, 3466998, 11237931, 10502091, 3479865,
       5557492, 10975556, 10238864, 13957885]
    ],
    [ //  2 * (16 ** 92) * G
      [6734064, 1454235, 674284, 11125041, 8517554, 1809840,
       2566597, 4189219, 12923083, 13373575, 4669968, 14458536,
       4781157, 2713499, 2240809, 5645983],
      [2329439, 6258825, 11155210, 16435639, 8075162, 12491778,
       16257531, 8009946, 16675564, 10074051, 13425556, 14766849,
       6575826, 6567455, 13202876, 14081487]
    ],
    [ //  3 * (16 ** 92) * G
      [423860, 14371271, 8959361, 7202446, 1308177, 14483813,
       11381287, 15625245, 14991272, 3248304, 8861696, 9909894,
       7942880, 11256807, 11654431, 2191156],
      [3278724, 4097841, 15786271, 1138707, 67481, 1530123,
       1928033, 207899, 3540717, 3639932, 2810913, 10740262,
       16721448, 16340193, 3392288, 7054325]
    ],
    [ //  4 * (16 ** 92) * G
      [2894964, 11422371, 1418583, 15532235, 15583536, 15673409,
       10495200, 16764567, 16309856, 12874705, 7383785, 12993803,
       404233, 5795575, 775878, 13393434],
      [10231398, 14975513, 15629430, 16512825, 14517204, 10342507,
       14017397, 4089173, 10681085, 3463575, 14333883, 8423465,
       14457303, 2898145, 3826317, 10503532]
    ],
    [ //  5 * (16 ** 92) * G
      [221844, 1370436, 7338768, 16452216, 15928009, 4436061,
       16216888, 10106562, 11758956, 10232767, 3045782, 2045573,
       13696460, 14482923, 14129884, 8637054],
      [5265237, 3809851, 2218022, 10754454, 14530661, 5021626,
       9365528, 4684318, 11153339, 11682600, 6471043, 5854799,
       15780570, 8888892, 12371699, 3325627]
    ],
    [ //  6 * (16 ** 92) * G
      [6420828, 4269309, 13534579, 12347629, 15673271, 4095510,
       7721919, 15942991, 6000812, 11510184, 11556303, 10505786,
       3540178, 2523804, 2585196, 4191534],
      [5514078, 12741464, 7788064, 8909263, 16151844, 14372332,
       10166326, 5747348, 13471175, 10009320, 2569554, 16652234,
       2542692, 5895309, 5547049, 433789]
    ],
    [ //  7 * (16 ** 92) * G
      [6032239, 6836492, 14524951, 5819696, 3643292, 1086492,
       11757569, 16247952, 6794518, 1547094, 10705051, 5372645,
       7680865, 6696410, 16322404, 15904783],
      [14038929, 1978422, 15839493, 2687244, 2985657, 16426699,
       13924634, 9568327, 12996916, 1337594, 7480707, 6675510,
       15382311, 4424997, 12471078, 12253629]
    ],
    [ //  8 * (16 ** 92) * G
      [3296228, 3207064, 11660355, 9604192, 11892009, 4202762,
       58346, 10371677, 2034941, 15085764, 10913489, 8962770,
       13195281, 10258548, 11596485, 14587165],
      [15596528, 9778599, 1812387, 15634189, 2240016, 9146570,
       3333982, 8590440, 6238790, 16370379, 9096950, 7234010,
       11806656, 1248508, 7850654, 15475833]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 93) * G
      [16568118, 2881125, 9274470, 11020513, 4139678, 8209605,
       7777755, 3418657, 4976651, 12640800, 13482238, 7128575,
       12410525, 4201670, 9404454, 4697329],
      [12923631, 2835600, 4418545, 4159761, 4502728, 4258438,
       15129068, 10742622, 13023762, 12715024, 8073432, 15405035,
       2356255, 5971724, 11935597, 1889390]
    ],
    [ //  2 * (16 ** 93) * G
      [5858839, 5313864, 12807067, 14495423, 15544854, 7171916,
       7711953, 661808, 2621967, 16439060, 12020506, 14504340,
       376956, 10837443, 16391708, 10647096],
      [8685448, 1433055, 2350028, 6316479, 8092302, 8954633,
       11638866, 6466026, 14442126, 13474298, 13475193, 4726770,
       16380107, 4910458, 6885800, 16046286]
    ],
    [ //  3 * (16 ** 93) * G
      [2350780, 10978676, 2562199, 11769610, 490972, 11792453,
       7386893, 7270921, 3855810, 4015213, 5688099, 3409047,
       8659039, 6448902, 4573570, 5670040],
      [5663010, 3344416, 14329802, 1959379, 5873438, 14934261,
       8983271, 7758315, 5669803, 6062160, 14801107, 9443674,
       8454238, 401733, 4516949, 9038072]
    ],
    [ //  4 * (16 ** 93) * G
      [6596305, 1670503, 10162839, 14285674, 2720183, 146088,
       15098260, 12513689, 15641499, 11329274, 5745602, 14791138,
       15170589, 2866521, 10570048, 11866095],
      [11845917, 6039794, 8512073, 2771581, 7913992, 13328738,
       16620532, 14028068, 5981997, 7358218, 16300426, 8205287,
       9354897, 2435372, 4551746, 11356825]
    ],
    [ //  5 * (16 ** 93) * G
      [15948389, 3568405, 15827872, 7523053, 14628793, 7481542,
       8716950, 1705206, 13468835, 9550859, 6346266, 5220514,
       10788277, 2099293, 10623488, 9305219],
      [6464797, 14364000, 10138876, 15983974, 8077815, 818199,
       10468499, 16496651, 7322788, 11821257, 7979626, 11336163,
       12059705, 3514, 4808185, 3854458]
    ],
    [ //  6 * (16 ** 93) * G
      [13435250, 15225371, 5086824, 6452484, 2169390, 3288377,
       5563173, 7700780, 15699106, 201252, 5480688, 10244334,
       7054479, 16019132, 15523837, 3711961],
      [8590843, 10025130, 2641167, 6090496, 16099475, 9994051,
       13791323, 16711662, 5486627, 11704201, 16370346, 12443858,
       7566498, 3943843, 14852913, 12864814]
    ],
    [ //  7 * (16 ** 93) * G
      [10710066, 7067455, 5772252, 5776920, 16396009, 7074916,
       1387482, 5606452, 11195228, 86414, 2989532, 16486108,
       8243949, 11598777, 4987973, 9280201],
      [4398447, 7546665, 6679864, 13333980, 4457532, 1333354,
       8897534, 10200631, 565606, 15768966, 3194895, 16193489,
       2355747, 12760748, 7658463, 1241218]
    ],
    [ //  8 * (16 ** 93) * G
      [7540567, 5674078, 12396493, 7380765, 8361376, 11921288,
       2394912, 11530562, 6779281, 10086877, 14560092, 11734604,
       7872384, 15311961, 2435152, 1493549],
      [13836341, 11295886, 1280138, 11330251, 880280, 11834905,
       6703276, 13787182, 10496262, 14000613, 8808768, 7249249,
       2235112, 4384144, 3095166, 13946592]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 94) * G
      [2045742, 15416756, 4869397, 5510025, 11054286, 5982632,
       13268326, 15856447, 2314910, 1716221, 7729265, 14187082,
       16763594, 4011863, 14352145, 2638260],
      [16429641, 1413321, 7848472, 14368283, 5778868, 5078722,
       9477372, 1846584, 5574232, 9082133, 15701677, 5414819,
       8714751, 1626481, 15276627, 8144165]
    ],
    [ //  2 * (16 ** 94) * G
      [3395409, 12570104, 14798005, 16396169, 16154679, 16435581,
       7459470, 10371665, 11280920, 12805485, 7617162, 4720235,
       9915605, 8103239, 12892096, 8655760],
      [2245531, 15077609, 6024485, 2629667, 7938977, 3461987,
       12175316, 12961474, 16085079, 9371686, 95353, 6425349,
       802510, 3342651, 14101763, 4423196]
    ],
    [ //  3 * (16 ** 94) * G
      [10360644, 6713103, 8883055, 5887786, 14935369, 11915736,
       9094034, 13104461, 1430228, 14771272, 15756031, 15018239,
       791616, 3941902, 14315479, 4663370],
      [3479565, 4152341, 2201476, 13527838, 4597506, 2748729,
       3817588, 11231006, 10407101, 15992231, 12357324, 13691186,
       6183827, 10104293, 9429726, 15695173]
    ],
    [ //  4 * (16 ** 94) * G
      [10436075, 7546427, 11941055, 3501934, 12622148, 13884243,
       14292003, 8836486, 3073304, 9372981, 869420, 9193849,
       2019421, 255725, 6345836, 12495270],
      [2072817, 8969188, 8241487, 13283867, 15095789, 8023190,
       15759926, 12033664, 9390606, 3716422, 3111251, 16395556,
       11680916, 4908362, 16742361, 8751426]
    ],
    [ //  5 * (16 ** 94) * G
      [15892265, 7822653, 8808916, 7789585, 10428713, 12699933,
       13836614, 6058778, 2831351, 13927474, 4375659, 8176057,
       1492851, 11283996, 7779891, 793949],
      [16272205, 2390320, 4859106, 10826106, 2087215, 9769631,
       11871914, 4471365, 7311284, 14067678, 7608473, 10123468,
       13494261, 5487979, 6880007, 8396459]
    ],
    [ //  6 * (16 ** 94) * G
      [6163676, 8563040, 13710920, 14549397, 10444136, 14949749,
       15672520, 7942256, 10784146, 10681275, 2421858, 5317065,
       11981761, 1086057, 1165352, 11727443],
      [9627670, 3487891, 12632377, 169794, 13604680, 516165,
       1623301, 551840, 7784434, 867198, 6448122, 284869,
       16132001, 5956092, 10844619, 6869140]
    ],
    [ //  7 * (16 ** 94) * G
      [442368, 11724428, 4405934, 1741555, 16446062, 329882,
       3023303, 9765423, 3374171, 2514047, 3287901, 4929623,
       15743378, 1964727, 5550902, 10380349],
      [10519962, 15562839, 2550355, 4293750, 3566604, 1275635,
       3159639, 13966062, 962015, 9024123, 16147137, 3298275,
       5537740, 16269862, 11077429, 8311018]
    ],
    [ //  8 * (16 ** 94) * G
      [8103096, 4663113, 5900384, 8130403, 5053253, 2253374,
       12935060, 3777003, 5811596, 8058178, 819742, 14812654,
       8311567, 7854188, 4113039, 1821557],
      [3702316, 10194370, 6214996, 9708561, 15201504, 8812302,
       2074601, 8669774, 8719605, 6323610, 16764566, 11067575,
       9477719, 5140263, 1423324, 10318079]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 95) * G
      [12098873, 15077117, 5337386, 2357307, 12532816, 7874874,
       2235932, 12949609, 5025235, 5998002, 16659929, 4237829,
       11021111, 14219253, 4581365, 1294062],
      [7608938, 10404319, 8693418, 8318166, 5053495, 161361,
       15700416, 1342858, 2182817, 1747475, 6864349, 12225032,
       12245402, 15937813, 15355649, 4409399]
    ],
    [ //  2 * (16 ** 95) * G
      [4833522, 10038997, 8421043, 11047239, 4580856, 14318941,
       7106683, 13513627, 10284977, 3307354, 2104604, 3554495,
       13297215, 4603861, 15963144, 9399431],
      [5121295, 14048585, 7085568, 16612259, 8716942, 3418902,
       10563754, 9314035, 1190271, 3673398, 89247, 5869721,
       404310, 3253768, 7701578, 8187708]
    ],
    [ //  3 * (16 ** 95) * G
      [5819858, 6428780, 8617328, 10215641, 9871505, 7946062,
       14750177, 463433, 8103465, 2950751, 1614600, 2309062,
       10356685, 4397647, 12009800, 2774549],
      [6622275, 2631685, 242017, 5407477, 8887719, 6268648,
       2136451, 555873, 15007650, 10483775, 8940245, 16524334,
       9204900, 10593900, 220156, 5234172]
    ],
    [ //  4 * (16 ** 95) * G
      [3027684, 7948794, 5570388, 7850644, 12774795, 6942597,
       8058034, 7390085, 12975100, 14459947, 6545879, 5388590,
       10626659, 6893850, 16096809, 15329132],
      [5234436, 14055304, 6144254, 2429196, 14026012, 4934710,
       14310513, 2922032, 5724359, 5054478, 2434916, 2939458,
       6310818, 8773317, 1314619, 4468564]
    ],
    [ //  5 * (16 ** 95) * G
      [768916, 7843680, 14999903, 6729403, 13668441, 12702324,
       5697939, 12878818, 8823285, 7649460, 16314245, 8051359,
       13997179, 12855431, 5178049, 5350493],
      [14237459, 3744724, 13055425, 6362229, 7470114, 1761690,
       14007299, 2924295, 10043965, 1857702, 13816953, 8224031,
       3882760, 13258006, 860280, 10157355]
    ],
    [ //  6 * (16 ** 95) * G
      [12252853, 12094743, 9681319, 2946757, 13176941, 12760353,
       5872021, 11344337, 14966431, 12455323, 569582, 6136378,
       10415371, 15973830, 16428862, 15779011],
      [7565276, 6121509, 2086227, 590139, 14400411, 14118262,
       16564546, 8770521, 1824118, 10022340, 16330289, 14444847,
       4252069, 14349268, 14680395, 12094290]
    ],
    [ //  7 * (16 ** 95) * G
      [1112202, 655078, 3645090, 12705552, 16533393, 14684970,
       11677364, 12684890, 14019913, 3552042, 2713061, 6766576,
       8092709, 7790566, 4655663, 15380377],
      [6646618, 16025655, 15445702, 10434115, 8473788, 14427577,
       10183157, 4111650, 3283866, 16069013, 4994944, 5129783,
       14103335, 12937901, 6091466, 7069907]
    ],
    [ //  8 * (16 ** 95) * G
      [1448631, 5262667, 15099118, 11370671, 1448824, 7235187,
       1321241, 5914717, 16351057, 5206723, 8829857, 14101493,
       5122868, 570951, 14358018, 14934620],
      [3373772, 3692972, 1138496, 14520585, 2149112, 10370961,
       12700752, 2175049, 204278, 498994, 13302970, 8303527,
       16484826, 6904153, 5067842, 3633334]
    ]
  ],
  [
    null,
    [ //  1 * (16 ** 96) * G
      [14452828, 3142311, 16439533, 1243361, 10085195, 380596,
       3749842, 8303359, 1211382, 8644773, 1810195, 14076271,
       15183201, 14345481, 8189204, 8371174],
      [12354879, 8200271, 4553726, 2187923, 11339658, 10604064,
       4296721, 3608632, 12715586, 632108, 4860517, 7867230,
       15459746, 6578730, 1706549, 816468]
    ]
  ]
];

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 *
 * @fileoverview Public domain parameters for prime curves.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.ecc.DomainParam');
goog.provide('e2e.ecc.PrimeCurve');
goog.provide('e2e.ecc.PrimeCurveOid');

goog.require('e2e.BigNum');
goog.require('e2e.BigPrimeNum');
goog.require('e2e.FastModulus');
goog.require('e2e.ecc.constant');
goog.require('e2e.ecc.constant.ed_25519.G_FAST_MULTIPLY_TABLE');
goog.require('e2e.ecc.constant.p_256.G_FAST_MULTIPLY_TABLE');
goog.require('e2e.ecc.constant.p_384.G_FAST_MULTIPLY_TABLE');
goog.require('e2e.ecc.curve.Curve25519');
goog.require('e2e.ecc.curve.Ed25519');
goog.require('e2e.ecc.curve.Nist');
goog.require('e2e.ecc.fastModulus.Curve25519');
goog.require('e2e.ecc.fastModulus.Nist');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('e2e.error.UnsupportedError');
goog.require('e2e.hash.Sha512');
goog.require('e2e.random');
goog.require('goog.array');
goog.require('goog.asserts');


/**
 * Prime curves.
 * @enum {string}
 */
e2e.ecc.PrimeCurve = {
  'P_256': 'P_256',
  'P_384': 'P_384',
  'P_521': 'P_521',
  'CURVE_25519': 'CURVE_25519',
  'ED_25519': 'ED_25519'
};


/**
 * Prime curve OIDs (including the one-byte length prefix), as defined in
 *     section 11 in RFC 6637.
 * @enum {!e2e.ByteArray}.
 */
e2e.ecc.PrimeCurveOid = {
  // First byte is the length of what comes next.
  'P_256': [0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07],
  'P_384': [0x05, 0x2B, 0x81, 0x04, 0x00, 0x22],
  'P_521': [0x05, 0x2B, 0x81, 0x04, 0x00, 0x23]
};


/**
 * Representation of domain parameters for prime curves.
 * @param {!e2e.ecc.curve.Curve} curve The elliptic curve.
 * @param {!e2e.ecc.point.Point} g The base point.
 * @param {!e2e.BigPrimeNum} n The order of the base point.
 * @constructor
 */
e2e.ecc.DomainParam = function(curve, g, n) {
  this.curve = curve;
  this.g = g;
  this.n = n;
  goog.asserts.assert(g);
  // Expensive sanity check.  Documentation claims that asserts are
  // elided if code is compiled.  But this is such an expensive
  // test that we're being paranoid.
  goog.asserts.assert(!goog.asserts.ENABLE_ASSERTS ||
      g.multiply(n).isIdentity());
};


/**
 * Gets curve's name from curve's OID.
 * @param {e2e.ecc.PrimeCurveOid} curveOid Curve's OID (including
 *     the one-byte length prefix), as defined in section 11 in RFC 6637.
 * @return {e2e.ecc.PrimeCurve}
 */
e2e.ecc.DomainParam.curveNameFromCurveOid = function(curveOid) {
  if (goog.array.equals(curveOid, e2e.ecc.PrimeCurveOid.P_256)) {
    return e2e.ecc.PrimeCurve.P_256;
  } else if (goog.array.equals(curveOid, e2e.ecc.PrimeCurveOid.P_384)) {
    return e2e.ecc.PrimeCurve.P_384;
  } else if (goog.array.equals(curveOid, e2e.ecc.PrimeCurveOid.P_521)) {
    return e2e.ecc.PrimeCurve.P_521;
  }
  throw new e2e.error.UnsupportedError('Invalid curve OID');
};


/**
 * Gets curve OID from curve's name.
 * @param {e2e.ecc.PrimeCurve} curveName The name of the curve.
 * @return {?e2e.ecc.PrimeCurveOid}
 */
e2e.ecc.DomainParam.curveOidFromCurveName = function(curveName) {
  if (curveName == e2e.ecc.PrimeCurve.P_256) {
    return e2e.ecc.PrimeCurveOid.P_256;
  } else if (curveName == e2e.ecc.PrimeCurve.P_384) {
    return e2e.ecc.PrimeCurveOid.P_384;
  } else if (curveName == e2e.ecc.PrimeCurve.P_521) {
    return e2e.ecc.PrimeCurveOid.P_521;
  }
  // TODO(user): figure out the curve OID for Curve25519 and Ed25519.
  return null;
};


/**
 * The curve.
 * @type {!e2e.ecc.curve.Curve}
 */
e2e.ecc.DomainParam.prototype.curve;


/**
 * The base point.
 * @type {!e2e.ecc.point.Point}
 */
e2e.ecc.DomainParam.prototype.g;


/**
 * The order of the base point.
 * @type {!e2e.BigPrimeNum}
 */
e2e.ecc.DomainParam.prototype.n;


/**
 * Obtains the set of domain parameters for a particular curve.
 * @param {!e2e.ecc.PrimeCurve} curveName The curve to retrieve.
 * @return {!e2e.ecc.DomainParam}
 */
e2e.ecc.DomainParam.fromCurve = function(curveName) {
  if (curveName in e2e.ecc.DomainParam) {
    // already generated this curve.
    return e2e.ecc.DomainParam[curveName];
  }
  var result;
  switch (curveName) {
    case e2e.ecc.PrimeCurve.P_256:
    case e2e.ecc.PrimeCurve.P_384:
      result = e2e.ecc.DomainParam.NIST.fromCurve(curveName);
      break;
    case e2e.ecc.PrimeCurve.CURVE_25519:
      result = e2e.ecc.DomainParam.Curve25519.fromCurve(curveName);
      break;
    case e2e.ecc.PrimeCurve.ED_25519:
      result = e2e.ecc.DomainParam.Ed25519.fromCurve(curveName);
      break;
    default:
      throw new e2e.error.UnsupportedError(
          'Curve is not known or not supported');
  }
  e2e.ecc.DomainParam[curveName] = result;
  return result;
};


/**
 * @typedef {?{privateKey: !e2e.ByteArray,
 *             publicKey: !e2e.ByteArray,
 *             privateKeyBigNum: ?e2e.BigNum,
 *             publicKeyPoint: !e2e.ecc.point.Point}}
 */
e2e.ecc.DomainParam.KeyPair;


/**
 * Generates a key pair used in ECC protocols.
 * @param {!e2e.ByteArray=} opt_privateKey  An optional already known
 *     private key.  If not given, a random key will be created.
 * @return {!e2e.ecc.DomainParam.KeyPair}
 */
e2e.ecc.DomainParam.prototype.generateKeyPair = goog.abstractMethod;


/**
 * Calculates the shared secret.
 * This code assumes that the public key has already been vetted and known
 * to be a reasonable public key.
 *
 * @param {!e2e.ecc.point.Point} peerPublicKey The peer's public key.
 * @param {!e2e.BigNum} myPrivateKey My private key.
 * @return {!e2e.ByteArray}
 */
e2e.ecc.DomainParam.prototype.calculateSharedSecret =
    goog.abstractMethod;


/**
 * Returns the BigNum corresponding to a byte array representing a secret key
 * @param {!e2e.ByteArray} p The byte array represent the private key
 * @return {!e2e.BigNum}
 */
e2e.ecc.DomainParam.prototype.bigNumFromPrivateKey =
    goog.abstractMethod;



/**
 * Representation of domain parameters for NIST prime curves.
 * @constructor
 * @extends {e2e.ecc.DomainParam}
 * @param {!e2e.ecc.curve.Curve} curve The elliptic curve.
 * @param {!e2e.ecc.point.Point} g The base point.
 * @param {!e2e.BigPrimeNum} n The order of the base point.
 */
e2e.ecc.DomainParam.NIST = function(curve, g, n) {
  e2e.ecc.DomainParam.NIST.base(this, 'constructor', curve, g, n);
};
goog.inherits(e2e.ecc.DomainParam.NIST, e2e.ecc.DomainParam);


/**
 * Representation of domain parameters for NIST prime curves.  These values
 * are defined in
 *    http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf
 * @param {!e2e.ecc.PrimeCurve} curveName The domain params to retrieve.
 * @return {!e2e.ecc.DomainParam.NIST}
 */
e2e.ecc.DomainParam.NIST.fromCurve = function(curveName) {
  var constants, fastModulus, fastMultiplyTable;
  if (curveName == e2e.ecc.PrimeCurve.P_256) {
    constants = e2e.ecc.constant.P_256;
    fastModulus = e2e.ecc.fastModulus.Nist.P_256;
    fastMultiplyTable = e2e.ecc.constant.p_256.G_FAST_MULTIPLY_TABLE;
  } else {
    constants = e2e.ecc.constant.P_384;
    fastModulus = e2e.ecc.fastModulus.Nist.P_384;
    fastMultiplyTable = e2e.ecc.constant.p_384.G_FAST_MULTIPLY_TABLE;
  }
  var q = new e2e.BigPrimeNum(constants.Q);  // prime field
  var b = new e2e.BigPrimeNum(constants.B);  // parameter of curve
  q.setFastModulusType(fastModulus);
  var curve = new e2e.ecc.curve.Nist(q, b);

  var g = curve.pointFromByteArray(constants.G);
  g.setFastMultiplyTable(fastMultiplyTable);
  var n = new e2e.BigPrimeNum(constants.N);  // order of group
  n.setFastModulusType(e2e.FastModulus.FFFFFF);
  return new e2e.ecc.DomainParam.NIST(curve, g, n);
};


/**
 * Generates a random private key in the range [1, N-1] as described
 * in section B.4.2 of FIPS-186-4.
 *
 * @override
 */
e2e.ecc.DomainParam.NIST.prototype.generateKeyPair = function(
    opt_privateKey) {
  var privateKey;
  var expectedKeyLength = Math.ceil(this.curve.keySizeInBits() / 8);
  var count = 0;
  do {
    if (goog.isDefAndNotNull(opt_privateKey)) {
      if (count++ != 0) {
        throw new e2e.error.InvalidArgumentsError(
            'Bad private key');
      }
      goog.asserts.assert(opt_privateKey.length == expectedKeyLength,
          'Private key length must be ' + expectedKeyLength + ' bytes');
      privateKey = opt_privateKey;
    } else {
      privateKey = e2e.random.getRandomBytes(expectedKeyLength);
      // remove extra bits (if any) in the high-order byte
      privateKey[0] >>= (8 * expectedKeyLength - this.curve.keySizeInBits());
    }
    var multiplier = new e2e.BigNum(privateKey);
  } while (multiplier.isEqual(e2e.BigNum.ZERO) ||
           multiplier.compare(this.n) >= 0);
  var publicKey = this.g.multiply(multiplier);
  return {
    'privateKey': privateKey,
    'publicKey': publicKey.toByteArray(),
    'privateKeyBigNum': multiplier,
    'publicKeyPoint': publicKey
  };
};


/** @override */
e2e.ecc.DomainParam.NIST.prototype.calculateSharedSecret = function(
    peerPublicKey, myPrivateKey) {
  var S = peerPublicKey.multiply(myPrivateKey);
  if (S.isInfinity()) {
    throw new e2e.error.InvalidArgumentsError(
        'ECDH: Cannot derive shared secret.');
  }
  return S.getX().toBigNum().toByteArray();
};


/** @override */
e2e.ecc.DomainParam.NIST.prototype.bigNumFromPrivateKey = function(p) {
  return new e2e.BigNum(p);
};



/**
 * Representation of domain parameters for Curve25519 prime curves.
 * @constructor
 * @extends {e2e.ecc.DomainParam}
 * @param {!e2e.ecc.curve.Curve} curve The elliptic curve.
 * @param {!e2e.ecc.point.Point} g The base point.
 * @param {!e2e.BigPrimeNum} n The order of the base point.
 */
e2e.ecc.DomainParam.Curve25519 = function(curve, g, n) {
  e2e.ecc.DomainParam.Curve25519.base(this, 'constructor', curve, g, n);
};
goog.inherits(e2e.ecc.DomainParam.Curve25519,
    e2e.ecc.DomainParam);


/**
 * Representation of domain parameters for Curve25519 prime curves.
 * @param {!e2e.ecc.PrimeCurve} curveName The domain params to retrieve.
 * @return {!e2e.ecc.DomainParam.Curve25519}
 */
e2e.ecc.DomainParam.Curve25519.fromCurve = function(curveName) {
  goog.asserts.assert(curveName == e2e.ecc.PrimeCurve.CURVE_25519);
  var constants = e2e.ecc.constant.CURVE_25519;

  var q = new e2e.BigPrimeNum(constants.Q);  // prime field
  q.setFastModulus(new e2e.ecc.fastModulus.Curve25519(q));
  var curve = new e2e.ecc.curve.Curve25519(q);

  var g = curve.POINT_AT_NINE;
  var n = new e2e.BigPrimeNum(constants.N);  // order of group
  n.setFastModulusType(e2e.FastModulus.Ox1000000);
  return new e2e.ecc.DomainParam.Curve25519(curve, g, n);
};


/** @override */
e2e.ecc.DomainParam.Curve25519.prototype.generateKeyPair = function(
    opt_privateKey) {
  // A private key is any sequence of 32 bytes
  var privateKey;
  if (goog.isDefAndNotNull(opt_privateKey)) {
    goog.asserts.assert(opt_privateKey.length == 32,
        'Private key length must be 32 bytes');
    privateKey = opt_privateKey;
  } else {
    privateKey = e2e.random.getRandomBytes(32);
  }
  // Clamp a copy of the private key
  var p = privateKey.slice();
  p[0] &= ~7;  // Must be a multiple of 8
  p[31] = (p[31] & 63) | 64;  // high bit clear, next higher bit set.
  // Use that clamped private key as a little-endian bignum, and scalar
  // multiply the base.
  var multiplier = new e2e.BigNum(p.reverse());
  var publicKey = this.g.multiply(multiplier);
  return {
    'privateKey': privateKey,
    'publicKey': publicKey.toByteArray(),
    'privateKeyBigNum': multiplier,
    'publicKeyPoint': publicKey
  };
};


/** @override */
e2e.ecc.DomainParam.Curve25519.prototype.calculateSharedSecret =
function(peerPublicKey, myPrivateKey) {
  var p = myPrivateKey.toByteArray().reverse();
  p[0] &= ~7;  // Must be a multiple of 8
  p[31] = (p[31] & 63) | 64;  // high bit clear, next higher bit set.

  var S = peerPublicKey.multiply(new e2e.BigNum(p.reverse()));
  return S.toByteArray();
};


/** @override */
e2e.ecc.DomainParam.Curve25519.prototype.bigNumFromPrivateKey =
function(p) {
  return new e2e.BigNum(p.slice().reverse());
};



/**
 * Representation of domain parameters for Ed5519 prime curves.
 * @constructor
 * @extends {e2e.ecc.DomainParam}
 * @param {!e2e.ecc.curve.Curve} curve The elliptic curve.
 * @param {!e2e.ecc.point.Point} g The base point.
 * @param {!e2e.BigPrimeNum} n The order of the base point.
 */
e2e.ecc.DomainParam.Ed25519 = function(curve, g, n) {
  e2e.ecc.DomainParam.Ed25519.base(this, 'constructor', curve, g, n);
};
goog.inherits(e2e.ecc.DomainParam.Ed25519, e2e.ecc.DomainParam);


/**
 * Representation of domain parameters for Ed5519 prime curves.
 * @param {!e2e.ecc.PrimeCurve} curveName The domain params to retrieve.
 * @return {!e2e.ecc.DomainParam.Ed25519}
 */
e2e.ecc.DomainParam.Ed25519.fromCurve = function(curveName) {
  goog.asserts.assert(curveName == e2e.ecc.PrimeCurve.ED_25519);
  var constants = e2e.ecc.constant.CURVE_25519;

  var q = new e2e.BigPrimeNum(constants.Q);  // prime field
  q.setFastModulus(new e2e.ecc.fastModulus.Curve25519(q));
  var curve = new e2e.ecc.curve.Ed25519(q);

  var g = /** @type {e2e.ecc.point.Point} */ (curve.B);
  g.setFastMultiplyTable(e2e.ecc.constant.ed_25519.G_FAST_MULTIPLY_TABLE);
  var n = new e2e.BigPrimeNum(constants.N);  // order of group
  n.setFastModulusType(e2e.FastModulus.Ox1000000);
  return new e2e.ecc.DomainParam.Ed25519(curve, g, n);
};


/** @override */
e2e.ecc.DomainParam.Ed25519.prototype.generateKeyPair = function(
    opt_privateKey) {
  var privateKey;
  if (goog.isDefAndNotNull(opt_privateKey)) {
    goog.asserts.assert(opt_privateKey.length == 32,
        'Private key length must be 32 bytes');
    privateKey = opt_privateKey;
  } else {
    privateKey = e2e.random.getRandomBytes(32);
  }
  var hash = new e2e.hash.Sha512();
  var expandedKey = this.expandPrivateKey(hash, privateKey);
  var a = expandedKey.multiplier;
  var publicKey = this.g.multiply(a);
  return {
    'privateKey': privateKey,
    'privateKeyBigNum': null,
    'publicKey': publicKey.toByteArray(),
    'publicKeyPoint': publicKey
  };
};


/** @override */
e2e.ecc.DomainParam.Ed25519.prototype.calculateSharedSecret = function(
    peerPublicKey, myPrivateKey) {
  throw new e2e.error.InvalidArgumentsError(
      'ECDH: Cannot derive shared secret.');
};


/** @override */
e2e.ecc.DomainParam.Ed25519.prototype.bigNumFromPrivateKey =
function(p) {
  return new e2e.BigNum(p.slice().reverse());
};


/**
 * Expands a 32-byte private key into 64 bytes.  The low 32bytes are converted
 * to a multiplier to be used to calculate the public key.  The high 32 bytes
 * are returned as extra bytes
 * @param {!e2e.hash.Hash} hash The hasher
 * @param {!e2e.ByteArray} privateKey  The private key.
 * @return {{multiplier: !e2e.BigNum, extra: !e2e.ByteArray}}
 */
e2e.ecc.DomainParam.Ed25519.prototype.expandPrivateKey = function(hash,
    privateKey) {
  var digest = hash.hash(privateKey);
  goog.asserts.assert(digest.length == 64, 'Digest length must be 64 bytes');

  // Clamp the low 32 bytes of the expanded private key to use as a multiplier
  var bytes = digest.slice(0, 32);
  bytes[0] &= ~7;
  bytes[31] = (bytes[31] & 63) | 64;
  var a = this.bigNumFromPrivateKey(bytes);

  return {
    multiplier: a,
    extra: digest.slice(32)
  };
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Super class containing shared functions of common ECC
 *     protocols such as ECDH or ECDSA.
 * @author thaidn@google.com (Thai Duong).
 */

goog.provide('e2e.ecc.Protocol');

goog.require('e2e.algorithm.KeyLocations');
goog.require('e2e.ecc.DomainParam');
goog.require('goog.asserts');



/**
 * Representation of an ECC protocol.
 * @param {!e2e.ecc.PrimeCurve} curve The curve used for this protocol.
 * @param {{pubKey: !e2e.ByteArray, privKey: (!e2e.ByteArray|undefined)}=}
 *     opt_key The public and/or private key used in this protocol.
 * @constructor
 */
e2e.ecc.Protocol = function(curve, opt_key) {
  this.params = e2e.ecc.DomainParam.fromCurve(curve);
  goog.asserts.assertObject(this.params.n,
      'Cannot generate protocol for this curve.');
  if (goog.isDefAndNotNull(opt_key)) {
    this.setKey(opt_key);
  }
};


/**
 * ECC domain parameters.
 * @type {e2e.ecc.DomainParam}
 */
e2e.ecc.Protocol.prototype.params;


/**
 * The public key used in this protocol, as an array
 * @type {!e2e.ByteArray}
 * @private
 */
e2e.ecc.Protocol.prototype.pubKey_;


/**
 * The public key used in this protocol, as a point
 * @type {!e2e.ecc.point.Point}
 * @private
 */
e2e.ecc.Protocol.prototype.pubKeyAsPoint_;


/**
 * The private key used in this protocol.
 * @type {!e2e.ByteArray}
 * @private
 */
e2e.ecc.Protocol.prototype.privKey_;


/**
 * Sets the public and/or private key.
 * @param {{pubKey: !e2e.ByteArray, privKey: (!e2e.ByteArray|undefined)}}
 *     key The public and/or private key.
 */
e2e.ecc.Protocol.prototype.setKey = function(key) {
  if (!goog.isDefAndNotNull(key['pubKey']) &&
      !goog.isDefAndNotNull(key['privKey'])) {
    goog.asserts.fail('Either public key or private key should be defined.');
  }
  if (goog.isDefAndNotNull(key['pubKey'])) {
    // This also checks if the pubKey is valid.
    this.pubKey_ = key['pubKey'];
    this.pubKeyAsPoint_ = this.params.curve.pointFromByteArray(key['pubKey']);
  }
  if (goog.isDefAndNotNull(key['privKey'])) {
    this.privKey_ = key['privKey'];
  }
};


/**
 * Returns the public key.
 * @return {!e2e.ByteArray}
 */
e2e.ecc.Protocol.prototype.getPublicKey = function() {
  return this.pubKey_;
};


/**
 * Returns the public key as a point
 * @return {!e2e.ecc.point.Point}
 */
e2e.ecc.Protocol.prototype.getPublicKeyAsPoint = function() {
  return this.pubKeyAsPoint_;
};


/**
 * Returns the private key.
 * @return {!e2e.ByteArray}
 */
e2e.ecc.Protocol.prototype.getPrivateKey = function() {
  return this.privKey_;
};


/**
 * Generates a key pair used in ECC protocols.
 * @param {!e2e.ecc.PrimeCurve} curve The curve of the to-be-generated
 *     key pair.
 * @param {!e2e.ByteArray=} opt_privateKey  An optional already known
 *     private key. If not given, a random key will be created.
 * @return {!e2e.signer.key.Ecdsa}
 */
e2e.ecc.Protocol.generateKeyPair = function(curve, opt_privateKey) {
  var params = e2e.ecc.DomainParam.fromCurve(curve);
  var temp = params.generateKeyPair(opt_privateKey);
  return {
    'privKey': temp['privateKey'],
    'pubKey': temp['publicKey'],
    'curve': e2e.ecc.DomainParam.curveOidFromCurveName(curve),
    'loc': e2e.algorithm.KeyLocations.JAVASCRIPT
  };
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview An implementation of the ECDSA digital signature protocol.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.ecc.Ecdsa');

goog.require('e2e');
goog.require('e2e.BigNum');
goog.require('e2e.ecc.PrimeCurve');
goog.require('e2e.ecc.Protocol');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('e2e.hash.Sha256');
goog.require('e2e.hash.Sha384');
goog.require('e2e.hash.Sha512');
goog.require('e2e.random');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.signer.signature.Signature');
goog.require('goog.array');
goog.require('goog.asserts');


/**
 * Representation of an instance of the ECDSA protocol.
 * @param {!e2e.ecc.PrimeCurve} curveName The curve used for
 *     this protocol.
 * @param {{pubKey: !e2e.ByteArray, privKey: (!e2e.ByteArray|undefined)}=}
 *     opt_key The public and/or private key used in this protocol.
 * @constructor
 * @extends {e2e.ecc.Protocol}
 */
e2e.ecc.Ecdsa = function(curveName, opt_key) {
  e2e.ecc.Ecdsa.base(this, 'constructor', curveName, opt_key);
  switch (curveName) {
    case e2e.ecc.PrimeCurve.P_256:
      this.hash_ = new e2e.hash.Sha256();
      break;
    case e2e.ecc.PrimeCurve.P_384:
      this.hash_ = new e2e.hash.Sha384();
      break;
    case e2e.ecc.PrimeCurve.P_521:
      this.hash_ = new e2e.hash.Sha512();
      break;
    default:
      throw new e2e.error.InvalidArgumentsError(
        'Unknown algorithm for ECDSA: ' + curveName);
  }
};
goog.inherits(e2e.ecc.Ecdsa, e2e.ecc.Protocol);


/**
 * The hash function that should be used. This is selected based on the curve.
 * @private {!e2e.hash.Hash}
 */
e2e.ecc.Ecdsa.prototype.hash_;


/** @return {!e2e.hash.Hash} */
e2e.ecc.Ecdsa.prototype.getHash = function() {
  return this.hash_;
};


/**
 * Applies the signing algorithm to the data.
 * @param {!Uint8Array|!e2e.ByteArray|string} message The data to sign.
 * @return {!e2e.signer.signature.Signature}
 */
e2e.ecc.Ecdsa.prototype.sign = function(message) {
  var sig;
  var digest = this.hash_.hash(message);
  do {
    var k = this.generatePerMessageNonce_(digest);
    sig = this.signWithNonce_(digest, k);
  } while (sig == null);
  return sig;
};


/**
 * Exports the sign function for testing.
 * @param {!Uint8Array|!e2e.ByteArray|string} message The data to sign.
 * @param {!e2e.BigNum} k The per-message secret.
 * @return {?e2e.signer.signature.Signature}
 */
e2e.ecc.Ecdsa.prototype.signForTestingOnly = function(message, k) {
  var digest = this.hash_.hash(message);
  return this.signWithNonce_(digest, k);
};


/**
 * Generates the ECDSA signature using the provided per-message secret.
 * Returns null in the very rare case that r or s evalutes to 0, and we need
 * to try a different nonce.
 *
 * @param {!e2e.ByteArray} digest The digest of the message being signed.
 * @param {!e2e.BigNum} k The per-message secret.
 * @return {?e2e.signer.signature.Signature}
 * @private
 */
e2e.ecc.Ecdsa.prototype.signWithNonce_ = function(digest, k) {
  goog.asserts.assertObject(this.params, 'Domain params should be defined.');
  goog.asserts.assertObject(this.getPrivateKey(),
      'Private key value should be defined.');
  var N = this.params.n;
  // Sanity check on the per-message nonce that it's in [1, N-1].
  if (k.isGreaterOrEqual(N) ||
      k.isEqual(e2e.BigNum.ZERO)) {
    throw new e2e.error.InvalidArgumentsError(
        'Failed to sign message: invalid per-message nonce.');
  }
  // kG = (x1, y1)
  // r = x1 mod n.
  var r = N.residue(this.params.g.multiply(k).getX().toBigNum());
  if (r.isEqual(e2e.BigNum.ZERO)) {
    return null;
  }  // e = digest as bignum
  var e = new e2e.BigNum(digest);
  // s = k^{-1}(e + dr) (mod n)
  var privateKeyBytes = this.getPrivateKey();
  var privateKey =
      N.residue(this.params.bigNumFromPrivateKey(privateKeyBytes));
  var s = N.modAdd(N.residue(e), N.modMultiply(privateKey, r));
  if (s.isEqual(e2e.BigNum.ZERO)) {
    return null;
  }
  s = N.modMultiply(s, N.modInverse(k));
  var sig = {
    'r': r.toByteArray(),
    's': s.toByteArray(),
    'hashValue': digest
  };
  return sig;
};


/**
 * Applies the verification algorithm to the data.
 * @param {!Uint8Array|!e2e.ByteArray|string} message The data to verify.
 * @param {{s: !e2e.ByteArray, r: !e2e.ByteArray}} sig The
 *     signature to verify.
 * @return {boolean}
 */
e2e.ecc.Ecdsa.prototype.verify = function(message, sig) {
  goog.asserts.assertObject(this.params, 'Domain params should be defined.');
  goog.asserts.assertObject(this.getPublicKey(),
      'Public key value should be defined.');

  var N = this.params.n;
  var r = new e2e.BigNum(sig['r']);
  var s = new e2e.BigNum(sig['s']);
  // r and s should be in [1, N-1].
  if (r.isGreaterOrEqual(N) ||
      r.isEqual(e2e.BigNum.ZERO) ||
      s.isGreaterOrEqual(N) ||
      s.isEqual(e2e.BigNum.ZERO)) {
    return false;
  }
  // e = H(m)
  var e = new e2e.BigNum(this.hash_.hash(message));
  // w = s^{-1} mod n
  var w = N.modInverse(s);
  // u1 = ew mod n
  var u1 = N.modMultiply(N.residue(e), w);
  // u2 = rw mod n
  var u2 = N.modMultiply(r, w);
  // X = u1 * G + u2 * Q = s^{-1} * (e + dr) * G = k * G
  var X = this.params.g.multiply(u1).add(
      this.getPublicKeyAsPoint().multiply(u2));
  if (X.isInfinity()) {
    return false;
  }
  var x = N.residue(X.getX().toBigNum());
  return x.isEqual(r);
};


/**
 * Generates a random number used as per-message secret in ECDSA.
 * This code includes a hash of the secret key and the message digest of the
 * message in its calculation in order to minimize the damage that could be
 * done by a bad RNG.
 *
 * This implementation is intended to comply with section B.5.2 of
 * FIPS-186-4 for generating per-message secret nonces.
 *
 * @param {!e2e.ByteArray} digest The digest of the message.
 * @return {!e2e.BigNum}
 * @private
 */
e2e.ecc.Ecdsa.prototype.generatePerMessageNonce_ = function(digest) {
  var N = this.params.n;
  var nonceLength = Math.ceil(this.params.curve.keySizeInBits() / 8);
  var hasher = new e2e.hash.Sha512();
  var privateKey = this.getPrivateKey();
  while (privateKey.length < nonceLength) {
    // Avoid accidentally leaking the length of the private key.
    privateKey.unshift(0);
  }
  var privateKeyDigest = hasher.hash(privateKey);
  do {
    var randomBytes = e2e.random.getRandomBytes(nonceLength);
    var nonceBytes = [];
    do {
      hasher.reset();
      // When generating more than 512 bytes, the following line ensures that
      // the multiple pieces are different
      hasher.update(e2e.wordToByteArray(nonceBytes.length));
      hasher.update(privateKeyDigest);
      hasher.update(digest);
      hasher.update(randomBytes);
      nonceBytes = goog.array.concat(nonceBytes, hasher.digest());
    } while (nonceBytes.length < nonceLength);
    nonceBytes = nonceBytes.slice(0, nonceLength);
    nonceBytes[0] >>= (8 * nonceLength - N.getBitLength());
    var nonce = new e2e.BigNum(nonceBytes);
    // nonce must be in the range [1..N-1]
  } while (nonce.isEqual(e2e.BigNum.ZERO) || nonce.compare(N) >= 0);
  return nonce;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Provides a base class to implement digital signatures on top.
 *     Registers and returns implementations of specific digital signature
 *     algorithms.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.signer.Algorithm');
goog.provide('e2e.signer.Error');
goog.provide('e2e.signer.Signer');
goog.provide('e2e.signer.factory');


goog.require('e2e.Algorithm');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.ByteArray');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.signer.key');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.signer.signature.Signature');
goog.require('goog.debug.Error');

/**
 * Algorithms (used to define which algorithm is defined).
 * @enum {string}
 */
e2e.signer.Algorithm = {
  'DSA': 'DSA',
  'ECDSA': 'ECDSA',
  'RSA': 'RSA'
};

/**
 * Error class used to represent errors in the digital signature algorithms.
 * @param {*=} opt_msg Optional message to send.
 * @extends {goog.debug.Error}
 * @constructor
 */
e2e.signer.Error = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.signer.Error, goog.debug.Error);


/**
 * Interface for all signers.
 * @interface
 * @extends {e2e.Algorithm}
 */
e2e.signer.Signer = function() {};


/**
 * Applies the signing algorithm to the data.
 * @param {!e2e.ByteArray} data The data to sign.
 * @return {!e2e.async.Result.<!e2e.signer.signature.Signature>} The
 *     result of signing.
 */
e2e.signer.Signer.prototype.sign;


/**
 * Applies the verification algorithm to the data.
 * @param {!e2e.ByteArray} data The data to verify.
 * @param {!e2e.signer.signature.Signature} sig The signature to check.
 * @return {!e2e.async.Result.<boolean>} The result of verification.
 */
e2e.signer.Signer.prototype.verify;



/**
 * Returns the hash function used for the signature.
 * @return {!e2e.hash.Hash}
 */
e2e.signer.Signer.prototype.getHash;


/**
 * Sets the hash function used for the signature.
 * @param {!e2e.hash.Hash} Hash function
 */
e2e.signer.Signer.prototype.setHash;

/**
 * Contains a list of all registered implementations for each algorithm.
 * @type {!Object.<!e2e.signer.Algorithm,
 *     function(new:e2e.signer.Signer, ...)>}
 * @private
 */
e2e.signer.factory.signers_ = {};


/**
 * Registers a class for a specific algorithm.
 * @param {function(new:e2e.signer.Signer,
 *     !e2e.signer.Algorithm, e2e.signer.key.Key=)} signer The
 *     implementation.
 * @param {e2e.signer.Algorithm=} opt_algorithm The name to register
 *     the signer to if different from the signer's prototype algorithm.
 */
e2e.signer.factory.add = function(signer, opt_algorithm) {
  var algorithm = opt_algorithm || signer.prototype.algorithm;
  e2e.signer.factory.signers_[algorithm] = signer;
};


/**
 * Returns whether the algorithm is present in the factory.
 * @param {!e2e.signer.Algorithm} algorithm The signing algorithm.
 * @return {boolean} Whether the algorithm is present in the factory.
 */
e2e.signer.factory.has = function(algorithm) {
  return e2e.signer.factory.signers_.hasOwnProperty(algorithm);
};


/**
 * Returns an instance of the required digital signature algorithm, or null if
 *     not available.
 * @param {!e2e.signer.Algorithm} algorithm The signing algorithm.
 * @param {e2e.cipher.key.Key=} opt_keyData The key to use (public or
 *     private).
 * @return {?e2e.signer.Signer} The signer instance requested or null.
 */
e2e.signer.factory.get = function(algorithm, opt_keyData) {
  if (e2e.signer.factory.signers_.hasOwnProperty(algorithm)) {
    var constructor = e2e.signer.factory.signers_[algorithm];
    return new constructor(algorithm, opt_keyData);
  } else {
    return null;
  }
};


/**
 * Returns an instance of the required digital signature algorithm, or throws
 *     if not available.
 * @param {!e2e.signer.Algorithm} algorithm The signing algorithm.
 * @param {e2e.cipher.key.Key=} opt_keyData The key to use (public or
 *     private).
 * @return {!e2e.signer.Signer} The signer instance requested.
 */
e2e.signer.factory.require = function(algorithm, opt_keyData) {
  var ret = e2e.signer.factory.get(algorithm, opt_keyData);
  if (goog.isNull(ret)) {
    throw new e2e.signer.Error('Required algorithm not available.');
  }
  return ret;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview ECDSA for OpenPGP as described in RFC 6637.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.signer.Ecdsa');

goog.require('e2e.AlgorithmImpl');
goog.require('e2e.async.Result');
goog.require('e2e.ecc.DomainParam');
goog.require('e2e.ecc.Ecdsa');
goog.require('e2e.signer.Algorithm');
goog.require('e2e.signer.Signer');
goog.require('e2e.signer.factory');
goog.require('goog.asserts');



/**
 * Representation of a ECDSA public or private key.
 * @param {e2e.signer.Algorithm} algorithm The algorithm to retrieve.
 *     It must be e2e.signer.Algorithm.ECDSA.
 * @param {e2e.signer.key.Key=} opt_key The ECDSA key as specified in
 *     section 9 of RFC 6637.
 * @constructor
 * @extends {e2e.AlgorithmImpl}
 * @implements {e2e.signer.Signer}
 */
e2e.signer.Ecdsa = function(algorithm, opt_key) {
  goog.asserts.assert(algorithm == e2e.signer.Algorithm.ECDSA,
      'Algorithm must be ECDSA.');
  goog.base(this, e2e.signer.Algorithm.ECDSA, opt_key);
};
goog.inherits(e2e.signer.Ecdsa, e2e.AlgorithmImpl);


/**
 * Internal ECDSA implementation.
 * @type {!e2e.ecc.Ecdsa}
 * @private
 */
e2e.signer.Ecdsa.prototype.ecdsa_;


/** @override */
e2e.signer.Ecdsa.prototype.getHash = function() {
  return this.ecdsa_.getHash();
};


/** @override */
e2e.signer.Ecdsa.prototype.setHash = function(hash) {
  this.hash_ = hash;
};


/**
 * Sets the ECDSA public key and/or private key.
 * @override
 */
e2e.signer.Ecdsa.prototype.setKey = function(key, opt_keySize) {
  goog.asserts.assertArray(key['curve'], 'Curve should be defined.');
  this.ecdsa_ = new e2e.ecc.Ecdsa(
      e2e.ecc.DomainParam.curveNameFromCurveOid(key['curve']),
      {
        'pubKey': key['pubKey'],
        'privKey': key['privKey']
      });
  // Save key material to serialize later the key.
  goog.base(this, 'setKey', key);
};


/** @inheritDoc */
e2e.signer.Ecdsa.prototype.sign = function(m) {
  return e2e.async.Result.toResult(this.ecdsa_.sign(m));
};


/**
 * Exports the sign function for testing.
 * @param {!e2e.ByteArray} m The message to be signed.
 * @param {!e2e.BigNum} k The per-message secret.
 * @return {!e2e.async.Result.<e2e.signer.signature.Signature>} The
 *     result of signing.
 */
e2e.signer.Ecdsa.prototype.signForTestingOnly = function(m, k) {
  var sig = /** @type {e2e.signer.signature.Signature} */ (
      this.ecdsa_.signForTestingOnly(m, k));
  return e2e.async.Result.toResult(sig);
};


/** @inheritDoc */
e2e.signer.Ecdsa.prototype.verify = function(m, sig) {
  return e2e.async.Result.toResult(this.ecdsa_.verify(
      m, /** @type {{r: !e2e.ByteArray, s:!e2e.ByteArray}} */(
          sig)));
};


e2e.signer.factory.add(e2e.signer.Ecdsa, e2e.signer.Algorithm.ECDSA);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview DSA for OpenPGP as described in RFC 4880 and FIPS 186.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.signer.Dsa');

goog.require('e2e.AlgorithmImpl');
goog.require('e2e.BigNum');
goog.require('e2e.BigPrimeNum');
goog.require('e2e.async.Result');
goog.require('e2e.hash.Algorithm');
goog.require('e2e.hash.factory');
goog.require('e2e.openpgp.error.InvalidArgumentsError');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.random');
goog.require('e2e.signer.Algorithm');
goog.require('e2e.signer.Signer');
goog.require('e2e.signer.factory');
goog.require('goog.asserts');



/**
 * Representation of a DSA public or private key.
 * @param {e2e.signer.Algorithm} algorithm The algorithm to retrieve.
 *     It must be e2e.signer.Algorithm.DSA.
  * @param {e2e.signer.key.Key=} opt_key The DSA key as specified in
 *     RFC 4480.
 * @constructor
 * @implements {e2e.signer.Signer}
 * @extends {e2e.AlgorithmImpl}
 */
e2e.signer.Dsa = function(algorithm, opt_key) {
  goog.asserts.assert(algorithm == e2e.signer.Algorithm.DSA,
      'Algorithm must be DSA.');
  goog.base(this, e2e.signer.Algorithm.DSA, opt_key);
};
goog.inherits(e2e.signer.Dsa, e2e.AlgorithmImpl);


/**
 * The prime modulus. This must be a prime number.
 * @private {e2e.BigPrimeNum}
 */
e2e.signer.Dsa.prototype.p_;


/**
 * The prime order of the subgroup. This is a prime divisor of (p - 1).
 * @private {e2e.BigPrimeNum}
 */
e2e.signer.Dsa.prototype.q_;


/**
 * The generator of the subgroup of order q. 1 < g < p.
 * @private {e2e.BigNum}
 */
e2e.signer.Dsa.prototype.g_;


/**
 * The private key. x is a randomly or pseudorandomly generated integer,
 *     such that x is in [1, q - 1].
 * @private {e2e.BigNum}
 */
e2e.signer.Dsa.prototype.x_;


/**
 * The public key, where y = g^x (mod p).
 * @private {e2e.BigNum}
 */
e2e.signer.Dsa.prototype.y_;


/**
 * The hash function that should be used. This is selected based on the bit
 *     lengths p and q.
 * @private {!e2e.hash.Hash}
 */
e2e.signer.Dsa.prototype.hash_;


/** @override */
e2e.signer.Dsa.prototype.getHash = function() {
  return this.hash_;
};


/** @override */
e2e.signer.Dsa.prototype.setHash = function(hash) {
  this.hash_ = hash;
};


/**
 * Sets the DSA public key and/or private key.
 * @override
 */
e2e.signer.Dsa.prototype.setKey = function(keyArg, opt_keySize) {
  var key = /** @type {!e2e.signer.key.Dsa} */ (keyArg);
  goog.asserts.assertArray(key['p'], 'The prime modulus should be defined.');
  this.p_ = new e2e.BigPrimeNum(key['p']);
  var lenP = this.p_.getBitLength();
  goog.asserts.assertArray(key['q'], 'The prime order should be defined.');
  this.q_ = new e2e.BigPrimeNum(key['q']);
  var lenQ = this.q_.getBitLength();

  switch (lenP) {
    case 1024:
      if (lenQ != 160) {
        throw new e2e.openpgp.error.InvalidArgumentsError(
          'q must be 160-bit when p is 1024-bit.');
      }
      this.hash_ = e2e.hash.factory.require(
          e2e.hash.Algorithm.SHA1);
      break;
    case 2048:
      if (lenQ == 224) {
        this.hash_ = e2e.hash.factory.require(
            e2e.hash.Algorithm.SHA224);
      } else if (lenQ == 256) {
        this.hash_ = e2e.hash.factory.require(
            e2e.hash.Algorithm.SHA256);
      } else {
        throw new e2e.openpgp.error.InvalidArgumentsError(
          'q must be 224-bit or 256-bit when p is 2048-bit.');
      }
      break;
    case 3072:
      if (lenQ != 256) {
        throw new e2e.openpgp.error.InvalidArgumentsError(
          'q must be 256-bit when p is 3072-bit.');
      }
      this.hash_ = e2e.hash.factory.require(
            e2e.hash.Algorithm.SHA256);
      break;
    default:
      throw new e2e.openpgp.error.UnsupportedError(
          'The bit lengths of p and q are not supported.');
      break;
  }

  // q should be a divisor of p - 1.
  if (this.q_.mod(this.p_.subtract(e2e.BigNum.ONE)).isEqual(
      e2e.BigNum.ZERO)) {
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'q must be a divisor of p - 1.');
  }

  goog.asserts.assertArray(key['g'], 'The generator should be defined.');
  this.g_ = new e2e.BigNum(key['g']);
  // 1 < g < p and g^q (mod p) == 1.
  if (!this.g_.isBetween(e2e.BigNum.ONE, this.p_) ||
      !this.p_.modPower(this.g_, key['q']).isEqual(e2e.BigNum.ONE)) {
    throw new e2e.openpgp.error.InvalidArgumentsError(
          'Invalid generator.');
  }

  if (!goog.isDefAndNotNull(key['x']) &&
      !goog.isDefAndNotNull(key['y'])) {
    goog.asserts.fail('Either public key or private key should be defined.');
  }

  if (goog.isDefAndNotNull(key['x'])) {
    this.x_ = new e2e.BigNum(key['x']);
    if (!this.x_.isBetween(e2e.BigNum.ZERO, this.q_)) {
      throw new e2e.openpgp.error.InvalidArgumentsError(
          'x must be in range (0, q).');
    }
  }

  if (goog.isDefAndNotNull(key['y'])) {
    this.y_ = new e2e.BigNum(key['y']);
    if (goog.isDefAndNotNull(key['x'])) {
      // y == g^x (mod p).
      if (!this.p_.modPower(this.g_, key['x']).isEqual(this.y_)) {
        throw new e2e.openpgp.error.InvalidArgumentsError(
            'Invalid public key.');
      }
    }
  }

  // Save key material to serialize later the key.
  goog.base(this, 'setKey', key);
};


/** @inheritDoc */
e2e.signer.Dsa.prototype.sign = function(m) {
  /** @type {!e2e.signer.signature.Signature} */
  var sig;
  do {
    var k = this.generatePerMessageSecret_();
    sig = this.signWithNonce_(m, k);
    var r = new e2e.BigNum(sig['r']);
    var s = new e2e.BigNum(sig['s']);
  } while (r.isEqual(e2e.BigNum.ZERO) ||
           s.isEqual(e2e.BigNum.ZERO));
  return e2e.async.Result.toResult(sig);
};


/**
 * Exports the sign function for testing.
 * @param {!e2e.ByteArray} m The message to be signed.
 * @param {!e2e.BigNum} k The per-message secret.
 * @return {!e2e.async.Result.<!e2e.signer.signature.Signature>} The result of signing.
 */
e2e.signer.Dsa.prototype.signForTestingOnly = function(m, k) {
  return e2e.async.Result.toResult(this.signWithNonce_(m, k));
};


/** @inheritDoc */
e2e.signer.Dsa.prototype.verify = function(m, sig) {
  goog.asserts.assertObject(this.p_, 'The prime modulus should be defined.');
  goog.asserts.assertObject(this.q_, 'The prime order should be defined.');
  goog.asserts.assertObject(this.g_, 'The order should be defined.');
  goog.asserts.assertObject(this.y_, 'The public key should be defined.');

  var r = new e2e.BigNum(sig['r']);
  var s = new e2e.BigNum(sig['s']);
  if (!r.isBetween(e2e.BigNum.ZERO, this.q_) ||
      !s.isBetween(e2e.BigNum.ZERO, this.q_)) {
    return e2e.async.Result.toResult(false);
  }

  var w = this.q_.modInverse(s);
  var z = new e2e.BigNum(this.hash_.hash(m));
  var u1 = this.q_.modMultiply(z.mod(this.q_), w);  // z may be >= q_
  var u2 = this.q_.modMultiply(r, w);
  var v = this.p_.modMultiply(this.p_.modPower(this.g_, u1),
      this.p_.modPower(this.y_, u2)).mod(this.q_);
  return e2e.async.Result.toResult(v.isEqual(r));
};


/**
 * Generates the DSA signature using the provided per-message secret.
 * @param {!e2e.ByteArray} m The message to be signed.
 * @param {!e2e.BigNum} k The per-message secret.
 * @return {!e2e.signer.signature.Signature}
 * @private
 */
e2e.signer.Dsa.prototype.signWithNonce_ = function(m, k) {
  goog.asserts.assertObject(this.p_, 'The prime modulus should be defined.');
  goog.asserts.assertObject(this.q_, 'The prime order should be defined.');
  goog.asserts.assertObject(this.g_, 'The order should be defined.');
  goog.asserts.assertObject(this.x_, 'The private key should be defined.');

  // Sanity check on the per-message nonce that it's in [1, q-1].
  if (!k.isBetween(e2e.BigNum.ZERO, this.q_)) {
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'Failed to sign message: invalid per-message nonce.');
  }
  // r = (g^k mod p) mod q.
  var r = this.p_.modPower(this.g_, k).mod(this.q_);
  var hashValue = this.hash_.hash(m);
  var z = new e2e.BigNum(hashValue);
  // s = (k^{-1} (z + xr)) mod q.
  var tmp = z.add(this.q_.modMultiply(this.x_, r)).mod(this.q_);
  var s = this.q_.modMultiply(this.q_.modInverse(k), tmp);
  return {
    'r': r.toByteArray(),
    's': s.toByteArray(),
    'hashValue': hashValue
  };
};


/**
 * Generates a random number used as the per-message secret in DSA.
 * @return {!e2e.BigNum}
 * @private
 */
e2e.signer.Dsa.prototype.generatePerMessageSecret_ = function() {
  goog.asserts.assertObject(this.q_,
      'Cannot generate random per-message secret: q should be defined.');

  // 64 more bits are requested from the PRNG than are needed for this nonce
  // to avoid bias in the modular reduction in the last step of this function.
  // Otherwise this might leak a fraction of a bit of the nonce, and that's
  // enough for Bleichenbacher to steal the private key.
  var nonceLength = Math.ceil((this.q_.getBitLength() + 64) / 8);
  // OpenPGP supports only 3 key sizes in bits: 160, 224 and 256, so double
  // check nonce length to ensure enough entropy shall be requested from the
  // PRNG.
  if (nonceLength != 28 /* 160-bit q */ &&
      nonceLength != 36 /* 224-bit q */ &&
      nonceLength != 40 /* 256-bit q */) {
    new e2e.openpgp.error.InvalidArgumentsError(
        'Cannot generate random nonce: invalid nonce length.');
  }
  var nonce = new e2e.BigNum(
      e2e.random.getRandomBytes(nonceLength));
  // nonce is [1, q - 1].
  return nonce.mod(this.q_.subtract(e2e.BigNum.ONE)).add(
      e2e.BigNum.ONE);
};


e2e.signer.factory.add(e2e.signer.Dsa, e2e.signer.Algorithm.DSA);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires all signers to load them into the factory.
 */

/** @suppress {extraProvide} this aggregation needs a namespace */
goog.provide('e2e.signer.all');

/** @suppress {extraRequire} intentional import */
goog.require('e2e.signer.Dsa');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.signer.Ecdsa');

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Additional mathematical functions.
 */

goog.provide('goog.math');

goog.require('goog.array');
goog.require('goog.asserts');


/**
 * Returns a random integer greater than or equal to 0 and less than {@code a}.
 * @param {number} a  The upper bound for the random integer (exclusive).
 * @return {number} A random integer N such that 0 <= N < a.
 */
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};


/**
 * Returns a random number greater than or equal to {@code a} and less than
 * {@code b}.
 * @param {number} a  The lower bound for the random number (inclusive).
 * @param {number} b  The upper bound for the random number (exclusive).
 * @return {number} A random number N such that a <= N < b.
 */
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};


/**
 * Takes a number and clamps it to within the provided bounds.
 * @param {number} value The input number.
 * @param {number} min The minimum value to return.
 * @param {number} max The maximum value to return.
 * @return {number} The input number if it is within bounds, or the nearest
 *     number within the bounds.
 */
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};


/**
 * The % operator in JavaScript returns the remainder of a / b, but differs from
 * some other languages in that the result will have the same sign as the
 * dividend. For example, -1 % 8 == -1, whereas in some other languages
 * (such as Python) the result would be 7. This function emulates the more
 * correct modulo behavior, which is useful for certain applications such as
 * calculating an offset index in a circular list.
 *
 * @param {number} a The dividend.
 * @param {number} b The divisor.
 * @return {number} a % b where the result is between 0 and b (either 0 <= x < b
 *     or b < x <= 0, depending on the sign of b).
 */
goog.math.modulo = function(a, b) {
  var r = a % b;
  // If r and b differ in sign, add b to wrap the result to the correct sign.
  return (r * b < 0) ? r + b : r;
};


/**
 * Performs linear interpolation between values a and b. Returns the value
 * between a and b proportional to x (when x is between 0 and 1. When x is
 * outside this range, the return value is a linear extrapolation).
 * @param {number} a A number.
 * @param {number} b A number.
 * @param {number} x The proportion between a and b.
 * @return {number} The interpolated value between a and b.
 */
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};


/**
 * Tests whether the two values are equal to each other, within a certain
 * tolerance to adjust for floating point errors.
 * @param {number} a A number.
 * @param {number} b A number.
 * @param {number=} opt_tolerance Optional tolerance range. Defaults
 *     to 0.000001. If specified, should be greater than 0.
 * @return {boolean} Whether {@code a} and {@code b} are nearly equal.
 */
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 0.000001);
};


// TODO(user): Rename to normalizeAngle, retaining old name as deprecated
// alias.
/**
 * Normalizes an angle to be in range [0-360). Angles outside this range will
 * be normalized to be the equivalent angle with that range.
 * @param {number} angle Angle in degrees.
 * @return {number} Standardized angle.
 */
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};


/**
 * Normalizes an angle to be in range [0-2*PI). Angles outside this range will
 * be normalized to be the equivalent angle with that range.
 * @param {number} angle Angle in radians.
 * @return {number} Standardized angle.
 */
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};


/**
 * Converts degrees to radians.
 * @param {number} angleDegrees Angle in degrees.
 * @return {number} Angle in radians.
 */
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};


/**
 * Converts radians to degrees.
 * @param {number} angleRadians Angle in radians.
 * @return {number} Angle in degrees.
 */
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};


/**
 * For a given angle and radius, finds the X portion of the offset.
 * @param {number} degrees Angle in degrees (zero points in +X direction).
 * @param {number} radius Radius.
 * @return {number} The x-distance for the angle and radius.
 */
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};


/**
 * For a given angle and radius, finds the Y portion of the offset.
 * @param {number} degrees Angle in degrees (zero points in +X direction).
 * @param {number} radius Radius.
 * @return {number} The y-distance for the angle and radius.
 */
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};


/**
 * Computes the angle between two points (x1,y1) and (x2,y2).
 * Angle zero points in the +X direction, 90 degrees points in the +Y
 * direction (down) and from there we grow clockwise towards 360 degrees.
 * @param {number} x1 x of first point.
 * @param {number} y1 y of first point.
 * @param {number} x2 x of second point.
 * @param {number} y2 y of second point.
 * @return {number} Standardized angle in degrees of the vector from
 *     x1,y1 to x2,y2.
 */
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1,
                                                                x2 - x1)));
};


/**
 * Computes the difference between startAngle and endAngle (angles in degrees).
 * @param {number} startAngle  Start angle in degrees.
 * @param {number} endAngle  End angle in degrees.
 * @return {number} The number of degrees that when added to
 *     startAngle will result in endAngle. Positive numbers mean that the
 *     direction is clockwise. Negative numbers indicate a counter-clockwise
 *     direction.
 *     The shortest route (clockwise vs counter-clockwise) between the angles
 *     is used.
 *     When the difference is 180 degrees, the function returns 180 (not -180)
 *     angleDifference(30, 40) is 10, and angleDifference(40, 30) is -10.
 *     angleDifference(350, 10) is 20, and angleDifference(10, 350) is -20.
 */
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) -
          goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else if (d <= -180) {
    d = 360 + d;
  }
  return d;
};


/**
 * Returns the sign of a number as per the "sign" or "signum" function.
 * @param {number} x The number to take the sign of.
 * @return {number} -1 when negative, 1 when positive, 0 when 0.
 */
goog.math.sign = function(x) {
  return x == 0 ? 0 : (x < 0 ? -1 : 1);
};


/**
 * JavaScript implementation of Longest Common Subsequence problem.
 * http://en.wikipedia.org/wiki/Longest_common_subsequence
 *
 * Returns the longest possible array that is subarray of both of given arrays.
 *
 * @param {Array.<Object>} array1 First array of objects.
 * @param {Array.<Object>} array2 Second array of objects.
 * @param {Function=} opt_compareFn Function that acts as a custom comparator
 *     for the array ojects. Function should return true if objects are equal,
 *     otherwise false.
 * @param {Function=} opt_collectorFn Function used to decide what to return
 *     as a result subsequence. It accepts 2 arguments: index of common element
 *     in the first array and index in the second. The default function returns
 *     element from the first array.
 * @return {!Array.<Object>} A list of objects that are common to both arrays
 *     such that there is no common subsequence with size greater than the
 *     length of the list.
 */
goog.math.longestCommonSubsequence = function(
    array1, array2, opt_compareFn, opt_collectorFn) {

  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };

  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };

  var length1 = array1.length;
  var length2 = array2.length;

  var arr = [];
  for (var i = 0; i < length1 + 1; i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }

  for (var j = 0; j < length2 + 1; j++) {
    arr[0][j] = 0;
  }

  for (i = 1; i <= length1; i++) {
    for (j = 1; j <= length2; j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }

  // Backtracking
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }

  return result;
};


/**
 * Returns the sum of the arguments.
 * @param {...number} var_args Numbers to add.
 * @return {number} The sum of the arguments (0 if no arguments were provided,
 *     {@code NaN} if any of the arguments is not a valid number).
 */
goog.math.sum = function(var_args) {
  return /** @type {number} */ (goog.array.reduce(arguments,
      function(sum, value) {
        return sum + value;
      }, 0));
};


/**
 * Returns the arithmetic mean of the arguments.
 * @param {...number} var_args Numbers to average.
 * @return {number} The average of the arguments ({@code NaN} if no arguments
 *     were provided or any of the arguments is not a valid number).
 */
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};


/**
 * Returns the unbiased sample variance of the arguments. For a definition,
 * see e.g. http://en.wikipedia.org/wiki/Variance
 * @param {...number} var_args Number samples to analyze.
 * @return {number} The unbiased sample variance of the arguments (0 if fewer
 *     than two samples were provided, or {@code NaN} if any of the samples is
 *     not a valid number).
 */
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }

  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments,
      function(val) {
        return Math.pow(val - mean, 2);
      })) / (sampleSize - 1);

  return variance;
};


/**
 * Returns the sample standard deviation of the arguments.  For a definition of
 * sample standard deviation, see e.g.
 * http://en.wikipedia.org/wiki/Standard_deviation
 * @param {...number} var_args Number samples to analyze.
 * @return {number} The sample standard deviation of the arguments (0 if fewer
 *     than two samples were provided, or {@code NaN} if any of the samples is
 *     not a valid number).
 */
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};


/**
 * Returns whether the supplied number represents an integer, i.e. that is has
 * no fractional component.  No range-checking is performed on the number.
 * @param {number} num The number to test.
 * @return {boolean} Whether {@code num} is an integer.
 */
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};


/**
 * Returns whether the supplied number is finite and not NaN.
 * @param {number} num The number to test.
 * @return {boolean} Whether {@code num} is a finite number.
 */
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};


/**
 * Returns the precise value of floor(log10(num)).
 * Simpler implementations didn't work because of floating point rounding
 * errors. For example
 * <ul>
 * <li>Math.floor(Math.log(num) / Math.LN10) is off by one for num == 1e+3.
 * <li>Math.floor(Math.log(num) * Math.LOG10E) is off by one for num == 1e+15.
 * <li>Math.floor(Math.log10(num)) is off by one for num == 1e+15 - 1.
 * </ul>
 * @param {number} num A floating point number.
 * @return {number} Its logarithm to base 10 rounded down to the nearest
 *     integer if num > 0. -Infinity if num == 0. NaN if num < 0.
 */
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat('1e' + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};


/**
 * A tweaked variant of {@code Math.floor} which tolerates if the passed number
 * is infinitesimally smaller than the closest integer. It often happens with
 * the results of floating point calculations because of the finite precision
 * of the intermediate results. For example {@code Math.floor(Math.log(1000) /
 * Math.LN10) == 2}, not 3 as one would expect.
 * @param {number} num A number.
 * @param {number=} opt_epsilon An infinitesimally small positive number, the
 *     rounding error to tolerate.
 * @return {number} The largest integer less than or equal to {@code num}.
 */
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2e-15));
};


/**
 * A tweaked variant of {@code Math.ceil}. See {@code goog.math.safeFloor} for
 * details.
 * @param {number} num A number.
 * @param {number=} opt_epsilon An infinitesimally small positive number, the
 *     rounding error to tolerate.
 * @return {number} The smallest integer greater than or equal to {@code num}.
 */
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2e-15));
};

// Copyright 2007 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Python style iteration utilities.
 * @author arv@google.com (Erik Arvidsson)
 */


goog.provide('goog.iter');
goog.provide('goog.iter.Iterable');
goog.provide('goog.iter.Iterator');
goog.provide('goog.iter.StopIteration');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.functions');
goog.require('goog.math');


/**
 * @typedef {goog.iter.Iterator|{length:number}|{__iterator__}}
 */
goog.iter.Iterable;


// For script engines that already support iterators.
if ('StopIteration' in goog.global) {
  /**
   * Singleton Error object that is used to terminate iterations.
   * @type {Error}
   */
  goog.iter.StopIteration = goog.global['StopIteration'];
} else {
  /**
   * Singleton Error object that is used to terminate iterations.
   * @type {Error}
   * @suppress {duplicate}
   */
  goog.iter.StopIteration = Error('StopIteration');
}



/**
 * Class/interface for iterators.  An iterator needs to implement a {@code next}
 * method and it needs to throw a {@code goog.iter.StopIteration} when the
 * iteration passes beyond the end.  Iterators have no {@code hasNext} method.
 * It is recommended to always use the helper functions to iterate over the
 * iterator or in case you are only targeting JavaScript 1.7 for in loops.
 * @constructor
 * @template VALUE
 */
goog.iter.Iterator = function() {};


/**
 * Returns the next value of the iteration.  This will throw the object
 * {@see goog.iter#StopIteration} when the iteration passes the end.
 * @return {VALUE} Any object or value.
 */
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};


/**
 * Returns the {@code Iterator} object itself.  This is used to implement
 * the iterator protocol in JavaScript 1.7
 * @param {boolean=} opt_keys  Whether to return the keys or values. Default is
 *     to only return the values.  This is being used by the for-in loop (true)
 *     and the for-each-in loop (false).  Even though the param gives a hint
 *     about what the iterator will return there is no guarantee that it will
 *     return the keys when true is passed.
 * @return {!goog.iter.Iterator.<VALUE>} The object itself.
 */
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};


/**
 * Returns an iterator that knows how to iterate over the values in the object.
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable  If the
 *     object is an iterator it will be returned as is.  If the object has an
 *     {@code __iterator__} method that will be called to get the value
 *     iterator.  If the object is an array-like object we create an iterator
 *     for that.
 * @return {!goog.iter.Iterator.<VALUE>} An iterator that knows how to iterate
 *     over the values in {@code iterable}.
 * @template VALUE
 */
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == 'function') {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        // Don't include deleted elements.
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }


  // TODO(arv): Should we fall back on goog.structs.getValues()?
  throw Error('Not implemented');
};


/**
 * Calls a function for each element in the iterator with the element of the
 * iterator passed as argument.
 *
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable  The iterator
 *     to iterate over. If the iterable is an object {@code toIterator} will be
 *     called on it.
 * @param {function(this:THIS,VALUE,?,!goog.iter.Iterator.<VALUE>)} f
 *     The function to call for every element.  This function takes 3 arguments
 *     (the element, undefined, and the iterator) and the return value is
 *     irrelevant.  The reason for passing undefined as the second argument is
 *     so that the same function can be used in {@see goog.array#forEach} as
 *     well as others.  The third parameter is of type "number" for
 *     arraylike objects, undefined, otherwise.
 * @param {THIS=} opt_obj  The object to be used as the value of 'this' within
 *     {@code f}.
 * @template THIS, VALUE
 */
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    /** @preserveTry */
    try {
      // NOTES: this passes the index number to the second parameter
      // of the callback contrary to the documentation above.
      goog.array.forEach(/** @type {goog.array.ArrayLike} */(iterable), f,
                         opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    /** @preserveTry */
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};


/**
 * Calls a function for every element in the iterator, and if the function
 * returns true adds the element to a new iterator.
 *
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     to iterate over.
 * @param {
 *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator.<VALUE>):boolean} f
 *     The function to call for every element. This function takes 3 arguments
 *     (the element, undefined, and the iterator) and should return a boolean.
 *     If the return value is true the element will be included in the returned
 *     iterator.  If it is false the element is not included.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within
 *     {@code f}.
 * @return {!goog.iter.Iterator.<VALUE>} A new iterator in which only elements
 *     that passed the test are present.
 * @template THIS, VALUE
 */
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};


/**
 * Calls a function for every element in the iterator, and if the function
 * returns false adds the element to a new iterator.
 *
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     to iterate over.
 * @param {
 *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator.<VALUE>):boolean} f
 *     The function to call for every element. This function takes 3 arguments
 *     (the element, undefined, and the iterator) and should return a boolean.
 *     If the return value is false the element will be included in the returned
 *     iterator.  If it is true the element is not included.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within
 *     {@code f}.
 * @return {!goog.iter.Iterator.<VALUE>} A new iterator in which only elements
 *     that did not pass the test are present.
 * @template THIS, VALUE
 */
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};


/**
 * Creates a new iterator that returns the values in a range.  This function
 * can take 1, 2 or 3 arguments:
 * <pre>
 * range(5) same as range(0, 5, 1)
 * range(2, 5) same as range(2, 5, 1)
 * </pre>
 *
 * @param {number} startOrStop  The stop value if only one argument is provided.
 *     The start value if 2 or more arguments are provided.  If only one
 *     argument is used the start value is 0.
 * @param {number=} opt_stop  The stop value.  If left out then the first
 *     argument is used as the stop value.
 * @param {number=} opt_step  The number to increment with between each call to
 *     next.  This can be negative.
 * @return {!goog.iter.Iterator.<number>} A new iterator that returns the values
 *     in the range.
 */
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error('Range step argument must not be zero');
  }

  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};


/**
 * Joins the values in a iterator with a delimiter.
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     to get the values from.
 * @param {string} deliminator  The text to put between the values.
 * @return {string} The joined value string.
 * @template VALUE
 */
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};


/**
 * For every element in the iterator call a function and return a new iterator
 * with that value.
 *
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterator to iterate over.
 * @param {
 *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator.<VALUE>):RESULT} f
 *     The function to call for every element.  This function takes 3 arguments
 *     (the element, undefined, and the iterator) and should return a new value.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within
 *     {@code f}.
 * @return {!goog.iter.Iterator.<RESULT>} A new iterator that returns the
 *     results of applying the function to each element in the original
 *     iterator.
 * @template THIS, VALUE, RESULT
 */
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};


/**
 * Passes every element of an iterator into a function and accumulates the
 * result.
 *
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     to iterate over.
 * @param {function(this:THIS,VALUE,VALUE):VALUE} f The function to call for
 *     every element. This function takes 2 arguments (the function's previous
 *     result or the initial value, and the value of the current element).
 *     function(previousValue, currentElement) : newValue.
 * @param {VALUE} val The initial value to pass into the function on the first
 *     call.
 * @param {THIS=} opt_obj  The object to be used as the value of 'this' within
 *     f.
 * @return {VALUE} Result of evaluating f repeatedly across the values of
 *     the iterator.
 * @template THIS, VALUE
 */
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};


/**
 * Goes through the values in the iterator. Calls f for each of these, and if
 * any of them returns true, this returns true (without checking the rest). If
 * all return false this will return false.
 *
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     object.
 * @param {
 *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator.<VALUE>):boolean} f
 *     The function to call for every value. This function takes 3 arguments
 *     (the value, undefined, and the iterator) and should return a boolean.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within
 *     {@code f}.
 * @return {boolean} true if any value passes the test.
 * @template THIS, VALUE
 */
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  /** @preserveTry */
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};


/**
 * Goes through the values in the iterator. Calls f for each of these and if any
 * of them returns false this returns false (without checking the rest). If all
 * return true this will return true.
 *
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     object.
 * @param {
 *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator.<VALUE>):boolean} f
 *     The function to call for every value. This function takes 3 arguments
 *     (the value, undefined, and the iterator) and should return a boolean.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within
 *     {@code f}.
 * @return {boolean} true if every value passes the test.
 * @template THIS, VALUE
 */
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  /** @preserveTry */
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};


/**
 * Takes zero or more iterables and returns one iterator that will iterate over
 * them in the order chained.
 * @param {...!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} var_args Any
 *     number of iterable objects.
 * @return {!goog.iter.Iterator.<VALUE>} Returns a new iterator that will
 *     iterate over all the given iterables' contents.
 * @template VALUE
 */
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};


/**
 * Takes a single iterable containing zero or more iterables and returns one
 * iterator that will iterate over each one in the order given.
 * @see http://docs.python.org/2/library/itertools.html#itertools.chain.from_iterable
 * @param {goog.iter.Iterable} iterable The iterable of iterables to chain.
 * @return {!goog.iter.Iterator.<VALUE>} Returns a new iterator that will
 *     iterate over all the contents of the iterables contained within
 *     {@code iterable}.
 * @template VALUE
 */
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator();
  var current = null;

  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };

  return iter;
};


/**
 * Builds a new iterator that iterates over the original, but skips elements as
 * long as a supplied function returns true.
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     object.
 * @param {
 *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator.<VALUE>):boolean} f
 *     The function to call for every value. This function takes 3 arguments
 *     (the value, undefined, and the iterator) and should return a boolean.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within
 *     {@code f}.
 * @return {!goog.iter.Iterator.<VALUE>} A new iterator that drops elements from
 *     the original iterator as long as {@code f} is true.
 * @template THIS, VALUE
 */
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};


/**
 * Builds a new iterator that iterates over the original, but only as long as a
 * supplied function returns true.
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     object.
 * @param {
 *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator.<VALUE>):boolean} f
 *     The function to call for every value. This function takes 3 arguments
 *     (the value, undefined, and the iterator) and should return a boolean.
 * @param {THIS=} opt_obj This is used as the 'this' object in f when called.
 * @return {!goog.iter.Iterator.<VALUE>} A new iterator that keeps elements in
 *     the original iterator as long as the function is true.
 * @template THIS, VALUE
 */
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};


/**
 * Converts the iterator to an array
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterator
 *     to convert to an array.
 * @return {!Array.<VALUE>} An array of the elements the iterator iterates over.
 * @template VALUE
 */
goog.iter.toArray = function(iterable) {
  // Fast path for array-like.
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray(/** @type {!goog.array.ArrayLike} */(iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};


/**
 * Iterates over two iterables and returns true if they contain the same
 * sequence of elements and have the same length.
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable1 The first
 *     iterable object.
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable2 The second
 *     iterable object.
 * @param {function(VALUE,VALUE):boolean=} opt_equalsFn Optional comparison
 *     function.
 *     Should take two arguments to compare, and return true if the arguments
 *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which
 *     compares the elements using the built-in '===' operator.
 * @return {boolean} true if the iterables contain the same sequence of elements
 *     and have the same length.
 * @template VALUE
 */
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};


/**
 * Advances the iterator to the next position, returning the given default value
 * instead of throwing an exception if the iterator has no more entries.
 * @param {goog.iter.Iterator.<VALUE>|goog.iter.Iterable} iterable The iterable
 *     object.
 * @param {VALUE} defaultValue The value to return if the iterator is empty.
 * @return {VALUE} The next item in the iteration, or defaultValue if the
 *     iterator was empty.
 * @template VALUE
 */
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};


/**
 * Cartesian product of zero or more sets.  Gives an iterator that gives every
 * combination of one element chosen from each set.  For example,
 * ([1, 2], [3, 4]) gives ([1, 3], [1, 4], [2, 3], [2, 4]).
 * @see http://docs.python.org/library/itertools.html#itertools.product
 * @param {...!goog.array.ArrayLike.<VALUE>} var_args Zero or more sets, as
 *     arrays.
 * @return {!goog.iter.Iterator.<!Array.<VALUE>>} An iterator that gives each
 *     n-tuple (as an array).
 * @template VALUE
 */
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });

  // An empty set in a cartesian product gives an empty set.
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator();
  }

  var iter = new goog.iter.Iterator();
  var arrays = arguments;

  // The first indices are [0, 0, ...]
  var indicies = goog.array.repeat(0, arrays.length);

  iter.next = function() {

    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });

      // Generate the next-largest indices for the next call.
      // Increase the rightmost index. If it goes over, increase the next
      // rightmost (like carry-over addition).
      for (var i = indicies.length - 1; i >= 0; i--) {
        // Assertion prevents compiler warning below.
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }

        // We're at the last indices (the last element of every array), so
        // the iteration is over on the next call.
        if (i == 0) {
          indicies = null;
          break;
        }
        // Reset the index in this column and loop back to increment the
        // next one.
        indicies[i] = 0;
      }
      return retVal;
    }

    throw goog.iter.StopIteration;
  };

  return iter;
};


/**
 * Create an iterator to cycle over the iterable's elements indefinitely.
 * For example, ([1, 2, 3]) would return : 1, 2, 3, 1, 2, 3, ...
 * @see: http://docs.python.org/library/itertools.html#itertools.cycle.
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable object.
 * @return {!goog.iter.Iterator.<VALUE>} An iterator that iterates indefinitely
 *     over the values in {@code iterable}.
 * @template VALUE
 */
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);

  // We maintain a cache to store the iterable elements as we iterate
  // over them. The cache is used to return elements once we have
  // iterated over the iterable once.
  var cache = [];
  var cacheIndex = 0;

  var iter = new goog.iter.Iterator();

  // This flag is set after the iterable is iterated over once
  var useCache = false;

  iter.next = function() {
    var returnElement = null;

    // Pull elements off the original iterator if not using cache
    if (!useCache) {
      try {
        // Return the element from the iterable
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        // If an exception other than StopIteration is thrown
        // or if there are no elements to iterate over (the iterable was empty)
        // throw an exception
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        // set useCache to true after we know that a 'StopIteration' exception
        // was thrown and the cache is not empty (to handle the 'empty iterable'
        // use case)
        useCache = true;
      }
    }

    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;

    return returnElement;
  };

  return iter;
};


/**
 * Creates an iterator that counts indefinitely from a starting value.
 * @see http://docs.python.org/2/library/itertools.html#itertools.count
 * @param {number=} opt_start The starting value. Default is 0.
 * @param {number=} opt_step The number to increment with between each call to
 *     next. Negative and floating point numbers are allowed. Default is 1.
 * @return {!goog.iter.Iterator.<number>} A new iterator that returns the values
 *     in the series.
 */
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator();

  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };

  return iter;
};


/**
 * Creates an iterator that returns the same object or value repeatedly.
 * @param {VALUE} value Any object or value to repeat.
 * @return {!goog.iter.Iterator.<VALUE>} A new iterator that returns the
 *     repeated value.
 * @template VALUE
 */
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator();

  iter.next = goog.functions.constant(value);

  return iter;
};


/**
 * Creates an iterator that returns running totals from the numbers in
 * {@code iterable}. For example, the array {@code [1, 2, 3, 4, 5]} yields
 * {@code 1 -> 3 -> 6 -> 10 -> 15}.
 * @see http://docs.python.org/3.2/library/itertools.html#itertools.accumulate
 * @param {!goog.iter.Iterable.<number>} iterable The iterable of numbers to
 *     accumulate.
 * @return {!goog.iter.Iterator.<number>} A new iterator that returns the
 *     numbers in the series.
 */
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator();

  iter.next = function() {
    total += iterator.next();
    return total;
  };

  return iter;
};


/**
 * Creates an iterator that returns arrays containing the ith elements from the
 * provided iterables. The returned arrays will be the same size as the number
 * of iterables given in {@code var_args}. Once the shortest iterable is
 * exhausted, subsequent calls to {@code next()} will throw
 * {@code goog.iter.StopIteration}.
 * @see http://docs.python.org/2/library/itertools.html#itertools.izip
 * @param {...!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} var_args Any
 *     number of iterable objects.
 * @return {!goog.iter.Iterator.<!Array.<VALUE>>} A new iterator that returns
 *     arrays of elements from the provided iterables.
 * @template VALUE
 */
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator();

  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }

  return iter;
};


/**
 * Creates an iterator that returns arrays containing the ith elements from the
 * provided iterables. The returned arrays will be the same size as the number
 * of iterables given in {@code var_args}. Shorter iterables will be extended
 * with {@code fillValue}. Once the longest iterable is exhausted, subsequent
 * calls to {@code next()} will throw {@code goog.iter.StopIteration}.
 * @see http://docs.python.org/2/library/itertools.html#itertools.izip_longest
 * @param {VALUE} fillValue The object or value used to fill shorter iterables.
 * @param {...!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} var_args Any
 *     number of iterable objects.
 * @return {!goog.iter.Iterator.<!Array.<VALUE>>} A new iterator that returns
 *     arrays of elements from the provided iterables.
 * @template VALUE
 */
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator();

  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);

    iter.next = function() {
      var iteratorsHaveValues = false;  // false when all iterators are empty.
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          // Iterator had a value, so we've not exhausted the iterators.
          // Set flag accordingly.
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });

      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }

  return iter;
};


/**
 * Creates an iterator that filters {@code iterable} based on a series of
 * {@code selectors}. On each call to {@code next()}, one item is taken from
 * both the {@code iterable} and {@code selectors} iterators. If the item from
 * {@code selectors} evaluates to true, the item from {@code iterable} is given.
 * Otherwise, it is skipped. Once either {@code iterable} or {@code selectors}
 * is exhausted, subsequent calls to {@code next()} will throw
 * {@code goog.iter.StopIteration}.
 * @see http://docs.python.org/2/library/itertools.html#itertools.compress
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to filter.
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} selectors An
 *     iterable of items to be evaluated in a boolean context to determine if
 *     the corresponding element in {@code iterable} should be included in the
 *     result.
 * @return {!goog.iter.Iterator.<VALUE>} A new iterator that returns the
 *     filtered values.
 * @template VALUE
 */
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);

  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};



/**
 * Implements the {@code goog.iter.groupBy} iterator.
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to group.
 * @param {function(...[VALUE]): KEY=} opt_keyFunc  Optional function for
 *     determining the key value for each group in the {@code iterable}. Default
 *     is the identity function.
 * @constructor
 * @extends {goog.iter.Iterator.<!Array.<?>>}
 * @template KEY, VALUE
 * @private
 */
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {

  /**
   * The iterable to group, coerced to an iterator.
   * @type {!goog.iter.Iterator}
   */
  this.iterator = goog.iter.toIterator(iterable);

  /**
   * A function for determining the key value for each element in the iterable.
   * If no function is provided, the identity function is used and returns the
   * element unchanged.
   * @type {function(...[VALUE]): KEY}
   */
  this.keyFunc = opt_keyFunc || goog.functions.identity;

  /**
   * The target key for determining the start of a group.
   * @type {KEY}
   */
  this.targetKey;

  /**
   * The current key visited during iteration.
   * @type {KEY}
   */
  this.currentKey;

  /**
   * The current value being added to the group.
   * @type {VALUE}
   */
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);


/** @override */
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();  // Exits on StopIteration
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};


/**
 * Performs the grouping of objects using the given key.
 * @param {KEY} targetKey  The target key object for the group.
 * @return {!Array.<VALUE>} An array of grouped objects.
 * @private
 */
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};


/**
 * Creates an iterator that returns arrays containing elements from the
 * {@code iterable} grouped by a key value. For iterables with repeated
 * elements (i.e. sorted according to a particular key function), this function
 * has a {@code uniq}-like effect. For example, grouping the array:
 * {@code [A, B, B, C, C, A]} produces
 * {@code [A, [A]], [B, [B, B]], [C, [C, C]], [A, [A]]}.
 * @see http://docs.python.org/2/library/itertools.html#itertools.groupby
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to group.
 * @param {function(...[VALUE]): KEY=} opt_keyFunc  Optional function for
 *     determining the key value for each group in the {@code iterable}. Default
 *     is the identity function.
 * @return {!goog.iter.Iterator.<!Array.<?>>} A new iterator that returns
 *     arrays of consecutive key and groups.
 * @template KEY, VALUE
 */
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};


/**
 * Gives an iterator that gives the result of calling the given function
 * <code>f</code> with the arguments taken from the next element from
 * <code>iterable</code> (the elements are expected to also be iterables).
 *
 * Similar to {@see goog.iter#map} but allows the function to accept multiple
 * arguments from the iterable.
 *
 * @param {!goog.iter.Iterable.<!goog.iter.Iterable>} iterable The iterable of
 *     iterables to iterate over.
 * @param {function(this:THIS,...[*]):RESULT} f The function to call for every
 *     element.  This function takes N+2 arguments, where N represents the
 *     number of items from the next element of the iterable. The two
 *     additional arguments passed to the function are undefined and the
 *     iterator itself. The function should return a new value.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within
 *     {@code f}.
 * @return {!goog.iter.Iterator.<RESULT>} A new iterator that returns the
 *     results of applying the function to each element in the original
 *     iterator.
 * @template THIS, RESULT
 */
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator();

  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };

  return iter;
};


/**
 * Returns an array of iterators each of which can iterate over the values in
 * {@code iterable} without advancing the others.
 * @see http://docs.python.org/2/library/itertools.html#itertools.tee
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to tee.
 * @param {number=} opt_num  The number of iterators to create. Default is 2.
 * @return {!Array.<goog.iter.Iterator.<VALUE>>} An array of iterators.
 * @template VALUE
 */
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });

  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };

  var createIterator = function(buffer) {
    // Each tee'd iterator has an associated buffer (initially empty). When a
    // tee'd iterator's buffer is empty, it calls
    // addNextIteratorValueToBuffers(), adding the next value to all tee'd
    // iterators' buffers, and then returns that value. This allows each
    // iterator to be advanced independently.
    var iter = new goog.iter.Iterator();

    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };

    return iter;
  };

  return goog.array.map(buffers, createIterator);
};


/**
 * Creates an iterator that returns arrays containing a count and an element
 * obtained from the given {@code iterable}.
 * @see http://docs.python.org/2/library/functions.html#enumerate
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to enumerate.
 * @param {number=} opt_start  Optional starting value. Default is 0.
 * @return {!goog.iter.Iterator.<!Array.<?>>} A new iterator containing
 *     count/item pairs.
 * @template VALUE
 */
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};


/**
 * Creates an iterator that returns the first {@code limitSize} elements from an
 * iterable. If this number is greater than the number of elements in the
 * iterable, all the elements are returned.
 * @see http://goo.gl/V0sihp Inspired by the limit iterator in Guava.
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to limit.
 * @param {number} limitSize  The maximum number of elements to return.
 * @return {!goog.iter.Iterator.<VALUE>} A new iterator containing
 *     {@code limitSize} elements.
 * @template VALUE
 */
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);

  var iterator = goog.iter.toIterator(iterable);

  var iter = new goog.iter.Iterator();
  var remaining = limitSize;

  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };

  return iter;
};


/**
 * Creates an iterator that is advanced {@code count} steps ahead. Consumed
 * values are silently discarded. If {@code count} is greater than the number
 * of elements in {@code iterable}, an empty iterator is returned. Subsequent
 * calls to {@code next()} will throw {@code goog.iter.StopIteration}.
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to consume.
 * @param {number} count  The number of elements to consume from the iterator.
 * @return {!goog.iter.Iterator.<VALUE>} An iterator advanced zero or more steps
 *     ahead.
 * @template VALUE
 */
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);

  var iterator = goog.iter.toIterator(iterable);

  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }

  return iterator;
};


/**
 * Creates an iterator that returns a range of elements from an iterable.
 * Similar to {@see goog.array#slice} but does not support negative indexes.
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to slice.
 * @param {number} start  The index of the first element to return.
 * @param {number=} opt_end  The index after the last element to return. If
 *     defined, must be greater than or equal to {@code start}.
 * @return {!goog.iter.Iterator.<VALUE>} A new iterator containing a slice of
 *     the original.
 * @template VALUE
 */
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);

  var iterator = goog.iter.consume(iterable, start);

  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(
        goog.math.isInt(/** @type {number} */ (opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start /* limitSize */);
  }

  return iterator;
};


/**
 * Checks an array for duplicate elements.
 * @param {Array.<VALUE>|goog.array.ArrayLike} arr The array to check for
 *     duplicates.
 * @return {boolean} True, if the array contains duplicates, false otherwise.
 * @private
 * @template VALUE
 */
// TODO(user): Consider moving this into goog.array as a public function.
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};


/**
 * Creates an iterator that returns permutations of elements in
 * {@code iterable}.
 *
 * Permutations are obtained by taking the Cartesian product of
 * {@code opt_length} iterables and filtering out those with repeated
 * elements. For example, the permutations of {@code [1,2,3]} are
 * {@code [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]}.
 * @see http://docs.python.org/2/library/itertools.html#itertools.permutations
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable from which to generate permutations.
 * @param {number=} opt_length Length of each permutation. If omitted, defaults
 *     to the length of {@code iterable}.
 * @return {!goog.iter.Iterator.<!Array.<VALUE>>} A new iterator containing the
 *     permutations of {@code iterable}.
 * @template VALUE
 */
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;

  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);

  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};


/**
 * Creates an iterator that returns combinations of elements from
 * {@code iterable}.
 *
 * Combinations are obtained by taking the {@see goog.iter#permutations} of
 * {@code iterable} and filtering those whose elements appear in the order they
 * are encountered in {@code iterable}. For example, the 3-length combinations
 * of {@code [0,1,2,3]} are {@code [[0,1,2], [0,1,3], [0,2,3], [1,2,3]]}.
 * @see http://docs.python.org/2/library/itertools.html#itertools.combinations
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable from which to generate combinations.
 * @param {number} length The length of each combination.
 * @return {!goog.iter.Iterator.<!Array.<VALUE>>} A new iterator containing
 *     combinations from the {@code iterable}.
 * @template VALUE
 */
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  // sortedIndexIterator will now give arrays of with the given length that
  // indicate what indexes into "elements" should be returned on each iteration.
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });

  var iter = new goog.iter.Iterator();

  function getIndexFromElements(index) {
    return elements[index];
  }

  iter.next = function() {
    return goog.array.map(
        /** @type {!Array.<number>} */
        (sortedIndexIterator.next()), getIndexFromElements);
  };

  return iter;
};


/**
 * Creates an iterator that returns combinations of elements from
 * {@code iterable}, with repeated elements possible.
 *
 * Combinations are obtained by taking the Cartesian product of {@code length}
 * iterables and filtering those whose elements appear in the order they are
 * encountered in {@code iterable}. For example, the 2-length combinations of
 * {@code [1,2,3]} are {@code [[1,1], [1,2], [1,3], [2,2], [2,3], [3,3]]}.
 * @see http://docs.python.org/2/library/itertools.html#itertools.combinations_with_replacement
 * @see http://en.wikipedia.org/wiki/Combination#Number_of_combinations_with_repetition
 * @param {!goog.iter.Iterator.<VALUE>|!goog.iter.Iterable} iterable The
 *     iterable to combine.
 * @param {number} length The length of each combination.
 * @return {!goog.iter.Iterator.<!Array.<VALUE>>} A new iterator containing
 *     combinations from the {@code iterable}.
 * @template VALUE
 */
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  // sortedIndexIterator will now give arrays of with the given length that
  // indicate what indexes into "elements" should be returned on each iteration.
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });

  var iter = new goog.iter.Iterator();

  function getIndexFromElements(index) {
    return elements[index];
  }

  iter.next = function() {
    return goog.array.map(
        /** @type {!Array.<number>} */
        (sortedIndexIterator.next()), getIndexFromElements);
  };

  return iter;
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Datastructure: Hash Map.
 *
 * @author arv@google.com (Erik Arvidsson)
 *
 * This file contains an implementation of a Map structure. It implements a lot
 * of the methods used in goog.structs so those functions work on hashes. This
 * is best suited for complex key types. For simple keys such as numbers and
 * strings, and where special names like __proto__ are not a concern, consider
 * using the lighter-weight utilities in goog.object.
 */


goog.provide('goog.structs.Map');

goog.require('goog.iter.Iterator');
goog.require('goog.iter.StopIteration');
goog.require('goog.object');



/**
 * Class for Hash Map datastructure.
 * @param {*=} opt_map Map or Object to initialize the map with.
 * @param {...*} var_args If 2 or more arguments are present then they
 *     will be used as key-value pairs.
 * @constructor
 * @template K, V
 */
goog.structs.Map = function(opt_map, var_args) {

  /**
   * Underlying JS object used to implement the map.
   * @private {!Object}
   */
  this.map_ = {};

  /**
   * An array of keys. This is necessary for two reasons:
   *   1. Iterating the keys using for (var key in this.map_) allocates an
   *      object for every key in IE which is really bad for IE6 GC perf.
   *   2. Without a side data structure, we would need to escape all the keys
   *      as that would be the only way we could tell during iteration if the
   *      key was an internal key or a property of the object.
   *
   * This array can contain deleted keys so it's necessary to check the map
   * as well to see if the key is still in the map (this doesn't require a
   * memory allocation in IE).
   * @private {!Array.<string>}
   */
  this.keys_ = [];

  /**
   * The number of key value pairs in the map.
   * @private {number}
   */
  this.count_ = 0;

  /**
   * Version used to detect changes while iterating.
   * @private {number}
   */
  this.version_ = 0;

  var argLength = arguments.length;

  if (argLength > 1) {
    if (argLength % 2) {
      throw Error('Uneven number of arguments');
    }
    for (var i = 0; i < argLength; i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else if (opt_map) {
    this.addAll(/** @type {Object} */ (opt_map));
  }
};


/**
 * @return {number} The number of key-value pairs in the map.
 */
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};


/**
 * Returns the values of the map.
 * @return {!Array.<V>} The values in the map.
 */
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();

  var rv = [];
  for (var i = 0; i < this.keys_.length; i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};


/**
 * Returns the keys of the map.
 * @return {!Array.<string>} Array of string values.
 */
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return /** @type {!Array.<string>} */ (this.keys_.concat());
};


/**
 * Whether the map contains the given key.
 * @param {*} key The key to check for.
 * @return {boolean} Whether the map contains the key.
 */
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};


/**
 * Whether the map contains the given value. This is O(n).
 * @param {V} val The value to check for.
 * @return {boolean} Whether the map contains the value.
 */
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0; i < this.keys_.length; i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};


/**
 * Whether this map is equal to the argument map.
 * @param {goog.structs.Map} otherMap The map against which to test equality.
 * @param {function(V, V): boolean=} opt_equalityFn Optional equality function
 *     to test equality of values. If not specified, this will test whether
 *     the values contained in each map are identical objects.
 * @return {boolean} Whether the maps are equal.
 */
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }

  if (this.count_ != otherMap.getCount()) {
    return false;
  }

  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;

  this.cleanupKeysArray_();
  for (var key, i = 0; key = this.keys_[i]; i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }

  return true;
};


/**
 * Default equality test for values.
 * @param {*} a The first value.
 * @param {*} b The second value.
 * @return {boolean} Whether a and b reference the same object.
 */
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};


/**
 * @return {boolean} Whether the map is empty.
 */
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};


/**
 * Removes all key-value pairs from the map.
 */
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};


/**
 * Removes a key-value pair based on the key. This is O(logN) amortized due to
 * updating the keys array whenever the count becomes half the size of the keys
 * in the keys array.
 * @param {*} key  The key to remove.
 * @return {boolean} Whether object was removed.
 */
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;

    // clean up the keys array if the threshhold is hit
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }

    return true;
  }
  return false;
};


/**
 * Cleans up the temp keys array by removing entries that are no longer in the
 * map.
 * @private
 */
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    // First remove keys that are no longer in the map.
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }

  if (this.count_ != this.keys_.length) {
    // If the count still isn't correct, that means we have duplicates. This can
    // happen when the same key is added and removed multiple times. Now we have
    // to allocate one extra Object to remove the duplicates. This could have
    // been done in the first pass, but in the common case, we can avoid
    // allocating an extra object by only doing this when necessary.
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!(goog.structs.Map.hasKey_(seen, key))) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};


/**
 * Returns the value for the given key.  If the key is not found and the default
 * value is not given this will return {@code undefined}.
 * @param {*} key The key to get the value for.
 * @param {DEFAULT=} opt_val The value to return if no item is found for the
 *     given key, defaults to undefined.
 * @return {V|DEFAULT} The value for the given key.
 * @template DEFAULT
 */
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};


/**
 * Adds a key-value pair to the map.
 * @param {*} key The key.
 * @param {V} value The value to add.
 * @return {*} Some subclasses return a value.
 */
goog.structs.Map.prototype.set = function(key, value) {
  if (!(goog.structs.Map.hasKey_(this.map_, key))) {
    this.count_++;
    this.keys_.push(key);
    // Only change the version if we add a new key.
    this.version_++;
  }
  this.map_[key] = value;
};


/**
 * Adds multiple key-value pairs from another goog.structs.Map or Object.
 * @param {Object} map  Object containing the data to add.
 */
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  // we could use goog.array.forEach here but I don't want to introduce that
  // dependency just for this.
  for (var i = 0; i < keys.length; i++) {
    this.set(keys[i], values[i]);
  }
};


/**
 * Calls the given function on each entry in the map.
 * @param {function(this:T, V, K, goog.structs.Map.<K,V>)} f
 * @param {T=} opt_obj The value of "this" inside f.
 * @template T
 */
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};


/**
 * Clones a map and returns a new map.
 * @return {!goog.structs.Map} A new map with the same key-value pairs.
 */
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};


/**
 * Returns a new map in which all the keys and values are interchanged
 * (keys become values and values become keys). If multiple keys map to the
 * same value, the chosen transposed value is implementation-dependent.
 *
 * It acts very similarly to {goog.object.transpose(Object)}.
 *
 * @return {!goog.structs.Map} The transposed map.
 */
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map();
  for (var i = 0; i < this.keys_.length; i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }

  return transposed;
};


/**
 * @return {!Object} Object representation of the map.
 */
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0; i < this.keys_.length; i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};


/**
 * Returns an iterator that iterates over the keys in the map.  Removal of keys
 * while iterating might have undesired side effects.
 * @return {!goog.iter.Iterator} An iterator over the keys in the map.
 */
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};


/**
 * Returns an iterator that iterates over the values in the map.  Removal of
 * keys while iterating might have undesired side effects.
 * @return {!goog.iter.Iterator} An iterator over the values in the map.
 */
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};


/**
 * Returns an iterator that iterates over the values or the keys in the map.
 * This throws an exception if the map was mutated since the iterator was
 * created.
 * @param {boolean=} opt_keys True to iterate over the keys. False to iterate
 *     over the values.  The default value is false.
 * @return {!goog.iter.Iterator} An iterator over the values or keys in the map.
 */
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  // Clean up keys to minimize the risk of iterating over dead keys.
  this.cleanupKeysArray_();

  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;

  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error('The map has changed since the iterator was created');
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};


/**
 * Safe way to test for hasOwnProperty.  It even allows testing for
 * 'hasOwnProperty'.
 * @param {Object} obj The object to test for presence of the given key.
 * @param {*} key The key to check for.
 * @return {boolean} Whether the object has the key.
 * @private
 */
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Generates packets from a ByteArray.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.packet.factory');

goog.require('e2e.openpgp.error.ParseError');


/**
 * Dictionary of parsers for specific Packet types. The keys are the packet
 * tags.
 * @type {!Object.<number,
 *     function(!e2e.ByteArray):!e2e.openpgp.packet.Packet>}
 * @private
 */
e2e.openpgp.packet.factory.parsers_ = {};


/**
 * Registers a Packet as the default parser for a tag.
 * @param {function(new:e2e.openpgp.packet.Packet, ...)} packet The
 *     constructor of the packet.
 */
e2e.openpgp.packet.factory.add = function(packet) {
  e2e.openpgp.packet.factory.parsers_[packet.prototype.tag] =
      packet.parse;
};


/**
 * Parses a packet of the given tag and returns it.
 * Throws a {@code e2e.openpgp.error.ParseError} for nonexistent packets.
 * @param {number} tag The tag to generate a packet for.
 * @param {!e2e.ByteArray} body The body of the packet.
 * @return {!e2e.openpgp.packet.Packet} The packet.
 */
e2e.openpgp.packet.factory.parse = function(tag, body) {
  if (e2e.openpgp.packet.factory.parsers_.hasOwnProperty(tag)) {
    return e2e.openpgp.packet.factory.parsers_[tag](body);
  }
  throw new e2e.openpgp.error.ParseError(
      'Can not parse packet with tag ' + tag + '.');
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Methods for parsing blocks, messages and packets.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.parse');

goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.packet.factory');
goog.require('goog.array');


/**
 * Defines the packet's length size from the first 2 bits of the tag.
 * @type {!Array.<number>}
 * @const
 * @private
 */
e2e.openpgp.parse.LBITS_TO_PACKET_LENGTH_SIZE_ = [1, 2, 4];


/**
 * Value that instructs old format packets to consume all packet body.
 * @type {number}
 * @const
 * @private
 */
e2e.openpgp.parse.CONSUME_ALL_PACKET_BODY_ = 3;


/**
 * Calculates the body of an old packet format (RFC 4880 Section 4.2.1).
 * Note it will consume the required bytes from the data, so that multiple
 * calls with the same data parse sequential packets.
 * Will throw a ParseError if the packet is invalid.
 * @param {number} lbits The 2 last bits of the packet tag.
 * @param {!(e2e.ByteArray|e2e.openpgp.ByteStream)} data The data of
 *     the packet.
 * @return {!Array.<number>} The body of the packet.
 * @private
 */
e2e.openpgp.parse.getBodyOldFormatPacket_ = function(lbits, data) {
  var packetLength;
  if (lbits == e2e.openpgp.parse.CONSUME_ALL_PACKET_BODY_) {
    // This means all data available is part of the packet.
    packetLength = data.length;
  } else {
    var packetLengthSize =
        e2e.openpgp.parse.LBITS_TO_PACKET_LENGTH_SIZE_[lbits];
    var packetLengthBytes = data.splice(0, packetLengthSize).reverse();
    packetLength = goog.array.reduce(packetLengthBytes, function(r, v, exp) {
      return r + (v * Math.pow(0x100, exp));
    }, 0);
  }

  if (data.length < packetLength) {
    throw new e2e.openpgp.error.ParseError(
        'invalid packet length old format');
  }
  return data.splice(0, packetLength);
};


/**
 * The mask to use to figure out whether the packet is old format or new format.
 * @type {number}
 * @const
 * @private
 */
e2e.openpgp.parse.PACKET_FORMAT_MASK_ = 0x40;


/**
 * Returns whether a packet tag is old format (RFC 4880 Section 4.2).
 * @param {number} ptag The first byte of the packet.
 * @return {boolean} Whether the ptag is old format.
 * @private
 */
e2e.openpgp.parse.isOldFormatPacket_ = function(ptag) {
  return !(ptag & e2e.openpgp.parse.PACKET_FORMAT_MASK_);
};


/**
 * Minumum value for a two bytes packet length.
 * @type {number}
 * @const
 */
e2e.openpgp.parse.TWO_BYTE_LENGTH_MIN = 192;


/**
 * Minumum value for a partial body length.
 * @type {number}
 * @const
 * @private
 */
e2e.openpgp.parse.PARTIAL_BODY_LENGTH_MIN_ = 224;


/**
 * Mask to extract the length of a partial body length.
 * @type {number}
 * @const
 * @private
 */
e2e.openpgp.parse.PARTIAL_BODY_LENGTH_MASK_ = 0x1F;


/**
 * Value for a five bytes packet length.
 * @type {number}
 * @const
 */
e2e.openpgp.parse.FIVE_BYTE_LENGTH_VAL = 255;


/**
 * Parses the body out of a packet with new format (RFC 4880 Section 4.2.2).
 * Note it will consume the required bytes from the data, so that multiple
 * calls with the same data parse sequential packets.
 * Throws a {@see e2e.openpgp.error.ParseError} if the packet is invalid.
 * @param {!(e2e.ByteArray|e2e.openpgp.ByteStream)} data The data to
 *     parse.
 * @return {!Array.<number>} The body of the packet.
 * @private
 */
e2e.openpgp.parse.getBodyNewFormatPacket_ = function(data) {
  var body = [];
  var incompletePacket = true;
  var packetLength;

  while (incompletePacket) {
    incompletePacket = false;
    var firstByte = data.shift();

    if (firstByte < e2e.openpgp.parse.TWO_BYTE_LENGTH_MIN) {
      // One byte length packet size.
      packetLength = firstByte;
    } else if (firstByte < e2e.openpgp.parse.PARTIAL_BODY_LENGTH_MIN_) {
      // Two bytes length packet size.
      var secondByte = data.shift();
      packetLength = (
          (firstByte - e2e.openpgp.parse.TWO_BYTE_LENGTH_MIN) << 8) +
          (secondByte + e2e.openpgp.parse.TWO_BYTE_LENGTH_MIN);
    } else if (firstByte == e2e.openpgp.parse.FIVE_BYTE_LENGTH_VAL) {
      // Five bytes length packet size.
      var packetLengthBytes = data.splice(0, 4).reverse();
      packetLength = goog.array.reduce(packetLengthBytes, function(r, b, exp) {
        return r + (b * Math.pow(0x100, exp));
      }, 0);
    } else {
      // Partial body length.
      incompletePacket = true;
      packetLength = Math.pow(
          2, firstByte & e2e.openpgp.parse.PARTIAL_BODY_LENGTH_MASK_);
    }

    if (packetLength <= data.length) {
      goog.array.extend(body, data.splice(0, packetLength));
    } else {
      throw new e2e.openpgp.error.ParseError(
          'invalid packet length new format');
    }
  }
  return body;
};


/**
 * Mask to extract the ptag bit to see if it's a valid packet.
 * @type {number}
 * @const
 * @private
 */
e2e.openpgp.parse.P_TAG_TEST_MASK_ = 0x80;


/**
 * Mask to extract the value out of a packet's tag.
 * @type {number}
 * @const
 * @private
 */
e2e.openpgp.parse.P_TAG_VALUE_MASK_ = 0x3F;


/**
 * Number of bits to shift from the tag in old packets.
 * @type {number}
 * @const
 * @private
 */
e2e.openpgp.parse.P_TAG_OLD_PACKET_SHIFT_ = 2;


/**
 * Parses a packet and calls the specific subpacket class if available.
 * Specified in RFC 4880 Section 4.
 * Throws a {@code e2e.openpgp.error.ParseError} if the packet is invalid.
 * @param {!(e2e.ByteArray|e2e.openpgp.ByteStream)} data
 *     The data to parse as a packet.
 * @return {e2e.openpgp.packet.Packet} The packet generated.
 */
e2e.openpgp.parse.parseSerializedPacket = function(data) {
  var ptype, body;
  var ptag = data.shift();
  if ((ptag & e2e.openpgp.parse.P_TAG_TEST_MASK_) == 0) {
    throw new e2e.openpgp.error.ParseError('invalid packet tag bit');
  }
  ptype = ptag & e2e.openpgp.parse.P_TAG_VALUE_MASK_;
  if (e2e.openpgp.parse.isOldFormatPacket_(ptag)) {
    // Strip the last few bits of the tag (which represent length).
    body = e2e.openpgp.parse.getBodyOldFormatPacket_(
        ptype & (1 << e2e.openpgp.parse.P_TAG_OLD_PACKET_SHIFT_) - 1, data);
    ptype = ptype >>> e2e.openpgp.parse.P_TAG_OLD_PACKET_SHIFT_;
  } else {
    body = e2e.openpgp.parse.getBodyNewFormatPacket_(data);
  }
  // Call the specific parser depending on the tag.
  return e2e.openpgp.packet.factory.parse(ptype, body);
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines an encryption or signing scheme.
 */

goog.require('e2e.algorithm.KeyLocations');
goog.require('e2e.async.Result');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.provide('e2e.scheme.EncryptionScheme');
goog.provide('e2e.scheme.Scheme');
goog.provide('e2e.scheme.SignatureScheme');


/**
 * @typedef {{then: function(...):e2e.scheme.CryptoPromise_,
 *     catch: function(...):e2e.scheme.CryptoPromise_}}
 * @private
 */
e2e.scheme.CryptoPromise_;



/**
 * Crypto scheme for encryption or signing.
 * @param {e2e.cipher.Cipher|e2e.signer.Signer} cipher
 * @constructor
 */
e2e.scheme.Scheme = function(cipher) {
  this.cipher = cipher;

  var loc = cipher.getKey().loc;
  this.useWebCrypto = (loc === e2e.algorithm.KeyLocations.WEB_CRYPTO);
  this.useHardwareCrypto = (loc === e2e.algorithm.KeyLocations.HARDWARE);
  if (this.useWebCrypto) {
    this.crypto = goog.global.crypto;
    if (!('subtle' in this.crypto && 'encrypt' in this.crypto.subtle)) {
      throw new e2e.openpgp.error.UnsupportedError(
          'No WebCrypto encrypt(), but the key is stored in WebCrypto!');
    }
    this.crypto = this.crypto.subtle;
    this.key = cipher.getWebCryptoKey();
    goog.asserts.assert(goog.isDefAndNotNull(this.key));
  } else if (this.useHardwareCrypto) {
    /* TODO(user): when cl/70331225 is submitted and integrated into e2e,
     * replace with the apropriate.
     */
    throw new e2e.openpgp.error.UnsupportedError(
        "API to hardware isn't done yet!");
  } else {
    // use javascript crypto
  }
};


/**
 * Crypto object as used by the Scheme.
 * @type {{encrypt: function(...):e2e.scheme.CryptoPromise_,
 *     decrypt: function(...):e2e.scheme.CryptoPromise_}}
 */
e2e.scheme.Scheme.prototype.crypto;



/** Crypto scheme for encryption.
 * @param {e2e.cipher.Cipher} cipher
 * @constructor
 * @extends {e2e.scheme.Scheme}
 */
e2e.scheme.EncryptionScheme = function(cipher) {
  goog.base(this, cipher);
};
goog.inherits(e2e.scheme.EncryptionScheme, e2e.scheme.Scheme);


/**
 * @param {!e2e.ByteArray} plaintext
 * @return {!e2e.async.Result.<e2e.cipher.ciphertext.CipherText>}
 */
e2e.scheme.EncryptionScheme.prototype.encrypt = function(plaintext) {
  if (this.useWebCrypto) {
    return this.encryptWebCrypto(plaintext);
  } else {
    /* Don't bother doing encryption in hardware since it provides no security
     * benefit. We already have the destination public key and the message.
     */
    return this.encryptJavaScript(plaintext);
  }
};


/**
 * @param {e2e.cipher.ciphertext.CipherText} ciphertext
 * @return {!e2e.async.Result.<!e2e.ByteArray>}
 */
e2e.scheme.EncryptionScheme.prototype.decrypt = function(ciphertext) {
  if (this.useWebCrypto) {
    return this.decryptWebCrypto(ciphertext);
  } else if (this.useHardware) {
    return this.decryptHardware(ciphertext);
  } else {
    return this.decryptJavaScript(ciphertext);
  }
};


/**
 * JavaScript implementation of the scheme.
 * @param {!e2e.ByteArray} plaintext
 * @return {!e2e.async.Result.<e2e.cipher.ciphertext.CipherText>}
 */
e2e.scheme.EncryptionScheme.prototype.encryptJavaScript;


/**
 * WebCrypto implementation of the scheme.
 * @param {!e2e.ByteArray} plaintext
 * @return {!e2e.async.Result.<e2e.cipher.ciphertext.CipherText>}
 */
e2e.scheme.EncryptionScheme.prototype.encryptWebCrypto;


/**
 * JavaScript implementation of the scheme.
 * @param {e2e.cipher.ciphertext.CipherText} ciphertext
 * @return {!e2e.async.Result.<!e2e.ByteArray>}
 */
e2e.scheme.EncryptionScheme.prototype.decryptJavaScript;


/**
 * Hardware implementation (key is only accessible to hardware).
 * @param {e2e.cipher.ciphertext.CipherText} ciphertext
 * @return {!e2e.async.Result.<!e2e.ByteArray>}
 */
e2e.scheme.EncryptionScheme.prototype.decryptHardware;


/**
 * WebCrypto implementation of the scheme.
 * @param {e2e.cipher.ciphertext.CipherText} ciphertext
 * @return {!e2e.async.Result.<!e2e.ByteArray>}
 */
e2e.scheme.EncryptionScheme.prototype.decryptWebCrypto;



/** Crypto scheme for signing.
 * @param {e2e.signer.Signer} signer
 * @constructor
 * @extends {e2e.scheme.Scheme}
 */
e2e.scheme.SignatureScheme = function(signer) {
  goog.base(this, signer);
};
goog.inherits(e2e.scheme.SignatureScheme, e2e.scheme.Scheme);


/**
 * Applies the signing algorithm to the data.
 * @param {!e2e.ByteArray} data The data to sign.
 * @return {!e2e.async.Result.<!e2e.signer.signature.Signature>} The
 *     result of signing.
 */
e2e.scheme.SignatureScheme.prototype.sign = function(data) {
  if (this.useWebCrypto) {
    return this.signWebCrypto(data);
  } else if (this.useHardware) {
    return this.signHardware(data);
  } else {
    return this.signJavaScript(data);
  }
};


/**
 * Applies the verification algorithm to the data.
 * @param {e2e.ByteArray} m The data to verify.
 * @param {e2e.signer.signature.Signature} sig The signature to check.
 * @return {!e2e.async.Result.<boolean>} The result of verification.
 */
e2e.scheme.SignatureScheme.prototype.verify = function(m, sig) {
  if (!(goog.isDefAndNotNull(m) && goog.isDefAndNotNull(sig))) {
    return e2e.async.Result.toResult(false);
  }
  if (this.useWebCrypto) {
    return this.verifyWebCrypto(m, sig);
  } else {
    // Don't bother verifying in hardware
    return this.verifyJavaScript(m, sig);
  }
};


/**
 * JavaScript implementation of the scheme.
 * @param {!e2e.ByteArray} data
 * @return {!e2e.async.Result.<!e2e.signer.signature.Signature>}
 */
e2e.scheme.SignatureScheme.prototype.signJavaScript;


/**
 * Hardware implementation of the scheme.
 * @param {!e2e.ByteArray} data
 * @return {!e2e.async.Result.<!e2e.signer.signature.Signature>}
 */
e2e.scheme.SignatureScheme.prototype.signHardware;


/**
 * WebCrypto implementation of the scheme.
 * @param {!e2e.ByteArray} data
 * @return {!e2e.async.Result.<!e2e.signer.signature.Signature>}
 */
e2e.scheme.SignatureScheme.prototype.signWebCrypto;


/**
 * JavaScript implementation of the scheme.
 * @param {!e2e.ByteArray} data The data to verify.
 * @param {!e2e.signer.signature.Signature} sig The signature to check.
 * @return {!e2e.async.Result.<boolean>}
 */
e2e.scheme.SignatureScheme.prototype.verifyJavaScript;


/**
 * WebCrypto implementation of the scheme.
 * @param {!e2e.ByteArray} data The data to verify.
 * @param {!e2e.signer.signature.Signature} sig The signature to check.
 * @return {!e2e.async.Result.<boolean>}
 */
e2e.scheme.SignatureScheme.prototype.verifyWebCrypto;

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A scheme for using different sources (e.g., webcrypto, JS) to
 * sign with ecdsa.
 */
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.scheme.SignatureScheme');

goog.provide('e2e.scheme.Ecdsa');



/**
 * Provides functions that e2e.scheme.Scheme will call.
 * @param {e2e.signer.Signer} signer
 * @constructor
 * @extends {e2e.scheme.SignatureScheme}
 */
e2e.scheme.Ecdsa = function(signer) {
  this.signer = signer;
  // This isn't actually implemented in Chrome yet...
  this.algorithmIdentifier = {
    'name': 'ECDSA',
    'namedCurve': 'P-256',
    'hash': { 'name' : 'SHA-256' }
  };
  goog.base(this, signer);
};
goog.inherits(e2e.scheme.Ecdsa, e2e.scheme.SignatureScheme);


/** @override */
e2e.scheme.Ecdsa.prototype.verifyWebCrypto = function(m, sig) {
  throw new e2e.openpgp.error.UnsupportedError(
      "Chrome doesn't support ecdsa yet!");
};


/** @override */
e2e.scheme.Ecdsa.prototype.signWebCrypto = function(data) {
  throw new e2e.openpgp.error.UnsupportedError(
      "Chrome doesn't support ecdsa yet!");
};


/** @override */
e2e.scheme.Ecdsa.prototype.verifyJavaScript = function(m, sig) {
  return this.signer.verify(m, sig);
};


/** @override */
e2e.scheme.Ecdsa.prototype.signJavaScript = function(data) {
  return this.signer.sign(data);
};


/** @override */
e2e.scheme.Ecdsa.prototype.signHardware = function(data) {
  throw new e2e.openpgp.error.UnsupportedError(
      "Hardware API doesn't exist yet");
};



// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.require('e2e.async.Result');
/**
 * @fileoverview A scheme for using different sources (e.g., webcrypto, JS) to
 * sign with RSA.
 */
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.scheme.SignatureScheme');
goog.require('goog.asserts');

goog.provide('e2e.scheme.Rsassa');



/**
 * Provides functions that e2e.scheme.Scheme will call.
 * @param {e2e.signer.Signer} signer
 * @constructor
 * @extends {e2e.scheme.SignatureScheme}
 */
e2e.scheme.Rsassa = function(signer) {
  this.signer = signer;
  goog.base(this, signer);
  this.algorithmIdentifier = {
    'name': 'RSASSA-PKCS1-v1_5',
    'modulusLength': signer.keySize,
    'publicExponent': new Uint8Array(signer.getKey()['e']),
    'hash': {'name': this.key.publicKey.algorithm.hash.name}
  };
};
goog.inherits(e2e.scheme.Rsassa, e2e.scheme.SignatureScheme);


/** @typedef
 * {!{algorithm: !{hash: !{name: string}, modulusLength: number, name: string,
 * publicExponent: !Uint8Array}, extractable: boolean, type: string,
 * usages: !Array.<string>}}
*/
e2e.scheme.Rsassa.Key;


/** @typedef
 * {!{privateKey: e2e.scheme.Rsassa.Key, publicKey: e2e.scheme.Rsassa.Key}}
 */
e2e.scheme.Rsassa.KeyPair;


/** @override */
e2e.scheme.Rsassa.prototype.verifyWebCrypto = function(m, sig) {
  goog.asserts.assert('verify' in this.crypto, 'No WebCrypto verify()!');
  var result = new e2e.async.Result;
  /** @type {!ArrayBuffer} */
  var webcrypto_sig = new Uint8Array(sig['s']).buffer;
  this.crypto.verify(this.algorithmIdentifier, this.key.publicKey,
      webcrypto_sig, new Uint8Array(m)
  ).then(
      goog.bind(result.callback, result),
      goog.bind(result.errback, result));
  return result;
};


/** @override */
e2e.scheme.Rsassa.prototype.signWebCrypto = function(data) {
  /* TODO(user): Replace the asserts and ugly casting with actual types once
   * we can rely on them being in stable versions of Chrome and can access the
   * type definitions.
   */
  goog.asserts.assert('sign' in this.crypto, 'No WebCrypto sign()!');
  var result = new e2e.async.Result;
  this.crypto.sign(this.algorithmIdentifier, this.key.privateKey,
      new Uint8Array(data)
  ).then(
      goog.bind(result.callback, result),
      goog.bind(result.errback, result));
  return result.addCallback(function(sig) {
    return {'s': [].slice.call(new Uint8Array(sig))};
  });
};


/** @override */
e2e.scheme.Rsassa.prototype.verifyJavaScript = function(m, sig) {
  return this.signer.verify(m, sig);
};


/** @override */
e2e.scheme.Rsassa.prototype.signJavaScript = function(data) {
  return this.signer.sign(data);
};


/** @override */
e2e.scheme.Rsassa.prototype.signHardware = function(data) {
  throw new e2e.openpgp.error.UnsupportedError(
      "Hardware API doesn't support RSA yet");
};




// Copyright 2012 Google Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Encodes.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.pkcs.Error');

goog.require('goog.debug.Error');



/**
 * Represents errors triggered by PKCS.
 * @param {string} msg The message generated form pkcs.
 * @extends {goog.debug.Error}
 * @constructor
 */
e2e.pkcs.Error = function(msg) {
  goog.base(this, msg);
};
goog.inherits(e2e.pkcs.Error, goog.debug.Error);

// Copyright 2012 Google Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Encodes a message according to the EMSA PKCS1 v1.5 standard.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.pkcs.ASN_PREFIXES');
goog.provide('e2e.pkcs.EMSA_PKCS1_v1_5');

/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.ByteArray');
goog.require('e2e.hash.Algorithm');
goog.require('e2e.pkcs.Error');
goog.require('goog.array');


/**
 * List of prefixes per hash algorithm.
 * @type {!Object.<e2e.hash.Algorithm, !e2e.ByteArray>}
 */
e2e.pkcs.ASN_PREFIXES = {};
e2e.pkcs.ASN_PREFIXES[e2e.hash.Algorithm.MD5] = [
      0x30, 0x20, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86, 0x48, 0x86, 0xF7,
      0x0D, 0x02, 0x05, 0x05, 0x00, 0x04, 0x10];
e2e.pkcs.ASN_PREFIXES[e2e.hash.Algorithm.RIPEMD] = [
      0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x24, 0x03, 0x02,
      0x01, 0x05, 0x00, 0x04, 0x14];
e2e.pkcs.ASN_PREFIXES[e2e.hash.Algorithm.SHA1] = [
      0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0E, 0x03, 0x02, 0x1A,
      0x05, 0x00, 0x04, 0x14];
e2e.pkcs.ASN_PREFIXES[e2e.hash.Algorithm.SHA224] = [
      0x30, 0x2d, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65,
      0x03, 0x04, 0x02, 0x04, 0x05, 0x00, 0x04, 0x1C];
e2e.pkcs.ASN_PREFIXES[e2e.hash.Algorithm.SHA256] = [
      0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65,
      0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20];
e2e.pkcs.ASN_PREFIXES[e2e.hash.Algorithm.SHA384] = [
      0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65,
      0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30];
e2e.pkcs.ASN_PREFIXES[e2e.hash.Algorithm.SHA512] = [
      0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65,
      0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40];


/**
 * Encodes the message as specified in EMSA PKCS1 v1.5.
 * @param {!e2e.hash.Hash} hash An instance of hash to use.
 * @param {!e2e.ByteArray} m The message to encode.
 * @param {number} ml The intended length of the encoded message.
 * @param {boolean=} opt_noLeadingZero Whether to strip the leading 0.
 * @return {!e2e.ByteArray} The encoded message.
 */
e2e.pkcs.EMSA_PKCS1_v1_5 = function(hash, m, ml, opt_noLeadingZero) {
  var h = hash.hash(m);
  var t = [];
  if (!goog.isDef(e2e.pkcs.ASN_PREFIXES[hash.algorithm])) {
    throw new e2e.pkcs.Error('invalid hash for signature');
  }
  goog.array.extend(t, e2e.pkcs.ASN_PREFIXES[hash.algorithm]);
  goog.array.extend(t, h);
  var tlen = t.length;
  if (ml < tlen + 11) {
    throw new e2e.pkcs.Error(
        'intended encoded message length too short');
  }
  var ps = goog.array.repeat(0xFF, ml - tlen - 3 + 1);
  var prefix = opt_noLeadingZero ? [0x01] : [0x00, 0x01];
  var em = prefix.concat(ps).concat([0x00]).concat(t);
  return em;
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Provides the type definitions of ciphertext.
 */

/** @suppress {extraProvide} provide the whole namespace for simplicity */
goog.provide('e2e.cipher.ciphertext');
goog.provide('e2e.cipher.ciphertext.Asymmetric');
goog.provide('e2e.cipher.ciphertext.AsymmetricAsync');
goog.provide('e2e.cipher.ciphertext.CipherText');
goog.provide('e2e.cipher.ciphertext.Ecdh');
goog.provide('e2e.cipher.ciphertext.Elgamal');
goog.provide('e2e.cipher.ciphertext.Rsa');
goog.provide('e2e.cipher.ciphertext.Symmetric');


/**
 * @typedef {?{c: !e2e.ByteArray}}
 */
e2e.cipher.ciphertext.Rsa;


/**
 * @typedef {?{u: !e2e.ByteArray, v:!e2e.ByteArray}}
 */
e2e.cipher.ciphertext.Elgamal;


/**
 * @typedef {?{u: !e2e.ByteArray, v:!e2e.ByteArray}}
 */
e2e.cipher.ciphertext.Ecdh;


/**
 * @typedef {e2e.ByteArray}
 */
e2e.cipher.ciphertext.Symmetric;


/**
 * @typedef {e2e.cipher.ciphertext.Ecdh|
 *     e2e.cipher.ciphertext.Elgamal|
 *     e2e.cipher.ciphertext.Rsa|null}
 */
e2e.cipher.ciphertext.Asymmetric;

/**
 * @typedef {e2e.async.Result.<!e2e.cipher.ciphertext.Ecdh>|
 *     e2e.async.Result.<!e2e.cipher.ciphertext.Elgamal>|
 *     e2e.async.Result.<!e2e.cipher.ciphertext.Rsa>}
 */
e2e.cipher.ciphertext.AsymmetricAsync;


/**
 * @typedef {e2e.cipher.ciphertext.Symmetric|
 *     e2e.cipher.ciphertext.Asymmetric|
 *     e2e.cipher.ciphertext.AsymmetricAsync}
 */
e2e.cipher.ciphertext.CipherText;

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a base class to implement ciphers on top. Registers
 *     and returns implementations of specific algorithms.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.cipher.Algorithm');
goog.provide('e2e.cipher.AsymmetricCipher');
goog.provide('e2e.cipher.Cipher');
goog.provide('e2e.cipher.Error');
goog.provide('e2e.cipher.SymmetricCipher');
goog.provide('e2e.cipher.factory');

goog.require('e2e.Algorithm');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.ByteArray');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.cipher.ciphertext');
goog.require('goog.debug.Error');

/**
 * Algorithms (used to define which algorithm is defined).
 * @enum {string}
 */
e2e.cipher.Algorithm = {
  // Symmetric Ciphers
  'PLAINTEXT': 'PLAINTEXT',
  'IDEA': 'IDEA',
  'TRIPLE_DES': 'TRIPLE_DES',
  'CAST5': 'CAST5',
  'BLOWFISH': 'BLOWFISH',
  'AES128': 'AES128',
  'AES192': 'AES192',
  'AES256': 'AES256',
  'TWOFISH': 'TWOFISH',
  // Asymmetric Ciphers
  'RSA': 'RSA',
  'ELGAMAL': 'ELGAMAL',
  'ECDH': 'ECDH'
};
/**
 * Error class used to represent errors in the ciphers.
 * @param {*=} opt_msg Optional message to send.
 * @extends {goog.debug.Error}
 * @constructor
 */
e2e.cipher.Error = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.cipher.Error, goog.debug.Error);



/**
 * @interface
 * @extends {e2e.Algorithm}
 */
e2e.cipher.Cipher = function() {};


/**
 * Representation of a symmetric cipher.
 * @interface
 * @extends {e2e.cipher.Cipher}
 */
e2e.cipher.SymmetricCipher = function() {};


/**
 * The block size for this cipher in bytes.
 * @type {number}
 */
e2e.cipher.SymmetricCipher.prototype.blockSize;


/**
 * Encrypts the given data using the current cipher and key.
 * @param {!e2e.ByteArray} data The data to encrypt.
 * @return {!e2e.async.Result.<!e2e.cipher.ciphertext.Symmetric>}
 *     The result of encryption.
 */
e2e.cipher.SymmetricCipher.prototype.encrypt = goog.abstractMethod;


/**
 * @type {number} The cipher block size.
 */
e2e.cipher.SymmetricCipher.prototype.blockSize;


/**
 * Decrypts the given data using the current cipher and key.
 * @param {!e2e.cipher.ciphertext.Symmetric} data The encrypted data.
 * @return {!e2e.async.Result.<!e2e.ByteArray>} The result of
 *     decryption.
 */
e2e.cipher.SymmetricCipher.prototype.decrypt = goog.abstractMethod;


/**
 * Representation of an asymmetric cipher.
 * @interface
 * @extends {e2e.cipher.Cipher}
 */
e2e.cipher.AsymmetricCipher = function() {};


/**
 * Encrypts the given data using the current cipher and key.
 * @param {!e2e.ByteArray} data The data to encrypt.
 * @return {!e2e.cipher.ciphertext.AsymmetricAsync}
 *     The result of encryption.
 */
e2e.cipher.AsymmetricCipher.prototype.encrypt = goog.abstractMethod;


/**
 * Decrypts the given data using the current cipher and key.
 * @param {!e2e.cipher.ciphertext.Asymmetric} data The encrypted
 *     data.
 * @return {!e2e.async.Result.<!e2e.ByteArray>} The result of
 *     decryption.
 */
e2e.cipher.AsymmetricCipher.prototype.decrypt = goog.abstractMethod;

/**
 * @define {string} List of ciphers to register asynchronously.
 */
e2e.cipher.factory.WORKER_CIPHERS = '';


/**
 * Initializes cipher factory.
 */
e2e.cipher.factory.init = function() {};

/**
 * Contains a list of all registered implementations for each algorithm.
 * @type {!Object.<e2e.cipher.Algorithm,
 *     function(new:e2e.Algorithm, !e2e.cipher.Algorithm,
 *     e2e.cipher.key.Key=)>}
 * @private
 */
e2e.cipher.factory.ciphers_ = {};


/**
 * Registers a class for a specific algorithm.
 * @param {function(new:e2e.Algorithm, !e2e.cipher.Algorithm,
 *     e2e.cipher.key.Key=)} cipher The implementation.
 * @param {e2e.cipher.Algorithm=} opt_algorithm The name to register
 *     the cipher to if different from the cipher's prototype algorithm.
 */
e2e.cipher.factory.add = function(cipher, opt_algorithm) {
  var algorithm = opt_algorithm || cipher.prototype.algorithm;
  var current = e2e.cipher.factory.ciphers_[algorithm];
  if (!goog.isDef(current)) {
    e2e.cipher.factory.ciphers_[algorithm] = cipher;
  }
};


/**
 * Returns whether the algorithm is present in the factory.
 * @param {!e2e.cipher.Algorithm} algorithm The cipher algorithm.
 * @return {boolean} Whether the algorithm is present in the factory.
 */
e2e.cipher.factory.has = function(algorithm) {
  return e2e.cipher.factory.ciphers_.hasOwnProperty(algorithm);
};


/**
 * Returns an instance of the required cipher, or null if not available.
 * @param {!e2e.cipher.Algorithm} algorithm The algorithm to retrieve.
 * @param {e2e.cipher.key.Key=} opt_keyData The key to use (public or
 *     private).
 * @return {?e2e.cipher.Cipher} The cipher instance requested.
 */
e2e.cipher.factory.get = function(algorithm, opt_keyData) {
  if (e2e.cipher.factory.ciphers_.hasOwnProperty(algorithm)) {
    var constructor = e2e.cipher.factory.ciphers_[algorithm];
    return /** @type {e2e.cipher.Cipher}*/ (
        new constructor(algorithm, opt_keyData));
  } else {
    return null;
  }
};


/**
 * Returns all available cipher algorithms.
 * @return {!Array.<e2e.cipher.Algorithm>} Array of available algorithms.
 */
e2e.cipher.factory.getAvailable = function() {
  return Object.keys(e2e.cipher.factory.ciphers_);
};


/**
 * Returns an instance of the required cipher, or throws if not available.
 * @param {!e2e.cipher.Algorithm} algorithm The algorithm to retrieve.
 * @param {e2e.cipher.key.Key=} opt_keyData The key to use (public or
 *     private).
 * @return {!e2e.cipher.Cipher} The cipher instance requested.
 */
e2e.cipher.factory.require = function(algorithm, opt_keyData) {
  var ret = e2e.cipher.factory.get(algorithm, opt_keyData);
  if (goog.isNull(ret)) {
    throw new e2e.cipher.Error('Required algorithm not available: ' +
        algorithm);
  }
  return ret;
};

e2e.cipher.factory.init();

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new goog.crypt.sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */

goog.provide('goog.crypt.Sha1');

goog.require('goog.crypt.Hash');



/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @extends {goog.crypt.Hash}
 * @final
 * @struct
 */
goog.crypt.Sha1 = function() {
  goog.crypt.Sha1.base(this, 'constructor');

  this.blockSize = 512 / 8;

  /**
   * Holds the previous values of accumulated variables a-e in the compress_
   * function.
   * @type {Array.<number>}
   * @private
   */
  this.chain_ = [];

  /**
   * A buffer holding the partially computed hash result.
   * @type {Array.<number>}
   * @private
   */
  this.buf_ = [];

  /**
   * An array of 80 bytes, each a part of the message to be hashed.  Referred to
   * as the message schedule in the docs.
   * @type {Array.<number>}
   * @private
   */
  this.W_ = [];

  /**
   * Contains data needed to pad messages less than 64 bytes.
   * @type {Array.<number>}
   * @private
   */
  this.pad_ = [];

  this.pad_[0] = 128;
  for (var i = 1; i < this.blockSize; ++i) {
    this.pad_[i] = 0;
  }

  /**
   * @private {number}
   */
  this.inbuf_ = 0;

  /**
   * @private {number}
   */
  this.total_ = 0;

  this.reset();
};
goog.inherits(goog.crypt.Sha1, goog.crypt.Hash);


/** @override */
goog.crypt.Sha1.prototype.reset = function() {
  this.chain_[0] = 0x67452301;
  this.chain_[1] = 0xefcdab89;
  this.chain_[2] = 0x98badcfe;
  this.chain_[3] = 0x10325476;
  this.chain_[4] = 0xc3d2e1f0;

  this.inbuf_ = 0;
  this.total_ = 0;
};


/**
 * Internal compress helper function.
 * @param {Array.<number>|Uint8Array|string} buf Block to compress.
 * @param {number=} opt_offset Offset of the block in the buffer.
 * @private
 */
goog.crypt.Sha1.prototype.compress_ = function(buf, opt_offset) {
  if (!opt_offset) {
    opt_offset = 0;
  }

  var W = this.W_;

  // get 16 big endian words
  if (goog.isString(buf)) {
    for (var i = 0; i < 16; i++) {
      // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
      // have a bug that turns the post-increment ++ operator into pre-increment
      // during JIT compilation.  We have code that depends heavily on SHA-1 for
      // correctness and which is affected by this bug, so I've removed all uses
      // of post-increment ++ in which the result value is used.  We can revert
      // this change once the Safari bug
      // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
      // most clients have been updated.
      W[i] = (buf.charCodeAt(opt_offset) << 24) |
             (buf.charCodeAt(opt_offset + 1) << 16) |
             (buf.charCodeAt(opt_offset + 2) << 8) |
             (buf.charCodeAt(opt_offset + 3));
      opt_offset += 4;
    }
  } else {
    for (var i = 0; i < 16; i++) {
      W[i] = (buf[opt_offset] << 24) |
             (buf[opt_offset + 1] << 16) |
             (buf[opt_offset + 2] << 8) |
             (buf[opt_offset + 3]);
      opt_offset += 4;
    }
  }

  // expand to 80 words
  for (var i = 16; i < 80; i++) {
    var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
  }

  var a = this.chain_[0];
  var b = this.chain_[1];
  var c = this.chain_[2];
  var d = this.chain_[3];
  var e = this.chain_[4];
  var f, k;

  // TODO(user): Try to unroll this loop to speed up the computation.
  for (var i = 0; i < 80; i++) {
    if (i < 40) {
      if (i < 20) {
        f = d ^ (b & (c ^ d));
        k = 0x5a827999;
      } else {
        f = b ^ c ^ d;
        k = 0x6ed9eba1;
      }
    } else {
      if (i < 60) {
        f = (b & c) | (d & (b | c));
        k = 0x8f1bbcdc;
      } else {
        f = b ^ c ^ d;
        k = 0xca62c1d6;
      }
    }

    var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
    e = d;
    d = c;
    c = ((b << 30) | (b >>> 2)) & 0xffffffff;
    b = a;
    a = t;
  }

  this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
  this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
  this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
  this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
  this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
};


/** @override */
goog.crypt.Sha1.prototype.update = function(bytes, opt_length) {
  if (!goog.isDef(opt_length)) {
    opt_length = bytes.length;
  }

  var lengthMinusBlock = opt_length - this.blockSize;
  var n = 0;
  // Using local instead of member variables gives ~5% speedup on Firefox 16.
  var buf = this.buf_;
  var inbuf = this.inbuf_;

  // The outer while loop should execute at most twice.
  while (n < opt_length) {
    // When we have no data in the block to top up, we can directly process the
    // input buffer (assuming it contains sufficient data). This gives ~25%
    // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
    // the data is provided in large chunks (or in multiples of 64 bytes).
    if (inbuf == 0) {
      while (n <= lengthMinusBlock) {
        this.compress_(bytes, n);
        n += this.blockSize;
      }
    }

    if (goog.isString(bytes)) {
      while (n < opt_length) {
        buf[inbuf] = bytes.charCodeAt(n);
        ++inbuf;
        ++n;
        if (inbuf == this.blockSize) {
          this.compress_(buf);
          inbuf = 0;
          // Jump to the outer loop so we use the full-block optimization.
          break;
        }
      }
    } else {
      while (n < opt_length) {
        buf[inbuf] = bytes[n];
        ++inbuf;
        ++n;
        if (inbuf == this.blockSize) {
          this.compress_(buf);
          inbuf = 0;
          // Jump to the outer loop so we use the full-block optimization.
          break;
        }
      }
    }
  }

  this.inbuf_ = inbuf;
  this.total_ += opt_length;
};


/** @override */
goog.crypt.Sha1.prototype.digest = function() {
  var digest = [];
  var totalBits = this.total_ * 8;

  // Add pad 0x80 0x00*.
  if (this.inbuf_ < 56) {
    this.update(this.pad_, 56 - this.inbuf_);
  } else {
    this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
  }

  // Add # bits.
  for (var i = this.blockSize - 1; i >= 56; i--) {
    this.buf_[i] = totalBits & 255;
    totalBits /= 256; // Don't use bit-shifting here!
  }

  this.compress_(this.buf_);

  var n = 0;
  for (var i = 0; i < 5; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      digest[n] = (this.chain_[i] >> j) & 255;
      ++n;
    }
  }

  return digest;
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Wraps the original Sha1 implementation to conform to e2e.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.hash.Sha1');

goog.require('e2e.hash.Algorithm');
goog.require('e2e.hash.Hash');
goog.require('e2e.hash.factory');
goog.require('goog.crypt.Sha1');



/**
 * Wrapper around the goog.crypt.Sha1 implementation.
 * @extends {e2e.hash.Hash}
 * @constructor
 */
e2e.hash.Sha1 = function() {
  goog.base(this);
  this.inst_ = new goog.crypt.Sha1();
  this.blockSize = this.inst_.blockSize;
};
goog.inherits(e2e.hash.Sha1, e2e.hash.Hash);


/** @inheritDoc */
e2e.hash.Sha1.prototype.algorithm = e2e.hash.Algorithm.SHA1;

e2e.hash.factory.add(e2e.hash.Sha1);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Representation of a textbook RSA cipher. This should only be
 * used together with PKCS or some other padding system.
 * TODO(user) Limit the visibility of this package.
 */

goog.provide('e2e.cipher.Rsa');

goog.require('e2e');
goog.require('e2e.AlgorithmImpl');
goog.require('e2e.BigNum');
goog.require('e2e.BigNumModulus');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.AsymmetricCipher');
goog.require('e2e.cipher.Error');
goog.require('e2e.cipher.factory');
goog.require('e2e.hash.Sha1');
goog.require('e2e.hash.Sha224');
goog.require('e2e.hash.Sha256');
goog.require('e2e.hash.Sha512');
goog.require('e2e.pkcs.EMSA_PKCS1_v1_5');
goog.require('e2e.random');
goog.require('e2e.signer.Algorithm');
goog.require('e2e.signer.Signer');
goog.require('e2e.signer.factory');
goog.require('goog.asserts');


/**
 * Representation of an RSA public and/or private key. (Implements both, signer
 * and cipher).
 * @param {e2e.cipher.Algorithm|e2e.signer.Algorithm} algorithm
 *     The algorithm to retrieve.
 * @param {e2e.cipher.key.Key=} opt_key The public or private key.
 * @constructor
 * @implements {e2e.cipher.AsymmetricCipher}
 * @implements {e2e.signer.Signer}
 * @extends {e2e.AlgorithmImpl}
 */
e2e.cipher.Rsa = function(algorithm, opt_key) {
  goog.asserts.assert(algorithm == e2e.cipher.Algorithm.RSA,
      'Algorithm should be RSA.');
  goog.base(this, e2e.cipher.Algorithm.RSA, opt_key);
};
goog.inherits(e2e.cipher.Rsa, e2e.AlgorithmImpl);


/** @type {e2e.BigNumModulus} */
e2e.cipher.Rsa.prototype.modulus;


/**
 * The hash function that should be used. This is selected based on the bit
 *     length.
 * @private {!e2e.hash.Hash}
 */
e2e.cipher.Rsa.prototype.hash_;


/**
 * Cached last-used blinder
 * @type {!e2e.BigNum}
 * @private
 */
e2e.cipher.Rsa.prototype.blinder_ = e2e.BigNum.ZERO;


/**
 * Cached last-used unblinder
 * @type {!e2e.BigNum}
 * @private
 */
e2e.cipher.Rsa.prototype.unblinder_ = e2e.BigNum.ZERO;


/**
 * @type {boolean}
 */
e2e.cipher.Rsa.prototype.use_blinding = false;


/** @override */
e2e.cipher.Rsa.prototype.getHash = function() {
  return this.hash_;
};


/** @override */
e2e.cipher.Rsa.prototype.setHash = function(hash) {
  this.hash_ = hash;
};


/** @inheritDoc */
e2e.cipher.Rsa.prototype.setKey = function(key) {
  goog.asserts.assertArray(key['n'], 'Modulus should be defined.');
  goog.asserts.assertArray(key['e'], 'Public exponent should be defined.');
  this.modulus = new e2e.BigNumModulus(key['n']);
  var bitLength = this.modulus.getBitLength();
  switch (true) {
    // TODO(user): Reject < 1024 bit keys (we use them in unit tests).
    case bitLength <= 1024:
      this.hash_ = new e2e.hash.Sha1;
      break;
    case bitLength <= 2048 && bitLength > 1024:
      this.hash_ = new e2e.hash.Sha224;
      break;
    case bitLength <= 4096 && bitLength > 2048:
      this.hash_ = new e2e.hash.Sha256;
      break;
    case bitLength > 4096:
      this.hash_ = new e2e.hash.Sha512;
      break;
    default:
      throw new e2e.cipher.Error('Invalid key size.');
  }

  // we only use blinding if prime components are known
  this.use_blinding = goog.isDef(key['p']) && goog.isDef(key['q']);

  // TODO(user) Throw exception if key size is smaller than 1024 bits.
  // For this we'll need new test values in rsa_test.html.
  goog.base(this, 'setKey', key, Math.ceil(this.modulus.getBitLength() / 8));
  if (this.use_blinding) { // precompute blinders
    this.blinder_ = e2e.BigNum.ZERO;
  }
};


/** @inheritDoc */
e2e.cipher.Rsa.prototype.encrypt = function(plaintext) {
  goog.asserts.assertArray(this.key['e'], 'Public exponent should be defined.');
  /** @type {!e2e.cipher.ciphertext.Rsa} */
  var ciphertext = {c: this.modulus.pow(plaintext, this.key['e'])};
  return e2e.async.Result.toResult(ciphertext);
};


/**
 * Creates a random BigNum in range [1..limit-1]
 * @param {e2e.BigNum=} limit upper bound
 * @return {!e2e.BigNum}
 * @private
 */
e2e.cipher.Rsa.prototype.getRandomBigNum_ = function(limit) {
  var byteSize = Math.ceil(limit.getBitLength() / 8);
  var candidate;
  do {
    candidate = new e2e.BigNum(e2e.random.getRandomBytes(
      byteSize));
  } while (candidate.isGreaterOrEqual(limit) ||
           candidate.isEqual(e2e.BigNum.ZERO));
  return candidate;
};


/**
 * Generates blinding nonces used to eliminate timing side-channels in RSA
 * decryption. First nonce pair is derived from generated BigNum random,
 * subsequent nonces are squared from previous ones for optimization.
 * @private
 */
e2e.cipher.Rsa.prototype.calculateBlindingNonces_ = function() {
    if (this.blinder_.isEqual(e2e.BigNum.ZERO)) {
      var r = this.getRandomBigNum_(this.modulus);
      // r should be relatively prime to this.modulus (i.e. != p &  != q)
      // the chance for r being k*p or k*q is negligible, we're skipping
      // the check
      var p = new e2e.BigNum(this.key['p']);
      var q = new e2e.BigNum(this.key['q']);
      var phi = this.modulus.add(e2e.BigNum.ONE).subtract(p.add(q));
      var inv = this.modulus.modPower(r, phi.subtract(e2e.BigNum.ONE));
      this.blinder_ = this.modulus.modPower(inv, this.key['e']);
      this.unblinder_ = r;
    } else {  // we already generated, derive new by squaring
      this.blinder_ = this.modulus.modMultiply(this.blinder_, this.blinder_);
      this.unblinder_ = this.modulus.modMultiply(this.unblinder_,
        this.unblinder_);
    }
};


/** @inheritDoc */
e2e.cipher.Rsa.prototype.decrypt = function(ciphertext) {
  goog.asserts.assertArray(this.key['d'],
      'Private exponent should be defined.');
  goog.asserts.assertArray(ciphertext['c'],
      'Ciphertext should be defined.');
  if (this.use_blinding) {
    goog.asserts.assertArray(this.key['p'],
        'p should be defined.');
    goog.asserts.assertArray(this.key['q'],
        'q should be defined.');
    this.calculateBlindingNonces_();
    var blinded = this.modulus.modMultiply(
      new e2e.BigNum(ciphertext['c']),
      this.blinder_);
    var decryption = this.modulus.modPower(blinded, this.key['d']);
    var deblinded = this.modulus.modMultiply(decryption, this.unblinder_);
    return e2e.async.Result.toResult(deblinded.toByteArray());
  } else {
    return e2e.async.Result.toResult(this.modulus.pow(ciphertext['c'],
              this.key['d']));
  }
};


/** @override */
e2e.cipher.Rsa.prototype.sign = function(data) {
  var paddedHash = e2e.pkcs.EMSA_PKCS1_v1_5(
      this.getHash(),
      data,
      this.keySize - 1,
      true);
  /** @type {!e2e.signer.signature.Signature} */
  var signature = {
    'hashValue': this.getHash().hash(data),
    'r': undefined,
    's': e2e.async.Result.getValue(this.decrypt({'c': paddedHash}))
  };
  return e2e.async.Result.toResult(signature);
};


/** @override */
e2e.cipher.Rsa.prototype.verify = function(data, sig) {
  var encodedActualHash = e2e.pkcs.EMSA_PKCS1_v1_5(
    this.getHash(),
    data,
    this.keySize - 1,
    true);
  var encodedSignedHash = e2e.async.Result.getValue(
      this.encrypt(sig['s']))['c'];
  return e2e.async.Result.toResult(
      e2e.compareByteArray(encodedActualHash, encodedSignedHash));
};


e2e.cipher.factory.add(e2e.cipher.Rsa, e2e.cipher.Algorithm.RSA);
e2e.signer.factory.add(e2e.cipher.Rsa, e2e.signer.Algorithm.RSA);

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Basic functions common to all openpgp.
 */

goog.provide('e2e.openpgp');
goog.provide('e2e.openpgp.SignatureDigestAlgorithm');

goog.require('e2e');
goog.require('goog.array');


/**
 * List of hash algorithms allowed for OpenPGP signatures. Notable exceptions
 * are MD5 (deprecated) and RIPEMD (unsupported).
 * @enum {string}
 */
e2e.openpgp.SignatureDigestAlgorithm = {
  'SHA1': 'SHA1',
  'SHA256': 'SHA256',
  'SHA384': 'SHA384',
  'SHA512': 'SHA512',
  'SHA224': 'SHA224'
};


/**
 * Calculates a numeric checksum of the data as specificed in RFC 4880
 * Section 5.5.3. This checksum is used in private key data.
 * @param {!e2e.ByteArray} data The input data.
 * @return {!e2e.ByteArray}
 */
e2e.openpgp.calculateNumericChecksum = function(data) {
  var sum = 0;
  goog.array.forEach(
      data,
      function(elem) {
        sum += elem;
      });
  sum = sum % e2e.openpgp.CHECKSUM_MOD;
  return e2e.wordToByteArray(sum);
};


/**
 * The checksum modulus used for checksum as specificed in RFC 4880 Sec 5.5.3.
 * @const {number}
 */
e2e.openpgp.CHECKSUM_MOD = 65536;

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Base class for OpenPGP packets. Provides serialization of
 * packets and initialization.
 * An OpenPGP packet is the common data structure in the standard. They consist
 * of the type and length. Depending on the type, other parsers are called which
 * extract the meaningful data out of them.
 * You would usually call this class to parse data into a Packet, and you can
 * use instances of a Packet class to serialize them back to strings.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.packet');
goog.provide('e2e.openpgp.packet.Packet');

goog.require('e2e');
goog.require('goog.array');



/**
 * Abstract base class for all Packets.
 * @constructor
 */
e2e.openpgp.packet.Packet = function() {};


/**
 * Parser for this specific Packet. Should be implemented by subclasses.
 * @param {!e2e.ByteArray} data
 * @return {T} The parsed packet.
 * @template T
 */
e2e.openpgp.packet.Packet.parse = goog.abstractMethod;


/**
 * Tag of the packet (the tag specifies what type of packet it is).
 * @type {number}
 */
e2e.openpgp.packet.Packet.prototype.tag;


/**
 * Serializer for this specific Packet.
 * @see #toString
 * @return {!e2e.ByteArray} The ByteArray representation of this packet.
 */
e2e.openpgp.packet.Packet.prototype.serializePacketBody =
    goog.abstractMethod;


/**
 * Defines the maximum packet size.
 * @type {number}
 * @const
 */
e2e.openpgp.packet.MAXIMUM_PACKET_SIZE = 0xFFFFFFFF;


/**
 * Serializes all packets by calling {@link #serializePacketBody} and appends
 * the length as a 'new format' packet as defined in RFC 4880 Section 4.2.2.3.
 * We only support packets of up to 0xFFFFFFFF, longer packets will throw an
 * exception.
 * @return {!e2e.ByteArray} The PGP RFC 4880 packet serialization.
 */
e2e.openpgp.packet.Packet.prototype.serialize = function() {
  // The first bit is always one, the second one specifies this is new format.
  var ptag = parseInt('11000000', 2) | this.tag;
  var packet = this.serializePacketBody();
  var length = '';
  if (packet.length > e2e.openpgp.packet.MAXIMUM_PACKET_SIZE) {
    // We are required to use partial body lengths in this case.
    return [];  // TODO(user) Throw an unimplemented error in this case?
  }
  // We always use five octet lengths since they will work in most cases.
  return goog.array.concat(
      ptag,
      0xFF,
      e2e.dwordArrayToByteArray([packet.length]),
      packet);
};

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a base class for implementing compression algorithms.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.compression.Algorithm');
goog.provide('e2e.compression.Compression');
goog.provide('e2e.compression.Error');

goog.require('goog.debug.Error');


/**
 * Error class used to represent errors in the compression algorithms.
 * @param {*=} opt_msg Optional message to send.
 * @extends {goog.debug.Error}
 * @constructor
 */
e2e.compression.Error = function(opt_msg) {
  goog.base(this, opt_msg);
};
goog.inherits(e2e.compression.Error, goog.debug.Error);


/**
 * List of Compression algorithms that can be implemented.
 * @enum {string}
 */
e2e.compression.Algorithm = {
  'UNCOMPRESSED': 'UNCOMPRESSED',
  'ZIP': 'ZIP',
  'ZLIB': 'ZLIB',
  'BZIP2': 'BZIP2'
};


/**
 * Constructor for all compression algorithms.
 * @param {!e2e.compression.Algorithm} algorithm The algorithm being
 *     implemented.
 * @constructor
 */
e2e.compression.Compression = function(algorithm) {
  this.algorithm = algorithm;
};


/**
 * The implemented algorithm.
 * @type {!e2e.compression.Algorithm}
 */
e2e.compression.Compression.prototype.algorithm;


/**
 * Compresses the given data..
 * @param {!e2e.ByteArray} data The data to compress.
 * @return {!e2e.async.Result} The compressed data.
 */
e2e.compression.Compression.prototype.compress = goog.abstractMethod;


/**
 * Decompresses the given data.
 * @param {!e2e.ByteArray} compressedData The data to decompress.
 * @return {!e2e.async.Result} The decompressed data.
 */
e2e.compression.Compression.prototype.decompress = goog.abstractMethod;

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Registers and returns implementations of specific algorithms.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.compression.factory');

goog.require('e2e.compression.Error');


/**
 * Contains a list of all registered implementations for each algorithm.
 * @type {!Object.<e2e.compression.Algorithm,
 *     function(new:e2e.compression.Compression, ...)>}
 * @private
 */
e2e.compression.factory.compressionAlgorithms_ = {};


/**
 * Registers a class for a specific algorithm.
 * @param {function(new:e2e.compression.Compression, ...[*])}
 *    compression The constructor of the cipher.
 * @param {e2e.compression.Algorithm=} opt_algorithm The algorithm to
 *     register it to, if different from the prototype name.
 */
e2e.compression.factory.add = function(compression, opt_algorithm) {
  var algorithm = opt_algorithm || compression.prototype.algorithm;
  e2e.compression.factory.compressionAlgorithms_[algorithm] =
      compression;
};


/**
 * Returns an instance of the required compression algorithm, or null if not
 *     available.
 * @param {e2e.compression.Algorithm} algorithm The compression
 *     algorithm.
 * @return {e2e.compression.Compression?} The compression instance
 *     requested or null.
 */
e2e.compression.factory.get = function(algorithm) {
  if (e2e.compression.factory.compressionAlgorithms_.hasOwnProperty(
      algorithm)) {
    var constructor =
        e2e.compression.factory.compressionAlgorithms_[algorithm];
    return new constructor;
  } else {
    return null;
  }
};


/**
 * Returns all available compression algorithms.
 * @return {!Array.<e2e.compression.Algorithm>} Array of available algorithms.
 */
e2e.compression.factory.getAvailable = function() {
  return Object.keys(e2e.compression.factory.compressionAlgorithms_);
};


/**
 * Returns an instance of the required compression algorithm, or throws if not
 *     available.
 * @param {e2e.compression.Algorithm} algorithm The compression
 *     algorithm.
 * @return {!e2e.compression.Compression} The compression instance
 *     requested.
 */
e2e.compression.factory.require = function(algorithm) {
  var ret = e2e.compression.factory.get(algorithm);
  if (goog.isNull(ret)) {
    throw new e2e.compression.Error(
        'Required algorithm not available.');
  }
  return ret;
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Utility functions for parsing that wrap constants and objects.
 * @author evn@google.com (Eduardo Vela)
 */


goog.provide('e2e.openpgp.constants');
goog.provide('e2e.openpgp.constants.Algorithm');
goog.provide('e2e.openpgp.constants.Type');

goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.factory');
goog.require('e2e.compression.Algorithm');
goog.require('e2e.compression.factory');
goog.require('e2e.hash.Algorithm');
goog.require('e2e.hash.factory');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.signer.Algorithm');
goog.require('e2e.signer.factory');
goog.require('goog.object');


/**
 * Type of constant (cipher, hash, etc..).
 * @enum {string}
 */
e2e.openpgp.constants.Type = {
  'PUBLIC_KEY': 'PUBLIC_KEY',
  'SYMMETRIC_KEY': 'SYMMETRIC_KEY',
  'COMPRESSION': 'COMPRESSION',
  'HASH': 'HASH',
  'SIGNER': 'SIGNER'
};


/**
 * Generic term of an "Algorithm" as it's commonly used in this module.
 * @typedef {e2e.cipher.Algorithm|e2e.hash.Algorithm|
 *     e2e.compression.Algorithm|e2e.signer.Algorithm}
 */
e2e.openpgp.constants.Algorithm;


/**
 * Empty key ID.
 * @type {!e2e.ByteArray}
 * @const
 */
e2e.openpgp.constants.EMPTY_KEY_ID = [0, 0, 0, 0, 0, 0, 0, 0];


/**
 * The list of all constants divided by type.
 * @type {Object.<e2e.openpgp.constants.Type,
 *     Object.<e2e.openpgp.constants.Algorithm, number>>}
 */
e2e.openpgp.constants.NAME_TO_ID = {};

e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.PUBLIC_KEY] = {};
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY] = {};
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.COMPRESSION] = {};
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.HASH] = {};
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SIGNER] = {};
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.PUBLIC_KEY][
        e2e.cipher.Algorithm.RSA] = 1;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.PUBLIC_KEY][
        e2e.cipher.Algorithm.ELGAMAL] = 16;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.PUBLIC_KEY][
        e2e.cipher.Algorithm.ECDH] = 18;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.PLAINTEXT] = 0;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.IDEA] = 1;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.TRIPLE_DES] = 2;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.CAST5] = 3;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.BLOWFISH] = 4;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.AES128] = 7;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.AES192] = 8;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.AES256] = 9;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY][
        e2e.cipher.Algorithm.TWOFISH] = 10;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.COMPRESSION][
        e2e.compression.Algorithm.UNCOMPRESSED] = 0;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.COMPRESSION][
        e2e.compression.Algorithm.ZIP] = 1;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.COMPRESSION][
        e2e.compression.Algorithm.ZLIB] = 2;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.COMPRESSION][
        e2e.compression.Algorithm.BZIP2] = 3;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.HASH][
        e2e.hash.Algorithm.MD5] = 1;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.HASH][
        e2e.hash.Algorithm.SHA1] = 2;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.HASH][
        e2e.hash.Algorithm.RIPEMD] = 3;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.HASH][
        e2e.hash.Algorithm.SHA256] = 8;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.HASH][
        e2e.hash.Algorithm.SHA384] = 9;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.HASH][
        e2e.hash.Algorithm.SHA512] = 10;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.HASH][
        e2e.hash.Algorithm.SHA224] = 11;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SIGNER][
        e2e.signer.Algorithm.RSA] = 1;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SIGNER][
        e2e.signer.Algorithm.DSA] = 17;
e2e.openpgp.constants.NAME_TO_ID[
    e2e.openpgp.constants.Type.SIGNER][
        e2e.signer.Algorithm.ECDSA] = 19;


/**
 * Maps all algorithms names to an ID by expanding NAME_TO_ID.
 * @type {Object.<e2e.openpgp.constants.Algorithm, number>}
 * @private
 */
e2e.openpgp.constants.NAME_TO_ID_ALL_ = {};
goog.object.extend(e2e.openpgp.constants.NAME_TO_ID_ALL_,
                   e2e.openpgp.constants.NAME_TO_ID[
                       e2e.openpgp.constants.Type.PUBLIC_KEY],
                   e2e.openpgp.constants.NAME_TO_ID[
                       e2e.openpgp.constants.Type.SYMMETRIC_KEY],
                   e2e.openpgp.constants.NAME_TO_ID[
                     e2e.openpgp.constants.Type.COMPRESSION],
                   e2e.openpgp.constants.NAME_TO_ID[
                       e2e.openpgp.constants.Type.HASH],
                   e2e.openpgp.constants.NAME_TO_ID[
                       e2e.openpgp.constants.Type.SIGNER]);


/**
 * Does reverse mapping (id to Algorithm) for each constant type.
 * @type {Object.<e2e.openpgp.constants.Type,
 *     Object.<number, e2e.openpgp.constants.Algorithm>>}
 */
e2e.openpgp.constants.ID_TO_NAME = {};

e2e.openpgp.constants.ID_TO_NAME[
    e2e.openpgp.constants.Type.PUBLIC_KEY] = goog.object.transpose(
        e2e.openpgp.constants.NAME_TO_ID[
            e2e.openpgp.constants.Type.PUBLIC_KEY]);
// RSA is special in that it has algorithm ids 1, 2 and 3 registered.
e2e.openpgp.constants.ID_TO_NAME[
    e2e.openpgp.constants.Type.PUBLIC_KEY][2] =
    e2e.cipher.Algorithm.RSA;
e2e.openpgp.constants.ID_TO_NAME[
    e2e.openpgp.constants.Type.PUBLIC_KEY][3] =
    e2e.cipher.Algorithm.RSA;
e2e.openpgp.constants.ID_TO_NAME[
    e2e.openpgp.constants.Type.SYMMETRIC_KEY] = goog.object.transpose(
        e2e.openpgp.constants.NAME_TO_ID[
            e2e.openpgp.constants.Type.SYMMETRIC_KEY]);
e2e.openpgp.constants.ID_TO_NAME[
    e2e.openpgp.constants.Type.COMPRESSION] = goog.object.transpose(
        e2e.openpgp.constants.NAME_TO_ID[
            e2e.openpgp.constants.Type.COMPRESSION]);
e2e.openpgp.constants.ID_TO_NAME[
    e2e.openpgp.constants.Type.HASH] = goog.object.transpose(
        e2e.openpgp.constants.NAME_TO_ID[
            e2e.openpgp.constants.Type.HASH]);
e2e.openpgp.constants.ID_TO_NAME[
    e2e.openpgp.constants.Type.SIGNER] = goog.object.transpose(
        e2e.openpgp.constants.NAME_TO_ID[
            e2e.openpgp.constants.Type.SIGNER]);


/**
 * Symmetric cipher used to encrypt messages.
 * @type {e2e.cipher.Algorithm}
 */
e2e.openpgp.constants.DEFAULT_SYMMETRIC_CIPHER = e2e.cipher.Algorithm.AES256;


/**
 * Returns the ID of a given object or throws an exception if invalid.
 * @param {e2e.openpgp.constants.Algorithm} algorithm The requested
 *     algorithm.
 * @return {number} The numeric id of the requested object.
 */
e2e.openpgp.constants.getId = function(algorithm) {
  return e2e.openpgp.constants.NAME_TO_ID_ALL_[algorithm];
};


/**
 * Finds the name of the algorithm.
 * @param {e2e.openpgp.constants.Type} type The type of constant to get.
 * @param {number} id The id to get the name of.
 * @return {e2e.openpgp.constants.Algorithm} The algorithm requested.
 */
e2e.openpgp.constants.getAlgorithm = function(type, id) {
  if (e2e.openpgp.constants.ID_TO_NAME.hasOwnProperty(type)) {
    var i2n = e2e.openpgp.constants.ID_TO_NAME[type];
    if (i2n.hasOwnProperty(id)) {
      return i2n[id];
    }
  }
  // A PublicKey in PGP may be either a cipher or a signer.
  if (type == e2e.openpgp.constants.Type.PUBLIC_KEY) {
    var i2n = e2e.openpgp.constants.ID_TO_NAME[
        e2e.openpgp.constants.Type.SIGNER];
    if (i2n.hasOwnProperty(id)) {
      return i2n[id];
    }
  }
  throw new e2e.openpgp.error.UnsupportedError(
    'Unsupported id: ' + id);
};


/**
 * Returns an instance of the requested object.
 * @param {e2e.openpgp.constants.Type} type Type of object to get.
 * @param {number|e2e.openpgp.constants.Algorithm} id The numeric id or
 *     Algorithm of the object to get.
 * @param {e2e.cipher.key.Key=} opt_key The key to use for ciphers.
 * @return {!e2e.hash.Hash|e2e.cipher.Cipher|
 *     e2e.compression.Compression|e2e.signer.Signer} An
 *     instance of the requested algorithm.
 */
e2e.openpgp.constants.getInstance = function(type, id, opt_key) {
  var algorithm;
  if (typeof id == 'number') {
    algorithm = e2e.openpgp.constants.getAlgorithm(type, id);
  } else {
    algorithm = id;
  }
  switch (type) {
    case e2e.openpgp.constants.Type.PUBLIC_KEY:
    case e2e.openpgp.constants.Type.SYMMETRIC_KEY:
      algorithm = /** @type {e2e.cipher.Algorithm} */ (algorithm);
      return e2e.cipher.factory.require(algorithm, opt_key);
    break;
    case e2e.openpgp.constants.Type.COMPRESSION:
      algorithm = /** @type {e2e.compression.Algorithm} */ (algorithm);
      return e2e.compression.factory.require(algorithm);
    break;
    case e2e.openpgp.constants.Type.HASH:
      algorithm = /** @type {e2e.hash.Algorithm} */ (algorithm);
      return e2e.hash.factory.require(algorithm);
    case e2e.openpgp.constants.Type.SIGNER:
      algorithm = /** @type {e2e.signer.Algorithm} */ (algorithm);
      return e2e.signer.factory.require(algorithm);
    break;
  }
  throw new e2e.openpgp.error.UnsupportedError(
      'Unsupported algorithm: ' + algorithm);
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Signature Subpackets.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.openpgp.packet.SignatureSub');

goog.require('e2e');
goog.require('e2e.openpgp.parse');
goog.require('goog.array');
goog.require('goog.structs.Map');


/**
 * Signature Subpackets as defined in RFC 4880, section 5.2.3.1.
 * @param {!e2e.openpgp.packet.SignatureSub.Type} type Subpacket type.
 * @param {boolean} critical True if interpretation of this type is critical.
 * @param {!e2e.ByteArray} body Unparsed data for this subpacket.
 * @param {!e2e.ByteArray=} opt_packetLengthBytes The encoded length of
 *     the packet length.
 * @constructor
 */
e2e.openpgp.packet.SignatureSub = function(
    type, critical, body, opt_packetLengthBytes) {
  this.type = type;
  this.critical = critical;
  this.body = body;
  this.packetLengthBytes = opt_packetLengthBytes || this.getLength_();
};


/**
 * Calculates the encoded length of the signature subpacket.
 * @return {!e2e.ByteArray}
 * @private
 */
e2e.openpgp.packet.SignatureSub.prototype.getLength_ = function() {
  // Always use the 4 byte length.
  return goog.array.flatten(
      e2e.openpgp.parse.FIVE_BYTE_LENGTH_VAL,
      e2e.dwordArrayToByteArray([this.body.length + 1]));
};


/**
 * @return {!e2e.ByteArray}
 */
e2e.openpgp.packet.SignatureSub.prototype.serialize = function() {
  var ptag = (Number(this.critical) << 7) | this.type;
  return goog.array.flatten(
      this.packetLengthBytes,
      ptag,
      this.body);
};


/**
 * @param {!Object} attributes
 * @return {!Array.<!e2e.openpgp.packet.SignatureSub>}
 */
e2e.openpgp.packet.SignatureSub.construct = function(attributes) {
  var packets = [];
  var map = new goog.structs.Map(e2e.openpgp.packet.SignatureSub.Type);
  goog.array.forEach(
      map.getKeys(),
      function(typeName) {
        if (attributes.hasOwnProperty(typeName)) {
          var type = map.get(typeName);
          packets.push(
              new e2e.openpgp.packet.SignatureSub(
                  type, true, attributes[typeName]));
        }
      });
  return packets;
};


/**
 * Parses data and returns all of the parsed subpackets.
 * @param {!e2e.ByteArray} data Data for subpackets.
 * @return {!Array.<!e2e.openpgp.packet.SignatureSub>} Parsed subpackets.
 */
e2e.openpgp.packet.SignatureSub.parse = function(data) {
  var packets = [];
  var attributes = {};
  while (data.length > 0) {
    // This format is similar to e2e.openpgp.parse.getBodyNewFormatPacket_
    // with the exception of partial body lengths.
    var packetLengthBytes, packetLength;
    var firstByte = data.shift();
    if (firstByte < e2e.openpgp.parse.TWO_BYTE_LENGTH_MIN) {
      // One byte length packet size.
      packetLength = firstByte;
      packetLengthBytes = [firstByte];
    } else if (firstByte < e2e.openpgp.parse.FIVE_BYTE_LENGTH_VAL) {
      // Two bytes length packet size.
      var secondByte = data.shift();
      packetLength = (
          (firstByte - e2e.openpgp.parse.TWO_BYTE_LENGTH_MIN) << 8) +
          (secondByte + e2e.openpgp.parse.TWO_BYTE_LENGTH_MIN);
      packetLengthBytes = [firstByte, secondByte];
    } else if (firstByte == e2e.openpgp.parse.FIVE_BYTE_LENGTH_VAL) {
      // Five bytes length packet size.
      packetLengthBytes = data.splice(0, 4);
      packetLength = e2e.byteArrayToDwordArray(
          packetLengthBytes)[0];
      packetLengthBytes.unshift(
          e2e.openpgp.parse.FIVE_BYTE_LENGTH_VAL);
    }

    var type = data.shift();
    var critical = Boolean(type & 0x80);
    type = /** @type {e2e.openpgp.packet.SignatureSub.Type} */ (
        type & 0x7F);
    var body = data.splice(0, packetLength - 1);

    packets.push(new e2e.openpgp.packet.SignatureSub(type, critical, body,
                                                     packetLengthBytes));
  }

  return packets;
};


/**
 * Parses the subpacket and populates the attributes object with the data.
 * @param {!Object.<string, number|!e2e.ByteArray>} attributes Attributes
 *   record object to populate.
 * @param {!e2e.openpgp.packet.SignatureSub} subpacket Subpacket to parse.
 * @param {boolean} hashed True If subpacket is in hashed section of signature.
 */
e2e.openpgp.packet.SignatureSub.populateAttribute = function(
    attributes, subpacket, hashed) {
  // TODO(user) Checks for which subpackets are fine for unhashed and
  //   different signature types.
  switch (subpacket.type) {
    case e2e.openpgp.packet.SignatureSub.Type.SIGNATURE_CREATION_TIME:
      attributes.SIGNATURE_CREATION_TIME =
          e2e.byteArrayToDwordArray(subpacket.body)[0];
      break;
    case e2e.openpgp.packet.SignatureSub.Type.SIGNATURE_EXPIRATION_TIME:
      attributes.SIGNATURE_EXPIRATION_TIME =
          e2e.byteArrayToDwordArray(subpacket.body)[0];
      break;
    case e2e.openpgp.packet.SignatureSub.Type.REGULAR_EXPRESSION:
      attributes.REGULAR_EXPRESSION = e2e.byteArrayToString(subpacket.body);
      break;
    case e2e.openpgp.packet.SignatureSub.Type.KEY_EXPIRATION_TIME:
      attributes.KEY_EXPIRATION_TIME =
          e2e.byteArrayToDwordArray(subpacket.body)[0];
      break;
    case e2e.openpgp.packet.SignatureSub.Type.
        PREFERRED_SYMMETRIC_ALGORITHMS:
      attributes.PREFERRED_SYMMETRIC_ALGORITHMS = subpacket.body;
      break;
    case e2e.openpgp.packet.SignatureSub.Type.ISSUER:
      attributes.ISSUER = subpacket.body;
      break;
    case e2e.openpgp.packet.SignatureSub.Type.PREFERRED_HASH_ALGORITHMS:
      attributes.PREFERRED_HASH_ALGORITHMS = subpacket.body;
      break;
    case e2e.openpgp.packet.SignatureSub.Type.
        PREFERRED_COMPRESSION_ALGORITHMS:
      attributes.PREFERRED_COMPRESSION_ALGORITHMS = subpacket.body;
      break;
    case e2e.openpgp.packet.SignatureSub.Type.KEY_SERVER_PREFERENCES:
      attributes.KEY_SERVER_PREFERENCES = subpacket.body[0];
      break;
    case e2e.openpgp.packet.SignatureSub.Type.PRIMARY_USER_ID:
      attributes.PRIMARY_USER_ID = e2e.byteArrayToString(subpacket.body);
      break;
    case e2e.openpgp.packet.SignatureSub.Type.KEY_FLAGS:
      if (subpacket.body.length == 0) {
        attributes.KEY_FLAGS = 0;
      } else {
        // RFC 4880 section 5.2.3.21.
        attributes.KEY_FLAGS = subpacket.body[0];
        attributes.KEY_FLAG_CERTIFY = attributes.KEY_FLAGS & 0x01;
        attributes.KEY_FLAG_SIGN = attributes.KEY_FLAGS & 0x02;
        attributes.KEY_FLAG_ENCRYPT_COMMUNICATION = attributes.KEY_FLAGS & 0x04;
        attributes.KEY_FLAG_ENCRYPT_STORAGE = attributes.KEY_FLAGS & 0x08;
        attributes.KEY_FLAG_SPLIT = attributes.KEY_FLAGS & 0x10;
        attributes.KEY_FLAG_AUTHENTICATION = attributes.KEY_FLAGS & 0x20;
        attributes.KEY_FLAG_SHARED = attributes.KEY_FLAGS & 0x80;
      }
      break;
    case e2e.openpgp.packet.SignatureSub.Type.REVOCATION_REASON:
      attributes.REVOCATION_REASON = subpacket.body[0];
      attributes.REVOCATION_REASON_TEXT = e2e.byteArrayToString(
          goog.array.slice(subpacket.body, 1));
      break;
    case e2e.openpgp.packet.SignatureSub.Type.FEATURES:
      if (subpacket.body.length == 0) {
        attributes.FEATURES = 0;
      } else {
        attributes.FEATURES = subpacket.body[0];  // MDC is 0x01
      }
      break;
    case e2e.openpgp.packet.SignatureSub.Type.EMBEDDED_SIGNATURE:
        attributes.EMBEDDED_SIGNATURE = subpacket.body;
      break;
    default:
      if (subpacket.critical) {
        // TODO(user): Treat the signature as invalid instead of throwing.
        throw new Error(
            'Critical signature subpacket not recognized: ' + subpacket.type);
      }
  }
};

/**
 * Type of signature subpacket.
 * @enum {number}
 */
e2e.openpgp.packet.SignatureSub.Type = {
  'SIGNATURE_CREATION_TIME': 2,
  'SIGNATURE_EXPIRATION_TIME': 3,
  'REGULAR_EXPRESSION': 6,
  'KEY_EXPIRATION_TIME': 9,
  'PREFERRED_SYMMETRIC_ALGORITHMS': 11,
  'ISSUER': 16,
  'PREFERRED_HASH_ALGORITHMS': 21,
  'PREFERRED_COMPRESSION_ALGORITHMS': 22,
  'KEY_SERVER_PREFERENCES': 23,
  'PRIMARY_USER_ID': 25,
  'KEY_FLAGS': 27,
  'REVOCATION_REASON': 29,
  'FEATURES': 30,
  'EMBEDDED_SIGNATURE': 32
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview One-Pass Signature packet.
 */

goog.provide('e2e.openpgp.packet.OnePassSignature');

goog.require('e2e.openpgp.packet.Packet');
goog.require('e2e.openpgp.packet.factory');



/**
 * @param {number} version
 * @param {number} type
 * @param {number} hashAlgo
 * @param {number} pubkeyAlgo
 * @param {!e2e.ByteArray} keyId
 * @param {boolean} nested
 * @constructor
 * @extends {e2e.openpgp.packet.Packet}
 */
e2e.openpgp.packet.OnePassSignature = function(
    version, type, hashAlgo, pubkeyAlgo, keyId, nested) {
  goog.base(this);
  this.version = version;

  this.type = type;

  this.hashAlgo = hashAlgo;

  this.pubkeyAlgo = pubkeyAlgo;

  this.keyId = keyId;

  // true indicates that the next packet is a onepassSignature.
  this.nested = nested;
};
goog.inherits(e2e.openpgp.packet.OnePassSignature,
              e2e.openpgp.packet.Packet);


/** @override */
e2e.openpgp.packet.OnePassSignature.prototype.tag = 4;


/**
 * @type {!e2e.openpgp.packet.Signature}
 */
e2e.openpgp.packet.OnePassSignature.prototype.signature;


/** @override */
e2e.openpgp.packet.OnePassSignature.prototype.serializePacketBody =
    function() {
  return [this.version, this.type, this.hashAlgo, this.pubkeyAlgo].concat(
      this.keyId).concat([this.nested ? 0 : 1]);
};


/**
 * Verifies that a key pair actually signed the specified data. Forwards the
 * verification to the related Signature packet.
 * @param {!e2e.ByteArray|!Uint8Array} data The signed data.
 * @param {!e2e.signer.Signer} signer Signer with the public key that
 *     signed the data.
 * @param {string} opt_hashAlgo message digest algorithm declared in the message
 * @return {boolean} True if the signature correctly verifies.
 */
e2e.openpgp.packet.OnePassSignature.prototype.verify = function(
  data, signer, opt_hashAlgo) {
  if (this.signature) {
    return this.signature.verify(data, signer, opt_hashAlgo);
  }
  return false;
};


/**
 * Extracts key ID used to place the signature (if possible, forwards the call
 * to the related Signature object, as key ID there might be signed as well.
 * @return {!e2e.ByteArray} signer key ID
 */
e2e.openpgp.packet.OnePassSignature.prototype.getSignerKeyId = function() {
  if (this.signature) {
    return this.signature.getSignerKeyId();
  }
  return this.keyId;
};


/**
 * Returns hash algorithm declared in the related Signature packet. Ignores
 * algorithm declared in OnePassSignature packet.
 * @return {?e2e.hash.Algorithm} Hash algorithm
 */
e2e.openpgp.packet.OnePassSignature.prototype.getHashAlgorithm = function() {
  if (this.signature) {
    return this.signature.getHashAlgorithm();
  }
  return null;
};


/**
 * @param {!e2e.ByteArray} body
 * @return {!e2e.openpgp.packet.OnePassSignature}
 */
e2e.openpgp.packet.OnePassSignature.parse = function(body) {
  var version = body.shift();
  var type = body.shift();
  var hashAlgo = body.shift();
  var pubkeyAlgo = body.shift();
  var keyId = body.splice(0, 8);
  var nested = body.shift() == 0;
  return new e2e.openpgp.packet.OnePassSignature(
      version, type, hashAlgo, pubkeyAlgo, keyId, nested);
};


e2e.openpgp.packet.factory.add(e2e.openpgp.packet.OnePassSignature);

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview MD5 cryptographic hash.
 * Implementation of http://tools.ietf.org/html/rfc1321 with common
 * optimizations and tweaks (see http://en.wikipedia.org/wiki/MD5).
 *
 * Usage:
 *   var md5 = new goog.crypt.Md5();
 *   md5.update(bytes);
 *   var hash = md5.digest();
 *
 * Performance:
 *   Chrome 23              ~680 Mbit/s
 *   Chrome 13 (in a VM)    ~250 Mbit/s
 *   Firefox 6.0 (in a VM)  ~100 Mbit/s
 *   IE9 (in a VM)           ~27 Mbit/s
 *   Firefox 3.6             ~15 Mbit/s
 *   IE8 (in a VM)           ~13 Mbit/s
 *
 */

goog.provide('goog.crypt.Md5');

goog.require('goog.crypt.Hash');



/**
 * MD5 cryptographic hash constructor.
 * @constructor
 * @extends {goog.crypt.Hash}
 * @final
 * @struct
 */
goog.crypt.Md5 = function() {
  goog.crypt.Md5.base(this, 'constructor');

  this.blockSize = 512 / 8;

  /**
   * Holds the current values of accumulated A-D variables (MD buffer).
   * @type {Array.<number>}
   * @private
   */
  this.chain_ = new Array(4);

  /**
   * A buffer holding the data until the whole block can be processed.
   * @type {Array.<number>}
   * @private
   */
  this.block_ = new Array(this.blockSize);

  /**
   * The length of yet-unprocessed data as collected in the block.
   * @type {number}
   * @private
   */
  this.blockLength_ = 0;

  /**
   * The total length of the message so far.
   * @type {number}
   * @private
   */
  this.totalLength_ = 0;

  this.reset();
};
goog.inherits(goog.crypt.Md5, goog.crypt.Hash);


/**
 * Integer rotation constants used by the abbreviated implementation.
 * They are hardcoded in the unrolled implementation, so it is left
 * here commented out.
 * @type {Array.<number>}
 * @private
 *
goog.crypt.Md5.S_ = [
  7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
  5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20,
  4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
  6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21
];
 */

/**
 * Sine function constants used by the abbreviated implementation.
 * They are hardcoded in the unrolled implementation, so it is left
 * here commented out.
 * @type {Array.<number>}
 * @private
 *
goog.crypt.Md5.T_ = [
  0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
  0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
  0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
  0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
  0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
  0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
  0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
  0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
  0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
  0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
  0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
  0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
  0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
  0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
  0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
  0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
];
 */


/** @override */
goog.crypt.Md5.prototype.reset = function() {
  this.chain_[0] = 0x67452301;
  this.chain_[1] = 0xefcdab89;
  this.chain_[2] = 0x98badcfe;
  this.chain_[3] = 0x10325476;

  this.blockLength_ = 0;
  this.totalLength_ = 0;
};


/**
 * Internal compress helper function. It takes a block of data (64 bytes)
 * and updates the accumulator.
 * @param {Array.<number>|Uint8Array|string} buf The block to compress.
 * @param {number=} opt_offset Offset of the block in the buffer.
 * @private
 */
goog.crypt.Md5.prototype.compress_ = function(buf, opt_offset) {
  if (!opt_offset) {
    opt_offset = 0;
  }

  // We allocate the array every time, but it's cheap in practice.
  var X = new Array(16);

  // Get 16 little endian words. It is not worth unrolling this for Chrome 11.
  if (goog.isString(buf)) {
    for (var i = 0; i < 16; ++i) {
      X[i] = (buf.charCodeAt(opt_offset++)) |
             (buf.charCodeAt(opt_offset++) << 8) |
             (buf.charCodeAt(opt_offset++) << 16) |
             (buf.charCodeAt(opt_offset++) << 24);
    }
  } else {
    for (var i = 0; i < 16; ++i) {
      X[i] = (buf[opt_offset++]) |
             (buf[opt_offset++] << 8) |
             (buf[opt_offset++] << 16) |
             (buf[opt_offset++] << 24);
    }
  }

  var A = this.chain_[0];
  var B = this.chain_[1];
  var C = this.chain_[2];
  var D = this.chain_[3];
  var sum = 0;

  /*
   * This is an abbreviated implementation, it is left here commented out for
   * reference purposes. See below for an unrolled version in use.
   *
  var f, n, tmp;
  for (var i = 0; i < 64; ++i) {

    if (i < 16) {
      f = (D ^ (B & (C ^ D)));
      n = i;
    } else if (i < 32) {
      f = (C ^ (D & (B ^ C)));
      n = (5 * i + 1) % 16;
    } else if (i < 48) {
      f = (B ^ C ^ D);
      n = (3 * i + 5) % 16;
    } else {
      f = (C ^ (B | (~D)));
      n = (7 * i) % 16;
    }

    tmp = D;
    D = C;
    C = B;
    sum = (A + f + goog.crypt.Md5.T_[i] + X[n]) & 0xffffffff;
    B += ((sum << goog.crypt.Md5.S_[i]) & 0xffffffff) |
         (sum >>> (32 - goog.crypt.Md5.S_[i]));
    A = tmp;
  }
   */

  /*
   * This is an unrolled MD5 implementation, which gives ~30% speedup compared
   * to the abbreviated implementation above, as measured on Chrome 11. It is
   * important to keep 32-bit croppings to minimum and inline the integer
   * rotation.
   */
  sum = (A + (D ^ (B & (C ^ D))) + X[0] + 0xd76aa478) & 0xffffffff;
  A = B + (((sum << 7) & 0xffffffff) | (sum >>> 25));
  sum = (D + (C ^ (A & (B ^ C))) + X[1] + 0xe8c7b756) & 0xffffffff;
  D = A + (((sum << 12) & 0xffffffff) | (sum >>> 20));
  sum = (C + (B ^ (D & (A ^ B))) + X[2] + 0x242070db) & 0xffffffff;
  C = D + (((sum << 17) & 0xffffffff) | (sum >>> 15));
  sum = (B + (A ^ (C & (D ^ A))) + X[3] + 0xc1bdceee) & 0xffffffff;
  B = C + (((sum << 22) & 0xffffffff) | (sum >>> 10));
  sum = (A + (D ^ (B & (C ^ D))) + X[4] + 0xf57c0faf) & 0xffffffff;
  A = B + (((sum << 7) & 0xffffffff) | (sum >>> 25));
  sum = (D + (C ^ (A & (B ^ C))) + X[5] + 0x4787c62a) & 0xffffffff;
  D = A + (((sum << 12) & 0xffffffff) | (sum >>> 20));
  sum = (C + (B ^ (D & (A ^ B))) + X[6] + 0xa8304613) & 0xffffffff;
  C = D + (((sum << 17) & 0xffffffff) | (sum >>> 15));
  sum = (B + (A ^ (C & (D ^ A))) + X[7] + 0xfd469501) & 0xffffffff;
  B = C + (((sum << 22) & 0xffffffff) | (sum >>> 10));
  sum = (A + (D ^ (B & (C ^ D))) + X[8] + 0x698098d8) & 0xffffffff;
  A = B + (((sum << 7) & 0xffffffff) | (sum >>> 25));
  sum = (D + (C ^ (A & (B ^ C))) + X[9] + 0x8b44f7af) & 0xffffffff;
  D = A + (((sum << 12) & 0xffffffff) | (sum >>> 20));
  sum = (C + (B ^ (D & (A ^ B))) + X[10] + 0xffff5bb1) & 0xffffffff;
  C = D + (((sum << 17) & 0xffffffff) | (sum >>> 15));
  sum = (B + (A ^ (C & (D ^ A))) + X[11] + 0x895cd7be) & 0xffffffff;
  B = C + (((sum << 22) & 0xffffffff) | (sum >>> 10));
  sum = (A + (D ^ (B & (C ^ D))) + X[12] + 0x6b901122) & 0xffffffff;
  A = B + (((sum << 7) & 0xffffffff) | (sum >>> 25));
  sum = (D + (C ^ (A & (B ^ C))) + X[13] + 0xfd987193) & 0xffffffff;
  D = A + (((sum << 12) & 0xffffffff) | (sum >>> 20));
  sum = (C + (B ^ (D & (A ^ B))) + X[14] + 0xa679438e) & 0xffffffff;
  C = D + (((sum << 17) & 0xffffffff) | (sum >>> 15));
  sum = (B + (A ^ (C & (D ^ A))) + X[15] + 0x49b40821) & 0xffffffff;
  B = C + (((sum << 22) & 0xffffffff) | (sum >>> 10));
  sum = (A + (C ^ (D & (B ^ C))) + X[1] + 0xf61e2562) & 0xffffffff;
  A = B + (((sum << 5) & 0xffffffff) | (sum >>> 27));
  sum = (D + (B ^ (C & (A ^ B))) + X[6] + 0xc040b340) & 0xffffffff;
  D = A + (((sum << 9) & 0xffffffff) | (sum >>> 23));
  sum = (C + (A ^ (B & (D ^ A))) + X[11] + 0x265e5a51) & 0xffffffff;
  C = D + (((sum << 14) & 0xffffffff) | (sum >>> 18));
  sum = (B + (D ^ (A & (C ^ D))) + X[0] + 0xe9b6c7aa) & 0xffffffff;
  B = C + (((sum << 20) & 0xffffffff) | (sum >>> 12));
  sum = (A + (C ^ (D & (B ^ C))) + X[5] + 0xd62f105d) & 0xffffffff;
  A = B + (((sum << 5) & 0xffffffff) | (sum >>> 27));
  sum = (D + (B ^ (C & (A ^ B))) + X[10] + 0x02441453) & 0xffffffff;
  D = A + (((sum << 9) & 0xffffffff) | (sum >>> 23));
  sum = (C + (A ^ (B & (D ^ A))) + X[15] + 0xd8a1e681) & 0xffffffff;
  C = D + (((sum << 14) & 0xffffffff) | (sum >>> 18));
  sum = (B + (D ^ (A & (C ^ D))) + X[4] + 0xe7d3fbc8) & 0xffffffff;
  B = C + (((sum << 20) & 0xffffffff) | (sum >>> 12));
  sum = (A + (C ^ (D & (B ^ C))) + X[9] + 0x21e1cde6) & 0xffffffff;
  A = B + (((sum << 5) & 0xffffffff) | (sum >>> 27));
  sum = (D + (B ^ (C & (A ^ B))) + X[14] + 0xc33707d6) & 0xffffffff;
  D = A + (((sum << 9) & 0xffffffff) | (sum >>> 23));
  sum = (C + (A ^ (B & (D ^ A))) + X[3] + 0xf4d50d87) & 0xffffffff;
  C = D + (((sum << 14) & 0xffffffff) | (sum >>> 18));
  sum = (B + (D ^ (A & (C ^ D))) + X[8] + 0x455a14ed) & 0xffffffff;
  B = C + (((sum << 20) & 0xffffffff) | (sum >>> 12));
  sum = (A + (C ^ (D & (B ^ C))) + X[13] + 0xa9e3e905) & 0xffffffff;
  A = B + (((sum << 5) & 0xffffffff) | (sum >>> 27));
  sum = (D + (B ^ (C & (A ^ B))) + X[2] + 0xfcefa3f8) & 0xffffffff;
  D = A + (((sum << 9) & 0xffffffff) | (sum >>> 23));
  sum = (C + (A ^ (B & (D ^ A))) + X[7] + 0x676f02d9) & 0xffffffff;
  C = D + (((sum << 14) & 0xffffffff) | (sum >>> 18));
  sum = (B + (D ^ (A & (C ^ D))) + X[12] + 0x8d2a4c8a) & 0xffffffff;
  B = C + (((sum << 20) & 0xffffffff) | (sum >>> 12));
  sum = (A + (B ^ C ^ D) + X[5] + 0xfffa3942) & 0xffffffff;
  A = B + (((sum << 4) & 0xffffffff) | (sum >>> 28));
  sum = (D + (A ^ B ^ C) + X[8] + 0x8771f681) & 0xffffffff;
  D = A + (((sum << 11) & 0xffffffff) | (sum >>> 21));
  sum = (C + (D ^ A ^ B) + X[11] + 0x6d9d6122) & 0xffffffff;
  C = D + (((sum << 16) & 0xffffffff) | (sum >>> 16));
  sum = (B + (C ^ D ^ A) + X[14] + 0xfde5380c) & 0xffffffff;
  B = C + (((sum << 23) & 0xffffffff) | (sum >>> 9));
  sum = (A + (B ^ C ^ D) + X[1] + 0xa4beea44) & 0xffffffff;
  A = B + (((sum << 4) & 0xffffffff) | (sum >>> 28));
  sum = (D + (A ^ B ^ C) + X[4] + 0x4bdecfa9) & 0xffffffff;
  D = A + (((sum << 11) & 0xffffffff) | (sum >>> 21));
  sum = (C + (D ^ A ^ B) + X[7] + 0xf6bb4b60) & 0xffffffff;
  C = D + (((sum << 16) & 0xffffffff) | (sum >>> 16));
  sum = (B + (C ^ D ^ A) + X[10] + 0xbebfbc70) & 0xffffffff;
  B = C + (((sum << 23) & 0xffffffff) | (sum >>> 9));
  sum = (A + (B ^ C ^ D) + X[13] + 0x289b7ec6) & 0xffffffff;
  A = B + (((sum << 4) & 0xffffffff) | (sum >>> 28));
  sum = (D + (A ^ B ^ C) + X[0] + 0xeaa127fa) & 0xffffffff;
  D = A + (((sum << 11) & 0xffffffff) | (sum >>> 21));
  sum = (C + (D ^ A ^ B) + X[3] + 0xd4ef3085) & 0xffffffff;
  C = D + (((sum << 16) & 0xffffffff) | (sum >>> 16));
  sum = (B + (C ^ D ^ A) + X[6] + 0x04881d05) & 0xffffffff;
  B = C + (((sum << 23) & 0xffffffff) | (sum >>> 9));
  sum = (A + (B ^ C ^ D) + X[9] + 0xd9d4d039) & 0xffffffff;
  A = B + (((sum << 4) & 0xffffffff) | (sum >>> 28));
  sum = (D + (A ^ B ^ C) + X[12] + 0xe6db99e5) & 0xffffffff;
  D = A + (((sum << 11) & 0xffffffff) | (sum >>> 21));
  sum = (C + (D ^ A ^ B) + X[15] + 0x1fa27cf8) & 0xffffffff;
  C = D + (((sum << 16) & 0xffffffff) | (sum >>> 16));
  sum = (B + (C ^ D ^ A) + X[2] + 0xc4ac5665) & 0xffffffff;
  B = C + (((sum << 23) & 0xffffffff) | (sum >>> 9));
  sum = (A + (C ^ (B | (~D))) + X[0] + 0xf4292244) & 0xffffffff;
  A = B + (((sum << 6) & 0xffffffff) | (sum >>> 26));
  sum = (D + (B ^ (A | (~C))) + X[7] + 0x432aff97) & 0xffffffff;
  D = A + (((sum << 10) & 0xffffffff) | (sum >>> 22));
  sum = (C + (A ^ (D | (~B))) + X[14] + 0xab9423a7) & 0xffffffff;
  C = D + (((sum << 15) & 0xffffffff) | (sum >>> 17));
  sum = (B + (D ^ (C | (~A))) + X[5] + 0xfc93a039) & 0xffffffff;
  B = C + (((sum << 21) & 0xffffffff) | (sum >>> 11));
  sum = (A + (C ^ (B | (~D))) + X[12] + 0x655b59c3) & 0xffffffff;
  A = B + (((sum << 6) & 0xffffffff) | (sum >>> 26));
  sum = (D + (B ^ (A | (~C))) + X[3] + 0x8f0ccc92) & 0xffffffff;
  D = A + (((sum << 10) & 0xffffffff) | (sum >>> 22));
  sum = (C + (A ^ (D | (~B))) + X[10] + 0xffeff47d) & 0xffffffff;
  C = D + (((sum << 15) & 0xffffffff) | (sum >>> 17));
  sum = (B + (D ^ (C | (~A))) + X[1] + 0x85845dd1) & 0xffffffff;
  B = C + (((sum << 21) & 0xffffffff) | (sum >>> 11));
  sum = (A + (C ^ (B | (~D))) + X[8] + 0x6fa87e4f) & 0xffffffff;
  A = B + (((sum << 6) & 0xffffffff) | (sum >>> 26));
  sum = (D + (B ^ (A | (~C))) + X[15] + 0xfe2ce6e0) & 0xffffffff;
  D = A + (((sum << 10) & 0xffffffff) | (sum >>> 22));
  sum = (C + (A ^ (D | (~B))) + X[6] + 0xa3014314) & 0xffffffff;
  C = D + (((sum << 15) & 0xffffffff) | (sum >>> 17));
  sum = (B + (D ^ (C | (~A))) + X[13] + 0x4e0811a1) & 0xffffffff;
  B = C + (((sum << 21) & 0xffffffff) | (sum >>> 11));
  sum = (A + (C ^ (B | (~D))) + X[4] + 0xf7537e82) & 0xffffffff;
  A = B + (((sum << 6) & 0xffffffff) | (sum >>> 26));
  sum = (D + (B ^ (A | (~C))) + X[11] + 0xbd3af235) & 0xffffffff;
  D = A + (((sum << 10) & 0xffffffff) | (sum >>> 22));
  sum = (C + (A ^ (D | (~B))) + X[2] + 0x2ad7d2bb) & 0xffffffff;
  C = D + (((sum << 15) & 0xffffffff) | (sum >>> 17));
  sum = (B + (D ^ (C | (~A))) + X[9] + 0xeb86d391) & 0xffffffff;
  B = C + (((sum << 21) & 0xffffffff) | (sum >>> 11));

  this.chain_[0] = (this.chain_[0] + A) & 0xffffffff;
  this.chain_[1] = (this.chain_[1] + B) & 0xffffffff;
  this.chain_[2] = (this.chain_[2] + C) & 0xffffffff;
  this.chain_[3] = (this.chain_[3] + D) & 0xffffffff;
};


/** @override */
goog.crypt.Md5.prototype.update = function(bytes, opt_length) {
  if (!goog.isDef(opt_length)) {
    opt_length = bytes.length;
  }
  var lengthMinusBlock = opt_length - this.blockSize;

  // Copy some object properties to local variables in order to save on access
  // time from inside the loop (~10% speedup was observed on Chrome 11).
  var block = this.block_;
  var blockLength = this.blockLength_;
  var i = 0;

  // The outer while loop should execute at most twice.
  while (i < opt_length) {
    // When we have no data in the block to top up, we can directly process the
    // input buffer (assuming it contains sufficient data). This gives ~30%
    // speedup on Chrome 14 and ~70% speedup on Firefox 6.0, but requires that
    // the data is provided in large chunks (or in multiples of 64 bytes).
    if (blockLength == 0) {
      while (i <= lengthMinusBlock) {
        this.compress_(bytes, i);
        i += this.blockSize;
      }
    }

    if (goog.isString(bytes)) {
      while (i < opt_length) {
        block[blockLength++] = bytes.charCodeAt(i++);
        if (blockLength == this.blockSize) {
          this.compress_(block);
          blockLength = 0;
          // Jump to the outer loop so we use the full-block optimization.
          break;
        }
      }
    } else {
      while (i < opt_length) {
        block[blockLength++] = bytes[i++];
        if (blockLength == this.blockSize) {
          this.compress_(block);
          blockLength = 0;
          // Jump to the outer loop so we use the full-block optimization.
          break;
        }
      }
    }
  }

  this.blockLength_ = blockLength;
  this.totalLength_ += opt_length;
};


/** @override */
goog.crypt.Md5.prototype.digest = function() {
  // This must accommodate at least 1 padding byte (0x80), 8 bytes of
  // total bitlength, and must end at a 64-byte boundary.
  var pad = new Array((this.blockLength_ < 56 ?
                       this.blockSize :
                       this.blockSize * 2) - this.blockLength_);

  // Add padding: 0x80 0x00*
  pad[0] = 0x80;
  for (var i = 1; i < pad.length - 8; ++i) {
    pad[i] = 0;
  }
  // Add the total number of bits, little endian 64-bit integer.
  var totalBits = this.totalLength_ * 8;
  for (var i = pad.length - 8; i < pad.length; ++i) {
    pad[i] = totalBits & 0xff;
    totalBits /= 0x100; // Don't use bit-shifting here!
  }
  this.update(pad);

  var digest = new Array(16);
  var n = 0;
  for (var i = 0; i < 4; ++i) {
    for (var j = 0; j < 32; j += 8) {
      digest[n++] = (this.chain_[i] >>> j) & 0xff;
    }
  }
  return digest;
};

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Wraps the original Md5 implementation to conform to e2e.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.hash.Md5');

goog.require('e2e.hash.Algorithm');
goog.require('e2e.hash.Hash');
goog.require('e2e.hash.factory');
goog.require('goog.crypt.Md5');



/**
 * Wrapper around the goog.crypt.Md5 implementation.
 * @extends {e2e.hash.Hash}
 * @constructor
 */
e2e.hash.Md5 = function() {
  goog.base(this);
  this.inst_ = new goog.crypt.Md5();
  this.blockSize = this.inst_.blockSize;
};
goog.inherits(e2e.hash.Md5, e2e.hash.Hash);


/** @inheritDoc */
e2e.hash.Md5.prototype.algorithm = e2e.hash.Algorithm.MD5;

e2e.hash.factory.add(e2e.hash.Md5);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires all blocks to load them into the factory.
 */
/** @suppress {extraProvide} this aggregation needs a namespace */
goog.provide('e2e.hash.all');

/** @suppress {extraRequire} intentional import */
goog.require('e2e.hash.Md5');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.hash.Sha1');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.hash.Sha224');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.hash.Sha256');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.hash.Sha384');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.hash.Sha512');

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Module for reading and writing Multiprecision Integers (MPIs)
 * as defined in RFC 4880 Section 3.2.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.Mpi');

goog.require('e2e');
goog.require('e2e.openpgp.error.ParseError');
goog.require('goog.array');


/**
 * An RFC 4880 style MPI. The number would be available as
 * an Array of bytes but should be treated as read-only.
 * @param {!e2e.ByteArray} number The MPI's value.
 * @extends {Array}
 * @constructor
 */
e2e.openpgp.Mpi = function(number) {
  goog.base(this);
  goog.array.extend(this, number);

};
goog.inherits(e2e.openpgp.Mpi, Array);


/**
 * Serialize the MPI into a ByteArray.
 * @return {!e2e.ByteArray} The serialized MPI.
 */
e2e.openpgp.Mpi.prototype.serialize = function() {
  var number = goog.array.clone(this);
  while (!number[0])number.shift();
  // This is the length in bits.
  var length = (number.length - 1) * 8 + number[0].toString(2).length;
  var length_bytes = e2e.dwordArrayToByteArray([length]).slice(-2);
  return /** @type {!e2e.ByteArray} */ (
      goog.array.flatten(length_bytes, number));
};


/**
 * Extracts an MPI from the body, and returns the MPI.
 * @param {!e2e.ByteArray} body The body from where to extract the data.
 * @return {!e2e.openpgp.Mpi} The generated packet.
 */
e2e.openpgp.Mpi.parse = function(body) {
  if (body.length > 1) {
  } else {
    throw new e2e.openpgp.error.ParseError('MPI is too small');
  }
  // The first two bytes are the size in bits.
  var encoded_length = body.splice(0, 2);
  var length = e2e.byteArrayToDwordArray(
      [0, 0].concat(encoded_length))[0];
  var consume = Math.floor((length + 7) / 8);
  var number = body.splice(0, consume);
  if (number.length != consume || !e2e.isByteArray(number)) {
    throw new e2e.openpgp.error.ParseError('Invalid MPI.');
  }
  return new e2e.openpgp.Mpi(number);
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Definition of a signature packet.
 */

goog.provide('e2e.openpgp.packet.Signature');
goog.provide('e2e.openpgp.packet.Signature.RevocationReason');
goog.provide('e2e.openpgp.packet.Signature.SignatureType');

goog.require('e2e');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.Rsa');
/** @suppress {extraRequire} force loading of all hash functions */
goog.require('e2e.hash.all');
goog.require('e2e.hash.factory');
goog.require('e2e.openpgp.Mpi');
goog.require('e2e.openpgp.SignatureDigestAlgorithm');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.error.InvalidArgumentsError');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.error.SerializationError');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.openpgp.packet.OnePassSignature');
goog.require('e2e.openpgp.packet.Packet');
goog.require('e2e.openpgp.packet.SignatureSub');
goog.require('e2e.openpgp.packet.factory');
goog.require('e2e.scheme.Ecdsa');
goog.require('e2e.scheme.Rsassa');
goog.require('e2e.signer.Algorithm');
goog.require('e2e.signer.Ecdsa');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * A Signature Packet (Tag 2) RFC 4880 Section 5.2.
 * @param {number} version The version of the signature packet.
 * @param {!e2e.openpgp.packet.Signature.SignatureType} signatureType
 *     The signature type.
 * @param {!e2e.signer.Algorithm} pubKeyAlgorithm The public key
 *     algorithm.
 * @param {!e2e.hash.Algorithm} hashAlgorithm The hash algorithm.
 * @param {!e2e.signer.signature.Signature} signature The signature.
 * @param {!e2e.ByteArray} leftTwoBytes The left two bytes of the hash.
 * @param {Array.<e2e.openpgp.packet.SignatureSub>=} opt_hashedSubpackets
 *     The hashed subpackets of the signature.
 * @param {Array.<e2e.openpgp.packet.SignatureSub>=} opt_unhashedSubpackets
 *     The non hashed subpackets of the signature.
 * @param {!e2e.ByteArray=} opt_signerKeyId The key id of the signer.
 * @param {number=} opt_creationTime The time the signature was created.
 * @constructor
 * @extends {e2e.openpgp.packet.Packet}
 */
e2e.openpgp.packet.Signature = function(
    version, signatureType,
    pubKeyAlgorithm, hashAlgorithm,
    signature, leftTwoBytes,
    opt_hashedSubpackets, opt_unhashedSubpackets,
    opt_signerKeyId, opt_creationTime) {
  goog.base(this);
  if (version == 0x04) {
    /**
     * Hashed signature subpackets.
     * @type {!Array.<!e2e.openpgp.packet.SignatureSub>}
     */
    this.hashedSubpackets = opt_hashedSubpackets || [];
    /**
     * @type {!Object.<string, number|!e2e.ByteArray>}
     */
    this.attributes = {};
    goog.array.forEach(this.hashedSubpackets, function(subpacket) {
      e2e.openpgp.packet.SignatureSub.populateAttribute(
          this.attributes, subpacket, false);
    }, this);
    /**
     * Non hashed signature subpackets.
     * @type {!Array.<!e2e.openpgp.packet.SignatureSub>}
     */
    this.unhashedSubpackets = opt_unhashedSubpackets || [];
    /**
     * @type {!Object.<string, number|!e2e.ByteArray>}
     */
    this.untrustedAttributes = {};
    goog.array.forEach(this.unhashedSubpackets, function(subpacket) {
      e2e.openpgp.packet.SignatureSub.populateAttribute(
          this.untrustedAttributes, subpacket, false);
    }, this);
    /**
     * Embedded signature.
     * @type {e2e.openpgp.packet.Signature}
     */
    this.embeddedSignature = null;
    var sigBytes = this.attributes.EMBEDDED_SIGNATURE ||
        this.untrustedAttributes.EMBEDDED_SIGNATURE;
    if (sigBytes) {
      this.embeddedSignature = e2e.openpgp.packet.Signature.parse(
          goog.array.clone(sigBytes));
    }
  } else if (version == 0x03 || version == 0x02) {
    if (!goog.isDef(opt_signerKeyId) ||
        !goog.isDef(opt_creationTime)) {
      throw new e2e.openpgp.error.InvalidArgumentsError(
          'Missing key data.');
    }
    /**
     * ID of the key that generated this signature..
     * @type {!e2e.ByteArray}
     */
    this.signerKeyId = opt_signerKeyId;
    /**
     * Creation time of the signature.
     * @type {number}
     */
    this.creationTime = opt_creationTime;
  } else {
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'Invalid Signature Packet version.');
  }
  /**
   * Version of this signature.
   * @type {number}
   */
  this.version = version;
  /**
   * Type of the signature.
   * @type {!e2e.openpgp.packet.Signature.SignatureType}
   */
  this.signatureType = signatureType;
  /**
   * Public key algorithm used in this signature.
   * @type {!e2e.signer.Algorithm}
   */
  this.pubKeyAlgorithm = pubKeyAlgorithm;
  /**
   * Hash algorithm used in this signature.
   * @type {!e2e.hash.Algorithm}
   */
  this.hashAlgorithm = hashAlgorithm;
  /**
   * Signature data.
   * @type {!e2e.signer.signature.Signature}
   */
  this.signature = signature;
  /**
   * Left Two Bytes of hash.
   * @type {!e2e.ByteArray}
   */
  this.leftTwoBytes = leftTwoBytes;
};
goog.inherits(e2e.openpgp.packet.Signature,
              e2e.openpgp.packet.Packet);


/** @inheritDoc */
e2e.openpgp.packet.Signature.prototype.tag = 2;


/** @inheritDoc */
e2e.openpgp.packet.Signature.prototype.serializePacketBody = function() {
  var serialized = [];
  serialized.push(this.version);
  if (this.version == 0x03 || this.version == 0x02) {
    goog.array.extend(
        serialized,
        0x05, // Length of metadata.
        this.signatureType,
        e2e.dwordArrayToByteArray([this.creationTime]),
        this.signerKeyId,
        e2e.openpgp.constants.getId(this.pubKeyAlgorithm),
        e2e.openpgp.constants.getId(this.hashAlgorithm),
        this.leftTwoBytes);
  } else if (this.version == 0x04) {
    goog.array.extend(
        serialized,
        this.signatureType,
        e2e.openpgp.constants.getId(this.pubKeyAlgorithm),
        e2e.openpgp.constants.getId(this.hashAlgorithm),
        this.serializeHashedSubpackets(),
        this.serializeUnhashedSubpackets(),
        this.leftTwoBytes);
  } else {
    throw new e2e.openpgp.error.SerializationError('Invalid version.');
  }
  var sig = this.signature;
  switch (this.pubKeyAlgorithm) {
    case e2e.cipher.Algorithm.RSA:
      goog.array.extend(serialized,
          (new e2e.openpgp.Mpi(sig['s'])).serialize());
      break;
    case e2e.signer.Algorithm.ECDSA:
    case e2e.signer.Algorithm.DSA:
      goog.array.extend(serialized,
          (new e2e.openpgp.Mpi(sig['r'])).serialize(),
          (new e2e.openpgp.Mpi(sig['s'])).serialize());
      break;
    default:
      throw new e2e.openpgp.error.UnsupportedError(
          'Unsupported algorithm for signature verification.');
  }
  return serialized;
};


/**
 * @return {!e2e.ByteArray} The serialized subpackets.
 */
e2e.openpgp.packet.Signature.prototype.serializeHashedSubpackets = function() {
  return e2e.openpgp.packet.Signature.serializeSubpackets(
      this.hashedSubpackets);
};


/**
 * @return {!e2e.ByteArray} The serialized subpackets.
 */
e2e.openpgp.packet.Signature.prototype.serializeUnhashedSubpackets =
    function() {
  return e2e.openpgp.packet.Signature.serializeSubpackets(
      this.unhashedSubpackets);
};


/**
 * Returns hash algorithm used in the signature.
 * @return {e2e.hash.Algorithm} Hash algorithm
 */
e2e.openpgp.packet.Signature.prototype.getHashAlgorithm = function() {
  return this.hashAlgorithm;
};


/** @inheritDoc */
e2e.openpgp.packet.Signature.parse = function(data) {
  var version = data.shift();
  if (version == 0x03 || version == 0x02) {
    var hashedMaterialLength = data.shift();
    if (hashedMaterialLength != 0x05) {
      throw new e2e.openpgp.error.ParseError('Invalid material length.');
    }
    var signatureType =
        /** @type {e2e.openpgp.packet.Signature.SignatureType} */(
            data.shift());
    var creationTime = e2e.byteArrayToDwordArray(data.splice(0, 4))[0];
    var signerKeyId = data.splice(0, 8);
    var pubKeyAlgorithm = /** @type {e2e.cipher.Algorithm} */ (
        e2e.openpgp.constants.getAlgorithm(
        e2e.openpgp.constants.Type.PUBLIC_KEY, data.shift()));
    var hashAlgorithm = /** @type {e2e.hash.Algorithm} */ (
        e2e.openpgp.constants.getAlgorithm(
        e2e.openpgp.constants.Type.HASH, data.shift()));
  } else if (version == 0x04) {
    var signatureType =
        /** @type {e2e.openpgp.packet.Signature.SignatureType} */(
            data.shift());
    var pubKeyAlgorithm = /** @type {e2e.signer.Algorithm} */ (
        e2e.openpgp.constants.getAlgorithm(
            e2e.openpgp.constants.Type.PUBLIC_KEY, data.shift()));
    var hashAlgorithm = /** @type {e2e.hash.Algorithm} */ (
        e2e.openpgp.constants.getAlgorithm(
        e2e.openpgp.constants.Type.HASH, data.shift()));
    var hashedSubpacketLength = e2e.byteArrayToWord(
        data.splice(0, 2));
    var hashedSubpackets = e2e.openpgp.packet.SignatureSub.parse(
        data.splice(0, hashedSubpacketLength));
    var unhashedSubpacketLength = e2e.byteArrayToWord(
        data.splice(0, 2));
    var unhashedSubpackets = e2e.openpgp.packet.SignatureSub.parse(
        data.splice(0, unhashedSubpacketLength));
  } else {
    throw new e2e.openpgp.error.UnsupportedError(
        'Unsupported signature packet version:' + version);
  }
  var leftTwoBytes = data.splice(0, 2);
  var signature = {
    's': []
  };
  switch (pubKeyAlgorithm) {
    case e2e.signer.Algorithm.RSA:
      signature['s'] = e2e.openpgp.Mpi.parse(data);
      break;
    case e2e.signer.Algorithm.DSA:
    case e2e.signer.Algorithm.ECDSA:
      signature['r'] = e2e.openpgp.Mpi.parse(data);
      signature['s'] = e2e.openpgp.Mpi.parse(data);
      break;
    default:  // Unsupported signature algorithm.
      return null;
  }
  return new e2e.openpgp.packet.Signature(
      version, signatureType,
      pubKeyAlgorithm, hashAlgorithm,
      signature, leftTwoBytes,
      hashedSubpackets, unhashedSubpackets,
      signerKeyId, creationTime);
};


/**
 * Extracts key ID used to place the signature directly from the packet
 *     (for version 3 packets) or from subpackets (for version 4 packets).
 * @return {!e2e.ByteArray} signer key ID
 */
e2e.openpgp.packet.Signature.prototype.getSignerKeyId = function() {
  if (this.version == 0x03 || this.version == 0x02) {
    return this.signerKeyId;
  }
  if (this.version == 0x04) {
    if (this.attributes.hasOwnProperty('ISSUER')) {
      return /** @type {!e2e.ByteArray} */ (this.attributes['ISSUER']);
    }
    if (this.untrustedAttributes.hasOwnProperty('ISSUER')) {
      // GnuPG puts Key ID in unhashed subpacket.
      return /** @type {!e2e.ByteArray} */ (
          this.untrustedAttributes['ISSUER']);
    }
  }
  return e2e.openpgp.constants.EMPTY_KEY_ID;
};


/**
 * Creates OnePassSignature packet with data consistent with this packet.
 * @param {boolean=} opt_nested Should the OnePassSignature be nested
 *     (false by default).
 * @return {!e2e.openpgp.packet.OnePassSignature} created signature packet
 */
e2e.openpgp.packet.Signature.prototype.constructOnePassSignaturePacket =
    function(opt_nested) {
  return new e2e.openpgp.packet.OnePassSignature(
      3,  // Only version 3 packets exist according to RFC 4880.
      this.signatureType,
      e2e.openpgp.constants.getId(this.hashAlgorithm),
      e2e.openpgp.constants.getId(this.pubKeyAlgorithm),
      this.getSignerKeyId(),
      Boolean(opt_nested));
};


/**
 * Verifies that a key pair actually signed the specified data.
 * @param {!e2e.ByteArray|!Uint8Array} data The signed data.
 * @param {!e2e.signer.Signer} signer Signer with the public key that
 *     signed the data.
 * @param {string=} opt_hashAlgo message digest algorithm declared in the
 *     message.
 * @return {boolean} True if the signature correctly verifies.
 */
e2e.openpgp.packet.Signature.prototype.verify = function(data, signer,
    opt_hashAlgo) {
  if (this.pubKeyAlgorithm != signer.algorithm) {
    return false;
  }

  // Hash algorithm declared in signature may differ from the one used
  // when instantiating the signer. Use the one declared in signature
  // (if it's allowed).
  var allowedAlgo = e2e.openpgp.SignatureDigestAlgorithm[
      this.getHashAlgorithm()];
  if (!allowedAlgo) {
    throw new e2e.openpgp.error.UnsupportedError(
        'Specified hash algorithm is not allowed for signatures.');
  }
  if (allowedAlgo !== signer.getHash().algorithm) {
    signer.setHash(e2e.hash.factory.require(allowedAlgo));
  }

  if (goog.isDef(opt_hashAlgo) && opt_hashAlgo !== signer.getHash().algorithm) {
    // Hash algorithm mismatch.
    return false;
  }
  if (this.version != 0x04) {
    throw new e2e.openpgp.error.UnsupportedError(
        'Verification of old signature packets is not implemented.');
  }
  return e2e.async.Result.getValue(
      signer.verify(e2e.openpgp.packet.Signature.getDataToHash(
      data,
      this.signatureType, this.pubKeyAlgorithm,
      this.hashAlgorithm, this.hashedSubpackets),
                    this.signature));
};


/**
 * Returns true iff signature type is of one the types provided for User ID /
 *     public key packet certification.
 * @return {boolean} True if the it's a certification signature, false otherwise
 */
e2e.openpgp.packet.Signature.prototype.isCertificationSignature = function() {
  var certificationTypes = [
    e2e.openpgp.packet.Signature.SignatureType.GENERIC_USER_ID,
    e2e.openpgp.packet.Signature.SignatureType.PERSONA_USER_ID,
    e2e.openpgp.packet.Signature.SignatureType.CASUAL_USER_ID,
    e2e.openpgp.packet.Signature.SignatureType.POSITIVE_USER_ID
  ];
  return goog.array.contains(certificationTypes, this.signatureType);
};


/**
 * Signs the data and creates a signature packet.
 * @param {!e2e.openpgp.packet.SecretKey} key Key to sign with.
 * @param {!e2e.ByteArray} data Data to sign.
 * @param {!e2e.openpgp.packet.Signature.SignatureType} signatureType
 * @param {Object.<string, number|!e2e.ByteArray>=} opt_attributes
 *     The signature attributes.
 * @param {Object.<string, number|!e2e.ByteArray>=}
 *     opt_untrustedAttributes The signature untrusted attributes.
 * @return {!e2e.async.Result.<!e2e.openpgp.packet.Signature>} Signature packet.
 */
e2e.openpgp.packet.Signature.construct = function(
    key, data, signatureType, opt_attributes, opt_untrustedAttributes) {
  // Described in RFC4880 section 5.2.4.
  var hashedSubpackets = opt_attributes ?
      e2e.openpgp.packet.SignatureSub.construct(opt_attributes) : [];
  var unhashedSubpackets = opt_untrustedAttributes ?
      e2e.openpgp.packet.SignatureSub.construct(opt_untrustedAttributes) :
      [];
  var signer = key.cipher;
  var algorithm = /** @type {!e2e.signer.Algorithm} */ (signer.algorithm);
  goog.asserts.assert(algorithm in e2e.signer.Algorithm);

  var plaintext = e2e.openpgp.packet.Signature.getDataToHash(
      data,
      signatureType,
      algorithm,
      signer.getHash().algorithm,
      hashedSubpackets);
  var resultSig;
  if (signer instanceof e2e.cipher.Rsa) {
    resultSig = (new e2e.scheme.Rsassa(signer)).sign(plaintext);
  } else if (signer instanceof e2e.signer.Ecdsa) {
    resultSig = (new e2e.scheme.Ecdsa(signer)).sign(plaintext);
  } else {
    // DSA, always in JS. TODO(user): make DSA a scheme too.
    resultSig = signer.sign(plaintext);
  }
  return resultSig.addCallback(function(signature) {
    return new e2e.openpgp.packet.Signature(
        4, // version
        signatureType,
        algorithm,
        signer.getHash().algorithm,
        signature,
        signature['hashValue'].slice(0, 2),
        hashedSubpackets,
        unhashedSubpackets);
  });
};


/**
 * Returns the data that has to be hashed for the signature algorithm.
 * @param {!e2e.ByteArray|!Uint8Array} data The data that was signed.
 * @param {!e2e.openpgp.packet.Signature.SignatureType} signatureType
 *     The signature type.
 * @param {!e2e.signer.Algorithm} pubKeyAlgorithm The public key
 *     algorithm.
 * @param {!e2e.hash.Algorithm} hashAlgorithm The hash algorithm.
 * @param {!Array.<!e2e.openpgp.packet.SignatureSub>} subpackets
 *     The hashed subpackets of the signature.
 * @return {!e2e.ByteArray} The data to hash.
 */
e2e.openpgp.packet.Signature.getDataToHash = function(
    data, signatureType, pubKeyAlgorithm, hashAlgorithm, subpackets) {
  var serializedHashedSubpackets =
      e2e.openpgp.packet.Signature.serializeSubpackets(subpackets);
  return goog.array.flatten(
      data,
      4,  // version
      signatureType,
      e2e.openpgp.constants.getId(pubKeyAlgorithm),
      e2e.openpgp.constants.getId(hashAlgorithm),
      serializedHashedSubpackets,
      4, // version
      0xFF,
      // Length of this hashTrailer (not including 6 final bytes):
      e2e.dwordArrayToByteArray(
          [serializedHashedSubpackets.length + 4])
  );
};


/**
 * Serializes a list of subpackets.
 * @param {!Array.<!e2e.openpgp.packet.SignatureSub>} subpackets
 * @return {!e2e.ByteArray} The serialized subpackets.
 */
e2e.openpgp.packet.Signature.serializeSubpackets =
    function(subpackets) {
  var serialized = goog.array.flatten(
      goog.array.map(subpackets,
      function(packet) {
        return packet.serialize();
      }));
  if (serialized.length > 0xFFFF) {
    throw new e2e.openpgp.error.SerializationError(
        'Subpacket length is too long.');
  }
  var length = e2e.dwordArrayToByteArray(
      [serialized.length]).slice(2);
  return length.concat(serialized);
};


e2e.openpgp.packet.factory.add(e2e.openpgp.packet.Signature);


/**
 * Type of signature RFC 4880 Section 5.2.1.
 * @enum {number}
 */
e2e.openpgp.packet.Signature.SignatureType = {
  'BINARY': 0x00,
  'TEXT': 0x01,
  'STANDALONE': 0x02,
  'GENERIC_USER_ID': 0x10,
  'PERSONA_USER_ID': 0x11,
  'CASUAL_USER_ID': 0x12,
  'POSITIVE_USER_ID': 0x13,
  'SUBKEY': 0x18,
  'PRIMARY_KEY': 0x19,
  'KEY': 0x1F,
  'KEY_REVOCATION': 0x20,
  'SUBKEY_REVOCATION': 0x28,
  'CERTIFICATION_REVOCATION': 0x30,
  'TIMESTAMP': 0x40,
  'CONFIRMATION': 0x50
};


/**
 * Type of revocation reasons RFC 4880 Section 5.2.3.23.
 * @enum {number}
 */
e2e.openpgp.packet.Signature.RevocationReason = {
  'UNSPECIFIED': 0x00,
  'KEY_SUPERSEDED': 0x01,
  'KEY_COMPROMISED': 0x02,
  'KEY_RETIRED': 0x03,
  'USER_ID_INVALID': 0x04
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Base class for OpenPGP blocks. Provides serialization of
 * blocks and initialization.
 * OpenPGP blocks are defined in RFC 4880 Section 11 and define the sequential
 * composition of packets that form a message, a key or a detached signature.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.block.Block');


/**
 * Representation of a collection of packets that have a specific meaning.
 * @constructor
 */
e2e.openpgp.block.Block = function() {
  /**
   * @type {!Array.<!e2e.openpgp.packet.Packet>}
   */
  this.packets = [];
};


/**
 * Parses a block out of a series of packets.
 * @param {!Array.<!e2e.openpgp.packet.Packet>} packets The list of packets
 *     that hold the block information.
 * @return {!Array.<!e2e.openpgp.packet.Packet>} Any extra packets left over
 *     after parsing this block.
 */
e2e.openpgp.block.Block.prototype.parse = goog.abstractMethod;


/**
 * Serializes the block to a byte array.
 * @return {!e2e.ByteArray} The serialization of the block.
 */
e2e.openpgp.block.Block.prototype.serialize = goog.abstractMethod;

/**
 * Text to use in the ASCII Armor message header for this type of block.
 * @type {string}
 */
e2e.openpgp.block.Block.prototype.header;


/**
 * Sets the charset used in the block.
 * @private {string}
 */
e2e.openpgp.block.Block.prototype.charset_ = 'utf-8';


/**
 * @param {string|undefined} charset The charset to use in the block.
 */
e2e.openpgp.block.Block.prototype.setCharset = function(charset) {
  if (charset) {
    this.charset_ = charset;
  }
};


/**
 * @return {string} The charset for the block.
 */
e2e.openpgp.block.Block.prototype.getCharset = function() {
  return this.charset_;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Exposes the types used for the public API.
 */

goog.provide('e2e.openpgp.ArmoredMessage');
goog.provide('e2e.openpgp.DecryptResult');
goog.provide('e2e.openpgp.EncryptOptions');
goog.provide('e2e.openpgp.EncryptSignResult');
goog.provide('e2e.openpgp.FileOptions');
goog.provide('e2e.openpgp.GenerateKeyResult');
goog.provide('e2e.openpgp.ImportKeyResult');
goog.provide('e2e.openpgp.Key');
goog.provide('e2e.openpgp.KeyPacketInfo');
goog.provide('e2e.openpgp.KeyResult');
goog.provide('e2e.openpgp.KeyRingMap');
goog.provide('e2e.openpgp.KeyRingType');
goog.provide('e2e.openpgp.KeyringBackupInfo');
goog.provide('e2e.openpgp.Keys');
goog.provide('e2e.openpgp.SerializedKeyRing');
goog.provide('e2e.openpgp.VerifiedDecrypt');
goog.provide('e2e.openpgp.VerifyDecryptResult');
goog.provide('e2e.openpgp.VerifyResult');
/** @suppress {extraProvide} provide the whole namespace for simplicity */
goog.provide('e2e.openpgp.types');

/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.ByteArray');



/**
 * File information for encrypting and decrypting files.
 * @typedef {?{filename: string, creationTime: number,
 *     charset: (string|undefined)}}
 */
e2e.openpgp.FileOptions;


/**
 * Options for encrypting, such as algorithm preferences.
 * @typedef {Object}
 * TODO(user) Make this typedef more specific after we implement it.
 */
e2e.openpgp.EncryptOptions;


/**
 * Result of a decrypt operation.
 * @typedef {?{data: !e2e.ByteArray,
 *     options: !e2e.openpgp.FileOptions}}
 */
e2e.openpgp.DecryptResult;


/**
 * Result of a decrypt operation.
 * @typedef {e2e.async.Result.<!Array.<e2e.openpgp.Key>>}
 */
e2e.openpgp.GenerateKeyResult;

/**
 * Result of an import key operation.
 * @typedef {goog.async.Deferred.<!Array.<string>>}
 */
e2e.openpgp.ImportKeyResult;


/**
 * Result of a verification operation. Includes keys that successfully verified
 * a signature, keys for which signature verification failed (indicating
 * message tampering). Signatures for which keys could not be found are not
 * included in VerifyResults.
 * @typedef {?{
 *   success: !Array.<!e2e.openpgp.Key>,
 *   failure: !Array.<!e2e.openpgp.Key>
 * }}
 */
e2e.openpgp.VerifyResult;


/**
 * Result of a verification and decryption operation.
 * @typedef {{
 *    decrypt: !e2e.openpgp.DecryptResult,
 *    verify: ?e2e.openpgp.VerifyResult
 * }}
 */
e2e.openpgp.VerifiedDecrypt;


/**
 * Result of a verification and decryption operation.
 * @typedef {e2e.async.Result.<!e2e.openpgp.VerifiedDecrypt>}
 */
e2e.openpgp.VerifyDecryptResult;


/**
 * The result of the encryption and signing operation.
 * @typedef {e2e.async.Result.<!e2e.ByteArray>|e2e.async.Result.<string>}
 */
e2e.openpgp.EncryptSignResult;


/**
 * Single key packet information.
 * @typedef {?{fingerprint: !e2e.ByteArray, secret: boolean,
 *     algorithm: string, fingerprintHex: string}}
 */
e2e.openpgp.KeyPacketInfo;


/**
 * Key object.
 * @typedef {?{subKeys: !Array.<!e2e.openpgp.KeyPacketInfo>, uids:
 *     !Array.<string>, key: !e2e.openpgp.KeyPacketInfo, serialized:
 *     !e2e.ByteArray}}
 */
e2e.openpgp.Key;


/**
 * Array of Keys.
 * @typedef {Array.<!e2e.openpgp.Key>}
 */
e2e.openpgp.Keys;


/**
 * The result of a key search operation.
 * @typedef {e2e.async.Result.<!e2e.openpgp.Keys>}
 */
e2e.openpgp.KeyResult;


/**
 * Armored OpenPGP message.
 * @typedef {?{data: !e2e.ByteArray, charset: (string|undefined)}}
 */
e2e.openpgp.ArmoredMessage;


/**
 * Key backup information.
 * @typedef {{seed: e2e.ByteArray, count: number}}
 */
e2e.openpgp.KeyringBackupInfo;


/**
 * @typedef {Object.<!Array.<string>>}
 */
e2e.openpgp.SerializedKeyRing;


/**
 * The key ring map structure.
 * @typedef {goog.structs.Map.<string,
 *                            !Array.<!e2e.openpgp.block.TransferableKey>>}
 */
e2e.openpgp.KeyRingType;


/**
 * The key ring map structure as used by the context.
 * @typedef {goog.structs.Map.<string, !Array.<!e2e.openpgp.Key>>}
 */
e2e.openpgp.KeyRingMap;

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Base class for OpenPGP message blocks.
 */

goog.provide('e2e.openpgp.block.Message');

goog.require('e2e');
goog.require('e2e.openpgp.block.Block');
goog.require('e2e.openpgp.packet.OnePassSignature');
goog.require('e2e.openpgp.packet.Signature');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.openpgp.types');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * Representation of a message block. According to the OpenPGP RFC (RFC 4880)
 * Section 11.3, a message block has the following grammar:
 *  OpenPGP Message :- Encrypted Message | Signed Message |
 *                     Compressed Message | Literal Message.
 *
 *  Compressed Message :- Compressed Data Packet.
 *
 *  Literal Message :- Literal Data Packet.
 *
 *  ESK :- Public-Key Encrypted Session Key Packet |
 *         Symmetric-Key Encrypted Session Key Packet.
 *
 *  ESK Sequence :- ESK | ESK Sequence, ESK.
 *
 *  Encrypted Data :- Symmetrically Encrypted Data Packet |
 *        Symmetrically Encrypted Integrity Protected Data Packet
 *
 *  Encrypted Message :- Encrypted Data | ESK Sequence, Encrypted Data.
 *
 *  One-Pass Signed Message :- One-Pass Signature Packet,
 *              OpenPGP Message, Corresponding Signature Packet.
 *
 *  Signed Message :- Signature Packet, OpenPGP Message |
 *              One-Pass Signed Message.
 * @param {Array.<!e2e.openpgp.packet.Signature|
 *     !e2e.openpgp.packet.OnePassSignature>=} opt_signatures
 * @extends {e2e.openpgp.block.Block}
 * @constructor
 */
e2e.openpgp.block.Message = function(opt_signatures) {
  goog.base(this);

  /**
   * @type {!Array.<!e2e.openpgp.packet.Signature|
   *                !e2e.openpgp.packet.OnePassSignature>}
   */
  this.signatures = opt_signatures || [];
};
goog.inherits(e2e.openpgp.block.Message,
    e2e.openpgp.block.Block);


/** @override */
e2e.openpgp.block.Message.prototype.serialize = function() {
  var onepassSuffix = [];
  return goog.array.flatten(goog.array.map(this.signatures, function(sig) {
    if (sig instanceof e2e.openpgp.packet.OnePassSignature) {
      onepassSuffix.unshift(sig.signature.serialize());
    }
    return sig.serialize();
  }), this.serializeMessage(), onepassSuffix);
};


/**
 * Serialize the message internal body without signatures.
 * @return {!e2e.ByteArray}
 */
e2e.openpgp.block.Message.prototype.serializeMessage = goog.abstractMethod;


/**
 * @return {!e2e.openpgp.block.LiteralMessage}
 */
e2e.openpgp.block.Message.prototype.getLiteralMessage = goog.abstractMethod;


/**
 * Consumes all one pass signatures.
 * @param {!Array.<!e2e.openpgp.packet.OnePassSignature>} onepass
 * @param {!Array.<!e2e.openpgp.packet.Packet>} packets
 */
e2e.openpgp.block.Message.prototype.consumeOnePassSignatures = function(
    onepass, packets) {
  for (var i = onepass.length - 1; i >= 0; i--) {
    if (packets[0] instanceof e2e.openpgp.packet.Signature) {
      onepass[i].signature = /** @type {!e2e.openpgp.packet.Signature} */ (
          packets.shift());
    }
  }
};


/**
 * Signs the message with the key and adds the signature packet to the message.
 * @param {!e2e.openpgp.packet.SecretKey} key
 * @param {e2e.openpgp.packet.Signature.SignatureType=} opt_signatureType Type
 *    of signature to generate (defaults to BINARY)
 * @return {!e2e.async.Result.<undefined>}
 */
e2e.openpgp.block.Message.prototype.sign = function(key, opt_signatureType) {
  return this.constructSignature(key, opt_signatureType).addCallback(
      function(sig) {
        this.addSignature(sig);
      }, this);
};


/**
 * Signs the message with the key, and adds OnePassSignature packet to the
 * message.
 * @param {!e2e.openpgp.packet.SecretKey} key
 * @param {e2e.openpgp.packet.Signature.SignatureType=} opt_signatureType Type
 *    of signature to generate (defaults to BINARY)
 * @return {!e2e.async.Result.<undefined>}
 */
e2e.openpgp.block.Message.prototype.signWithOnePass = function(key,
    opt_signatureType) {
  var realSignatureRes = this.constructSignature(key, opt_signatureType);
  return realSignatureRes.addCallback(function(realSignature) {
    var onePass = realSignature.constructOnePassSignaturePacket(
        this.signatures.length > 0);
    onePass.signature = realSignature;
    this.signatures.unshift(onePass);
  }, this);
};


/**
 * Adds a signature packet to the message.
 * @param {e2e.openpgp.packet.Signature} signature
 */
e2e.openpgp.block.Message.prototype.addSignature = function(signature) {
  this.signatures.unshift(signature);
};


/**
 * Construct a signature over the message and return it without modifying the
 * message.
 * @param  {!e2e.openpgp.packet.SecretKey} key
 * @param  {e2e.openpgp.packet.Signature.SignatureType=} opt_signatureType Type
 *     of signature to generate (defaults to BINARY)
 * @return {!e2e.async.Result.<!e2e.openpgp.packet.Signature>} signature
 */
e2e.openpgp.block.Message.prototype.constructSignature = function(key,
    opt_signatureType) {
  return e2e.openpgp.packet.Signature.construct(
      key, this.getBytesToSign(),
      opt_signatureType || e2e.openpgp.packet.Signature.SignatureType.BINARY,
      {
        'SIGNATURE_CREATION_TIME': e2e.dwordArrayToByteArray(
            [Math.floor(new Date().getTime() / 1e3)]),
        'ISSUER': key.keyId
      });
};


/**
 * Gets a byte array representing the message data to create the signature over.
 * @return {!e2e.ByteArray} The serialization of the block.
 * @protected
 */
e2e.openpgp.block.Message.prototype.getBytesToSign = function() {
  return this.serializeMessage();
};


/**
 * Returns key IDs for all the signatures in this message.
 * @return {!Array.<!e2e.ByteArray>} Key IDs extracted from signatures.
 */
e2e.openpgp.block.Message.prototype.getSignatureKeyIds = function() {
  var keyIds = goog.array.map(this.signatures, function(signature) {
    return signature.getSignerKeyId();
  });
  goog.array.removeDuplicates(keyIds);
  return keyIds;
};


/**
 * Verifies all the signatures present on the message against given keys.
 * Signatures created by other keys are ignored.
 * @param {!Array.<!e2e.openpgp.block.TransferableKey>} keys Keys to verify
 *     the signature against.
 * @return {!e2e.openpgp.block.Message.VerifyResult}
 */
e2e.openpgp.block.Message.prototype.verify = function(keys) {
  /** @type {!e2e.openpgp.block.Message.VerifyResult} */
  var result = {success: [], failure: []};
  var resultsByKey = [];
  var signedData = this.getBytesToSign();
  goog.array.forEach(this.signatures, function(signature) {
    var keyId = signature.getSignerKeyId();
    /** @type {e2e.signer.Signer} */
    var signer;
    var verifyingKey = goog.array.find(keys, function(key) {
      var innerKey = key.getKeyById(keyId);
      signer = /** @type {e2e.signer.Signer} */ (innerKey && innerKey.cipher);
      return !!innerKey;
    });
    if (!verifyingKey) { // Key not found, ignore signature.
      return;
    }
    if (signature.verify(signedData, goog.asserts.assertObject(signer))) {
      result.success.push(verifyingKey);
    } else {
      result.failure.push(verifyingKey);
    }
  });
  return result;
};


/**
 * Result of a verification operation.
 * @typedef {?{
 *   success: !Array.<!e2e.openpgp.block.TransferableKey>,
 *   failure: !Array.<!e2e.openpgp.block.TransferableKey>
 * }}
 */
e2e.openpgp.block.Message.VerifyResult;

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Packet to represent a message data packet or a literal data
 * packet.
 */

goog.provide('e2e.openpgp.packet.Data');

goog.require('e2e.openpgp.packet.Packet');



/**
 * @constructor
 * @extends {e2e.openpgp.packet.Packet}
 */
e2e.openpgp.packet.Data = function() {
  goog.base(this);
};
goog.inherits(e2e.openpgp.packet.Data,
              e2e.openpgp.packet.Packet);


/**
 * The unencrypted data contained in the packet.
 * @type {!e2e.ByteArray}
 */
e2e.openpgp.packet.Data.prototype.data;

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Generics method for collection-like classes and objects.
 *
 * @author arv@google.com (Erik Arvidsson)
 *
 * This file contains functions to work with collections. It supports using
 * Map, Set, Array and Object and other classes that implement collection-like
 * methods.
 */


goog.provide('goog.structs');

goog.require('goog.array');
goog.require('goog.object');


// We treat an object as a dictionary if it has getKeys or it is an object that
// isn't arrayLike.


/**
 * Returns the number of values in the collection-like object.
 * @param {Object} col The collection-like object.
 * @return {number} The number of values in the collection-like object.
 */
goog.structs.getCount = function(col) {
  if (typeof col.getCount == 'function') {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};


/**
 * Returns the values of the collection-like object.
 * @param {Object} col The collection-like object.
 * @return {!Array.<?>} The values in the collection-like object.
 */
goog.structs.getValues = function(col) {
  if (typeof col.getValues == 'function') {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split('');
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0; i < l; i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};


/**
 * Returns the keys of the collection. Some collections have no notion of
 * keys/indexes and this function will return undefined in those cases.
 * @param {Object} col The collection-like object.
 * @return {!Array|undefined} The keys in the collection.
 */
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == 'function') {
    return col.getKeys();
  }
  // if we have getValues but no getKeys we know this is a key-less collection
  if (typeof col.getValues == 'function') {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0; i < l; i++) {
      rv.push(i);
    }
    return rv;
  }

  return goog.object.getKeys(col);
};


/**
 * Whether the collection contains the given value. This is O(n) and uses
 * equals (==) to test the existence.
 * @param {Object} col The collection-like object.
 * @param {*} val The value to check for.
 * @return {boolean} True if the map contains the value.
 */
goog.structs.contains = function(col, val) {
  if (typeof col.contains == 'function') {
    return col.contains(val);
  }
  if (typeof col.containsValue == 'function') {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains(/** @type {Array.<?>} */ (col), val);
  }
  return goog.object.containsValue(col, val);
};


/**
 * Whether the collection is empty.
 * @param {Object} col The collection-like object.
 * @return {boolean} True if empty.
 */
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == 'function') {
    return col.isEmpty();
  }

  // We do not use goog.string.isEmpty because here we treat the string as
  // collection and as such even whitespace matters

  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty(/** @type {Array.<?>} */ (col));
  }
  return goog.object.isEmpty(col);
};


/**
 * Removes all the elements from the collection.
 * @param {Object} col The collection-like object.
 */
goog.structs.clear = function(col) {
  // NOTE(arv): This should not contain strings because strings are immutable
  if (typeof col.clear == 'function') {
    col.clear();
  } else if (goog.isArrayLike(col)) {
    goog.array.clear(/** @type {goog.array.ArrayLike} */ (col));
  } else {
    goog.object.clear(col);
  }
};


/**
 * Calls a function for each value in a collection. The function takes
 * three arguments; the value, the key and the collection.
 *
 * NOTE: This will be deprecated soon! Please use a more specific method if
 * possible, e.g. goog.array.forEach, goog.object.forEach, etc.
 *
 * @param {S} col The collection-like object.
 * @param {function(this:T,?,?,S):?} f The function to call for every value.
 *     This function takes
 *     3 arguments (the value, the key or undefined if the collection has no
 *     notion of keys, and the collection) and the return value is irrelevant.
 * @param {T=} opt_obj The object to be used as the value of 'this'
 *     within {@code f}.
 * @template T,S
 */
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == 'function') {
    col.forEach(f, opt_obj);
  } else if (goog.isArrayLike(col) || goog.isString(col)) {
    goog.array.forEach(/** @type {Array.<?>} */ (col), f, opt_obj);
  } else {
    var keys = goog.structs.getKeys(col);
    var values = goog.structs.getValues(col);
    var l = values.length;
    for (var i = 0; i < l; i++) {
      f.call(opt_obj, values[i], keys && keys[i], col);
    }
  }
};


/**
 * Calls a function for every value in the collection. When a call returns true,
 * adds the value to a new collection (Array is returned by default).
 *
 * @param {S} col The collection-like object.
 * @param {function(this:T,?,?,S):boolean} f The function to call for every
 *     value. This function takes
 *     3 arguments (the value, the key or undefined if the collection has no
 *     notion of keys, and the collection) and should return a Boolean. If the
 *     return value is true the value is added to the result collection. If it
 *     is false the value is not included.
 * @param {T=} opt_obj The object to be used as the value of 'this'
 *     within {@code f}.
 * @return {!Object|!Array.<?>} A new collection where the passed values are
 *     present. If col is a key-less collection an array is returned.  If col
 *     has keys and values a plain old JS object is returned.
 * @template T,S
 */
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == 'function') {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter(/** @type {!Array.<?>} */ (col), f, opt_obj);
  }

  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0; i < l; i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    // We should not use goog.array.filter here since we want to make sure that
    // the index is undefined as well as make sure that col is passed to the
    // function.
    rv = [];
    for (var i = 0; i < l; i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};


/**
 * Calls a function for every value in the collection and adds the result into a
 * new collection (defaults to creating a new Array).
 *
 * @param {S} col The collection-like object.
 * @param {function(this:T,?,?,S):V} f The function to call for every value.
 *     This function takes 3 arguments (the value, the key or undefined if the
 *     collection has no notion of keys, and the collection) and should return
 *     something. The result will be used as the value in the new collection.
 * @param {T=} opt_obj  The object to be used as the value of 'this'
 *     within {@code f}.
 * @return {!Object.<V>|!Array.<V>} A new collection with the new values.  If
 *     col is a key-less collection an array is returned.  If col has keys and
 *     values a plain old JS object is returned.
 * @template T,S,V
 */
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == 'function') {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map(/** @type {!Array.<?>} */ (col), f, opt_obj);
  }

  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0; i < l; i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    // We should not use goog.array.map here since we want to make sure that
    // the index is undefined as well as make sure that col is passed to the
    // function.
    rv = [];
    for (var i = 0; i < l; i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};


/**
 * Calls f for each value in a collection. If any call returns true this returns
 * true (without checking the rest). If all returns false this returns false.
 *
 * @param {S} col The collection-like object.
 * @param {function(this:T,?,?,S):boolean} f The function to call for every
 *     value. This function takes 3 arguments (the value, the key or undefined
 *     if the collection has no notion of keys, and the collection) and should
 *     return a boolean.
 * @param {T=} opt_obj  The object to be used as the value of 'this'
 *     within {@code f}.
 * @return {boolean} True if any value passes the test.
 * @template T,S
 */
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == 'function') {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some(/** @type {!Array.<?>} */ (col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0; i < l; i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};


/**
 * Calls f for each value in a collection. If all calls return true this return
 * true this returns true. If any returns false this returns false at this point
 *  and does not continue to check the remaining values.
 *
 * @param {S} col The collection-like object.
 * @param {function(this:T,?,?,S):boolean} f The function to call for every
 *     value. This function takes 3 arguments (the value, the key or
 *     undefined if the collection has no notion of keys, and the collection)
 *     and should return a boolean.
 * @param {T=} opt_obj  The object to be used as the value of 'this'
 *     within {@code f}.
 * @return {boolean} True if all key-value pairs pass the test.
 * @template T,S
 */
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == 'function') {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every(/** @type {!Array.<?>} */ (col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0; i < l; i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Represents a literal data packet, which is used to represent
 * plaintext data.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.packet.LiteralData');

goog.require('e2e');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.packet.Data');
goog.require('e2e.openpgp.packet.factory');
goog.require('goog.array');
goog.require('goog.structs');



/**
 * A LiteralData (Tag 11) RFC 4880 Section 5.9.
 * @param {!e2e.openpgp.packet.LiteralData.Format} format Data format.
 * @param {!e2e.ByteArray} filename File name in UTF-8 of length no more
 *     than 255 bytes.
 * @param {number} timestamp File or message creation unix epoch timestamp.
 * @param {!e2e.ByteArray} data An array with the data to store in the
 *     packet.
 * @extends {e2e.openpgp.packet.Data}
 * @constructor
 */
e2e.openpgp.packet.LiteralData = function(
    format, filename, timestamp, data) {
  goog.base(this);

  /**
   * Defines what type of content is contained in data.
   * @see #Format
   * @type {!e2e.openpgp.packet.LiteralData.Format}
   */
  this.format = format;

  /**
   * The filename, if available of the data represented in the packet.
   * @type {!e2e.ByteArray}
   */
  this.filename = filename.slice(
      0, e2e.openpgp.packet.LiteralData.MAX_FILENAME_LENGTH);

  /**
   * UNIX epoch timestamp.
   * @type {number}
   */
  this.timestamp = timestamp;

  /** @inheritDoc */
  this.data = data;
};
goog.inherits(e2e.openpgp.packet.LiteralData,
              e2e.openpgp.packet.Data);


/**
 * Maximum length of a file name.
 * @type {number}
 * @const
 */
e2e.openpgp.packet.LiteralData.MAX_FILENAME_LENGTH = 0xFF;


/** @inheritDoc */
e2e.openpgp.packet.LiteralData.prototype.tag = 11;


/** @inheritDoc */
e2e.openpgp.packet.LiteralData.prototype.serializePacketBody = function() {
  return goog.array.concat(
    e2e.stringToByteArray(this.format),
    this.filename.length,
    this.filename,
    e2e.dwordArrayToByteArray([this.timestamp]),
    this.data
  );
};


/**
 * Different types of Data Formats.
 * @enum {string}
 */
e2e.openpgp.packet.LiteralData.Format = {
  BINARY: 'b',
  TEXT: 't',
  UTF8: 'u'
};


/**
 * Parses and extracts the data from the body. It will consume all data from the
 * array.
 * Throws a {@code e2e.openpgp.error.ParseError} if malformed.
 * @param {!e2e.ByteArray} body The data to parse.
 * @return {e2e.openpgp.packet.LiteralData} A Literal Data Packet.
 */
e2e.openpgp.packet.LiteralData.parse = function(body) {
  var format_chr = e2e.byteArrayToString([body.shift()]);
  var fileNameLength = body.shift();
  var fileName = body.splice(0, fileNameLength);
  if (fileName.length != fileNameLength || body.length < 4) {
    throw new e2e.openpgp.error.ParseError('Malformed Literal Data Packet');
  }
  var timestamp = e2e.byteArrayToDwordArray(body.splice(0, 4))[0];
  var data = body.splice(0);
  var format;
  if (goog.structs.contains(
      e2e.openpgp.packet.LiteralData.Format, format_chr)) {
    format = /** @type {e2e.openpgp.packet.LiteralData.Format} */
        (format_chr);
  } else {
    throw new e2e.openpgp.error.ParseError('Invalid Data Format.');
  }
  return new e2e.openpgp.packet.LiteralData(format,
                                                      fileName,
                                                      timestamp,
                                                      data);
};


e2e.openpgp.packet.factory.add(
    e2e.openpgp.packet.LiteralData);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Literal Message Blocks contain a single literal data packet.
 */

goog.provide('e2e.openpgp.block.LiteralMessage');

goog.require('e2e');
goog.require('e2e.openpgp.block.Message');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.packet.LiteralData');
goog.require('goog.array');


/**
 * Representation of a literal message block.
 * @param {Array.<!e2e.openpgp.packet.Signature>=} opt_signatures
 * @constructor
 * @extends {e2e.openpgp.block.Message}
 */
e2e.openpgp.block.LiteralMessage = function(opt_signatures) {
  goog.base(this, opt_signatures);
};
goog.inherits(e2e.openpgp.block.LiteralMessage,
    e2e.openpgp.block.Message);


/**
 * The literal data packet.
 * @private {e2e.openpgp.packet.LiteralData}
 */
e2e.openpgp.block.LiteralMessage.prototype.literalData_ = null;


/**
 * @return {!e2e.ByteArray} The data encoded in the message.
 */
e2e.openpgp.block.LiteralMessage.prototype.getData = function() {
  return this.literalData_.data;
};


/**
 * @return {number} The timestamp of the message.
 */
e2e.openpgp.block.LiteralMessage.prototype.getTimestamp = function() {
  return this.literalData_.timestamp;
};


/**
 * @return {string} The filename of the message.
 */
e2e.openpgp.block.LiteralMessage.prototype.getFilename = function() {
  return e2e.byteArrayToString(
      this.literalData_.filename, this.getCharset());
};


/** @override */
e2e.openpgp.block.LiteralMessage.prototype.serializeMessage = function() {
  return goog.array.flatten(goog.array.map(this.packets, function(packet) {
    return packet.serialize();
  }));
};


/** @override */
e2e.openpgp.block.LiteralMessage.prototype.getBytesToSign = function() {
  // When signing a literal message, we actually sign first literal data
  // packet body.
  if (this.packets.length == 0) {
    return /** @type {!e2e.ByteArray} */ ([]);
  }
  return this.literalData_.data;
};


/** @override */
e2e.openpgp.block.LiteralMessage.prototype.getLiteralMessage = function() {
  return this;
};


/** @override */
e2e.openpgp.block.LiteralMessage.prototype.parse = function(packets) {
  var packet = packets.shift();
  if (!(packet instanceof e2e.openpgp.packet.LiteralData)) {
    throw new e2e.openpgp.error.ParseError(
        'Literal block should contain LiteralData packet.');
  }
  this.literalData_ = packet;
  this.packets = [packet];
  return packets;
};


/**
 * Creates a literal message from a text contents
 * @param  {string} plaintext
 * @param  {string=} opt_filename File name to use in LiteralData packet
 * @return {!e2e.openpgp.block.LiteralMessage} Created message.
 */
e2e.openpgp.block.LiteralMessage.fromText = function(plaintext, opt_filename) {
  var literal = new e2e.openpgp.packet.LiteralData(
      e2e.openpgp.packet.LiteralData.Format.TEXT,
      e2e.stringToByteArray(
        goog.isDefAndNotNull(opt_filename) ? opt_filename : ''), // file name
      Math.floor(new Date().getTime() / 1000), // time in seconds since 1970
      e2e.stringToByteArray(plaintext));
  var message = new e2e.openpgp.block.LiteralMessage();
  message.parse([literal]);
  return message;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Class to provide operations on OpenPGP clear sign messages
 * @author koto@google.com (Krzysztof Kotowicz)
 */

goog.provide('e2e.openpgp.ClearSignMessage');

goog.require('e2e');
goog.require('e2e.openpgp.block.LiteralMessage');
goog.require('e2e.openpgp.error.InvalidArgumentsError');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.packet.Signature');
goog.require('e2e.openpgp.parse');
goog.require('goog.string');



/**
 * Representation of a clearsign message.
 * @param {string} body The body
 * @param {!e2e.ByteArray} signatureBytes The serialized signature
 * @param {string=} opt_hash Hash algorithm declared in the message
 * @constructor
 */
e2e.openpgp.ClearSignMessage = function(body, signatureBytes, opt_hash) {
  this.literal_ = e2e.openpgp.block.LiteralMessage.fromText(body);
  var parsed = e2e.openpgp.parse.parseSerializedPacket(signatureBytes);
  if (! (parsed instanceof e2e.openpgp.packet.Signature)) {
    throw new e2e.openpgp.error.ParseError(
        'No signature present in clearsigned message.');
  }
  this.literal_.addSignature(
      /** @type {!e2e.openpgp.packet.Signature} */ (parsed));
  if (opt_hash && (parsed.hashAlgorithm != opt_hash)) {
    throw new e2e.openpgp.error.ParseError('Digest algorithms mismatch.');
  }
};


/**
 * Canonicalizes data by converting all line endings to <CR><LF> and removing
 * trailing whitespace.
 * @param {string} data The text to canonicalize.
 * @return {string} The canonicalized text.
 */
e2e.openpgp.ClearSignMessage.canonicalize = function(data) {
  var normalized = data.replace(/[\x20\x09]*(\r\n|\r|\n)/g, '\r\n');

  // removes trailing newline
  if (goog.string.endsWith(normalized, '\r\n')) {
    normalized = goog.string.removeAt(normalized, normalized.length - 2, 2);
  }

  return normalized;
};


/**
 * @type {!e2e.openpgp.block.LiteralMessage} Literal message equivalent of a
 *     clearsign message.
 * @private
 */
e2e.openpgp.ClearSignMessage.prototype.literal_;


/**
 * Creates a new cleartext message, signed using the specified key.
 * @param  {string} plaintext Message to sign.
 * @param  {e2e.openpgp.block.TransferableKey} key Signer key.
 *   Will throw {e2e.openpgp.error.InvalidArgumentsError} if the key has no
 *   signing capability.
 * @return {!e2e.async.Result.<!e2e.openpgp.ClearSignMessage>} Created message.
 */
e2e.openpgp.ClearSignMessage.construct = function(plaintext, key) {
  plaintext = e2e.openpgp.ClearSignMessage.canonicalize(plaintext);
  var keyPacket = key && key.getKeyToSign();
  if (!keyPacket) {
    // No provided key can sign.
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'Provided key does not have a signing capability.');
  }
  var message = e2e.openpgp.block.LiteralMessage.fromText(plaintext);
  var sigRes = message.sign(
      keyPacket, e2e.openpgp.packet.Signature.SignatureType.TEXT);
  return sigRes.addCallback(
      function() {
        return new e2e.openpgp.ClearSignMessage(plaintext,
            message.signatures[0].serialize(),
            message.signatures[0].hashAlgorithm);
      });
};


/**
 * Returns a LiteralMessage equivalent of a clearsign message with a signature.
 * @return {!e2e.openpgp.block.LiteralMessage}
 */
e2e.openpgp.ClearSignMessage.prototype.toLiteralMessage = function() {
  return this.literal_;
};


/**
 * Returns clearsigned text as a string.
 * @return {string}
 */
e2e.openpgp.ClearSignMessage.prototype.getBody = function() {
  return e2e.byteArrayToString(this.literal_.getData(),
      this.literal_.getCharset());
};


/**
 * Returns signature packet.
 * @return {!e2e.openpgp.packet.Signature}
 */
e2e.openpgp.ClearSignMessage.prototype.getSignature = function() {
  return /** @type {!e2e.openpgp.packet.Signature} */ (
      this.literal_.signatures[0]);
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Closure user agent detection.
 * @see http://en.wikipedia.org/wiki/User_agent
 * For more information on browser brand, platform, or device see the other
 * sub-namespaces in goog.labs.userAgent (browser, platform, and device).
 *
 */

goog.provide('goog.labs.userAgent.engine');

goog.require('goog.array');
goog.require('goog.labs.userAgent.util');
goog.require('goog.string');


/**
 * @return {boolean} Whether the rendering engine is Presto.
 */
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent('Presto');
};


/**
 * @return {boolean} Whether the rendering engine is Trident.
 */
goog.labs.userAgent.engine.isTrident = function() {
  // IE only started including the Trident token in IE8.
  return goog.labs.userAgent.util.matchUserAgent('Trident') ||
      goog.labs.userAgent.util.matchUserAgent('MSIE');
};


/**
 * @return {boolean} Whether the rendering engine is WebKit.
 */
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase('WebKit');
};


/**
 * @return {boolean} Whether the rendering engine is Gecko.
 */
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent('Gecko') &&
      !goog.labs.userAgent.engine.isWebKit() &&
      !goog.labs.userAgent.engine.isTrident();
};


/**
 * @return {string} The rendering engine's version or empty string if version
 *     can't be determined.
 */
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(
        userAgentString);

    var engineTuple = tuples[1];
    if (engineTuple) {
      // In Gecko, the version string is either in the browser info or the
      // Firefox version.  See Gecko user agent string reference:
      // http://goo.gl/mULqa
      if (engineTuple[0] == 'Gecko') {
        return goog.labs.userAgent.engine.getVersionForKey_(
            tuples, 'Firefox');
      }

      return engineTuple[1];
    }

    // IE has only one version identifier, and the Trident version is
    // specified in the parenthetical.
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return '';
};


/**
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the rendering engine version is higher or the same
 *     as the given version.
 */
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),
                                     version) >= 0;
};


/**
 * @param {!Array.<!Array.<string>>} tuples Version tuples.
 * @param {string} key The key to look for.
 * @return {string} The version string of the given key, if present.
 *     Otherwise, the empty string.
 * @private
 */
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  // TODO(nnaze): Move to util if useful elsewhere.

  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });

  return pair && pair[1] || '';
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Rendering engine detection.
 * @see <a href="http://www.useragentstring.com/">User agent strings</a>
 * For information on the browser brand (such as Safari versus Chrome), see
 * goog.userAgent.product.
 * @author arv@google.com (Erik Arvidsson)
 * @see ../demos/useragent.html
 */

goog.provide('goog.userAgent');

goog.require('goog.labs.userAgent.browser');
goog.require('goog.labs.userAgent.engine');
goog.require('goog.labs.userAgent.util');
goog.require('goog.string');


/**
 * @define {boolean} Whether we know at compile-time that the browser is IE.
 */
goog.define('goog.userAgent.ASSUME_IE', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is GECKO.
 */
goog.define('goog.userAgent.ASSUME_GECKO', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is WEBKIT.
 */
goog.define('goog.userAgent.ASSUME_WEBKIT', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is a
 *     mobile device running WebKit e.g. iPhone or Android.
 */
goog.define('goog.userAgent.ASSUME_MOBILE_WEBKIT', false);


/**
 * @define {boolean} Whether we know at compile-time that the browser is OPERA.
 */
goog.define('goog.userAgent.ASSUME_OPERA', false);


/**
 * @define {boolean} Whether the
 *     {@code goog.userAgent.isVersionOrHigher}
 *     function will return true for any version.
 */
goog.define('goog.userAgent.ASSUME_ANY_VERSION', false);


/**
 * Whether we know the browser engine at compile-time.
 * @type {boolean}
 * @private
 */
goog.userAgent.BROWSER_KNOWN_ =
    goog.userAgent.ASSUME_IE ||
    goog.userAgent.ASSUME_GECKO ||
    goog.userAgent.ASSUME_MOBILE_WEBKIT ||
    goog.userAgent.ASSUME_WEBKIT ||
    goog.userAgent.ASSUME_OPERA;


/**
 * Returns the userAgent string for the current browser.
 *
 * @return {string} The userAgent string.
 */
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};


/**
 * TODO(nnaze): Change type to "Navigator" and update compilation targets.
 * @return {Object} The native navigator object.
 */
goog.userAgent.getNavigator = function() {
  // Need a local navigator reference instead of using the global one,
  // to avoid the rare case where they reference different objects.
  // (in a WorkerPool, for example).
  return goog.global['navigator'] || null;
};


/**
 * Whether the user agent is Opera.
 * @type {boolean}
 */
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_OPERA :
    goog.labs.userAgent.browser.isOpera();


/**
 * Whether the user agent is Internet Explorer.
 * @type {boolean}
 */
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_IE :
    goog.labs.userAgent.browser.isIE();


/**
 * Whether the user agent is Gecko. Gecko is the rendering engine used by
 * Mozilla, Firefox, and others.
 * @type {boolean}
 */
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_GECKO :
    goog.labs.userAgent.engine.isGecko();


/**
 * Whether the user agent is WebKit. WebKit is the rendering engine that
 * Safari, Android and others use.
 * @type {boolean}
 */
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT :
    goog.labs.userAgent.engine.isWebKit();


/**
 * Whether the user agent is running on a mobile device.
 *
 * This is a separate function so that the logic can be tested.
 *
 * TODO(nnaze): Investigate swapping in goog.labs.userAgent.device.isMobile().
 *
 * @return {boolean} Whether the user agent is running on a mobile device.
 * @private
 */
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT &&
         goog.labs.userAgent.util.matchUserAgent('Mobile');
};


/**
 * Whether the user agent is running on a mobile device.
 *
 * TODO(nnaze): Consider deprecating MOBILE when labs.userAgent
 *   is promoted as the gecko/webkit logic is likely inaccurate.
 *
 * @type {boolean}
 */
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT ||
                        goog.userAgent.isMobile_();


/**
 * Used while transitioning code to use WEBKIT instead.
 * @type {boolean}
 * @deprecated Use {@link goog.userAgent.product.SAFARI} instead.
 * TODO(nicksantos): Delete this from goog.userAgent.
 */
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;


/**
 * @return {string} the platform (operating system) the user agent is running
 *     on. Default to empty string because navigator.platform may not be defined
 *     (on Rhino, for example).
 * @private
 */
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || '';
};


/**
 * The platform (operating system) the user agent is running on. Default to
 * empty string because navigator.platform may not be defined (on Rhino, for
 * example).
 * @type {string}
 */
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();


/**
 * @define {boolean} Whether the user agent is running on a Macintosh operating
 *     system.
 */
goog.define('goog.userAgent.ASSUME_MAC', false);


/**
 * @define {boolean} Whether the user agent is running on a Windows operating
 *     system.
 */
goog.define('goog.userAgent.ASSUME_WINDOWS', false);


/**
 * @define {boolean} Whether the user agent is running on a Linux operating
 *     system.
 */
goog.define('goog.userAgent.ASSUME_LINUX', false);


/**
 * @define {boolean} Whether the user agent is running on a X11 windowing
 *     system.
 */
goog.define('goog.userAgent.ASSUME_X11', false);


/**
 * @define {boolean} Whether the user agent is running on Android.
 */
goog.define('goog.userAgent.ASSUME_ANDROID', false);


/**
 * @define {boolean} Whether the user agent is running on an iPhone.
 */
goog.define('goog.userAgent.ASSUME_IPHONE', false);


/**
 * @define {boolean} Whether the user agent is running on an iPad.
 */
goog.define('goog.userAgent.ASSUME_IPAD', false);


/**
 * @type {boolean}
 * @private
 */
goog.userAgent.PLATFORM_KNOWN_ =
    goog.userAgent.ASSUME_MAC ||
    goog.userAgent.ASSUME_WINDOWS ||
    goog.userAgent.ASSUME_LINUX ||
    goog.userAgent.ASSUME_X11 ||
    goog.userAgent.ASSUME_ANDROID ||
    goog.userAgent.ASSUME_IPHONE ||
    goog.userAgent.ASSUME_IPAD;


/**
 * Initialize the goog.userAgent constants that define which platform the user
 * agent is running on.
 * @private
 */
goog.userAgent.initPlatform_ = function() {
  /**
   * Whether the user agent is running on a Macintosh operating system.
   * @type {boolean}
   * @private
   */
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM,
      'Mac');

  /**
   * Whether the user agent is running on a Windows operating system.
   * @type {boolean}
   * @private
   */
  goog.userAgent.detectedWindows_ = goog.string.contains(
      goog.userAgent.PLATFORM, 'Win');

  /**
   * Whether the user agent is running on a Linux operating system.
   * @type {boolean}
   * @private
   */
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM,
      'Linux');

  /**
   * Whether the user agent is running on a X11 windowing system.
   * @type {boolean}
   * @private
   */
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() &&
      goog.string.contains(goog.userAgent.getNavigator()['appVersion'] || '',
          'X11');

  // Need user agent string for Android/IOS detection
  var ua = goog.userAgent.getUserAgentString();

  /**
   * Whether the user agent is running on Android.
   * @type {boolean}
   * @private
   */
  goog.userAgent.detectedAndroid_ = !!ua &&
      goog.string.contains(ua, 'Android');

  /**
   * Whether the user agent is running on an iPhone.
   * @type {boolean}
   * @private
   */
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, 'iPhone');

  /**
   * Whether the user agent is running on an iPad.
   * @type {boolean}
   * @private
   */
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, 'iPad');
};


if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}


/**
 * Whether the user agent is running on a Macintosh operating system.
 * @type {boolean}
 */
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;


/**
 * Whether the user agent is running on a Windows operating system.
 * @type {boolean}
 */
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;


/**
 * Whether the user agent is running on a Linux operating system.
 * @type {boolean}
 */
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;


/**
 * Whether the user agent is running on a X11 windowing system.
 * @type {boolean}
 */
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;


/**
 * Whether the user agent is running on Android.
 * @type {boolean}
 */
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;


/**
 * Whether the user agent is running on an iPhone.
 * @type {boolean}
 */
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;


/**
 * Whether the user agent is running on an iPad.
 * @type {boolean}
 */
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;


/**
 * @return {string} The string that describes the version number of the user
 *     agent.
 * @private
 */
goog.userAgent.determineVersion_ = function() {
  // All browsers have different ways to detect the version and they all have
  // different naming schemes.

  // version is a string rather than a number because it may contain 'b', 'a',
  // and so on.
  var version = '', re;

  if (goog.userAgent.OPERA && goog.global['opera']) {
    var operaVersion = goog.global['opera'].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }

  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else if (goog.userAgent.IE) {
    re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
  } else if (goog.userAgent.WEBKIT) {
    // WebKit/125.4
    re = /WebKit\/(\S+)/;
  }

  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : '';
  }

  if (goog.userAgent.IE) {
    // IE9 can be in document mode 9 but be reporting an inconsistent user agent
    // version.  If it is identifying as a version lower than 9 we take the
    // documentMode as the version instead.  IE8 has similar behavior.
    // It is recommended to set the X-UA-Compatible header to ensure that IE9
    // uses documentMode 9.
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }

  return version;
};


/**
 * @return {number|undefined} Returns the document mode (for testing).
 * @private
 */
goog.userAgent.getDocumentMode_ = function() {
  // NOTE(user): goog.userAgent may be used in context where there is no DOM.
  var doc = goog.global['document'];
  return doc ? doc['documentMode'] : undefined;
};


/**
 * The version of the user agent. This is a string because it might contain
 * 'b' (as in beta) as well as multiple dots.
 * @type {string}
 */
goog.userAgent.VERSION = goog.userAgent.determineVersion_();


/**
 * Compares two version numbers.
 *
 * @param {string} v1 Version of first item.
 * @param {string} v2 Version of second item.
 *
 * @return {number}  1 if first argument is higher
 *                   0 if arguments are equal
 *                  -1 if second argument is higher.
 * @deprecated Use goog.string.compareVersions.
 */
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};


/**
 * Cache for {@link goog.userAgent.isVersionOrHigher}.
 * Calls to compareVersions are surprisingly expensive and, as a browser's
 * version number is unlikely to change during a session, we cache the results.
 * @const
 * @private
 */
goog.userAgent.isVersionOrHigherCache_ = {};


/**
 * Whether the user agent version is higher or the same as the given version.
 * NOTE: When checking the version numbers for Firefox and Safari, be sure to
 * use the engine's version, not the browser's version number.  For example,
 * Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to Webkit 522.11.
 * Opera and Internet Explorer versions match the product release number.<br>
 * @see <a href="http://en.wikipedia.org/wiki/Safari_version_history">
 *     Webkit</a>
 * @see <a href="http://en.wikipedia.org/wiki/Gecko_engine">Gecko</a>
 *
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the user agent version is higher or the same as
 *     the given version.
 */
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION ||
      goog.userAgent.isVersionOrHigherCache_[version] ||
      (goog.userAgent.isVersionOrHigherCache_[version] =
          goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};


/**
 * Deprecated alias to {@code goog.userAgent.isVersionOrHigher}.
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the user agent version is higher or the same as
 *     the given version.
 * @deprecated Use goog.userAgent.isVersionOrHigher().
 */
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;


/**
 * Whether the IE effective document mode is higher or the same as the given
 * document mode version.
 * NOTE: Only for IE, return false for another browser.
 *
 * @param {number} documentMode The document mode version to check.
 * @return {boolean} Whether the IE effective document mode is higher or the
 *     same as the given version.
 */
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};


/**
 * Deprecated alias to {@code goog.userAgent.isDocumentModeOrHigher}.
 * @param {number} version The version to check.
 * @return {boolean} Whether the IE effective document mode is higher or the
 *      same as the given version.
 * @deprecated Use goog.userAgent.isDocumentModeOrHigher().
 */
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;


/**
 * For IE version < 7, documentMode is undefined, so attempt to use the
 * CSS1Compat property to see if we are in standards mode. If we are in
 * standards mode, treat the browser version as the document mode. Otherwise,
 * IE is emulating version 5.
 * @type {number|undefined}
 * @const
 */
goog.userAgent.DOCUMENT_MODE = (function() {
  var doc = goog.global['document'];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc['compatMode'] == 'CSS1Compat' ?
      parseInt(goog.userAgent.VERSION, 10) : 5);
})();

// Copyright 2007 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Base64 en/decoding. Not much to say here except that we
 * work with decoded values in arrays of bytes. By "byte" I mean a number
 * in [0, 255].
 *
 * @author doughtie@google.com (Gavin Doughtie)
 */

goog.provide('goog.crypt.base64');
goog.require('goog.crypt');
goog.require('goog.userAgent');

// Static lookup maps, lazily populated by init_()


/**
 * Maps bytes to characters.
 * @type {Object}
 * @private
 */
goog.crypt.base64.byteToCharMap_ = null;


/**
 * Maps characters to bytes.
 * @type {Object}
 * @private
 */
goog.crypt.base64.charToByteMap_ = null;


/**
 * Maps bytes to websafe characters.
 * @type {Object}
 * @private
 */
goog.crypt.base64.byteToCharMapWebSafe_ = null;


/**
 * Maps websafe characters to bytes.
 * @type {Object}
 * @private
 */
goog.crypt.base64.charToByteMapWebSafe_ = null;


/**
 * Our default alphabet, shared between
 * ENCODED_VALS and ENCODED_VALS_WEBSAFE
 * @type {string}
 */
goog.crypt.base64.ENCODED_VALS_BASE =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
    'abcdefghijklmnopqrstuvwxyz' +
    '0123456789';


/**
 * Our default alphabet. Value 64 (=) is special; it means "nothing."
 * @type {string}
 */
goog.crypt.base64.ENCODED_VALS =
    goog.crypt.base64.ENCODED_VALS_BASE + '+/=';


/**
 * Our websafe alphabet.
 * @type {string}
 */
goog.crypt.base64.ENCODED_VALS_WEBSAFE =
    goog.crypt.base64.ENCODED_VALS_BASE + '-_.';


/**
 * Whether this browser supports the atob and btoa functions. This extension
 * started at Mozilla but is now implemented by many browsers. We use the
 * ASSUME_* variables to avoid pulling in the full useragent detection library
 * but still allowing the standard per-browser compilations.
 *
 * @type {boolean}
 */
goog.crypt.base64.HAS_NATIVE_SUPPORT = goog.userAgent.GECKO ||
                                       goog.userAgent.WEBKIT ||
                                       goog.userAgent.OPERA ||
                                       typeof(goog.global.atob) == 'function';


/**
 * Base64-encode an array of bytes.
 *
 * @param {Array.<number>|Uint8Array} input An array of bytes (numbers with
 *     value in [0, 255]) to encode.
 * @param {boolean=} opt_webSafe Boolean indicating we should use the
 *     alternative alphabet.
 * @return {string} The base64 encoded string.
 */
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  if (!goog.isArrayLike(input)) {
    throw Error('encodeByteArray takes an array as a parameter');
  }

  goog.crypt.base64.init_();

  var byteToCharMap = opt_webSafe ?
                      goog.crypt.base64.byteToCharMapWebSafe_ :
                      goog.crypt.base64.byteToCharMap_;

  var output = [];

  for (var i = 0; i < input.length; i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;

    var outByte1 = byte1 >> 2;
    var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
    var outByte3 = ((byte2 & 0x0F) << 2) | (byte3 >> 6);
    var outByte4 = byte3 & 0x3F;

    if (!haveByte3) {
      outByte4 = 64;

      if (!haveByte2) {
        outByte3 = 64;
      }
    }

    output.push(byteToCharMap[outByte1],
                byteToCharMap[outByte2],
                byteToCharMap[outByte3],
                byteToCharMap[outByte4]);
  }

  return output.join('');
};


/**
 * Base64-encode a string.
 *
 * @param {string} input A string to encode.
 * @param {boolean=} opt_webSafe If true, we should use the
 *     alternative alphabet.
 * @return {string} The base64 encoded string.
 */
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  // Shortcut for Mozilla browsers that implement
  // a native base64 encoder in the form of "btoa/atob"
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(
      goog.crypt.stringToByteArray(input), opt_webSafe);
};


/**
 * Base64-decode a string.
 *
 * @param {string} input to decode.
 * @param {boolean=} opt_webSafe True if we should use the
 *     alternative alphabet.
 * @return {string} string representing the decoded value.
 */
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  // Shortcut for Mozilla browsers that implement
  // a native base64 encoder in the form of "btoa/atob"
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.atob(input);
  }
  return goog.crypt.byteArrayToString(
      goog.crypt.base64.decodeStringToByteArray(input, opt_webSafe));
};


/**
 * Base64-decode a string.
 *
 * In base-64 decoding, groups of four characters are converted into three
 * bytes.  If the encoder did not apply padding, the input length may not
 * be a multiple of 4.
 *
 * In this case, the last group will have fewer than 4 characters, and
 * padding will be inferred.  If the group has one or two characters, it decodes
 * to one byte.  If the group has three characters, it decodes to two bytes.
 *
 * @param {string} input Input to decode.
 * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.
 * @return {!Array.<number>} bytes representing the decoded value.
 */
goog.crypt.base64.decodeStringToByteArray = function(input, opt_webSafe) {
  goog.crypt.base64.init_();

  var charToByteMap = opt_webSafe ?
                      goog.crypt.base64.charToByteMapWebSafe_ :
                      goog.crypt.base64.charToByteMap_;

  var output = [];

  for (var i = 0; i < input.length; ) {
    var byte1 = charToByteMap[input.charAt(i++)];

    var haveByte2 = i < input.length;
    var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
    ++i;

    var haveByte3 = i < input.length;
    var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
    ++i;

    var haveByte4 = i < input.length;
    var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
    ++i;

    if (byte1 == null || byte2 == null ||
        byte3 == null || byte4 == null) {
      throw Error();
    }

    var outByte1 = (byte1 << 2) | (byte2 >> 4);
    output.push(outByte1);

    if (byte3 != 64) {
      var outByte2 = ((byte2 << 4) & 0xF0) | (byte3 >> 2);
      output.push(outByte2);

      if (byte4 != 64) {
        var outByte3 = ((byte3 << 6) & 0xC0) | byte4;
        output.push(outByte3);
      }
    }
  }

  return output;
};


/**
 * Lazy static initialization function. Called before
 * accessing any of the static map variables.
 * @private
 */
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    goog.crypt.base64.charToByteMapWebSafe_ = {};

    // We want quick mappings back and forth, so we precompute two maps.
    for (var i = 0; i < goog.crypt.base64.ENCODED_VALS.length; i++) {
      goog.crypt.base64.byteToCharMap_[i] =
          goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] =
          goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      goog.crypt.base64.charToByteMapWebSafe_[
          goog.crypt.base64.byteToCharMapWebSafe_[i]] = i;

      // Be forgiving when decoding and correctly decode both encodings.
      if (i >= goog.crypt.base64.ENCODED_VALS_BASE.length) {
        goog.crypt.base64.charToByteMap_[
            goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
        goog.crypt.base64.charToByteMapWebSafe_[
            goog.crypt.base64.ENCODED_VALS.charAt(i)] = i;
      }
    }
  }
};

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Methods for parsing ASCII Armor and Radix-64.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.openpgp.asciiArmor');

goog.require('e2e');
goog.require('e2e.openpgp.ClearSignMessage');
goog.require('e2e.openpgp.error.ParseError');
goog.require('goog.array');
goog.require('goog.crypt');
goog.require('goog.crypt.base64');
goog.require('goog.string');


/**
 * Does base64 decoding ignoring extra characters, such as whitespace.
 * @param {string} ascii The ASCII text to parse.
 * @return {!e2e.ByteArray} The decoded data.
 * @private
 */
e2e.openpgp.asciiArmor.decodeRadix64_ = function(ascii) {
  var real = ascii.replace(/[^a-zA-Z0-9+/=]+/g, '');
  return /** @type {!e2e.ByteArray} */ (
      goog.crypt.base64.decodeStringToByteArray(real));
};


/**
 * Does base64 encoding, inserting newlines to wrap long text.
 * @param {!e2e.ByteArray} data The data to encode.
 * @return {string} The encoded data as ASCII text.
 * @private
 */
e2e.openpgp.asciiArmor.encodeRadix64_ = function(data) {
  var ascii = goog.crypt.base64.encodeByteArray(data);
  var lines = ascii.replace(/.{1,64}/g, '$&\r\n');
  return lines.slice(0, -2);  // Remove extra \r\n at end.
};


/**
 * Calculates CRC24.
 * @param {!e2e.ByteArray} data The data to do a checksum of.
 * @return {number} The checksum.
 * @private
 */
e2e.openpgp.asciiArmor.crc24_ = function(data) {
    var CRC24_INIT = 0xB704CE;
    var CRC24_POLY = 0x1864CFB;
    var j = 0;
    var crc = CRC24_INIT;
    while (j < data.length) {
      crc ^= data[j++] << 16;
      for (var i = 0; i < 8; i++) {
        crc = crc << 1;
        if (crc & 0x1000000)
          crc ^= CRC24_POLY;
      }
    }
    return crc & 0xFFFFFF;
};


/**
 * The regular expression to accept as a new line. It's more lenient to
 * support invalid encodings generated by some clients.
 * @const {string}
 * @private
 */
e2e.openpgp.asciiArmor.NEW_LINE_ = '[\\t\\u00a0 ]?\\r?\\n';


/**
 * Parses ASCII Armor.
 * Specified in RFC 4880 Section 6.2.
 * Throws a {@code e2e.openpgp.error.ParseError} if the Armor is invalid.
 * @param {string} text The text to parse as ASCII Armor.
 * @return {!e2e.openpgp.ArmoredMessage} The parsed message.
 */
e2e.openpgp.asciiArmor.parse = function(text) {
  // The 0x80 bit is always set for the Packet Tag for OpenPGP packets.
  if (text.charCodeAt(0) >= 0x80) {  // Not ASCII Armored.
    return {'data': goog.crypt.stringToByteArray(text)};
  }
  var start = text.indexOf('-----BEGIN PGP ');
  var armor, newLine = e2e.openpgp.asciiArmor.NEW_LINE_;
  // TODO(user) Switch away from regex to line-by-line parsing.
  if (start > -1) {
    armor = text.substr(start).match(new RegExp(
      '^-----BEGIN PGP ([^-]+)-----' + newLine +
      '((?:[A-Za-z]+:[ ][^\\n]+' + newLine + ')*)' + newLine + // headers
      '((?:[a-zA-Z0-9/+]+=*' + newLine + ')*)' + // body
      '(?:=([a-zA-Z0-9/+]+))?' + newLine + // checksum
      '(?:' + newLine + ')*-----END PGP \\1-----(?:' + newLine + '|$)'));
    if (!armor) {
      throw new e2e.openpgp.error.ParseError('invalid ASCII armor format');
    }
  } else {
    throw new e2e.openpgp.error.ParseError('ASCII Armor not found');
  }
  var payload = e2e.openpgp.asciiArmor.decodeRadix64_(armor[3]);
  var checksum = e2e.openpgp.asciiArmor.decodeRadix64_(armor[4]);
  var calculatedChecksum = [e2e.openpgp.asciiArmor.crc24_(payload)];
  calculatedChecksum = e2e.dwordArrayToByteArray(calculatedChecksum);
  calculatedChecksum = calculatedChecksum.slice(-3);
  if (calculatedChecksum.join('') != checksum.join('')) {
    throw new e2e.openpgp.error.ParseError(
        'ASCII Armor checksum incorrect.');
  }
  var charset, charsetMatch = armor[2].match(/^Charset: ([^\r\n])\r?\n/im);
  if (charsetMatch) {
    charset = charsetMatch[0].toLowerCase().match(/[\w-]+/)[0] || 'utf-8';
  }
  return {'data': payload, 'charset': charset};
};


/**
 * Parses ASCII Armor ClearSign messages.
 * Specified in RFC 4880 Section 6.2.
 * Throws a {@code e2e.openpgp.error.ParseError} if the Armor is invalid.
 * @param {string} text The text to parse as ASCII Armor.
 * @return {!e2e.openpgp.ClearSignMessage} Parsed message parameters
 *   and the signature ByteArray.
 */
e2e.openpgp.asciiArmor.parseClearSign = function(text) {
  var startMessage = text.indexOf('-----BEGIN PGP SIGNED MESSAGE-----');
  var startSignature = text.indexOf('-----BEGIN PGP SIGNATURE-----');
  var armor = text.substr(startMessage, startSignature - startMessage).match(
    new RegExp('^-----BEGIN PGP SIGNED MESSAGE-----\\r?\\n' +
               'Hash:[ ]([^\\n\\r]+)\\r?\\n' + // Hash header
               '(?:[A-Za-z]+:[ ][^\\n\\r]+\\r?\\n)*' + // Other headers
               '\\r?\\n')); // New line
  if (!armor) {
    throw new e2e.openpgp.error.ParseError('invalid clearsign format');
  }
  var hashString = armor[1];
  var startBody = text.indexOf('\n\n') + 2;
  if (startBody == (-1 + 2)) {
    startBody = text.indexOf('\r\n\r\n') + 4;
  }
  var body = text.substr(startBody,
                         startSignature - startBody - 1);  // -1 to remove \n
  if (goog.string.endsWith(body, '\r')) {
    body = goog.string.removeAt(body, body.length - 1, 1);  // Remove ending \r
  }
  body = e2e.openpgp.asciiArmor.dashUnescape(body);
  body = e2e.openpgp.asciiArmor.convertNewlines(body);
  var signature = e2e.openpgp.asciiArmor.parse(text.substr(startSignature));
  return new e2e.openpgp.ClearSignMessage(body, signature.data, hashString);
};


/**
 * Canonicalizes data by converting all line endings to <CR><LF> and removing
 * trailing whitespace.
 * @param {string} data The text to canonicalize.
 * @return {string} The canonicalized text.
 */
e2e.openpgp.asciiArmor.convertNewlines = function(data) {
  return data.replace(/[\x20\x09]*(\r\n|\r|\n)/g, '\r\n');
};



/**
 * Checks if the message has a clearsign message format
 * @param  {string} text
 * @return {!boolean} true if the message has a clearsign message format.
 */
e2e.openpgp.asciiArmor.isClearSign = function(text) {
  var startMessage = text.indexOf('-----BEGIN PGP SIGNED MESSAGE-----');
  var startSignature = text.indexOf('-----BEGIN PGP SIGNATURE-----');
  return Boolean(startMessage !== -1 &&
      startSignature !== -1 &&
      startSignature > startMessage);
};


/**
 * Dash-Escapes Text as described in RFC4880 7.1.
 * @param {string} plaintext The plaintext that has already been through
 *     e2e.openpgp.asciiArmor.convertNewlines().
 * @protected
 * @return {string} The dash-escaped text.
 */
e2e.openpgp.asciiArmor.dashEscape = function(plaintext) {
  return (plaintext.replace(/^\-/gm, '\- -')  // Dash-escape leading -
      .replace(/^From /gm, '\- From ')  // Dash-escape leading "From "
      .replace(/[\t ]*$/gm, ''));  // Remove trailing tabs and spaces.
};


/**
 * Removes the Dash-Escaping as described in RFC4880 7.1.
 * @param {string} plaintext Text with optional dash-escapes
 * @protected
 * @return {string} The text with removed dash-escapes.
 */
e2e.openpgp.asciiArmor.dashUnescape = function(plaintext) {
  return (plaintext.replace(/^\- /gm, ''));
};


/**
 * Construct a cleartext signature ASCII Armor.
 * Specified in RFC 4880 Section 7.
 * @param {e2e.openpgp.ClearSignMessage} message The message.
 * @param {!Object.<string>=} opt_headers Extra headers to add to signature.
 * @return {string} The ASCII Armored text.
 */
e2e.openpgp.asciiArmor.encodeClearSign = function(message, opt_headers) {
  return ['-----BEGIN PGP SIGNED MESSAGE-----',
          'Hash: ' + message.getSignature().hashAlgorithm,
          '',
          e2e.openpgp.asciiArmor.dashEscape(
              e2e.openpgp.asciiArmor.convertNewlines(message.getBody())),
          e2e.openpgp.asciiArmor.encode('SIGNATURE',
              message.getSignature().serialize(), opt_headers)
  ].join('\r\n');
};


/**
 * Encode data as ASCII Armor.
 * Specified in RFC 4880 Section 6.2.
 * @param {string} type Descriptive type, such as "MESSAGE".
 * @param {!e2e.ByteArray} payload The data to encode.
 * @param {!Object.<string>=} opt_headers Extra headers to add.
 * @return {string} The ASCII Armored text.
 */
e2e.openpgp.asciiArmor.encode = function(type, payload, opt_headers) {
  var byteChecksum = e2e.dwordArrayToByteArray(
    [e2e.openpgp.asciiArmor.crc24_(payload)]);
  var checksum = e2e.openpgp.asciiArmor.encodeRadix64_(
      byteChecksum.slice(-3));
  var headers = [];
  if (type !== 'SIGNATURE') {
    headers = ['Charset: UTF-8'];
  }
  if (opt_headers) {
    var headerNames = Object.getOwnPropertyNames(opt_headers);
    for (var i = 0; i < headerNames.length; i++) {
      var key = headerNames[i];
      var val = opt_headers[key];
      if (key.match(/^\w+$/) && val && val.match(/^[^\r\n]+$/)) {
        headers.push(key + ': ' + val);
      }
    }
  }
  return goog.array.flatten(
      '-----BEGIN PGP ' + type + '-----',
      headers,
      '',
      e2e.openpgp.asciiArmor.encodeRadix64_(payload),
      '=' + checksum,
      '-----END PGP ' + type + '-----'
  ).join('\r\n');
};


/**
 * Extracts the PGP block from the free-text content. If no PGP block exists,
 * returns the original content. If multiple PGP blocks are present, only the
 * first one is returned.
 * @param {string} content The original content from which the PGP block is to
 *     be extracted.
 * @return {string} The first PGP block that is found in the original content.
 */
e2e.openpgp.asciiArmor.extractPgpBlock = function(content) {
  var extractRe =
      /-----BEGIN\sPGP\s[\w\s]+-----[\s\S.]*(MESSAGE|BLOCK|SIGNATURE)-----/;
  var result = extractRe.exec(content);
  if (result) {
    var pgpBlock = result[0];
    if (/-----BEGIN\sPGP/.test(pgpBlock.substring(1))) {
      pgpBlock = pgpBlock.replace(
          /(-----END\sPGP[\w\s]+-----)([\s\S.]*)$/g, '$1');
    }
    return pgpBlock;
  } else {
    return content;
  }
};


/**
 * Marks an ASCII Armor as a draft message.
 * @param {string} armoredContent The ASCII Armor to mark as draft.
 * @return {string} The marked ASCII Armor.
 */
e2e.openpgp.asciiArmor.markAsDraft = function(armoredContent) {
  var lines = armoredContent.split('\n');
  goog.array.insertAt(lines, 'isDraft: true', 1);
  return lines.join('\n');
};


/**
 * Indicates if the ASCII Armor has been marked as draft.
 * @param {string} armoredContent The ASCII Armor to check.
 * @return {boolean} True if the ASCII Armor is marked as draft.
 *     Otherwise false.
 */
e2e.openpgp.asciiArmor.isDraft = function(armoredContent) {
  return armoredContent.indexOf('\nisDraft: true\n') > -1;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Base class to provide a high level API for PGP operations.
 */

goog.provide('e2e.openpgp.Context');

/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.openpgp.types');


/**
 * Interface for a high level abstraction of encryption and signing services.
 * @interface
 */
e2e.openpgp.Context = function() {};


/**
 * Specifies whether the output should be ASCII armored or not.
 * @type {boolean}
 */
e2e.openpgp.Context.prototype.armorOutput;


/**
 * Specifies the value of an armor header.
 * @param {string} name The name of the header.
 * @param {string} version The value of the header.
 */
e2e.openpgp.Context.prototype.setArmorHeader;


/**
 * The URL of the key server.
 * @type {string}
 * @protected
 */
e2e.openpgp.Context.prototype.keyServerUrl;


/**
 * The types of keys used for search.
 * @enum {string}
 */
e2e.openpgp.Context.KeyType = {
  'PUBLIC': 'PUBLIC',
  'PRIVATE': 'PRIVATE',
  'ALL': 'ALL'
};


/**
 * @param {string} passphrase The passphrase for encrypting the KeyRing
 *     when stored locally.
 * @expose
 */
e2e.openpgp.Context.prototype.setKeyRingPassphrase;


/**
 * @param {string} passphrase Change the passphrase for encrypting the KeyRing
 *     when stored locally. Empty string for unencrypted.
 * @expose
 */
e2e.openpgp.Context.prototype.changeKeyRingPassphrase;


/**
 * @return {boolean} True if there is a correct keyring passphrase set.
 * @expose
 */
e2e.openpgp.Context.prototype.hasPassphrase;


/**
 * @return {boolean} True if the keyring is encrypted in LocalStorage.
 * @expose
 */
e2e.openpgp.Context.prototype.isKeyRingEncrypted;


/**
 * Parses key blocks and returns a structured description of the keys.
 * @param {!e2e.ByteArray|string} key Key(s) to get the description of.
 * @return {!e2e.openpgp.KeyResult} Description of the keys.
 * @expose
 */
e2e.openpgp.Context.prototype.getKeyDescription;


/**
 * Imports an armor encoded, or pure PGP key into the Context.
 * @param {function(string, function(string))} passphraseCallback This callback
 *     is used for requesting an action-specific passphrase from the user.
 * @param {!e2e.ByteArray|string} key The key to import.
 * @return {!e2e.openpgp.ImportKeyResult} List of user IDs that were
 *     successfully imported.
 * @expose
 */
e2e.openpgp.Context.prototype.importKey;


/**
 * Generates a key, encrypts it, and imports it into the Context.
 * @param {!e2e.signer.Algorithm} keyAlgo Algorithm of the key.
 * @param {number} keyLength Key length to generate a key.
 * @param {!e2e.cipher.Algorithm} subkeyAlgo Algorithm of the subkey.
 * @param {number} subkeyLength Subkey length to generate a key.
 * @param {string} name The name to associate the key to.
 * @param {string} comment A comment to note the key with.
 * @param {string} email The email to associate the key to.
 * @param {number} expirationDate Timestamp in seconds to expire the key.
 * @return {!e2e.openpgp.GenerateKeyResult} The generated key.
 * @expose
 */
e2e.openpgp.Context.prototype.generateKey;


/**
 * Encrypts and signs a given plaintext with a set of keys.
 * @param {string} plaintext The plaintext.
 * @param {!e2e.openpgp.EncryptOptions} options Metadata to add.
 * @param {!Array.<!e2e.openpgp.Key>} encryptionKeys The keys to
 *     encrypt the message with.
 * @param {!Array.<string>} passphrases Passphrases to use for symmetric
 *     key encryption of the message.
 * @param {e2e.openpgp.Key=} opt_signatureKey The key to sign
 *     the message with.
 * @return {!e2e.openpgp.EncryptSignResult} The result of the encrypt/sign
 *     operation.
 * @expose
 */
e2e.openpgp.Context.prototype.encryptSign;


/**
 * Verifies and decrypts signatures. It will also verify a cleartext message
 * @param {function(string, function(string))} passphraseCallback This callback
 *     is used for requesting an action-specific passphrase from the user.
 * @param {!e2e.ByteArray|string} encryptedMessage The encrypted data (or
 *     a cleartext message).
 * @return {!e2e.openpgp.VerifyDecryptResult} The result of the
 *     verify/decrypt operation.
 * @expose
 */
e2e.openpgp.Context.prototype.verifyDecrypt;


/**
 * Searches a public key from a user identifier.
 * @param {string} uid The user id to search for.
 * @return {!e2e.openpgp.KeyResult} The result of the key search.
 * @expose
 */
e2e.openpgp.Context.prototype.searchPublicKey;


/**
 * Searches a private key from a user identifier.
 * @param {string} uid The user id to search for.
 * @return {!e2e.openpgp.KeyResult} The result of the key search.
 * @expose
 */
e2e.openpgp.Context.prototype.searchPrivateKey;


/**
 * Searches a public and private key from a user identifier.
 * @param {string} uid The user id to search for.
 * @return {!e2e.openpgp.KeyResult} The result of the key search.
 * @expose
 */
e2e.openpgp.Context.prototype.searchKey;


/**
 * Gets all of the keys in the keyring.
 * @param {boolean=} opt_priv Whether to return the private keyring.
 * @return {!e2e.async.Result.<!e2e.openpgp.KeyRingMap>} A clone of the key ring
 *     map.
 * @expose
 */
e2e.openpgp.Context.prototype.getAllKeys;


/**
 * Deletes all keys for a user identifier.
 * @param {string} uid The user id to delete all keys.
 * @expose
 */
e2e.openpgp.Context.prototype.deleteKey;


/**
 * Deletes public key for a user identifier
 * @param (string) uid The user id to delete public key.
 * @expose
 */
e2e.openpgp.Context.prototype.deletePublicKey;


/**
 * Exports the secret keyring.
 * @param {boolean} armored Whether to export the keyring in radix64 armor.
 * @return {!e2e.async.Result.<!e2e.ByteArray|string>}
 * @expose
 */
e2e.openpgp.Context.prototype.exportKeyring;


/**
 * Provides serialized data needed to back up generated EC keys.
 * @return {!e2e.async.Result.<e2e.openpgp.KeyringBackupInfo>}
 * @expose
 */
e2e.openpgp.Context.prototype.getKeyringBackupData;


/**
 * Restores serialized data from ECC key backup
 * @param {e2e.openpgp.KeyringBackupInfo} data Serialized data to restore
 * @param {string} email The email to associate with restored keys.
 * @return {e2e.async.Result.<undefined>}
 * @expose
 */
e2e.openpgp.Context.prototype.restoreKeyring;


// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview JavaScript implementation of CAST5 as specified in RFC 2144.
 * Implementation based on golang implementation by Adam Langley from
 * https://code.google.com/p/go/source/browse/cast5/cast5.go?repo=crypto
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.cipher.Cast5');

goog.require('e2e');
goog.require('e2e.AlgorithmImpl');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.Error');
goog.require('e2e.cipher.SymmetricCipher');
goog.require('e2e.cipher.factory');



/**
 * Basic implementation of CAST5 in JavaScript as specified in RFC 2144.
 * @param {!e2e.cipher.Algorithm} algorithm The algorithm being
 *     implemented.
 * @param {e2e.cipher.key.Key=} opt_keyObj The key to use.
 * @implements {e2e.cipher.SymmetricCipher}
 * @extends {e2e.AlgorithmImpl}
 * @constructor
 */
e2e.cipher.Cast5 = function(algorithm, opt_keyObj) {
  this.keySize = 16;
  goog.base(this, algorithm, opt_keyObj);
};
goog.inherits(e2e.cipher.Cast5, e2e.AlgorithmImpl);


/** @inheritDoc */
e2e.cipher.Cast5.prototype.setKey = function(keyObj) {
  // TODO(user) Implement other key sizes if needed.
  if (keyObj.key.length != 16) {
    throw new e2e.cipher.Error('Wrong key size for Cipher.');
  }

  if (!e2e.isByteArray(keyObj.key)) {
    throw new e2e.cipher.Error('Invalid values for key.');
  }

  var schedule = this.keySchedule_(keyObj.key);
  keyObj.masking = schedule.masking;
  keyObj.rotate = schedule.rotate;

  // Superclass setKey sets the key to this.key_ and keySize.
  goog.base(this, 'setKey', keyObj, keyObj.key.length);
};


/** @inheritDoc */
e2e.cipher.Cast5.prototype.blockSize = 8; // 64 bits.


/** @inheritDoc */
e2e.cipher.Cast5.prototype.encrypt = function(data) {
  var dst = new Array(data.length);
  for (var i = 0; i < data.length; i += 8) {
    var l = data[i + 0] << 24 | data[i + 1] << 16 | data[i + 2] << 8 |
        data[i + 3];
    var r = data[i + 4] << 24 | data[i + 5] << 16 | data[i + 6] << 8 |
        data[i + 7];

    var rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[0], this.key.rotate[0]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[1], this.key.rotate[1]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[2], this.key.rotate[2]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[3], this.key.rotate[3]);
    l = rPrev;


    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[4], this.key.rotate[4]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[5], this.key.rotate[5]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[6], this.key.rotate[6]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[7], this.key.rotate[7]);
    l = rPrev;


    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[8], this.key.rotate[8]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[9], this.key.rotate[9]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[10], this.key.rotate[10]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[11], this.key.rotate[11]);
    l = rPrev;


    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[12], this.key.rotate[12]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[13], this.key.rotate[13]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[14], this.key.rotate[14]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[15], this.key.rotate[15]);
    l = rPrev;

    dst[i + 0] = (r >>> 24) & 0xff;
    dst[i + 1] = (r >>> 16) & 0xff;
    dst[i + 2] = (r >>> 8) & 0xff;
    dst[i + 3] = (r) & 0xff;
    dst[i + 4] = (l >>> 24) & 0xff;
    dst[i + 5] = (l >>> 16) & 0xff;
    dst[i + 6] = (l >>> 8) & 0xff;
    dst[i + 7] = (l) & 0xff;
  }
  return e2e.async.Result.toResult(dst);
};


/** @inheritDoc */
e2e.cipher.Cast5.prototype.decrypt = function(data) {
  var dst = new Array(data.length);
  for (var i = 0; i < data.length; i += 8) {
    var l = data[i + 0] << 24 | data[i + 1] << 16 | data[i + 2] << 8 |
        data[i + 3];
    var r = data[i + 4] << 24 | data[i + 5] << 16 | data[i + 6] << 8 |
        data[i + 7];

    var rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[15], this.key.rotate[15]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[14], this.key.rotate[14]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[13], this.key.rotate[13]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[12], this.key.rotate[12]);
    l = rPrev;


    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[11], this.key.rotate[11]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[10], this.key.rotate[10]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[9], this.key.rotate[9]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[8], this.key.rotate[8]);
    l = rPrev;


    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[7], this.key.rotate[7]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[6], this.key.rotate[6]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[5], this.key.rotate[5]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[4], this.key.rotate[4]);
    l = rPrev;


    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[3], this.key.rotate[3]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f3_(r, this.key.masking[2], this.key.rotate[2]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f2_(r, this.key.masking[1], this.key.rotate[1]);
    l = rPrev;

    rPrev = r;
    r = l ^ this.f1_(r, this.key.masking[0], this.key.rotate[0]);
    l = rPrev;

    dst[i + 0] = (r >>> 24) & 0xff;
    dst[i + 1] = (r >>> 16) & 0xff;
    dst[i + 2] = (r >>> 8) & 0xff;
    dst[i + 3] = (r) & 0xff;
    dst[i + 4] = (l >>> 24) & 0xff;
    dst[i + 5] = (l >>> 16) & 0xff;
    dst[i + 6] = (l >>> 8) & 0xff;
    dst[i + 7] = (l) & 0xff;
  }

  return e2e.async.Result.toResult(dst);
};

/**
 * Magic values for a round of the key schedule.
 * See golang implementation for more thorough comments.
 * @type {Array.<Array.<Array.<number>>>}
 * @const
 */
e2e.cipher.Cast5.keyScheduleA = [
  [
    [4, 0, 0xd, 0xf, 0xc, 0xe, 0x8],
    [5, 2, 16 + 0, 16 + 2, 16 + 1, 16 + 3, 0xa],
    [6, 3, 16 + 7, 16 + 6, 16 + 5, 16 + 4, 9],
    [7, 1, 16 + 0xa, 16 + 9, 16 + 0xb, 16 + 8, 0xb]
  ],
  [
    [0, 6, 16 + 5, 16 + 7, 16 + 4, 16 + 6, 16 + 0],
    [1, 4, 0, 2, 1, 3, 16 + 2],
    [2, 5, 7, 6, 5, 4, 16 + 1],
    [3, 7, 0xa, 9, 0xb, 8, 16 + 3]
  ],
  [
    [4, 0, 0xd, 0xf, 0xc, 0xe, 8],
    [5, 2, 16 + 0, 16 + 2, 16 + 1, 16 + 3, 0xa],
    [6, 3, 16 + 7, 16 + 6, 16 + 5, 16 + 4, 9],
    [7, 1, 16 + 0xa, 16 + 9, 16 + 0xb, 16 + 8, 0xb]
  ],
  [
    [0, 6, 16 + 5, 16 + 7, 16 + 4, 16 + 6, 16 + 0],
    [1, 4, 0, 2, 1, 3, 16 + 2],
    [2, 5, 7, 6, 5, 4, 16 + 1],
    [3, 7, 0xa, 9, 0xb, 8, 16 + 3]
  ]
];

/**
 * Magic values for a round of the key schedule.
 * See golang implementation for more thorough comments.
 * @type {Array.<Array.<Array.<number>>>}
 * @const
 */
e2e.cipher.Cast5.keyScheduleB = [
  [
    [16 + 8, 16 + 9, 16 + 7, 16 + 6, 16 + 2],
    [16 + 0xa, 16 + 0xb, 16 + 5, 16 + 4, 16 + 6],
    [16 + 0xc, 16 + 0xd, 16 + 3, 16 + 2, 16 + 9],
    [16 + 0xe, 16 + 0xf, 16 + 1, 16 + 0, 16 + 0xc]
  ],
  [
    [3, 2, 0xc, 0xd, 8],
    [1, 0, 0xe, 0xf, 0xd],
    [7, 6, 8, 9, 3],
    [5, 4, 0xa, 0xb, 7]
  ],
  [
    [16 + 3, 16 + 2, 16 + 0xc, 16 + 0xd, 16 + 9],
    [16 + 1, 16 + 0, 16 + 0xe, 16 + 0xf, 16 + 0xc],
    [16 + 7, 16 + 6, 16 + 8, 16 + 9, 16 + 2],
    [16 + 5, 16 + 4, 16 + 0xa, 16 + 0xb, 16 + 6]
  ],
  [
    [8, 9, 7, 6, 3],
    [0xa, 0xb, 5, 4, 7],
    [0xc, 0xd, 3, 2, 8],
    [0xe, 0xf, 1, 0, 0xd]
  ]
];


/**
 * Computes 16 pairs of subkeys {Kmi, Kri} from the original key (K).
 * @param {!e2e.ByteArray} inputKey Original key.
 * @return {!Object.<!e2e.ByteArray>} Rotate and masking subkeys.
 * @private
 */
e2e.cipher.Cast5.prototype.keySchedule_ = function(inputKey) {
  var t = new Array(8);
  var outputKey = new Array(32);

  for (var i = 0; i < 4; i++) {
    var j = i * 4;
    t[i] = inputKey[j] << 24 | inputKey[j + 1] << 16 | inputKey[j + 2] << 8 |
        inputKey[j + 3];
  }

  var x = [6, 7, 4, 5];
  var ki = 0;

  for (var half = 0; half < 2; half++) {
    for (var round = 0; round < 4; round++) {
      for (var j = 0; j < 4; j++) {
        var a = e2e.cipher.Cast5.keyScheduleA[round][j];
        var w = t[a[1]];
        w ^= e2e.cipher.Cast5.SBOX[4][
          (t[a[2] >>> 2] >>> (24 - 8 * (a[2] & 3))) & 0xff];
        w ^= e2e.cipher.Cast5.SBOX[5][
          (t[a[3] >>> 2] >>> (24 - 8 * (a[3] & 3))) & 0xff];
        w ^= e2e.cipher.Cast5.SBOX[6][
          (t[a[4] >>> 2] >>> (24 - 8 * (a[4] & 3))) & 0xff];
        w ^= e2e.cipher.Cast5.SBOX[7][
          (t[a[5] >>> 2] >>> (24 - 8 * (a[5] & 3))) & 0xff];
        w ^= e2e.cipher.Cast5.SBOX[x[j]][
          (t[a[6] >>> 2] >>> (24 - 8 * (a[6] & 3))) & 0xff];
        t[a[0]] = w;
      }
      for (var j = 0; j < 4; j++) {
        var b = e2e.cipher.Cast5.keyScheduleB[round][j];
        var w = e2e.cipher.Cast5.SBOX[4][
            (t[b[0] >>> 2] >>> (24 - 8 * (b[0] & 3))) & 0xff];
        w ^= e2e.cipher.Cast5.SBOX[5][
          (t[b[1] >>> 2] >>> (24 - 8 * (b[1] & 3))) & 0xff];
        w ^= e2e.cipher.Cast5.SBOX[6][
          (t[b[2] >>> 2] >>> (24 - 8 * (b[2] & 3))) & 0xff];
        w ^= e2e.cipher.Cast5.SBOX[7][
          (t[b[3] >>> 2] >>> (24 - 8 * (b[3] & 3))) & 0xff];
        w ^= e2e.cipher.Cast5.SBOX[4 + j][
          (t[b[4] >>> 2] >>> (24 - 8 * (b[4] & 3))) & 0xff];
        outputKey[ki] = w;
        ki++;
      }
    }
  }

  var c = {};
  c.masking = new Array(16);
  c.rotate = new Array(16);
  for (var i = 0; i < 16; i++) {
    c.masking[i] = outputKey[i];
    c.rotate[i] = outputKey[16 + i] & 0x1f;
  }
  return c;
};


/**
 * f1 function
 * @param {number} d
 * @param {number} m
 * @param {number} r
 * @return {number}
 * @private
 */
e2e.cipher.Cast5.prototype.f1_ = function(d, m, r) {
  var t = m + d;
  var I = (t << r) | (t >>> (32 - r));
  return (
      (e2e.cipher.Cast5.SBOX[0][I >>> 24] ^
          e2e.cipher.Cast5.SBOX[1][(I >>> 16) & 0xff]) -
      e2e.cipher.Cast5.SBOX[2][(I >>> 8) & 0xff]) +
      e2e.cipher.Cast5.SBOX[3][I & 0xff];
};


/**
 * f2 function
 * @param {number} d
 * @param {number} m
 * @param {number} r
 * @return {number}
 * @private
 */
e2e.cipher.Cast5.prototype.f2_ = function(d, m, r) {
  var t = m ^ d;
  var I = (t << r) | (t >>> (32 - r));
  return ((e2e.cipher.Cast5.SBOX[0][I >>> 24] -
      e2e.cipher.Cast5.SBOX[1][(I >>> 16) & 0xff]) +
      e2e.cipher.Cast5.SBOX[2][(I >>> 8) & 0xff]) ^
      e2e.cipher.Cast5.SBOX[3][I & 0xff];
};


/**
 * f3 function
 * @param {number} d
 * @param {number} m
 * @param {number} r
 * @return {number}
 * @private
 */
e2e.cipher.Cast5.prototype.f3_ = function(d, m, r) {
  var t = m - d;
  var I = (t << r) | (t >>> (32 - r));
  return ((e2e.cipher.Cast5.SBOX[0][I >>> 24] +
      e2e.cipher.Cast5.SBOX[1][(I >>> 16) & 0xff]) ^
      e2e.cipher.Cast5.SBOX[2][(I >>> 8) & 0xff]) -
      e2e.cipher.Cast5.SBOX[3][I & 0xff];
};


/**
 * Precomputed SBox lookup. As specified in FIPS 197 Section 5.1.1.
 * @type {Array.<Array.<number>>}
 * @const
 */
e2e.cipher.Cast5.SBOX = [
[
  0x30fb40d4, 0x9fa0ff0b, 0x6beccd2f, 0x3f258c7a,
  0x1e213f2f, 0x9c004dd3, 0x6003e540, 0xcf9fc949,
  0xbfd4af27, 0x88bbbdb5, 0xe2034090, 0x98d09675,
  0x6e63a0e0, 0x15c361d2, 0xc2e7661d, 0x22d4ff8e,
  0x28683b6f, 0xc07fd059, 0xff2379c8, 0x775f50e2,
  0x43c340d3, 0xdf2f8656, 0x887ca41a, 0xa2d2bd2d,
  0xa1c9e0d6, 0x346c4819, 0x61b76d87, 0x22540f2f,
  0x2abe32e1, 0xaa54166b, 0x22568e3a, 0xa2d341d0,
  0x66db40c8, 0xa784392f, 0x004dff2f, 0x2db9d2de,
  0x97943fac, 0x4a97c1d8, 0x527644b7, 0xb5f437a7,
  0xb82cbaef, 0xd751d159, 0x6ff7f0ed, 0x5a097a1f,
  0x827b68d0, 0x90ecf52e, 0x22b0c054, 0xbc8e5935,
  0x4b6d2f7f, 0x50bb64a2, 0xd2664910, 0xbee5812d,
  0xb7332290, 0xe93b159f, 0xb48ee411, 0x4bff345d,
  0xfd45c240, 0xad31973f, 0xc4f6d02e, 0x55fc8165,
  0xd5b1caad, 0xa1ac2dae, 0xa2d4b76d, 0xc19b0c50,
  0x882240f2, 0x0c6e4f38, 0xa4e4bfd7, 0x4f5ba272,
  0x564c1d2f, 0xc59c5319, 0xb949e354, 0xb04669fe,
  0xb1b6ab8a, 0xc71358dd, 0x6385c545, 0x110f935d,
  0x57538ad5, 0x6a390493, 0xe63d37e0, 0x2a54f6b3,
  0x3a787d5f, 0x6276a0b5, 0x19a6fcdf, 0x7a42206a,
  0x29f9d4d5, 0xf61b1891, 0xbb72275e, 0xaa508167,
  0x38901091, 0xc6b505eb, 0x84c7cb8c, 0x2ad75a0f,
  0x874a1427, 0xa2d1936b, 0x2ad286af, 0xaa56d291,
  0xd7894360, 0x425c750d, 0x93b39e26, 0x187184c9,
  0x6c00b32d, 0x73e2bb14, 0xa0bebc3c, 0x54623779,
  0x64459eab, 0x3f328b82, 0x7718cf82, 0x59a2cea6,
  0x04ee002e, 0x89fe78e6, 0x3fab0950, 0x325ff6c2,
  0x81383f05, 0x6963c5c8, 0x76cb5ad6, 0xd49974c9,
  0xca180dcf, 0x380782d5, 0xc7fa5cf6, 0x8ac31511,
  0x35e79e13, 0x47da91d0, 0xf40f9086, 0xa7e2419e,
  0x31366241, 0x051ef495, 0xaa573b04, 0x4a805d8d,
  0x548300d0, 0x00322a3c, 0xbf64cddf, 0xba57a68e,
  0x75c6372b, 0x50afd341, 0xa7c13275, 0x915a0bf5,
  0x6b54bfab, 0x2b0b1426, 0xab4cc9d7, 0x449ccd82,
  0xf7fbf265, 0xab85c5f3, 0x1b55db94, 0xaad4e324,
  0xcfa4bd3f, 0x2deaa3e2, 0x9e204d02, 0xc8bd25ac,
  0xeadf55b3, 0xd5bd9e98, 0xe31231b2, 0x2ad5ad6c,
  0x954329de, 0xadbe4528, 0xd8710f69, 0xaa51c90f,
  0xaa786bf6, 0x22513f1e, 0xaa51a79b, 0x2ad344cc,
  0x7b5a41f0, 0xd37cfbad, 0x1b069505, 0x41ece491,
  0xb4c332e6, 0x032268d4, 0xc9600acc, 0xce387e6d,
  0xbf6bb16c, 0x6a70fb78, 0x0d03d9c9, 0xd4df39de,
  0xe01063da, 0x4736f464, 0x5ad328d8, 0xb347cc96,
  0x75bb0fc3, 0x98511bfb, 0x4ffbcc35, 0xb58bcf6a,
  0xe11f0abc, 0xbfc5fe4a, 0xa70aec10, 0xac39570a,
  0x3f04442f, 0x6188b153, 0xe0397a2e, 0x5727cb79,
  0x9ceb418f, 0x1cacd68d, 0x2ad37c96, 0x0175cb9d,
  0xc69dff09, 0xc75b65f0, 0xd9db40d8, 0xec0e7779,
  0x4744ead4, 0xb11c3274, 0xdd24cb9e, 0x7e1c54bd,
  0xf01144f9, 0xd2240eb1, 0x9675b3fd, 0xa3ac3755,
  0xd47c27af, 0x51c85f4d, 0x56907596, 0xa5bb15e6,
  0x580304f0, 0xca042cf1, 0x011a37ea, 0x8dbfaadb,
  0x35ba3e4a, 0x3526ffa0, 0xc37b4d09, 0xbc306ed9,
  0x98a52666, 0x5648f725, 0xff5e569d, 0x0ced63d0,
  0x7c63b2cf, 0x700b45e1, 0xd5ea50f1, 0x85a92872,
  0xaf1fbda7, 0xd4234870, 0xa7870bf3, 0x2d3b4d79,
  0x42e04198, 0x0cd0ede7, 0x26470db8, 0xf881814c,
  0x474d6ad7, 0x7c0c5e5c, 0xd1231959, 0x381b7298,
  0xf5d2f4db, 0xab838653, 0x6e2f1e23, 0x83719c9e,
  0xbd91e046, 0x9a56456e, 0xdc39200c, 0x20c8c571,
  0x962bda1c, 0xe1e696ff, 0xb141ab08, 0x7cca89b9,
  0x1a69e783, 0x02cc4843, 0xa2f7c579, 0x429ef47d,
  0x427b169c, 0x5ac9f049, 0xdd8f0f00, 0x5c8165bf
],
[
  0x1f201094, 0xef0ba75b, 0x69e3cf7e, 0x393f4380,
  0xfe61cf7a, 0xeec5207a, 0x55889c94, 0x72fc0651,
  0xada7ef79, 0x4e1d7235, 0xd55a63ce, 0xde0436ba,
  0x99c430ef, 0x5f0c0794, 0x18dcdb7d, 0xa1d6eff3,
  0xa0b52f7b, 0x59e83605, 0xee15b094, 0xe9ffd909,
  0xdc440086, 0xef944459, 0xba83ccb3, 0xe0c3cdfb,
  0xd1da4181, 0x3b092ab1, 0xf997f1c1, 0xa5e6cf7b,
  0x01420ddb, 0xe4e7ef5b, 0x25a1ff41, 0xe180f806,
  0x1fc41080, 0x179bee7a, 0xd37ac6a9, 0xfe5830a4,
  0x98de8b7f, 0x77e83f4e, 0x79929269, 0x24fa9f7b,
  0xe113c85b, 0xacc40083, 0xd7503525, 0xf7ea615f,
  0x62143154, 0x0d554b63, 0x5d681121, 0xc866c359,
  0x3d63cf73, 0xcee234c0, 0xd4d87e87, 0x5c672b21,
  0x071f6181, 0x39f7627f, 0x361e3084, 0xe4eb573b,
  0x602f64a4, 0xd63acd9c, 0x1bbc4635, 0x9e81032d,
  0x2701f50c, 0x99847ab4, 0xa0e3df79, 0xba6cf38c,
  0x10843094, 0x2537a95e, 0xf46f6ffe, 0xa1ff3b1f,
  0x208cfb6a, 0x8f458c74, 0xd9e0a227, 0x4ec73a34,
  0xfc884f69, 0x3e4de8df, 0xef0e0088, 0x3559648d,
  0x8a45388c, 0x1d804366, 0x721d9bfd, 0xa58684bb,
  0xe8256333, 0x844e8212, 0x128d8098, 0xfed33fb4,
  0xce280ae1, 0x27e19ba5, 0xd5a6c252, 0xe49754bd,
  0xc5d655dd, 0xeb667064, 0x77840b4d, 0xa1b6a801,
  0x84db26a9, 0xe0b56714, 0x21f043b7, 0xe5d05860,
  0x54f03084, 0x066ff472, 0xa31aa153, 0xdadc4755,
  0xb5625dbf, 0x68561be6, 0x83ca6b94, 0x2d6ed23b,
  0xeccf01db, 0xa6d3d0ba, 0xb6803d5c, 0xaf77a709,
  0x33b4a34c, 0x397bc8d6, 0x5ee22b95, 0x5f0e5304,
  0x81ed6f61, 0x20e74364, 0xb45e1378, 0xde18639b,
  0x881ca122, 0xb96726d1, 0x8049a7e8, 0x22b7da7b,
  0x5e552d25, 0x5272d237, 0x79d2951c, 0xc60d894c,
  0x488cb402, 0x1ba4fe5b, 0xa4b09f6b, 0x1ca815cf,
  0xa20c3005, 0x8871df63, 0xb9de2fcb, 0x0cc6c9e9,
  0x0beeff53, 0xe3214517, 0xb4542835, 0x9f63293c,
  0xee41e729, 0x6e1d2d7c, 0x50045286, 0x1e6685f3,
  0xf33401c6, 0x30a22c95, 0x31a70850, 0x60930f13,
  0x73f98417, 0xa1269859, 0xec645c44, 0x52c877a9,
  0xcdff33a6, 0xa02b1741, 0x7cbad9a2, 0x2180036f,
  0x50d99c08, 0xcb3f4861, 0xc26bd765, 0x64a3f6ab,
  0x80342676, 0x25a75e7b, 0xe4e6d1fc, 0x20c710e6,
  0xcdf0b680, 0x17844d3b, 0x31eef84d, 0x7e0824e4,
  0x2ccb49eb, 0x846a3bae, 0x8ff77888, 0xee5d60f6,
  0x7af75673, 0x2fdd5cdb, 0xa11631c1, 0x30f66f43,
  0xb3faec54, 0x157fd7fa, 0xef8579cc, 0xd152de58,
  0xdb2ffd5e, 0x8f32ce19, 0x306af97a, 0x02f03ef8,
  0x99319ad5, 0xc242fa0f, 0xa7e3ebb0, 0xc68e4906,
  0xb8da230c, 0x80823028, 0xdcdef3c8, 0xd35fb171,
  0x088a1bc8, 0xbec0c560, 0x61a3c9e8, 0xbca8f54d,
  0xc72feffa, 0x22822e99, 0x82c570b4, 0xd8d94e89,
  0x8b1c34bc, 0x301e16e6, 0x273be979, 0xb0ffeaa6,
  0x61d9b8c6, 0x00b24869, 0xb7ffce3f, 0x08dc283b,
  0x43daf65a, 0xf7e19798, 0x7619b72f, 0x8f1c9ba4,
  0xdc8637a0, 0x16a7d3b1, 0x9fc393b7, 0xa7136eeb,
  0xc6bcc63e, 0x1a513742, 0xef6828bc, 0x520365d6,
  0x2d6a77ab, 0x3527ed4b, 0x821fd216, 0x095c6e2e,
  0xdb92f2fb, 0x5eea29cb, 0x145892f5, 0x91584f7f,
  0x5483697b, 0x2667a8cc, 0x85196048, 0x8c4bacea,
  0x833860d4, 0x0d23e0f9, 0x6c387e8a, 0x0ae6d249,
  0xb284600c, 0xd835731d, 0xdcb1c647, 0xac4c56ea,
  0x3ebd81b3, 0x230eabb0, 0x6438bc87, 0xf0b5b1fa,
  0x8f5ea2b3, 0xfc184642, 0x0a036b7a, 0x4fb089bd,
  0x649da589, 0xa345415e, 0x5c038323, 0x3e5d3bb9,
  0x43d79572, 0x7e6dd07c, 0x06dfdf1e, 0x6c6cc4ef,
  0x7160a539, 0x73bfbe70, 0x83877605, 0x4523ecf1
],
[
  0x8defc240, 0x25fa5d9f, 0xeb903dbf, 0xe810c907,
  0x47607fff, 0x369fe44b, 0x8c1fc644, 0xaececa90,
  0xbeb1f9bf, 0xeefbcaea, 0xe8cf1950, 0x51df07ae,
  0x920e8806, 0xf0ad0548, 0xe13c8d83, 0x927010d5,
  0x11107d9f, 0x07647db9, 0xb2e3e4d4, 0x3d4f285e,
  0xb9afa820, 0xfade82e0, 0xa067268b, 0x8272792e,
  0x553fb2c0, 0x489ae22b, 0xd4ef9794, 0x125e3fbc,
  0x21fffcee, 0x825b1bfd, 0x9255c5ed, 0x1257a240,
  0x4e1a8302, 0xbae07fff, 0x528246e7, 0x8e57140e,
  0x3373f7bf, 0x8c9f8188, 0xa6fc4ee8, 0xc982b5a5,
  0xa8c01db7, 0x579fc264, 0x67094f31, 0xf2bd3f5f,
  0x40fff7c1, 0x1fb78dfc, 0x8e6bd2c1, 0x437be59b,
  0x99b03dbf, 0xb5dbc64b, 0x638dc0e6, 0x55819d99,
  0xa197c81c, 0x4a012d6e, 0xc5884a28, 0xccc36f71,
  0xb843c213, 0x6c0743f1, 0x8309893c, 0x0feddd5f,
  0x2f7fe850, 0xd7c07f7e, 0x02507fbf, 0x5afb9a04,
  0xa747d2d0, 0x1651192e, 0xaf70bf3e, 0x58c31380,
  0x5f98302e, 0x727cc3c4, 0x0a0fb402, 0x0f7fef82,
  0x8c96fdad, 0x5d2c2aae, 0x8ee99a49, 0x50da88b8,
  0x8427f4a0, 0x1eac5790, 0x796fb449, 0x8252dc15,
  0xefbd7d9b, 0xa672597d, 0xada840d8, 0x45f54504,
  0xfa5d7403, 0xe83ec305, 0x4f91751a, 0x925669c2,
  0x23efe941, 0xa903f12e, 0x60270df2, 0x0276e4b6,
  0x94fd6574, 0x927985b2, 0x8276dbcb, 0x02778176,
  0xf8af918d, 0x4e48f79e, 0x8f616ddf, 0xe29d840e,
  0x842f7d83, 0x340ce5c8, 0x96bbb682, 0x93b4b148,
  0xef303cab, 0x984faf28, 0x779faf9b, 0x92dc560d,
  0x224d1e20, 0x8437aa88, 0x7d29dc96, 0x2756d3dc,
  0x8b907cee, 0xb51fd240, 0xe7c07ce3, 0xe566b4a1,
  0xc3e9615e, 0x3cf8209d, 0x6094d1e3, 0xcd9ca341,
  0x5c76460e, 0x00ea983b, 0xd4d67881, 0xfd47572c,
  0xf76cedd9, 0xbda8229c, 0x127dadaa, 0x438a074e,
  0x1f97c090, 0x081bdb8a, 0x93a07ebe, 0xb938ca15,
  0x97b03cff, 0x3dc2c0f8, 0x8d1ab2ec, 0x64380e51,
  0x68cc7bfb, 0xd90f2788, 0x12490181, 0x5de5ffd4,
  0xdd7ef86a, 0x76a2e214, 0xb9a40368, 0x925d958f,
  0x4b39fffa, 0xba39aee9, 0xa4ffd30b, 0xfaf7933b,
  0x6d498623, 0x193cbcfa, 0x27627545, 0x825cf47a,
  0x61bd8ba0, 0xd11e42d1, 0xcead04f4, 0x127ea392,
  0x10428db7, 0x8272a972, 0x9270c4a8, 0x127de50b,
  0x285ba1c8, 0x3c62f44f, 0x35c0eaa5, 0xe805d231,
  0x428929fb, 0xb4fcdf82, 0x4fb66a53, 0x0e7dc15b,
  0x1f081fab, 0x108618ae, 0xfcfd086d, 0xf9ff2889,
  0x694bcc11, 0x236a5cae, 0x12deca4d, 0x2c3f8cc5,
  0xd2d02dfe, 0xf8ef5896, 0xe4cf52da, 0x95155b67,
  0x494a488c, 0xb9b6a80c, 0x5c8f82bc, 0x89d36b45,
  0x3a609437, 0xec00c9a9, 0x44715253, 0x0a874b49,
  0xd773bc40, 0x7c34671c, 0x02717ef6, 0x4feb5536,
  0xa2d02fff, 0xd2bf60c4, 0xd43f03c0, 0x50b4ef6d,
  0x07478cd1, 0x006e1888, 0xa2e53f55, 0xb9e6d4bc,
  0xa2048016, 0x97573833, 0xd7207d67, 0xde0f8f3d,
  0x72f87b33, 0xabcc4f33, 0x7688c55d, 0x7b00a6b0,
  0x947b0001, 0x570075d2, 0xf9bb88f8, 0x8942019e,
  0x4264a5ff, 0x856302e0, 0x72dbd92b, 0xee971b69,
  0x6ea22fde, 0x5f08ae2b, 0xaf7a616d, 0xe5c98767,
  0xcf1febd2, 0x61efc8c2, 0xf1ac2571, 0xcc8239c2,
  0x67214cb8, 0xb1e583d1, 0xb7dc3e62, 0x7f10bdce,
  0xf90a5c38, 0x0ff0443d, 0x606e6dc6, 0x60543a49,
  0x5727c148, 0x2be98a1d, 0x8ab41738, 0x20e1be24,
  0xaf96da0f, 0x68458425, 0x99833be5, 0x600d457d,
  0x282f9350, 0x8334b362, 0xd91d1120, 0x2b6d8da0,
  0x642b1e31, 0x9c305a00, 0x52bce688, 0x1b03588a,
  0xf7baefd5, 0x4142ed9c, 0xa4315c11, 0x83323ec5,
  0xdfef4636, 0xa133c501, 0xe9d3531c, 0xee353783
],
[
  0x9db30420, 0x1fb6e9de, 0xa7be7bef, 0xd273a298,
  0x4a4f7bdb, 0x64ad8c57, 0x85510443, 0xfa020ed1,
  0x7e287aff, 0xe60fb663, 0x095f35a1, 0x79ebf120,
  0xfd059d43, 0x6497b7b1, 0xf3641f63, 0x241e4adf,
  0x28147f5f, 0x4fa2b8cd, 0xc9430040, 0x0cc32220,
  0xfdd30b30, 0xc0a5374f, 0x1d2d00d9, 0x24147b15,
  0xee4d111a, 0x0fca5167, 0x71ff904c, 0x2d195ffe,
  0x1a05645f, 0x0c13fefe, 0x081b08ca, 0x05170121,
  0x80530100, 0xe83e5efe, 0xac9af4f8, 0x7fe72701,
  0xd2b8ee5f, 0x06df4261, 0xbb9e9b8a, 0x7293ea25,
  0xce84ffdf, 0xf5718801, 0x3dd64b04, 0xa26f263b,
  0x7ed48400, 0x547eebe6, 0x446d4ca0, 0x6cf3d6f5,
  0x2649abdf, 0xaea0c7f5, 0x36338cc1, 0x503f7e93,
  0xd3772061, 0x11b638e1, 0x72500e03, 0xf80eb2bb,
  0xabe0502e, 0xec8d77de, 0x57971e81, 0xe14f6746,
  0xc9335400, 0x6920318f, 0x081dbb99, 0xffc304a5,
  0x4d351805, 0x7f3d5ce3, 0xa6c866c6, 0x5d5bcca9,
  0xdaec6fea, 0x9f926f91, 0x9f46222f, 0x3991467d,
  0xa5bf6d8e, 0x1143c44f, 0x43958302, 0xd0214eeb,
  0x022083b8, 0x3fb6180c, 0x18f8931e, 0x281658e6,
  0x26486e3e, 0x8bd78a70, 0x7477e4c1, 0xb506e07c,
  0xf32d0a25, 0x79098b02, 0xe4eabb81, 0x28123b23,
  0x69dead38, 0x1574ca16, 0xdf871b62, 0x211c40b7,
  0xa51a9ef9, 0x0014377b, 0x041e8ac8, 0x09114003,
  0xbd59e4d2, 0xe3d156d5, 0x4fe876d5, 0x2f91a340,
  0x557be8de, 0x00eae4a7, 0x0ce5c2ec, 0x4db4bba6,
  0xe756bdff, 0xdd3369ac, 0xec17b035, 0x06572327,
  0x99afc8b0, 0x56c8c391, 0x6b65811c, 0x5e146119,
  0x6e85cb75, 0xbe07c002, 0xc2325577, 0x893ff4ec,
  0x5bbfc92d, 0xd0ec3b25, 0xb7801ab7, 0x8d6d3b24,
  0x20c763ef, 0xc366a5fc, 0x9c382880, 0x0ace3205,
  0xaac9548a, 0xeca1d7c7, 0x041afa32, 0x1d16625a,
  0x6701902c, 0x9b757a54, 0x31d477f7, 0x9126b031,
  0x36cc6fdb, 0xc70b8b46, 0xd9e66a48, 0x56e55a79,
  0x026a4ceb, 0x52437eff, 0x2f8f76b4, 0x0df980a5,
  0x8674cde3, 0xedda04eb, 0x17a9be04, 0x2c18f4df,
  0xb7747f9d, 0xab2af7b4, 0xefc34d20, 0x2e096b7c,
  0x1741a254, 0xe5b6a035, 0x213d42f6, 0x2c1c7c26,
  0x61c2f50f, 0x6552daf9, 0xd2c231f8, 0x25130f69,
  0xd8167fa2, 0x0418f2c8, 0x001a96a6, 0x0d1526ab,
  0x63315c21, 0x5e0a72ec, 0x49bafefd, 0x187908d9,
  0x8d0dbd86, 0x311170a7, 0x3e9b640c, 0xcc3e10d7,
  0xd5cad3b6, 0x0caec388, 0xf73001e1, 0x6c728aff,
  0x71eae2a1, 0x1f9af36e, 0xcfcbd12f, 0xc1de8417,
  0xac07be6b, 0xcb44a1d8, 0x8b9b0f56, 0x013988c3,
  0xb1c52fca, 0xb4be31cd, 0xd8782806, 0x12a3a4e2,
  0x6f7de532, 0x58fd7eb6, 0xd01ee900, 0x24adffc2,
  0xf4990fc5, 0x9711aac5, 0x001d7b95, 0x82e5e7d2,
  0x109873f6, 0x00613096, 0xc32d9521, 0xada121ff,
  0x29908415, 0x7fbb977f, 0xaf9eb3db, 0x29c9ed2a,
  0x5ce2a465, 0xa730f32c, 0xd0aa3fe8, 0x8a5cc091,
  0xd49e2ce7, 0x0ce454a9, 0xd60acd86, 0x015f1919,
  0x77079103, 0xdea03af6, 0x78a8565e, 0xdee356df,
  0x21f05cbe, 0x8b75e387, 0xb3c50651, 0xb8a5c3ef,
  0xd8eeb6d2, 0xe523be77, 0xc2154529, 0x2f69efdf,
  0xafe67afb, 0xf470c4b2, 0xf3e0eb5b, 0xd6cc9876,
  0x39e4460c, 0x1fda8538, 0x1987832f, 0xca007367,
  0xa99144f8, 0x296b299e, 0x492fc295, 0x9266beab,
  0xb5676e69, 0x9bd3ddda, 0xdf7e052f, 0xdb25701c,
  0x1b5e51ee, 0xf65324e6, 0x6afce36c, 0x0316cc04,
  0x8644213e, 0xb7dc59d0, 0x7965291f, 0xccd6fd43,
  0x41823979, 0x932bcdf6, 0xb657c34d, 0x4edfd282,
  0x7ae5290c, 0x3cb9536b, 0x851e20fe, 0x9833557e,
  0x13ecf0b0, 0xd3ffb372, 0x3f85c5c1, 0x0aef7ed2
],
[
  0x7ec90c04, 0x2c6e74b9, 0x9b0e66df, 0xa6337911,
  0xb86a7fff, 0x1dd358f5, 0x44dd9d44, 0x1731167f,
  0x08fbf1fa, 0xe7f511cc, 0xd2051b00, 0x735aba00,
  0x2ab722d8, 0x386381cb, 0xacf6243a, 0x69befd7a,
  0xe6a2e77f, 0xf0c720cd, 0xc4494816, 0xccf5c180,
  0x38851640, 0x15b0a848, 0xe68b18cb, 0x4caadeff,
  0x5f480a01, 0x0412b2aa, 0x259814fc, 0x41d0efe2,
  0x4e40b48d, 0x248eb6fb, 0x8dba1cfe, 0x41a99b02,
  0x1a550a04, 0xba8f65cb, 0x7251f4e7, 0x95a51725,
  0xc106ecd7, 0x97a5980a, 0xc539b9aa, 0x4d79fe6a,
  0xf2f3f763, 0x68af8040, 0xed0c9e56, 0x11b4958b,
  0xe1eb5a88, 0x8709e6b0, 0xd7e07156, 0x4e29fea7,
  0x6366e52d, 0x02d1c000, 0xc4ac8e05, 0x9377f571,
  0x0c05372a, 0x578535f2, 0x2261be02, 0xd642a0c9,
  0xdf13a280, 0x74b55bd2, 0x682199c0, 0xd421e5ec,
  0x53fb3ce8, 0xc8adedb3, 0x28a87fc9, 0x3d959981,
  0x5c1ff900, 0xfe38d399, 0x0c4eff0b, 0x062407ea,
  0xaa2f4fb1, 0x4fb96976, 0x90c79505, 0xb0a8a774,
  0xef55a1ff, 0xe59ca2c2, 0xa6b62d27, 0xe66a4263,
  0xdf65001f, 0x0ec50966, 0xdfdd55bc, 0x29de0655,
  0x911e739a, 0x17af8975, 0x32c7911c, 0x89f89468,
  0x0d01e980, 0x524755f4, 0x03b63cc9, 0x0cc844b2,
  0xbcf3f0aa, 0x87ac36e9, 0xe53a7426, 0x01b3d82b,
  0x1a9e7449, 0x64ee2d7e, 0xcddbb1da, 0x01c94910,
  0xb868bf80, 0x0d26f3fd, 0x9342ede7, 0x04a5c284,
  0x636737b6, 0x50f5b616, 0xf24766e3, 0x8eca36c1,
  0x136e05db, 0xfef18391, 0xfb887a37, 0xd6e7f7d4,
  0xc7fb7dc9, 0x3063fcdf, 0xb6f589de, 0xec2941da,
  0x26e46695, 0xb7566419, 0xf654efc5, 0xd08d58b7,
  0x48925401, 0xc1bacb7f, 0xe5ff550f, 0xb6083049,
  0x5bb5d0e8, 0x87d72e5a, 0xab6a6ee1, 0x223a66ce,
  0xc62bf3cd, 0x9e0885f9, 0x68cb3e47, 0x086c010f,
  0xa21de820, 0xd18b69de, 0xf3f65777, 0xfa02c3f6,
  0x407edac3, 0xcbb3d550, 0x1793084d, 0xb0d70eba,
  0x0ab378d5, 0xd951fb0c, 0xded7da56, 0x4124bbe4,
  0x94ca0b56, 0x0f5755d1, 0xe0e1e56e, 0x6184b5be,
  0x580a249f, 0x94f74bc0, 0xe327888e, 0x9f7b5561,
  0xc3dc0280, 0x05687715, 0x646c6bd7, 0x44904db3,
  0x66b4f0a3, 0xc0f1648a, 0x697ed5af, 0x49e92ff6,
  0x309e374f, 0x2cb6356a, 0x85808573, 0x4991f840,
  0x76f0ae02, 0x083be84d, 0x28421c9a, 0x44489406,
  0x736e4cb8, 0xc1092910, 0x8bc95fc6, 0x7d869cf4,
  0x134f616f, 0x2e77118d, 0xb31b2be1, 0xaa90b472,
  0x3ca5d717, 0x7d161bba, 0x9cad9010, 0xaf462ba2,
  0x9fe459d2, 0x45d34559, 0xd9f2da13, 0xdbc65487,
  0xf3e4f94e, 0x176d486f, 0x097c13ea, 0x631da5c7,
  0x445f7382, 0x175683f4, 0xcdc66a97, 0x70be0288,
  0xb3cdcf72, 0x6e5dd2f3, 0x20936079, 0x459b80a5,
  0xbe60e2db, 0xa9c23101, 0xeba5315c, 0x224e42f2,
  0x1c5c1572, 0xf6721b2c, 0x1ad2fff3, 0x8c25404e,
  0x324ed72f, 0x4067b7fd, 0x0523138e, 0x5ca3bc78,
  0xdc0fd66e, 0x75922283, 0x784d6b17, 0x58ebb16e,
  0x44094f85, 0x3f481d87, 0xfcfeae7b, 0x77b5ff76,
  0x8c2302bf, 0xaaf47556, 0x5f46b02a, 0x2b092801,
  0x3d38f5f7, 0x0ca81f36, 0x52af4a8a, 0x66d5e7c0,
  0xdf3b0874, 0x95055110, 0x1b5ad7a8, 0xf61ed5ad,
  0x6cf6e479, 0x20758184, 0xd0cefa65, 0x88f7be58,
  0x4a046826, 0x0ff6f8f3, 0xa09c7f70, 0x5346aba0,
  0x5ce96c28, 0xe176eda3, 0x6bac307f, 0x376829d2,
  0x85360fa9, 0x17e3fe2a, 0x24b79767, 0xf5a96b20,
  0xd6cd2595, 0x68ff1ebf, 0x7555442c, 0xf19f06be,
  0xf9e0659a, 0xeeb9491d, 0x34010718, 0xbb30cab8,
  0xe822fe15, 0x88570983, 0x750e6249, 0xda627e55,
  0x5e76ffa8, 0xb1534546, 0x6d47de08, 0xefe9e7d4
],
[
  0xf6fa8f9d, 0x2cac6ce1, 0x4ca34867, 0xe2337f7c,
  0x95db08e7, 0x016843b4, 0xeced5cbc, 0x325553ac,
  0xbf9f0960, 0xdfa1e2ed, 0x83f0579d, 0x63ed86b9,
  0x1ab6a6b8, 0xde5ebe39, 0xf38ff732, 0x8989b138,
  0x33f14961, 0xc01937bd, 0xf506c6da, 0xe4625e7e,
  0xa308ea99, 0x4e23e33c, 0x79cbd7cc, 0x48a14367,
  0xa3149619, 0xfec94bd5, 0xa114174a, 0xeaa01866,
  0xa084db2d, 0x09a8486f, 0xa888614a, 0x2900af98,
  0x01665991, 0xe1992863, 0xc8f30c60, 0x2e78ef3c,
  0xd0d51932, 0xcf0fec14, 0xf7ca07d2, 0xd0a82072,
  0xfd41197e, 0x9305a6b0, 0xe86be3da, 0x74bed3cd,
  0x372da53c, 0x4c7f4448, 0xdab5d440, 0x6dba0ec3,
  0x083919a7, 0x9fbaeed9, 0x49dbcfb0, 0x4e670c53,
  0x5c3d9c01, 0x64bdb941, 0x2c0e636a, 0xba7dd9cd,
  0xea6f7388, 0xe70bc762, 0x35f29adb, 0x5c4cdd8d,
  0xf0d48d8c, 0xb88153e2, 0x08a19866, 0x1ae2eac8,
  0x284caf89, 0xaa928223, 0x9334be53, 0x3b3a21bf,
  0x16434be3, 0x9aea3906, 0xefe8c36e, 0xf890cdd9,
  0x80226dae, 0xc340a4a3, 0xdf7e9c09, 0xa694a807,
  0x5b7c5ecc, 0x221db3a6, 0x9a69a02f, 0x68818a54,
  0xceb2296f, 0x53c0843a, 0xfe893655, 0x25bfe68a,
  0xb4628abc, 0xcf222ebf, 0x25ac6f48, 0xa9a99387,
  0x53bddb65, 0xe76ffbe7, 0xe967fd78, 0x0ba93563,
  0x8e342bc1, 0xe8a11be9, 0x4980740d, 0xc8087dfc,
  0x8de4bf99, 0xa11101a0, 0x7fd37975, 0xda5a26c0,
  0xe81f994f, 0x9528cd89, 0xfd339fed, 0xb87834bf,
  0x5f04456d, 0x22258698, 0xc9c4c83b, 0x2dc156be,
  0x4f628daa, 0x57f55ec5, 0xe2220abe, 0xd2916ebf,
  0x4ec75b95, 0x24f2c3c0, 0x42d15d99, 0xcd0d7fa0,
  0x7b6e27ff, 0xa8dc8af0, 0x7345c106, 0xf41e232f,
  0x35162386, 0xe6ea8926, 0x3333b094, 0x157ec6f2,
  0x372b74af, 0x692573e4, 0xe9a9d848, 0xf3160289,
  0x3a62ef1d, 0xa787e238, 0xf3a5f676, 0x74364853,
  0x20951063, 0x4576698d, 0xb6fad407, 0x592af950,
  0x36f73523, 0x4cfb6e87, 0x7da4cec0, 0x6c152daa,
  0xcb0396a8, 0xc50dfe5d, 0xfcd707ab, 0x0921c42f,
  0x89dff0bb, 0x5fe2be78, 0x448f4f33, 0x754613c9,
  0x2b05d08d, 0x48b9d585, 0xdc049441, 0xc8098f9b,
  0x7dede786, 0xc39a3373, 0x42410005, 0x6a091751,
  0x0ef3c8a6, 0x890072d6, 0x28207682, 0xa9a9f7be,
  0xbf32679d, 0xd45b5b75, 0xb353fd00, 0xcbb0e358,
  0x830f220a, 0x1f8fb214, 0xd372cf08, 0xcc3c4a13,
  0x8cf63166, 0x061c87be, 0x88c98f88, 0x6062e397,
  0x47cf8e7a, 0xb6c85283, 0x3cc2acfb, 0x3fc06976,
  0x4e8f0252, 0x64d8314d, 0xda3870e3, 0x1e665459,
  0xc10908f0, 0x513021a5, 0x6c5b68b7, 0x822f8aa0,
  0x3007cd3e, 0x74719eef, 0xdc872681, 0x073340d4,
  0x7e432fd9, 0x0c5ec241, 0x8809286c, 0xf592d891,
  0x08a930f6, 0x957ef305, 0xb7fbffbd, 0xc266e96f,
  0x6fe4ac98, 0xb173ecc0, 0xbc60b42a, 0x953498da,
  0xfba1ae12, 0x2d4bd736, 0x0f25faab, 0xa4f3fceb,
  0xe2969123, 0x257f0c3d, 0x9348af49, 0x361400bc,
  0xe8816f4a, 0x3814f200, 0xa3f94043, 0x9c7a54c2,
  0xbc704f57, 0xda41e7f9, 0xc25ad33a, 0x54f4a084,
  0xb17f5505, 0x59357cbe, 0xedbd15c8, 0x7f97c5ab,
  0xba5ac7b5, 0xb6f6deaf, 0x3a479c3a, 0x5302da25,
  0x653d7e6a, 0x54268d49, 0x51a477ea, 0x5017d55b,
  0xd7d25d88, 0x44136c76, 0x0404a8c8, 0xb8e5a121,
  0xb81a928a, 0x60ed5869, 0x97c55b96, 0xeaec991b,
  0x29935913, 0x01fdb7f1, 0x088e8dfa, 0x9ab6f6f5,
  0x3b4cbf9f, 0x4a5de3ab, 0xe6051d35, 0xa0e1d855,
  0xd36b4cf1, 0xf544edeb, 0xb0e93524, 0xbebb8fbd,
  0xa2d762cf, 0x49c92f54, 0x38b5f331, 0x7128a454,
  0x48392905, 0xa65b1db8, 0x851c97bd, 0xd675cf2f
],
[
  0x85e04019, 0x332bf567, 0x662dbfff, 0xcfc65693,
  0x2a8d7f6f, 0xab9bc912, 0xde6008a1, 0x2028da1f,
  0x0227bce7, 0x4d642916, 0x18fac300, 0x50f18b82,
  0x2cb2cb11, 0xb232e75c, 0x4b3695f2, 0xb28707de,
  0xa05fbcf6, 0xcd4181e9, 0xe150210c, 0xe24ef1bd,
  0xb168c381, 0xfde4e789, 0x5c79b0d8, 0x1e8bfd43,
  0x4d495001, 0x38be4341, 0x913cee1d, 0x92a79c3f,
  0x089766be, 0xbaeeadf4, 0x1286becf, 0xb6eacb19,
  0x2660c200, 0x7565bde4, 0x64241f7a, 0x8248dca9,
  0xc3b3ad66, 0x28136086, 0x0bd8dfa8, 0x356d1cf2,
  0x107789be, 0xb3b2e9ce, 0x0502aa8f, 0x0bc0351e,
  0x166bf52a, 0xeb12ff82, 0xe3486911, 0xd34d7516,
  0x4e7b3aff, 0x5f43671b, 0x9cf6e037, 0x4981ac83,
  0x334266ce, 0x8c9341b7, 0xd0d854c0, 0xcb3a6c88,
  0x47bc2829, 0x4725ba37, 0xa66ad22b, 0x7ad61f1e,
  0x0c5cbafa, 0x4437f107, 0xb6e79962, 0x42d2d816,
  0x0a961288, 0xe1a5c06e, 0x13749e67, 0x72fc081a,
  0xb1d139f7, 0xf9583745, 0xcf19df58, 0xbec3f756,
  0xc06eba30, 0x07211b24, 0x45c28829, 0xc95e317f,
  0xbc8ec511, 0x38bc46e9, 0xc6e6fa14, 0xbae8584a,
  0xad4ebc46, 0x468f508b, 0x7829435f, 0xf124183b,
  0x821dba9f, 0xaff60ff4, 0xea2c4e6d, 0x16e39264,
  0x92544a8b, 0x009b4fc3, 0xaba68ced, 0x9ac96f78,
  0x06a5b79a, 0xb2856e6e, 0x1aec3ca9, 0xbe838688,
  0x0e0804e9, 0x55f1be56, 0xe7e5363b, 0xb3a1f25d,
  0xf7debb85, 0x61fe033c, 0x16746233, 0x3c034c28,
  0xda6d0c74, 0x79aac56c, 0x3ce4e1ad, 0x51f0c802,
  0x98f8f35a, 0x1626a49f, 0xeed82b29, 0x1d382fe3,
  0x0c4fb99a, 0xbb325778, 0x3ec6d97b, 0x6e77a6a9,
  0xcb658b5c, 0xd45230c7, 0x2bd1408b, 0x60c03eb7,
  0xb9068d78, 0xa33754f4, 0xf430c87d, 0xc8a71302,
  0xb96d8c32, 0xebd4e7be, 0xbe8b9d2d, 0x7979fb06,
  0xe7225308, 0x8b75cf77, 0x11ef8da4, 0xe083c858,
  0x8d6b786f, 0x5a6317a6, 0xfa5cf7a0, 0x5dda0033,
  0xf28ebfb0, 0xf5b9c310, 0xa0eac280, 0x08b9767a,
  0xa3d9d2b0, 0x79d34217, 0x021a718d, 0x9ac6336a,
  0x2711fd60, 0x438050e3, 0x069908a8, 0x3d7fedc4,
  0x826d2bef, 0x4eeb8476, 0x488dcf25, 0x36c9d566,
  0x28e74e41, 0xc2610aca, 0x3d49a9cf, 0xbae3b9df,
  0xb65f8de6, 0x92aeaf64, 0x3ac7d5e6, 0x9ea80509,
  0xf22b017d, 0xa4173f70, 0xdd1e16c3, 0x15e0d7f9,
  0x50b1b887, 0x2b9f4fd5, 0x625aba82, 0x6a017962,
  0x2ec01b9c, 0x15488aa9, 0xd716e740, 0x40055a2c,
  0x93d29a22, 0xe32dbf9a, 0x058745b9, 0x3453dc1e,
  0xd699296e, 0x496cff6f, 0x1c9f4986, 0xdfe2ed07,
  0xb87242d1, 0x19de7eae, 0x053e561a, 0x15ad6f8c,
  0x66626c1c, 0x7154c24c, 0xea082b2a, 0x93eb2939,
  0x17dcb0f0, 0x58d4f2ae, 0x9ea294fb, 0x52cf564c,
  0x9883fe66, 0x2ec40581, 0x763953c3, 0x01d6692e,
  0xd3a0c108, 0xa1e7160e, 0xe4f2dfa6, 0x693ed285,
  0x74904698, 0x4c2b0edd, 0x4f757656, 0x5d393378,
  0xa132234f, 0x3d321c5d, 0xc3f5e194, 0x4b269301,
  0xc79f022f, 0x3c997e7e, 0x5e4f9504, 0x3ffafbbd,
  0x76f7ad0e, 0x296693f4, 0x3d1fce6f, 0xc61e45be,
  0xd3b5ab34, 0xf72bf9b7, 0x1b0434c0, 0x4e72b567,
  0x5592a33d, 0xb5229301, 0xcfd2a87f, 0x60aeb767,
  0x1814386b, 0x30bcc33d, 0x38a0c07d, 0xfd1606f2,
  0xc363519b, 0x589dd390, 0x5479f8e6, 0x1cb8d647,
  0x97fd61a9, 0xea7759f4, 0x2d57539d, 0x569a58cf,
  0xe84e63ad, 0x462e1b78, 0x6580f87e, 0xf3817914,
  0x91da55f4, 0x40a230f3, 0xd1988f35, 0xb6e318d2,
  0x3ffa50bc, 0x3d40f021, 0xc3c0bdae, 0x4958c24c,
  0x518f36b2, 0x84b1d370, 0x0fedce83, 0x878ddada,
  0xf2a279c7, 0x94e01be8, 0x90716f4b, 0x954b8aa3
],
[
  0xe216300d, 0xbbddfffc, 0xa7ebdabd, 0x35648095,
  0x7789f8b7, 0xe6c1121b, 0x0e241600, 0x052ce8b5,
  0x11a9cfb0, 0xe5952f11, 0xece7990a, 0x9386d174,
  0x2a42931c, 0x76e38111, 0xb12def3a, 0x37ddddfc,
  0xde9adeb1, 0x0a0cc32c, 0xbe197029, 0x84a00940,
  0xbb243a0f, 0xb4d137cf, 0xb44e79f0, 0x049eedfd,
  0x0b15a15d, 0x480d3168, 0x8bbbde5a, 0x669ded42,
  0xc7ece831, 0x3f8f95e7, 0x72df191b, 0x7580330d,
  0x94074251, 0x5c7dcdfa, 0xabbe6d63, 0xaa402164,
  0xb301d40a, 0x02e7d1ca, 0x53571dae, 0x7a3182a2,
  0x12a8ddec, 0xfdaa335d, 0x176f43e8, 0x71fb46d4,
  0x38129022, 0xce949ad4, 0xb84769ad, 0x965bd862,
  0x82f3d055, 0x66fb9767, 0x15b80b4e, 0x1d5b47a0,
  0x4cfde06f, 0xc28ec4b8, 0x57e8726e, 0x647a78fc,
  0x99865d44, 0x608bd593, 0x6c200e03, 0x39dc5ff6,
  0x5d0b00a3, 0xae63aff2, 0x7e8bd632, 0x70108c0c,
  0xbbd35049, 0x2998df04, 0x980cf42a, 0x9b6df491,
  0x9e7edd53, 0x06918548, 0x58cb7e07, 0x3b74ef2e,
  0x522fffb1, 0xd24708cc, 0x1c7e27cd, 0xa4eb215b,
  0x3cf1d2e2, 0x19b47a38, 0x424f7618, 0x35856039,
  0x9d17dee7, 0x27eb35e6, 0xc9aff67b, 0x36baf5b8,
  0x09c467cd, 0xc18910b1, 0xe11dbf7b, 0x06cd1af8,
  0x7170c608, 0x2d5e3354, 0xd4de495a, 0x64c6d006,
  0xbcc0c62c, 0x3dd00db3, 0x708f8f34, 0x77d51b42,
  0x264f620f, 0x24b8d2bf, 0x15c1b79e, 0x46a52564,
  0xf8d7e54e, 0x3e378160, 0x7895cda5, 0x859c15a5,
  0xe6459788, 0xc37bc75f, 0xdb07ba0c, 0x0676a3ab,
  0x7f229b1e, 0x31842e7b, 0x24259fd7, 0xf8bef472,
  0x835ffcb8, 0x6df4c1f2, 0x96f5b195, 0xfd0af0fc,
  0xb0fe134c, 0xe2506d3d, 0x4f9b12ea, 0xf215f225,
  0xa223736f, 0x9fb4c428, 0x25d04979, 0x34c713f8,
  0xc4618187, 0xea7a6e98, 0x7cd16efc, 0x1436876c,
  0xf1544107, 0xbedeee14, 0x56e9af27, 0xa04aa441,
  0x3cf7c899, 0x92ecbae6, 0xdd67016d, 0x151682eb,
  0xa842eedf, 0xfdba60b4, 0xf1907b75, 0x20e3030f,
  0x24d8c29e, 0xe139673b, 0xefa63fb8, 0x71873054,
  0xb6f2cf3b, 0x9f326442, 0xcb15a4cc, 0xb01a4504,
  0xf1e47d8d, 0x844a1be5, 0xbae7dfdc, 0x42cbda70,
  0xcd7dae0a, 0x57e85b7a, 0xd53f5af6, 0x20cf4d8c,
  0xcea4d428, 0x79d130a4, 0x3486ebfb, 0x33d3cddc,
  0x77853b53, 0x37effcb5, 0xc5068778, 0xe580b3e6,
  0x4e68b8f4, 0xc5c8b37e, 0x0d809ea2, 0x398feb7c,
  0x132a4f94, 0x43b7950e, 0x2fee7d1c, 0x223613bd,
  0xdd06caa2, 0x37df932b, 0xc4248289, 0xacf3ebc3,
  0x5715f6b7, 0xef3478dd, 0xf267616f, 0xc148cbe4,
  0x9052815e, 0x5e410fab, 0xb48a2465, 0x2eda7fa4,
  0xe87b40e4, 0xe98ea084, 0x5889e9e1, 0xefd390fc,
  0xdd07d35b, 0xdb485694, 0x38d7e5b2, 0x57720101,
  0x730edebc, 0x5b643113, 0x94917e4f, 0x503c2fba,
  0x646f1282, 0x7523d24a, 0xe0779695, 0xf9c17a8f,
  0x7a5b2121, 0xd187b896, 0x29263a4d, 0xba510cdf,
  0x81f47c9f, 0xad1163ed, 0xea7b5965, 0x1a00726e,
  0x11403092, 0x00da6d77, 0x4a0cdd61, 0xad1f4603,
  0x605bdfb0, 0x9eedc364, 0x22ebe6a8, 0xcee7d28a,
  0xa0e736a0, 0x5564a6b9, 0x10853209, 0xc7eb8f37,
  0x2de705ca, 0x8951570f, 0xdf09822b, 0xbd691a6c,
  0xaa12e4f2, 0x87451c0f, 0xe0f6a27a, 0x3ada4819,
  0x4cf1764f, 0x0d771c2b, 0x67cdb156, 0x350d8384,
  0x5938fa0f, 0x42399ef3, 0x36997b07, 0x0e84093d,
  0x4aa93e61, 0x8360d87b, 0x1fa98b0c, 0x1149382c,
  0xe97625a5, 0x0614d1b7, 0x0e25244b, 0x0c768347,
  0x589e8d82, 0x0d2059d1, 0xa466bb1e, 0xf8da0a82,
  0x04f19130, 0xba6e4ec0, 0x99265164, 0x1ee7230d,
  0x50b2ad80, 0xeaee6801, 0x8db2a283, 0xea8bf59e
]
];


e2e.cipher.factory.add(e2e.cipher.Cast5,
                               e2e.cipher.Algorithm.CAST5);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Representation of ElGamal. This should only be used with a
 * wrapping function such as PKCS v1.5 EME.
 */

goog.provide('e2e.cipher.ElGamal');

goog.require('e2e');
goog.require('e2e.AlgorithmImpl');
goog.require('e2e.BigNum');
goog.require('e2e.BigPrimeNum');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.AsymmetricCipher');
goog.require('e2e.cipher.factory');
goog.require('e2e.random');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * Representation of an ElGamal public key as specified by RFC 4880.
 * @param {!e2e.cipher.Algorithm} algorithm The algorithm to retrieve.
 * @param {e2e.cipher.key.Key=} opt_key The public or private key.
 * @constructor
 * @implements {e2e.cipher.AsymmetricCipher}
 * @extends {e2e.AlgorithmImpl}
 */
e2e.cipher.ElGamal = function(algorithm, opt_key) {
  goog.base(this, e2e.cipher.Algorithm.ELGAMAL, opt_key);
};
goog.inherits(e2e.cipher.ElGamal, e2e.AlgorithmImpl);


/**
 * @type {?e2e.BigPrimeNum}
 */
e2e.cipher.ElGamal.prototype.modulus;


/** @inheritDoc */
e2e.cipher.ElGamal.prototype.setKey = function(key) {
  goog.asserts.assertArray(key['p'], 'Modulus should be defined.');
  this.modulus = new e2e.BigPrimeNum(key['p']);
  goog.base(this, 'setKey', key, Math.ceil(this.modulus.getBitLength() / 8));
};


/** @inheritDoc */
e2e.cipher.ElGamal.prototype.encrypt = function(plaintext) {
  goog.asserts.assertArray(this.key['y'],
      'Public key value should be defined.');
  goog.asserts.assertArray(this.key['g'],
      'Generator should be defined.');
  goog.asserts.assert(
      this.modulus.compare(new e2e.BigNum(plaintext)) > 0,
      'The plaintext value should be less than the modulus.');
  /** @type {!e2e.cipher.ciphertext.Elgamal} */
  var ciphertext = {'u': [], 'v': []};
  var oneTimeKeyLength = this.key['p'].length;
  do {
    var k = e2e.random.getRandomBytes(oneTimeKeyLength);
    ciphertext['u'] = this.modulus.pow(this.key['g'], k);
  } while (e2e.compareByteArray(ciphertext['u'], [1]));
  ciphertext['v'] = this.modulus.mul(plaintext,
      this.modulus.pow(this.key['y'], k));
  goog.array.forEach(k, function(v, i) {
    // Clear memory.
    k[i] = Math.random();
  });
  return e2e.async.Result.toResult(ciphertext);
};


/** @inheritDoc */
e2e.cipher.ElGamal.prototype.decrypt = function(ciphertext) {
  goog.asserts.assertArray(this.key['x'],
      'Private key value should be defined.');
  goog.asserts.assertArray(ciphertext['v'],
      'ElGamal v value should be defined.');
  goog.asserts.assertArray(ciphertext['u'],
      'ElGamal u value should be defined.');
  var v = ciphertext['v'];  // v == c2 == m * y**k mod p
  var u = ciphertext['u'];  // u == c1 == g**k mod p
  var result = this.modulus.mul(
      v, this.modulus.pow(
          u, this.modulus.negateExponent(this.key['x'])));
  return e2e.async.Result.toResult(result);
};


e2e.cipher.factory.add(e2e.cipher.ElGamal, e2e.cipher.Algorithm.ELGAMAL);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview An implementation of the one-pass ECDH key exchange protocol,
 *     which is the ECC version of HAC 12.51.
 *     In this protocol, Alice knows Bob's public key B and she wants to derive
 *     a shared secret with him. She generates an ephemeral private key a,
 *     computes the ephemeral public key A = aG (G is the base point of the
 *     curve), and derives the shared secret S = aB. She then sends A to Bob,
 *     who shall derive the shared secret with his private key b by computing
 *     S = bA = baG = aB.
 *     Note: the actual shared secret is the x-coordinate of S.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.ecc.Ecdh');

goog.require('e2e.ecc.Protocol');
goog.require('goog.asserts');



/**
 * Representation of an instance of the one-pass ECDH key agreement protocol,
 *     which is the ECC version of HAC 12.51.
 *     In this protocol, Alice knows Bob's public key B and she wants to derive
 *     a shared secret with him. She generates an ephemeral private key a,
 *     computes the ephemeral public key A = aG (G is the base point of the
 *     curve), and derives the shared secret S = aB. She then sends A to Bob,
 *     who shall derive the shared secret with his private key b by computing
 *     S = bA = baG = aB.
 *     Note: the actual shared secret is the x-coordinate of S.
 * @param {!e2e.ecc.PrimeCurve} curve The curve used for this protocol.
 * @param {{pubKey: !e2e.ByteArray, privKey: (!e2e.ByteArray|undefined)}=}
 *     opt_key The public and/or private key used in this protocol.
 * @constructor
 * @extends {e2e.ecc.Protocol}
 */
e2e.ecc.Ecdh = function(curve, opt_key) {
  e2e.ecc.Ecdh.base(this, 'constructor', curve, opt_key);
};
goog.inherits(e2e.ecc.Ecdh, e2e.ecc.Protocol);


/**
 * Acts as Alice in the one-pass ECDH protocol. Alice knows Bob's public key B
 *     and she wants to derive a shared secret with him. She generates an
 *     ephemeral private key a, computes the ephemeral public key A = aG (G is
 *     the base point of the curve), and derives the shared secret S = aB.
 *     The public key used here should belong to Bob. The returned message
 *     consists of Alice's ephemeral public key and the shared key, which is
 *     the x-coordinate of the shared secret value.
 * @param {!e2e.ByteArray=} opt_bobPubKey Bob's public key.
 * @return {{secret: !e2e.ByteArray,
 *           pubKey: !e2e.ByteArray}}
 */
e2e.ecc.Ecdh.prototype.alice = function(opt_bobPubKey) {
  goog.asserts.assertObject(this.params, 'Domain params should be defined.');
  var publicKey;
  if (goog.isDefAndNotNull(opt_bobPubKey)) {
    publicKey = this.params.curve.pointFromByteArray(opt_bobPubKey);
  } else {
    publicKey = this.getPublicKeyAsPoint();
  }
  goog.asserts.assertObject(publicKey, 'Public key should be defined.');
  // The per-message secret is also the ephemeral private key in ECDH.
  var ephemeralKeyPair = this.params.generateKeyPair();
  var ephemeralPrivateBigNum = ephemeralKeyPair['privateKeyBigNum'];
  var ephemeralPublicKey = ephemeralKeyPair['publicKey'];
  return {
    'secret': this.params.calculateSharedSecret(publicKey,
                                                ephemeralPrivateBigNum),
    'pubKey': ephemeralPublicKey
  };
};


/**
 * Acts as Bob in the one-pass ECDH protocol. Bob receives Alice's empheral
 *     public key from which he derives the shared secret using his private key
 *     b by computing S = bA = baG = aB.
 *     The public key used here is Alice's ephemeral public key. The private
 *     key should belong to Bob. The returned message is the shared key, which
 *     is the x-coordinate of the shared secret value.
 * @param {!e2e.ByteArray} alicePubKey Alice's ephemeral public key,
 *     which is sent by Alice to Bob as part of the protocol.
 * @param {!e2e.ByteArray=} opt_bobPrivKey Bob's private key.
 * @return {{secret: !e2e.ByteArray}}
 */
e2e.ecc.Ecdh.prototype.bob = function(alicePubKey, opt_bobPrivKey) {
  goog.asserts.assertObject(this.params, 'Domain params should be defined.');

  var privateKeyBytes = opt_bobPrivKey || this.getPrivateKey();
  var privateKey = this.params.bigNumFromPrivateKey(privateKeyBytes);
  goog.asserts.assertObject(privateKey, 'Private key should be defined.');
  var publicKey = this.params.curve.pointFromByteArray(alicePubKey);
  return {
    'secret': this.params.calculateSharedSecret(publicKey, privateKey)
  };
};

// Copyright 2006 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implementation of AES in JavaScript.
 * @author aa@google.com (Aaron Boodman)
 */

goog.provide('e2e.cipher.Aes');

goog.require('e2e');
goog.require('e2e.AlgorithmImpl');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.Error');
goog.require('e2e.cipher.SymmetricCipher');
goog.require('e2e.cipher.factory');



/**
 * Basic implementation of AES in pure JavaScript as specified in FIPS 197.
 * The key size has to be 16, 24 or 32 bytes, or it will throw an exception.
 * @see http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
 * @param {e2e.cipher.Algorithm} algorithm The algorithm being
 *     implemented.
 * @param {e2e.cipher.key.Key=} opt_keyObj The key to use.
 * @implements {e2e.cipher.SymmetricCipher}
 * @extends {e2e.AlgorithmImpl}
 * @constructor
 */
e2e.cipher.Aes = function(algorithm, opt_keyObj) {
  switch (algorithm) {
    case e2e.cipher.Algorithm.AES128:
      this.keySize = 16;
      break;
    case e2e.cipher.Algorithm.AES192:
      this.keySize = 24;
      break;
    case e2e.cipher.Algorithm.AES256:
      this.keySize = 32;
      break;
    default:
      throw new e2e.cipher.Error('Invalid algorithm.');
  }
  goog.base(this, algorithm, opt_keyObj);
};
goog.inherits(e2e.cipher.Aes, e2e.AlgorithmImpl);


/** @inheritDoc */
e2e.cipher.Aes.prototype.setKey = function(keyObj) {
  if (!keyObj.key || !e2e.isByteArray(keyObj.key)) {
    throw new e2e.cipher.Error('Invalid values for key.');
  }

  if (keyObj.key.length != this.keySize) {
    throw new e2e.cipher.Error(
        'Wrong key size for Cipher: ' + keyObj.key.length);
  }

  // Superclass setKey sets the key to this.key and keySize.
  goog.base(this, 'setKey', keyObj, keyObj.key.length);

  /**
   * Size of the key (in 4 byte words).
   * @type {number}
   * @private
   */
  this.Nk_ = this.key.key.length / 4;

  /**
   * Cycles of repetition.
   * @type {number}
   * @private
   */
  this.Nr_ = this.Nk_ + 6;

  /**
   * Words per block.
   * TODO(user): This probably should be a constant.
   * @type {number}
   * @private
   */
  this.Nb_ = 4;

  /**
   * The internal state.
   * @type {Array.<number>}
   * @private
   */
  this.state_ = [[], [], [], []];

  /**
   * Used to swap state_ when required.
   * @type {Array.<number>}
   * @private
   */
  this.temp_ = [[], [], [], []];

  this.keyExpansion_();
};


/** @inheritDoc */
e2e.cipher.Aes.prototype.blockSize = 16; // 128 bits.


/** @inheritDoc */
e2e.cipher.Aes.prototype.encrypt = function(data) {
  var output = [];

  this.copyInput_(data, 0);
  this.addRoundKey_(0);

  for (var round = 1; round < this.Nr_; ++round) {
    this.subBytes_(e2e.cipher.Aes.SBOX);
    this.shiftRows_();
    this.mixColumns_();
    this.addRoundKey_(round);
  }

  this.subBytes_(e2e.cipher.Aes.SBOX);
  this.shiftRows_();
  this.addRoundKey_(this.Nr_);
  this.copyOutput_(output, 0);

  return e2e.async.Result.toResult(output);
};


/** @inheritDoc */
e2e.cipher.Aes.prototype.decrypt = function(data) {
  var output = [];

  this.copyInput_(data, 0);
  this.addRoundKey_(this.Nr_);

  for (var round = 1; round < this.Nr_; ++round) {
    this.invShiftRows_();
    this.subBytes_(e2e.cipher.Aes.INV_SBOX);
    this.addRoundKey_(this.Nr_ - round);
    this.invMixColumns_();
  }

  this.invShiftRows_();
  this.subBytes_(e2e.cipher.Aes.INV_SBOX);
  this.addRoundKey_(0);
  this.copyOutput_(output, 0);
  return e2e.async.Result.toResult(output);
};


/**
 * Helper to copy input into the AES state matrix.
 * @param {Array.<number>} input The input to the internal state.
 * @param {number} startAt Offset relative to the input.
 * @private
 */
e2e.cipher.Aes.prototype.copyInput_ = function(input, startAt) {
  var v, p;

  for (var r = 0; r < this.Nb_; r++) {
    for (var c = 0; c < 4; c++) {
      p = c * 4 + r + startAt;
      v = input[p];

      this.state_[r][c] = v;
    }
  }
};


/**
 * Helper to copy the state matrix into the output.
 * @param {Array.<number>} output Array to copy the internal state to.
 * @param {number} startAt The offset where to start writing to output.
 * @private
 */
e2e.cipher.Aes.prototype.copyOutput_ = function(output, startAt) {
  for (var r = 0; r < this.Nb_; r++) {
    for (var c = 0; c < 4; c++) {
      output[c * 4 + r + startAt] = this.state_[r][c];
    }
  }
};


/**
 * AES's AddRoundKey procedure. Add the current round key to the state.
 * As specified in FIPS 197 Section 5.1.2.
 * @param {number} round The round number.
 * @private
 */
e2e.cipher.Aes.prototype.addRoundKey_ = function(round) {
  for (var r = 0; r < 4; r++) {
    for (var c = 0; c < 4; c++) {
      this.state_[r][c] ^= this.w_[round * 4 + c][r];
    }
  }
};


/**
 * AES's SubBytes procedure. Substitute bytes from the precomputed SBox lookup
 * into the state. As specified in FIPS 197 Section 5.1.1.
 * @param {Array.<number>} box The SBOX to use for the substitution.
 * @private
 */
e2e.cipher.Aes.prototype.subBytes_ = function(box) {
  for (var r = 0; r < 4; r++) {
    for (var c = 0; c < 4; c++) {
      this.state_[r][c] = box[this.state_[r][c]];
    }
  }
};


/**
 * AES's ShiftRows procedure. Shift the values in each row to the right. Each
 * row is shifted one more slot than the one above it.
 * As specified in FIPS 197 Section 5.1.2.
 * @private
 */
e2e.cipher.Aes.prototype.shiftRows_ = function() {
  for (var r = 1; r < 4; r++) {
    for (var c = 0; c < 4; c++) {
      this.temp_[r][c] = this.state_[r][c];
    }
  }

  for (var r = 1; r < 4; r++) {
    for (var c = 0; c < 4; c++) {
      this.state_[r][c] = this.temp_[r][(c + r) % this.Nb_];
    }
  }
};


/**
 * AES's InvShiftRows procedure. Shift the values in each row to the right.
 * As specified in FIPS 197 Section 5.3.1.
 * @private
 */
e2e.cipher.Aes.prototype.invShiftRows_ = function() {
  for (var r = 1; r < 4; r++) {
    for (var c = 0; c < 4; c++) {
      this.temp_[r][(c + r) % this.Nb_] = this.state_[r][c];
    }
  }

  for (var r = 1; r < 4; r++) {
    for (var c = 0; c < 4; c++) {
      this.state_[r][c] = this.temp_[r][c];
    }
  }
};


/**
 * AES's Mix Columns operation equivalent to (over GD 2^8):
 * s0 = 2*t[0] + 3*t[1] + 1*t[2] + 1*t[3]
 * s1 = 1*t[0] + 2*t[1] + 3*t[2] + 1*t[3]
 * s2 = 1*t[0] + 1*t[1] + 2*t[2] + 3*t[3]
 * s3 = 3*t[0] + 1*t[1] + 1*t[2] + 2*t[3]
 * As defined in FIPS 197 Section 5.1.3.
 * @private
 */
e2e.cipher.Aes.prototype.mixColumns_ = function() {
  var s = this.state_;
  var t = this.temp_[0];

  for (var c = 0; c < 4; c++) {
    t[0] = s[0][c];
    t[1] = s[1][c];
    t[2] = s[2][c];
    t[3] = s[3][c];

    s[0][c] = (
        e2e.cipher.Aes.MULT_2[t[0]] ^
        e2e.cipher.Aes.MULT_3[t[1]] ^
        t[2] ^
        t[3]);
    s[1][c] = (t[0] ^
               e2e.cipher.Aes.MULT_2[t[1]] ^
               e2e.cipher.Aes.MULT_3[t[2]] ^
               t[3]);
    s[2][c] = (t[0] ^
               t[1] ^
               e2e.cipher.Aes.MULT_2[t[2]] ^
               e2e.cipher.Aes.MULT_3[t[3]]);
    s[3][c] = (e2e.cipher.Aes.MULT_3[t[0]] ^
               t[1] ^
               t[2] ^
               e2e.cipher.Aes.MULT_2[t[3]]);
  }
};


/**
 * Inverse Mix Columns operation equivalent to (over GD 2^8):
 * s0 = 0xE*t[0] + 0x9*t[3] + 0xD*t[2] + 0xB*t[1]
 * s1 = 0xE*t[1] + 0x9*t[0] + 0xD*t[3] + 0xB*t[2]
 * s2 = 0xE*t[2] + 0x9*t[1] + 0xD*t[0] + 0xB*t[3]
 * s3 = 0xE*t[3] + 0x9*t[2] + 0xD*t[1] + 0xB*t[0]
 * As defined in FIPS 197 Section 5.3.3.
 * @private
 */
e2e.cipher.Aes.prototype.invMixColumns_ = function() {
  var s = this.state_;
  var t = this.temp_[0];

  for (var c = 0; c < 4; c++) {
    t[0] = s[0][c];
    t[1] = s[1][c];
    t[2] = s[2][c];
    t[3] = s[3][c];

    s[0][c] = (e2e.cipher.Aes.MULT_E[t[0]] ^
               e2e.cipher.Aes.MULT_B[t[1]] ^
               e2e.cipher.Aes.MULT_D[t[2]] ^
               e2e.cipher.Aes.MULT_9[t[3]]);

    s[1][c] = (e2e.cipher.Aes.MULT_9[t[0]] ^
               e2e.cipher.Aes.MULT_E[t[1]] ^
               e2e.cipher.Aes.MULT_B[t[2]] ^
               e2e.cipher.Aes.MULT_D[t[3]]);

    s[2][c] = (e2e.cipher.Aes.MULT_D[t[0]] ^
               e2e.cipher.Aes.MULT_9[t[1]] ^
               e2e.cipher.Aes.MULT_E[t[2]] ^
               e2e.cipher.Aes.MULT_B[t[3]]);

    s[3][c] = (e2e.cipher.Aes.MULT_B[t[0]] ^
               e2e.cipher.Aes.MULT_D[t[1]] ^
               e2e.cipher.Aes.MULT_9[t[2]] ^
               e2e.cipher.Aes.MULT_E[t[3]]);
  }
};


/**
 * AES's KeyExpansion procedure. Create the key schedule (this.w_) from the
 * initial key as specified in FIPS 197 Section 5.2.
 * @private
 */
e2e.cipher.Aes.prototype.keyExpansion_ = function() {
  this.w_ = new Array(this.Nb_ * (this.Nr_ + 1));

  for (var rowNum = 0; rowNum < this.Nk_; rowNum++) {
    this.w_[rowNum] = [
      this.key.key[4 * rowNum],
      this.key.key[4 * rowNum + 1],
      this.key.key[4 * rowNum + 2],
      this.key.key[4 * rowNum + 3]
    ];
  }

  var temp = new Array(4);

  for (var rowNum = this.Nk_; rowNum < (this.Nb_ * (this.Nr_ + 1)); rowNum++) {
    temp[0] = this.w_[rowNum - 1][0];
    temp[1] = this.w_[rowNum - 1][1];
    temp[2] = this.w_[rowNum - 1][2];
    temp[3] = this.w_[rowNum - 1][3];

    if (rowNum % this.Nk_ == 0) {
      this.rotWord_(temp);
      this.subWord_(temp);

      temp[0] ^= e2e.cipher.Aes.RCON[rowNum / this.Nk_][0];
      temp[1] ^= e2e.cipher.Aes.RCON[rowNum / this.Nk_][1];
      temp[2] ^= e2e.cipher.Aes.RCON[rowNum / this.Nk_][2];
      temp[3] ^= e2e.cipher.Aes.RCON[rowNum / this.Nk_][3];
    } else if (this.Nk_ > 6 && rowNum % this.Nk_ == 4) {
      this.subWord_(temp);
    }

    this.w_[rowNum] = new Array(4);
    this.w_[rowNum][0] = this.w_[rowNum - this.Nk_][0] ^ temp[0];
    this.w_[rowNum][1] = this.w_[rowNum - this.Nk_][1] ^ temp[1];
    this.w_[rowNum][2] = this.w_[rowNum - this.Nk_][2] ^ temp[2];
    this.w_[rowNum][3] = this.w_[rowNum - this.Nk_][3] ^ temp[3];
  }
};


/**
 * AES's SubWord procedure that takes a four-byte input word and applies
 * an S-box to each of the four bytes to produce an output word.
 * As specified by FIPS 197 Section 5.2. and Section 5.1.1.
 * @param {Array.<number>} w An array to substitute with the SBOX.
 * @return {Array.<number>} The substituted word.
 * @private
 */
e2e.cipher.Aes.prototype.subWord_ = function(w) {
  w[0] = e2e.cipher.Aes.SBOX[w[0]];
  w[1] = e2e.cipher.Aes.SBOX[w[1]];
  w[2] = e2e.cipher.Aes.SBOX[w[2]];
  w[3] = e2e.cipher.Aes.SBOX[w[3]];

  return w;
};


/**
 * AES's RotWord procedure that takes a four-byte word and performs a
 * cyclic permutation. As specified in FIPS 197 Section 5.2.
 * @param {Array.<number>} w The word to be rotated.
 * @return {Array.<number>} The rotated word.
 * @private
 */
e2e.cipher.Aes.prototype.rotWord_ = function(w) {
  var temp = w[0];

  w[0] = w[1];
  w[1] = w[2];
  w[2] = w[3];
  w[3] = temp;

  return w;
};


/**
 * Precomputed SBox lookup. As specified in FIPS 197 Section 5.1.1.
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Aes.SBOX = [
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
  0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
  0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
  0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
  0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
  0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
  0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
  0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
  0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
  0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
  0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
  0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
  0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
  0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
  0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
  0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
  0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];


/**
 * Precomputed InvSBox lookup. As specified in FIPS 197 Section 5.3.2.
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Aes.INV_SBOX = [
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
  0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
  0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
  0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
  0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
  0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
  0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
  0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
  0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
  0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
  0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
  0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
  0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
  0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
  0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
  0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
  0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];


/**
 * Precomputed Rcon (Round Constant) lookup. Contains the values given by:
 * Rcon[i] = [x^(i-1),{00},{00},{00}] in the field GF(2^8).
 * As specified in FIPS 197 Section 5.2.
 * @type {Array.<Array.<number>>}
 * @const
 */
e2e.cipher.Aes.RCON = [
  [0x00, 0x00, 0x00, 0x00],
  [0x01, 0x00, 0x00, 0x00],
  [0x02, 0x00, 0x00, 0x00],
  [0x04, 0x00, 0x00, 0x00],
  [0x08, 0x00, 0x00, 0x00],
  [0x10, 0x00, 0x00, 0x00],
  [0x20, 0x00, 0x00, 0x00],
  [0x40, 0x00, 0x00, 0x00],
  [0x80, 0x00, 0x00, 0x00],
  [0x1b, 0x00, 0x00, 0x00],
  [0x36, 0x00, 0x00, 0x00]
];


/**
 * Precomputed lookup of multiplication by 2 in GF(2^8).
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Aes.MULT_2 = [
  0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E,
  0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,
  0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E,
  0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E,
  0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E,
  0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E,
  0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E,
  0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E,
  0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E,
  0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E,
  0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE,
  0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE,
  0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE,
  0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE,
  0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE,
  0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE,
  0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15,
  0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05,
  0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35,
  0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25,
  0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55,
  0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45,
  0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75,
  0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65,
  0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95,
  0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85,
  0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5,
  0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5,
  0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5,
  0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5,
  0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5,
  0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5
];


/**
 * Precomputed lookup of multiplication by 3 in GF(2^8).
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Aes.MULT_3 = [
  0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09,
  0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11,
  0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39,
  0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21,
  0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69,
  0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71,
  0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59,
  0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41,
  0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9,
  0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1,
  0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9,
  0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1,
  0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9,
  0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1,
  0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99,
  0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81,
  0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92,
  0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A,
  0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2,
  0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA,
  0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2,
  0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA,
  0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2,
  0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA,
  0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52,
  0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A,
  0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62,
  0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A,
  0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32,
  0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A,
  0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02,
  0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A
];


/**
 * Precomputed lookup of multiplication by 9 in GF(2^8).
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Aes.MULT_9 = [
  0x00, 0x09, 0x12, 0x1B, 0x24, 0x2D, 0x36, 0x3F,
  0x48, 0x41, 0x5A, 0x53, 0x6C, 0x65, 0x7E, 0x77,
  0x90, 0x99, 0x82, 0x8B, 0xB4, 0xBD, 0xA6, 0xAF,
  0xD8, 0xD1, 0xCA, 0xC3, 0xFC, 0xF5, 0xEE, 0xE7,
  0x3B, 0x32, 0x29, 0x20, 0x1F, 0x16, 0x0D, 0x04,
  0x73, 0x7A, 0x61, 0x68, 0x57, 0x5E, 0x45, 0x4C,
  0xAB, 0xA2, 0xB9, 0xB0, 0x8F, 0x86, 0x9D, 0x94,
  0xE3, 0xEA, 0xF1, 0xF8, 0xC7, 0xCE, 0xD5, 0xDC,
  0x76, 0x7F, 0x64, 0x6D, 0x52, 0x5B, 0x40, 0x49,
  0x3E, 0x37, 0x2C, 0x25, 0x1A, 0x13, 0x08, 0x01,
  0xE6, 0xEF, 0xF4, 0xFD, 0xC2, 0xCB, 0xD0, 0xD9,
  0xAE, 0xA7, 0xBC, 0xB5, 0x8A, 0x83, 0x98, 0x91,
  0x4D, 0x44, 0x5F, 0x56, 0x69, 0x60, 0x7B, 0x72,
  0x05, 0x0C, 0x17, 0x1E, 0x21, 0x28, 0x33, 0x3A,
  0xDD, 0xD4, 0xCF, 0xC6, 0xF9, 0xF0, 0xEB, 0xE2,
  0x95, 0x9C, 0x87, 0x8E, 0xB1, 0xB8, 0xA3, 0xAA,
  0xEC, 0xE5, 0xFE, 0xF7, 0xC8, 0xC1, 0xDA, 0xD3,
  0xA4, 0xAD, 0xB6, 0xBF, 0x80, 0x89, 0x92, 0x9B,
  0x7C, 0x75, 0x6E, 0x67, 0x58, 0x51, 0x4A, 0x43,
  0x34, 0x3D, 0x26, 0x2F, 0x10, 0x19, 0x02, 0x0B,
  0xD7, 0xDE, 0xC5, 0xCC, 0xF3, 0xFA, 0xE1, 0xE8,
  0x9F, 0x96, 0x8D, 0x84, 0xBB, 0xB2, 0xA9, 0xA0,
  0x47, 0x4E, 0x55, 0x5C, 0x63, 0x6A, 0x71, 0x78,
  0x0F, 0x06, 0x1D, 0x14, 0x2B, 0x22, 0x39, 0x30,
  0x9A, 0x93, 0x88, 0x81, 0xBE, 0xB7, 0xAC, 0xA5,
  0xD2, 0xDB, 0xC0, 0xC9, 0xF6, 0xFF, 0xE4, 0xED,
  0x0A, 0x03, 0x18, 0x11, 0x2E, 0x27, 0x3C, 0x35,
  0x42, 0x4B, 0x50, 0x59, 0x66, 0x6F, 0x74, 0x7D,
  0xA1, 0xA8, 0xB3, 0xBA, 0x85, 0x8C, 0x97, 0x9E,
  0xE9, 0xE0, 0xFB, 0xF2, 0xCD, 0xC4, 0xDF, 0xD6,
  0x31, 0x38, 0x23, 0x2A, 0x15, 0x1C, 0x07, 0x0E,
  0x79, 0x70, 0x6B, 0x62, 0x5D, 0x54, 0x4F, 0x46
];


/**
 * Precomputed lookup of multiplication by 0xB in GF(2^8).
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Aes.MULT_B = [
  0x00, 0x0B, 0x16, 0x1D, 0x2C, 0x27, 0x3A, 0x31,
  0x58, 0x53, 0x4E, 0x45, 0x74, 0x7F, 0x62, 0x69,
  0xB0, 0xBB, 0xA6, 0xAD, 0x9C, 0x97, 0x8A, 0x81,
  0xE8, 0xE3, 0xFE, 0xF5, 0xC4, 0xCF, 0xD2, 0xD9,
  0x7B, 0x70, 0x6D, 0x66, 0x57, 0x5C, 0x41, 0x4A,
  0x23, 0x28, 0x35, 0x3E, 0x0F, 0x04, 0x19, 0x12,
  0xCB, 0xC0, 0xDD, 0xD6, 0xE7, 0xEC, 0xF1, 0xFA,
  0x93, 0x98, 0x85, 0x8E, 0xBF, 0xB4, 0xA9, 0xA2,
  0xF6, 0xFD, 0xE0, 0xEB, 0xDA, 0xD1, 0xCC, 0xC7,
  0xAE, 0xA5, 0xB8, 0xB3, 0x82, 0x89, 0x94, 0x9F,
  0x46, 0x4D, 0x50, 0x5B, 0x6A, 0x61, 0x7C, 0x77,
  0x1E, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2F,
  0x8D, 0x86, 0x9B, 0x90, 0xA1, 0xAA, 0xB7, 0xBC,
  0xD5, 0xDE, 0xC3, 0xC8, 0xF9, 0xF2, 0xEF, 0xE4,
  0x3D, 0x36, 0x2B, 0x20, 0x11, 0x1A, 0x07, 0x0C,
  0x65, 0x6E, 0x73, 0x78, 0x49, 0x42, 0x5F, 0x54,
  0xF7, 0xFC, 0xE1, 0xEA, 0xDB, 0xD0, 0xCD, 0xC6,
  0xAF, 0xA4, 0xB9, 0xB2, 0x83, 0x88, 0x95, 0x9E,
  0x47, 0x4C, 0x51, 0x5A, 0x6B, 0x60, 0x7D, 0x76,
  0x1F, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2E,
  0x8C, 0x87, 0x9A, 0x91, 0xA0, 0xAB, 0xB6, 0xBD,
  0xD4, 0xDF, 0xC2, 0xC9, 0xF8, 0xF3, 0xEE, 0xE5,
  0x3C, 0x37, 0x2A, 0x21, 0x10, 0x1B, 0x06, 0x0D,
  0x64, 0x6F, 0x72, 0x79, 0x48, 0x43, 0x5E, 0x55,
  0x01, 0x0A, 0x17, 0x1C, 0x2D, 0x26, 0x3B, 0x30,
  0x59, 0x52, 0x4F, 0x44, 0x75, 0x7E, 0x63, 0x68,
  0xB1, 0xBA, 0xA7, 0xAC, 0x9D, 0x96, 0x8B, 0x80,
  0xE9, 0xE2, 0xFF, 0xF4, 0xC5, 0xCE, 0xD3, 0xD8,
  0x7A, 0x71, 0x6C, 0x67, 0x56, 0x5D, 0x40, 0x4B,
  0x22, 0x29, 0x34, 0x3F, 0x0E, 0x05, 0x18, 0x13,
  0xCA, 0xC1, 0xDC, 0xD7, 0xE6, 0xED, 0xF0, 0xFB,
  0x92, 0x99, 0x84, 0x8F, 0xBE, 0xB5, 0xA8, 0xA3
];


/**
 * Precomputed lookup of multiplication by 0xD in GF(2^8).
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Aes.MULT_D = [
  0x00, 0x0D, 0x1A, 0x17, 0x34, 0x39, 0x2E, 0x23,
  0x68, 0x65, 0x72, 0x7F, 0x5C, 0x51, 0x46, 0x4B,
  0xD0, 0xDD, 0xCA, 0xC7, 0xE4, 0xE9, 0xFE, 0xF3,
  0xB8, 0xB5, 0xA2, 0xAF, 0x8C, 0x81, 0x96, 0x9B,
  0xBB, 0xB6, 0xA1, 0xAC, 0x8F, 0x82, 0x95, 0x98,
  0xD3, 0xDE, 0xC9, 0xC4, 0xE7, 0xEA, 0xFD, 0xF0,
  0x6B, 0x66, 0x71, 0x7C, 0x5F, 0x52, 0x45, 0x48,
  0x03, 0x0E, 0x19, 0x14, 0x37, 0x3A, 0x2D, 0x20,
  0x6D, 0x60, 0x77, 0x7A, 0x59, 0x54, 0x43, 0x4E,
  0x05, 0x08, 0x1F, 0x12, 0x31, 0x3C, 0x2B, 0x26,
  0xBD, 0xB0, 0xA7, 0xAA, 0x89, 0x84, 0x93, 0x9E,
  0xD5, 0xD8, 0xCF, 0xC2, 0xE1, 0xEC, 0xFB, 0xF6,
  0xD6, 0xDB, 0xCC, 0xC1, 0xE2, 0xEF, 0xF8, 0xF5,
  0xBE, 0xB3, 0xA4, 0xA9, 0x8A, 0x87, 0x90, 0x9D,
  0x06, 0x0B, 0x1C, 0x11, 0x32, 0x3F, 0x28, 0x25,
  0x6E, 0x63, 0x74, 0x79, 0x5A, 0x57, 0x40, 0x4D,
  0xDA, 0xD7, 0xC0, 0xCD, 0xEE, 0xE3, 0xF4, 0xF9,
  0xB2, 0xBF, 0xA8, 0xA5, 0x86, 0x8B, 0x9C, 0x91,
  0x0A, 0x07, 0x10, 0x1D, 0x3E, 0x33, 0x24, 0x29,
  0x62, 0x6F, 0x78, 0x75, 0x56, 0x5B, 0x4C, 0x41,
  0x61, 0x6C, 0x7B, 0x76, 0x55, 0x58, 0x4F, 0x42,
  0x09, 0x04, 0x13, 0x1E, 0x3D, 0x30, 0x27, 0x2A,
  0xB1, 0xBC, 0xAB, 0xA6, 0x85, 0x88, 0x9F, 0x92,
  0xD9, 0xD4, 0xC3, 0xCE, 0xED, 0xE0, 0xF7, 0xFA,
  0xB7, 0xBA, 0xAD, 0xA0, 0x83, 0x8E, 0x99, 0x94,
  0xDF, 0xD2, 0xC5, 0xC8, 0xEB, 0xE6, 0xF1, 0xFC,
  0x67, 0x6A, 0x7D, 0x70, 0x53, 0x5E, 0x49, 0x44,
  0x0F, 0x02, 0x15, 0x18, 0x3B, 0x36, 0x21, 0x2C,
  0x0C, 0x01, 0x16, 0x1B, 0x38, 0x35, 0x22, 0x2F,
  0x64, 0x69, 0x7E, 0x73, 0x50, 0x5D, 0x4A, 0x47,
  0xDC, 0xD1, 0xC6, 0xCB, 0xE8, 0xE5, 0xF2, 0xFF,
  0xB4, 0xB9, 0xAE, 0xA3, 0x80, 0x8D, 0x9A, 0x97
];


/**
 * Precomputed lookup of multiplication by 0xE in GF(2^8).
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Aes.MULT_E = [
  0x00, 0x0E, 0x1C, 0x12, 0x38, 0x36, 0x24, 0x2A,
  0x70, 0x7E, 0x6C, 0x62, 0x48, 0x46, 0x54, 0x5A,
  0xE0, 0xEE, 0xFC, 0xF2, 0xD8, 0xD6, 0xC4, 0xCA,
  0x90, 0x9E, 0x8C, 0x82, 0xA8, 0xA6, 0xB4, 0xBA,
  0xDB, 0xD5, 0xC7, 0xC9, 0xE3, 0xED, 0xFF, 0xF1,
  0xAB, 0xA5, 0xB7, 0xB9, 0x93, 0x9D, 0x8F, 0x81,
  0x3B, 0x35, 0x27, 0x29, 0x03, 0x0D, 0x1F, 0x11,
  0x4B, 0x45, 0x57, 0x59, 0x73, 0x7D, 0x6F, 0x61,
  0xAD, 0xA3, 0xB1, 0xBF, 0x95, 0x9B, 0x89, 0x87,
  0xDD, 0xD3, 0xC1, 0xCF, 0xE5, 0xEB, 0xF9, 0xF7,
  0x4D, 0x43, 0x51, 0x5F, 0x75, 0x7B, 0x69, 0x67,
  0x3D, 0x33, 0x21, 0x2F, 0x05, 0x0B, 0x19, 0x17,
  0x76, 0x78, 0x6A, 0x64, 0x4E, 0x40, 0x52, 0x5C,
  0x06, 0x08, 0x1A, 0x14, 0x3E, 0x30, 0x22, 0x2C,
  0x96, 0x98, 0x8A, 0x84, 0xAE, 0xA0, 0xB2, 0xBC,
  0xE6, 0xE8, 0xFA, 0xF4, 0xDE, 0xD0, 0xC2, 0xCC,
  0x41, 0x4F, 0x5D, 0x53, 0x79, 0x77, 0x65, 0x6B,
  0x31, 0x3F, 0x2D, 0x23, 0x09, 0x07, 0x15, 0x1B,
  0xA1, 0xAF, 0xBD, 0xB3, 0x99, 0x97, 0x85, 0x8B,
  0xD1, 0xDF, 0xCD, 0xC3, 0xE9, 0xE7, 0xF5, 0xFB,
  0x9A, 0x94, 0x86, 0x88, 0xA2, 0xAC, 0xBE, 0xB0,
  0xEA, 0xE4, 0xF6, 0xF8, 0xD2, 0xDC, 0xCE, 0xC0,
  0x7A, 0x74, 0x66, 0x68, 0x42, 0x4C, 0x5E, 0x50,
  0x0A, 0x04, 0x16, 0x18, 0x32, 0x3C, 0x2E, 0x20,
  0xEC, 0xE2, 0xF0, 0xFE, 0xD4, 0xDA, 0xC8, 0xC6,
  0x9C, 0x92, 0x80, 0x8E, 0xA4, 0xAA, 0xB8, 0xB6,
  0x0C, 0x02, 0x10, 0x1E, 0x34, 0x3A, 0x28, 0x26,
  0x7C, 0x72, 0x60, 0x6E, 0x44, 0x4A, 0x58, 0x56,
  0x37, 0x39, 0x2B, 0x25, 0x0F, 0x01, 0x13, 0x1D,
  0x47, 0x49, 0x5B, 0x55, 0x7F, 0x71, 0x63, 0x6D,
  0xD7, 0xD9, 0xCB, 0xC5, 0xEF, 0xE1, 0xF3, 0xFD,
  0xA7, 0xA9, 0xBB, 0xB5, 0x9F, 0x91, 0x83, 0x8D
];


// Register this implementation to handle all, 128, 192, and 256 bits keys.
e2e.cipher.factory.add(e2e.cipher.Aes,
                               e2e.cipher.Algorithm.AES128);
e2e.cipher.factory.add(e2e.cipher.Aes,
                               e2e.cipher.Algorithm.AES192);
e2e.cipher.factory.add(e2e.cipher.Aes,
                               e2e.cipher.Algorithm.AES256);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview AES key wrap algorithm as described in RFC 3394. This is the
 *     key-wrapping method used in ECDH (see section 8, RFC 6637).
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.cipher.AesKeyWrap');

goog.require('e2e');
goog.require('e2e.async.Result');
/** @suppress {extraRequire} We need the AES algorithm to function. */
goog.require('e2e.cipher.Aes'); // TODO(user): Remove in b/15659131
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.openpgp.error.InvalidArgumentsError');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * AES key wrap, as described in RFC 3394.
 * @param {e2e.cipher.Aes} primitive The AES primitive to used
 *     for key-wrapping. It must either AES128, AES192 or AES256.
 * @constructor
 */
e2e.cipher.AesKeyWrap = function(primitive) {
  goog.asserts.assertObject(primitive, 'AES primitive should be defined.');
  if (primitive.algorithm != e2e.cipher.Algorithm.AES128 &&
      primitive.algorithm != e2e.cipher.Algorithm.AES192 &&
      primitive.algorithm != e2e.cipher.Algorithm.AES256) {
    throw new e2e.openpgp.error.UnsupportedError(
        'Invalid key-wrapping algorithm.');
  }
  this.aes_ = primitive;
};


/**
 * The AES primitive used to wrap or unwrap key.
 * @type {e2e.cipher.Aes}
 * @private
 */
e2e.cipher.AesKeyWrap.prototype.aes_;


/**
 * IV used in key wrapping.
 * @type {!e2e.ByteArray}
 * @const
 * @private
 */
e2e.cipher.AesKeyWrap.prototype.IV_ = goog.array.repeat(0xA6, 8);

/**
 * Sets key-wrapping key.
 * @param {!e2e.cipher.key.SymmetricKey} key The key-wrapping key.
 */
e2e.cipher.AesKeyWrap.prototype.setKey = function(key) {
  goog.asserts.assertObject(this.aes_);
  goog.asserts.assert(key['key'].length >= this.aes_.keySize,
      'Invalid key-wrapping key.');
  this.aes_.setKey(key);
};


/**
 * Wraps key data with the key-wrapping key, as described in section 2.2.1 in
 *     RFC 3394. This key-wrapping method is used in ECDH.
 * @param {!e2e.ByteArray} keyData The key data to be wrapped.
 * @return {!e2e.ByteArray} The wrapped key data.
 */
e2e.cipher.AesKeyWrap.prototype.wrap = function(keyData) {
  goog.asserts.assertArray(keyData,
       'Key data to be wrapped should be defined.');
  goog.asserts.assert(keyData.length >= 16,
       'Key data to be wrapped should be at least 128 bits.');
  goog.asserts.assert(keyData.length % 8 == 0,
       'Key data to be wrapped should be a multiple of 8 bytes.');

  // Set A = IV.
  var A = this.IV_;
  // For i = 1 to n
  //   R[i] = P[i]
  var R = goog.array.clone(keyData);
  var n = keyData.length / 8;
  // For j = 0 to 5
  //   For i=1 to n
  for (var j = 0; j <= 5; j++) {
    for (var i = 1; i <= n; i++) {
      // B = AES(K, A | R[i])
      var B = goog.array.concat(A, R.slice((i - 1) * 8, i * 8));
      B = e2e.async.Result.getValue(this.aes_.encrypt(B));
      // A = MSB(64, B) ^ t where t = (n*j)+i
      A = B.slice(0, 8);
      // This is slightly incorrect if n * j + i is larger than 255.
      // But that won't happen here because n is very small in ECDH's
      // usage of this key-wrapping method.
      A[7] ^= (n * j + i);
      // R[i] = LSB(64, B)
      goog.array.splice(R, (i - 1) * 8, 8);
      goog.array.insertArrayAt(R, B.slice(8, 16), (i - 1) * 8);
    }
  }
  // Set C[0] = A
  // For i = 1 to n
  //   C[i] = R[i]
  goog.array.extend(A, R);
  return A;
};


/**
 * Unwraps key data with the key-wrapping key, as described in section 2.2.1 in
 *     RFC 3394. This key-unwrapping method is used in ECDH.
 * @param {!e2e.ByteArray} wrappedKeyData The key data to be unwrapped.
 * @return {!e2e.ByteArray} The unwrapped key data.
 */
e2e.cipher.AesKeyWrap.prototype.unwrap = function(wrappedKeyData) {
  goog.asserts.assertArray(wrappedKeyData,
       'Key data to be unwrapped should be defined.');
  goog.asserts.assert(wrappedKeyData.length >= 16,
       'Key data to be unwrapped should be at least 128 bits.');
  goog.asserts.assert(wrappedKeyData.length % 8 == 0,
       'Key data to be unwrapped should be a multiple of 8 bytes.');
  // Set A = C[0]
  // For i = 1 to n
  //   R[i] = C[i]
  var A = wrappedKeyData.slice(0, 8);
  var R = wrappedKeyData.slice(8);
  var n = wrappedKeyData.length / 8 - 1;
  // For j = 5 to 0
  //   For i = n to 1
  for (var j = 5; j >= 0; j--) {
    for (var i = n; i >= 1; i--) {
      // B = AES-1(K, (A ^ t) | R[i]) where t = n*j+i
      A[7] ^= (n * j + i);
      var B = goog.array.concat(A, R.slice((i - 1) * 8, i * 8));
      B = e2e.async.Result.getValue(this.aes_.decrypt(B));
      // A = MSB(64, B)
      A = B.slice(0, 8);
      // R[i] = LSB(64, B)
      goog.array.splice(R, (i - 1) * 8, 8);
      goog.array.insertArrayAt(R, B.slice(8, 16), (i - 1) * 8);
    }
  }
  if (!e2e.compareByteArray(A, this.IV_)) {
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'Invalid wrapped key data.');
  }
  return R;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview ECDH for OpenPGP as described in RFC 6637.
 * @author thaidn@google.com (Thai Duong)
 */

goog.provide('e2e.cipher.Ecdh');

goog.require('e2e');
goog.require('e2e.AlgorithmImpl');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.AesKeyWrap');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.AsymmetricCipher');
goog.require('e2e.cipher.factory');
goog.require('e2e.ecc.DomainParam');
goog.require('e2e.ecc.Ecdh');
goog.require('e2e.hash.Algorithm');
/** @suppress {extraRequire} intentionally importing all hash functions */
goog.require('e2e.hash.all');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * Representation of a ECDH public or private key.
 * @param {e2e.cipher.Algorithm} algorithm The algorithm to retrieve.
 *     It must be e2e.cipher.Algorithm.ECDH.
 * @param {e2e.cipher.key.Key=} opt_key The ECDH key as specified in
 *     section 9 of RFC 6637.
 * @constructor
 * @implements {e2e.cipher.AsymmetricCipher}
 * @extends {e2e.AlgorithmImpl}
 */
e2e.cipher.Ecdh = function(algorithm, opt_key) {
  goog.asserts.assert(algorithm == e2e.cipher.Algorithm.ECDH,
      'Algorithm must be ECDH.');
  goog.base(this, e2e.cipher.Algorithm.ECDH, opt_key);
};
goog.inherits(e2e.cipher.Ecdh, e2e.AlgorithmImpl);


/**
 * Internal ECDH implemenation.
 * @type {e2e.ecc.Ecdh}
 * @private
 */
e2e.cipher.Ecdh.prototype.ecdh_;


/**
 * List of allowed hash algorithms as specified in RFC 6637.
 * @type {Array}
 * @const
 * @private
 */
e2e.cipher.Ecdh.ALLOWED_HASH_ALGORITHMS_ = [
  e2e.hash.Algorithm.SHA256,
  e2e.hash.Algorithm.SHA384,
  e2e.hash.Algorithm.SHA512];


/**
 * List of allowed key-wrapping algorithms as specified in RFC 6637.
 * @type {Array}
 * @const
 * @private
 */
e2e.cipher.Ecdh.ALLOWED_KEYWRAPPING_ALGORITHMS_ = [
  e2e.cipher.Algorithm.AES128,
  e2e.cipher.Algorithm.AES192,
  e2e.cipher.Algorithm.AES256];


/**
 * Sets the ECDH public key or private key.
 * @param {e2e.cipher.key.Key} keyArg Algorithm-specific fields for ECDH
 *     keys as specified in section 9 of RFC 6637.
 * @override
 */
e2e.cipher.Ecdh.prototype.setKey = function(keyArg) {
  var key = /** @type {e2e.cipher.key.Ecdh} */ (keyArg);
  goog.asserts.assertArray(key['kdfInfo'], 'KDF params should be defined.');
  goog.asserts.assert(key['kdfInfo'].length == 4, 'KDF: invalid params.');
  // Length. It must be 0x3 because there're 3 more bytes after it.
  goog.asserts.assert(key['kdfInfo'][0] == 0x3, 'KDF: invalid params.');
  // Reserved for future use.
  goog.asserts.assert(key['kdfInfo'][1] == 0x1, 'KDF: invalid params.');
  // Hash algorithm.
  var hashAlgo = e2e.openpgp.constants.getAlgorithm(
      e2e.openpgp.constants.Type.HASH, key['kdfInfo'][2]);
  goog.asserts.assert(goog.array.contains(
      e2e.cipher.Ecdh.ALLOWED_HASH_ALGORITHMS_, hashAlgo),
      'KDF: invalid hash algorithm.');
  // Key wrapping algorithm.
  var keyWrappingAlgo = e2e.openpgp.constants.getAlgorithm(
      e2e.openpgp.constants.Type.SYMMETRIC_KEY, key['kdfInfo'][3]);
  goog.asserts.assert(goog.array.contains(
      e2e.cipher.Ecdh.ALLOWED_KEYWRAPPING_ALGORITHMS_,
      keyWrappingAlgo), 'KDF: invalid key wrapping algorithm.');

  if (!goog.isDefAndNotNull(key['pubKey']) &&
      !goog.isDefAndNotNull(key['privKey'])) {
    goog.asserts.fail('Either public key or private key should be defined.');
  }
  // Pubkey's fingerprint should be in the right size if available.
  // Note: the fingerprint may be absent if this class is used to calculate the
  // fingerprint of a new generated key. See newECDHWithP256.
  if (goog.isDefAndNotNull(key['fingerprint'])) {
    goog.asserts.assert(key['fingerprint'].length == 20,
        'Public key fingerprint should be 20 bytes.');
  }

  goog.asserts.assertArray(key['curve'], 'Curve should be defined.');
  this.ecdh_ = new e2e.ecc.Ecdh(
      e2e.ecc.DomainParam.curveNameFromCurveOid(key['curve']),
      {
        'privKey': key['privKey'],
        'pubKey': key['pubKey']
      });
  // Save other key material.
  goog.base(this, 'setKey', key);
};


/** @inheritDoc */
e2e.cipher.Ecdh.prototype.encrypt = function(plaintext) {
  // Performs the ECDH encryption method as described in section 8 of RFC 6637.
  var message = this.ecdh_.alice();
  // Wraps the session key with the key-wrapping key derived from the shared
  // secret.
  var keyWrapper = this.getKeyWrapper_(message['secret']);
  /** @type {!e2e.cipher.ciphertext.Ecdh} */
  var ciphertext = {
    'u': keyWrapper.wrap(plaintext),
    'v': message.pubKey
  };
  return e2e.async.Result.toAsynchronousResult(ciphertext);
};


/**
 * Encrypts with an ephemeral private key. Used for testing only.
 * @param {!e2e.ByteArray} m The message to be encrypted.
 * @param {!e2e.ByteArray} privKey The ephemeral private key.
 * @return {e2e.cipher.ciphertext.AsymmetricAsync}
 * @protected
 */
e2e.cipher.Ecdh.prototype.encryptForTestingOnly = function(m, privKey) {
  var message = this.ecdh_.bob(this.key['pubKey'], privKey);

  var keyWrapper = this.getKeyWrapper_(message['secret']);
  var ciphertext = {
    'u': keyWrapper.wrap(m),
    'v': /** @type {!Array.<number>}*/ ([])
  };
  return /** @type {e2e.cipher.ciphertext.AsymmetricAsync} */ (
      e2e.async.Result.toResult(ciphertext));
};


/** @inheritDoc */
e2e.cipher.Ecdh.prototype.decrypt = function(ciphertext) {
  // Performs the ECDH decryption method as described in section 8 of RFC 6637.
  goog.asserts.assertArray(ciphertext['u'], 'Invalid ciphertext.');
  goog.asserts.assertArray(ciphertext['v'], 'Invalid ciphertext.');
  var message = this.ecdh_.bob(ciphertext['v']);
  // Unwraps the session key with the key-encrypting key derived from the shared
  // secret.
  var keyWrapper = this.getKeyWrapper_(message['secret']);
  var plaintext = keyWrapper.unwrap(ciphertext['u']);
  return e2e.async.Result.toAsynchronousResult(plaintext);
};


/**
 * Returns a key-wrapper that is used to wrap or unwrap the session key.
 * @param {!e2e.ByteArray} secret The ECDH shared secret.
 * @return {!e2e.cipher.AesKeyWrap} The key-wrapper object.
 * @private
 */
e2e.cipher.Ecdh.prototype.getKeyWrapper_ = function(secret) {
  // Constructs the KDF params.
  var kdfParams = goog.array.clone(this.key['curve']);
  goog.array.extend(
      kdfParams,
      e2e.openpgp.constants.getId(e2e.cipher.Algorithm.ECDH));
  goog.array.extend(kdfParams, this.key['kdfInfo']);
  goog.array.extend(
      kdfParams,
      e2e.stringToByteArray('Anonymous Sender    '));
  // Add 20 octets representing a recipient encryption subkey or a master key
  // fingerprint, identifying the key material that is needed for the
  // decryption.
  goog.asserts.assertArray(this.key['fingerprint'],
      'Cannot encrypt: fingerprint is absent');
  goog.array.extend(kdfParams, this.key['fingerprint']);

  // Derives a key-wrapping key from the shared secret.
  var kdfHash = e2e.openpgp.constants.getInstance(
      e2e.openpgp.constants.Type.HASH,
      this.key['kdfInfo'][2]);
  kdfHash.reset();
  kdfHash.update([0x0, 0x0, 0x0, 0x1]);
  kdfHash.update(secret);
  kdfHash.update(kdfParams);
  var derivedKey = kdfHash.digest();

  var wrapPrimitive = /** @type {e2e.cipher.Aes} */
      (e2e.openpgp.constants.getInstance(
      e2e.openpgp.constants.Type.SYMMETRIC_KEY,
      this.key['kdfInfo'][3]));
  var keyWrapper = new e2e.cipher.AesKeyWrap(wrapPrimitive);
  // This condition has been implicitly checked in the constructor, still can't
  // hurt to explictly double check it again here.
  goog.asserts.assert(
      derivedKey.length >= wrapPrimitive.keySize,
      'KDF: invalid params');
  var keyWrappingKey = {'key': derivedKey.slice(0, wrapPrimitive.keySize)};
  keyWrapper.setKey(keyWrappingKey);
  return keyWrapper;
};


e2e.cipher.factory.add(e2e.cipher.Ecdh, e2e.cipher.Algorithm.ECDH);

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implementation of Blowfish.
 * Constants are digits of pi from http://www.schneier.com/code/constants.txt
 * encryptBlock_() and decryptBlock_() are unrolled similar to golang's version
 * at https://code.google.com/p/go/source/browse/blowfish/block.go?repo=crypto
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.cipher.Blowfish');

goog.require('e2e');
goog.require('e2e.AlgorithmImpl');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.SymmetricCipher');
goog.require('e2e.cipher.factory');
goog.require('goog.array');


/**
 * Basic implementation of Blowfish, 16 rounds.
 * OpenPGP specifies a 128 bit key, but this implementation supports arbitrary
 * key lengths.
 * @see http://www.schneier.com/blowfish.html
 * @param {e2e.cipher.Algorithm} algorithm The algorithm being
 *     implemented.
 * @param {e2e.cipher.key.Key=} opt_keyObj The key to use.
 * @implements {e2e.cipher.SymmetricCipher}
 * @extends {e2e.AlgorithmImpl}
 * @constructor
 */
e2e.cipher.Blowfish = function(algorithm, opt_keyObj) {
  /**
   * @type {!e2e.DwordArray}
   * @private
   */
  this.p_ = [];  // 18 uint32 values.
  this.keySize = 16;
  goog.base(this, algorithm, opt_keyObj);
};
goog.inherits(e2e.cipher.Blowfish, e2e.AlgorithmImpl);


/** @inheritDoc */
e2e.cipher.Blowfish.prototype.blockSize = 8; // 64 bits.


/** @inheritDoc */
e2e.cipher.Blowfish.prototype.setKey = function(keyObj) {
  goog.base(this, 'setKey', keyObj, keyObj.key.length);
  this.keyExpansion_();
};


/**
 * Key expansion using P.
 * @private
 */
e2e.cipher.Blowfish.prototype.keyExpansion_ = function() {
  this.s0_ = goog.array.clone(e2e.cipher.Blowfish.S0);
  this.s1_ = goog.array.clone(e2e.cipher.Blowfish.S1);
  this.s2_ = goog.array.clone(e2e.cipher.Blowfish.S2);
  this.s3_ = goog.array.clone(e2e.cipher.Blowfish.S3);
  // No need to copy P to this.p_ because it's initialized below.

  var keyIndex = 0;  // this.key is byte array, not uint32 array.
  for (var pIndex = 0; pIndex < 18; pIndex++) {
    // d = next 4 bytes of key as a uint32.
    var d = this.key.key[keyIndex] << 24;
    keyIndex = (keyIndex + 1) % this.keySize;
    d |= this.key.key[keyIndex] << 16;
    keyIndex = (keyIndex + 1) % this.keySize;
    d |= this.key.key[keyIndex] << 8;
    keyIndex = (keyIndex + 1) % this.keySize;
    d |= this.key.key[keyIndex];
    keyIndex = (keyIndex + 1) % this.keySize;
    this.p_[pIndex] = d ^ e2e.cipher.Blowfish.P[pIndex];
  }

  var xl = 0;
  var xr = 0;
  var result; // used for tuple-like unpacking.

  // Encrypt all-zero string and assign to p1 and p2.
  for (var pIndex = 0; pIndex < 18; pIndex += 2) {
    result = this.encryptBlock_(xl, xr);
    this.p_[pIndex] = xl = result[0];
    this.p_[pIndex + 1] = xr = result[1];
  }

  for (var i = 0; i < 256; i += 2) {
    result = this.encryptBlock_(xl, xr);
    this.s0_[i] = xl = result[0];
    this.s0_[i + 1] = xr = result[1];
  }

  for (var i = 0; i < 256; i += 2) {
    result = this.encryptBlock_(xl, xr);
    this.s1_[i] = xl = result[0];
    this.s1_[i + 1] = xr = result[1];
  }

  for (var i = 0; i < 256; i += 2) {
    result = this.encryptBlock_(xl, xr);
    this.s2_[i] = xl = result[0];
    this.s2_[i + 1] = xr = result[1];
  }

  for (var i = 0; i < 256; i += 2) {
    result = this.encryptBlock_(xl, xr);
    this.s3_[i] = xl = result[0];
    this.s3_[i + 1] = xr = result[1];
  }
};


/** @inheritDoc */
e2e.cipher.Blowfish.prototype.encrypt = function(data) {
  var dword = e2e.byteArrayToDwordArray(data);
  var result = this.encryptBlock_(dword[0], dword[1]);  // l, r
  dword = e2e.dwordArrayToByteArray(result);
  return e2e.async.Result.toResult(dword);
};


/** @inheritDoc */
e2e.cipher.Blowfish.prototype.decrypt = function(data) {
  var dword = e2e.byteArrayToDwordArray(data);
  var result = this.decryptBlock_(dword[0], dword[1]);  // l, r
  dword = e2e.dwordArrayToByteArray(result);
  return e2e.async.Result.toResult(dword);
};


/**
 * Encrypt block.
 * @param {number} xl 32bit number for left half.
 * @param {number} xr 32bit number for right half.
 * @return {!e2e.DwordArray} Computed values of [xl, xr].
 * @private
 */
e2e.cipher.Blowfish.prototype.encryptBlock_ = function(xl, xr) {
  xl ^= this.p_[0];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[1];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[2];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[3];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[4];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[5];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[6];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[7];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[8];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[9];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[10];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[11];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[12];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[13];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[14];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[15];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[16];
  xr ^= this.p_[17];
  return [xr, xl];  // Note swapped order of xr and xl.
};


/**
 * Decrypt block.
 * @param {number} xl 32bit number for left half.
 * @param {number} xr 32bit number for right half.
 * @return {!e2e.DwordArray} Computed values of [xl, xr].
 * @private
 */
e2e.cipher.Blowfish.prototype.decryptBlock_ = function(xl, xr) {
  xl ^= this.p_[17];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[16];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[15];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[14];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[13];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[12];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[11];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[10];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[9];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[8];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[7];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[6];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[5];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[4];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[3];
  xr ^= ((this.s0_[(xl >>> 24) & 0xff] + this.s1_[(xl >>> 16) & 0xff]) ^
      this.s2_[(xl >>> 8) & 0xff]) + this.s3_[(xl) & 0xff] ^ this.p_[2];
  xl ^= ((this.s0_[(xr >>> 24) & 0xff] + this.s1_[(xr >>> 16) & 0xff]) ^
      this.s2_[(xr >>> 8) & 0xff]) + this.s3_[(xr) & 0xff] ^ this.p_[1];
  xr ^= this.p_[0];
  return [xr, xl];  // Note swapped order of xr and xl.
};


/**
 * S-box 0
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Blowfish.S0 = [
  0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,
  0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,
  0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658,
  0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
  0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,
  0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,
  0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6,
  0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
  0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c,
  0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
  0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1,
  0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
  0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a,
  0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,
  0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,
  0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
  0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706,
  0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,
  0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b,
  0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
  0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c,
  0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,
  0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a,
  0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
  0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,
  0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,
  0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8,
  0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
  0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33,
  0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
  0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0,
  0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
  0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777,
  0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,
  0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,
  0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
  0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e,
  0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,
  0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9,
  0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
  0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f,
  0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,
  0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a
];

/**
 * S-box 1
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Blowfish.S1 = [
  0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d,
  0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,
  0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65,
  0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
  0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9,
  0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,
  0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d,
  0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,
  0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,
  0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,
  0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908,
  0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,
  0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124,
  0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,
  0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908,
  0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,
  0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b,
  0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,
  0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,
  0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
  0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d,
  0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,
  0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5,
  0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
  0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96,
  0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,
  0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca,
  0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,
  0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,
  0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,
  0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054,
  0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,
  0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea,
  0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,
  0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646,
  0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,
  0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea,
  0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,
  0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,
  0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,
  0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd,
  0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,
  0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7
];

/**
 * S-box 2
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Blowfish.S2 = [
  0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7,
  0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,
  0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,
  0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,
  0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4,
  0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,
  0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec,
  0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,
  0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332,
  0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,
  0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58,
  0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,
  0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,
  0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,
  0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60,
  0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,
  0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99,
  0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,
  0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74,
  0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,
  0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3,
  0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,
  0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,
  0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,
  0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa,
  0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,
  0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086,
  0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,
  0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24,
  0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,
  0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84,
  0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,
  0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,
  0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,
  0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe,
  0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,
  0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0,
  0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,
  0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188,
  0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,
  0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8,
  0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,
  0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0
];

/**
 * S-box 3
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Blowfish.S3 = [
  0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742,
  0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,
  0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79,
  0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
  0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a,
  0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,
  0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,
  0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,
  0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,
  0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,
  0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6,
  0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
  0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba,
  0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,
  0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5,
  0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,
  0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,
  0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,
  0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd,
  0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,
  0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb,
  0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,
  0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc,
  0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,
  0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,
  0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,
  0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,
  0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,
  0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a,
  0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,
  0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b,
  0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
  0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e,
  0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,
  0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,
  0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,
  0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,
  0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,
  0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3,
  0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
  0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c,
  0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,
  0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6
];

/**
 * Startup permutation array, P-array.
 * @type {Array.<number>}
 * @const
 */
e2e.cipher.Blowfish.P = [
  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,
  0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b
];


e2e.cipher.factory.add(e2e.cipher.Blowfish,
                               e2e.cipher.Algorithm.BLOWFISH);

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview JavaScript implementation of DES as specified in FIPS 46–2 and
 * TripleDES EDE.
 * Overall structure inspired by the golang version by Chris Lennert.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.cipher.Des');
goog.provide('e2e.cipher.TripleDes');

goog.require('e2e');
goog.require('e2e.AlgorithmImpl');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.SymmetricCipher');
goog.require('e2e.cipher.factory');
goog.require('goog.math.Long');


/**
 * Basic implementation of TripleDES (3DES EDE).
 * @param {e2e.cipher.Algorithm} algorithm The algorithm being
 *     implemented.
 * @param {e2e.cipher.key.Key=} opt_keyObj The key to use.
 * @implements {e2e.cipher.SymmetricCipher}
 * @extends {e2e.AlgorithmImpl}
 * @constructor
 */
e2e.cipher.TripleDes = function(algorithm, opt_keyObj) {
  /**
   * Three instances of DES, populated by setKey().
   * @type {Array.<e2e.cipher.Des>}
   * @private
   */
  this.des_ = [];
  this.keySize = 24;
  goog.base(this, algorithm, opt_keyObj);
};
goog.inherits(e2e.cipher.TripleDes, e2e.AlgorithmImpl);


/** @inheritDoc */
e2e.cipher.TripleDes.prototype.blockSize = 8; // 64 bits.


/** @inheritDoc */
e2e.cipher.TripleDes.prototype.setKey = function(keyObj) {
  goog.base(this, 'setKey', keyObj, keyObj.key.length);

  for (var i = 0; i < 3; i++) {
    this.des_[i] = new e2e.cipher.Des(
        e2e.cipher.Algorithm.TRIPLE_DES,  // Not actually used.
        {key: keyObj.key.slice(i * 8, i * 8 + 8)});
  }
};


/** @inheritDoc */
e2e.cipher.TripleDes.prototype.encrypt = function(data) {
  return this.des_[0].encrypt(data).addCallback(
      this.des_[1].decrypt, this.des_[1]).addCallback(
      this.des_[2].encrypt, this.des_[2]);
};


/** @inheritDoc */
e2e.cipher.TripleDes.prototype.decrypt = function(data) {
  return this.des_[2].decrypt(data).addCallback(
      this.des_[1].encrypt, this.des_[1]).addCallback(
      this.des_[0].decrypt, this.des_[0]);
};


/**
 * Basic implementation of DES.
 * @param {e2e.cipher.Algorithm} algorithm The algorithm being
 *     implemented.
 * @param {e2e.cipher.key.Key=} opt_keyObj The key to use.
 * @implements {e2e.cipher.SymmetricCipher}
 * @extends {e2e.AlgorithmImpl}
 * @constructor
 */
e2e.cipher.Des = function(algorithm, opt_keyObj) {
  /**
   * 16 subkeys, each 56 bits, but stored as 64-bit values.
   * @type {Array.<goog.math.Long>}
   * @private
   */
  this.subkeys_ = [];
  goog.base(this, algorithm, opt_keyObj);
};
goog.inherits(e2e.cipher.Des, e2e.AlgorithmImpl);


/** @inheritDoc */
e2e.cipher.Des.prototype.blockSize = 8; // 64 bits.


/** @inheritDoc */
e2e.cipher.Des.prototype.setKey = function(keyObj) {
  goog.base(this, 'setKey', keyObj, keyObj.key.length);
  this.keyExpansion_();
};


/**
 * Generates subkeys from this.key, stores in this.subkeys_.
 * @private
 */
e2e.cipher.Des.prototype.keyExpansion_ = function() {
  var permutedKey = this.permuteBlock_(this.key.key,
      e2e.cipher.Des.permutedChoice1);
  var leftKeys = this.keyRotate_(permutedKey.shiftRightUnsigned(28).toInt());
  var rightKeys = this.keyRotate_(permutedKey.toInt() & 0x0fffffff);
  for (var i = 0; i < 16; i++) {
    var blockInt = goog.math.Long.fromInt(leftKeys[i]).shiftLeft(28).or(
        goog.math.Long.fromInt(rightKeys[i]));
    var block = e2e.longToByteArray(blockInt);
    block.shift();  // remove first byte, so it's 56bits instead of 64bits
    this.subkeys_[i] = this.permuteBlock_(block,
        e2e.cipher.Des.permutedChoice2);
  }
};


/**
 * @param {number} key 32-bit value.
 * @return {!e2e.ByteArray} 16 keys, each 28 bits.
 * @private
 */
e2e.cipher.Des.prototype.keyRotate_ = function(key) {
  var keys = [];
  var previous = key;
  for (var i = 0; i < 16; i++) {
    previous = keys[i] = (
        ((previous << e2e.cipher.Des.leftShifts[i]) & 0x0fffffff) |
        ((previous << 4) >>> (32 - e2e.cipher.Des.leftShifts[i])));
  }
  return keys;
};


/**
 * @param {!e2e.ByteArray} key
 * @param {!e2e.ByteArray} permutedChoice
 * @return {!goog.math.Long}
 * @private
 */
e2e.cipher.Des.prototype.permuteBlock_ = function(key, permutedChoice) {
  var result = goog.math.Long.fromNumber(0);
  for (var i = 0; i < permutedChoice.length; i++) {
    var keyByte = key[((permutedChoice[i] - 1) >>> 3)];
    var bit = ((keyByte << ((permutedChoice[i] - 1) & 0x7)) & 0xff) >>> 7;
    var bitLong = goog.math.Long.fromNumber(bit);
    result = result.or(bitLong.shiftLeft(((permutedChoice.length - 1) - i)));
  }
  return result;
};


/** @inheritDoc */
e2e.cipher.Des.prototype.encrypt = function(data) {
  return this.crypt_(data, true);
};


/** @inheritDoc */
e2e.cipher.Des.prototype.decrypt = function(data) {
  return this.crypt_(data, false);
};


/**
 * Implements encryption and decryption.
 * @param {!e2e.ByteArray} data The data to encrypt.
 * @param {boolean} encrypt If true, does encryption, otherwise decrypttion.
 * @return {!e2e.async.Result} The result of encryption.
 * @private
 */
e2e.cipher.Des.prototype.crypt_ = function(data, encrypt) {
  var block = this.permuteBlock_(data,
      e2e.cipher.Des.initialPermutation);
  var left = block.getHighBits();
  var right = block.getLowBitsUnsigned();
  for (var i = 0; i < 16; i++) {
    var previousRight = right;
    if (encrypt) {
      right = left ^ this.feistel_(right, this.subkeys_[i]);
    } else {  // decrypt
      right = left ^ this.feistel_(right, this.subkeys_[15 - i]);
    }
    left = previousRight;
  }
  var combined = e2e.longToByteArray(
      goog.math.Long.fromBits(left, right));  // Left and right are swapped.
  var result = this.permuteBlock_(combined,
      e2e.cipher.Des.initialPermutationInverse);
  return e2e.async.Result.toResult(e2e.longToByteArray(result));
};


/**
 * @param {number} right 32-bit value to scramble.
 * @param {goog.math.Long} key 64-bit key to use.
 * @return {number} 32-bit value.
 * @private
 */
e2e.cipher.Des.prototype.feistel_ = function(right, key) {
  var rightExpanded = this.permuteBlock_(
      e2e.dwordArrayToByteArray([right]),
      e2e.cipher.Des.eBitSelection);
  var xorResult = key.xor(rightExpanded);
  var sBoxResult = 0;
  for (var i = 0; i < 8; i++) {
    var rowCol = (xorResult.shiftLeft(16 + (6 * i))
                  .shiftRightUnsigned(58).toInt()) & 0xff;
    var row = (rowCol & 0x1) | ((rowCol & 0x20) >>> 4);
    var col = ((rowCol << 3) & 0xff) >>> 4;
    sBoxResult |= (e2e.cipher.Des.sBoxes[i][row][col] <<
                   (4 * (7 - i))) & 0xffffffff;
  }
  return this.permuteBlock_(e2e.dwordArrayToByteArray([sBoxResult]),
      e2e.cipher.Des.permutationFunction).getLowBitsUnsigned();
};


/**
 * IP, initial permutation.
 * @type {!e2e.ByteArray}
 * @const
 */
e2e.cipher.Des.initialPermutation = [
  58, 50, 42, 34, 26, 18, 10, 2,
  60, 52, 44, 36, 28, 20, 12, 4,
  62, 54, 46, 38, 30, 22, 14, 6,
  64, 56, 48, 40, 32, 24, 16, 8,
  57, 49, 41, 33, 25, 17, 9, 1,
  59, 51, 43, 35, 27, 19, 11, 3,
  61, 53, 45, 37, 29, 21, 13, 5,
  63, 55, 47, 39, 31, 23, 15, 7
];


/**
 * IP**-1, final permutation.
 * @type {!e2e.ByteArray}
 * @const
 */
e2e.cipher.Des.initialPermutationInverse = [
  40, 8, 48, 16, 56, 24, 64, 32,
  39, 7, 47, 15, 55, 23, 63, 31,
  38, 6, 46, 14, 54, 22, 62, 30,
  37, 5, 45, 13, 53, 21, 61, 29,
  36, 4, 44, 12, 52, 20, 60, 28,
  35, 3, 43, 11, 51, 19, 59, 27,
  34, 2, 42, 10, 50, 18, 58, 26,
  33, 1, 41, 9, 49, 17, 57, 25
];


/**
 * E bit-selection table, expansion function.
 * @type {!e2e.ByteArray}
 * @const
 */
e2e.cipher.Des.eBitSelection = [
  32, 1, 2, 3, 4, 5,
  4, 5, 6, 7, 8, 9,
  8, 9, 10, 11, 12, 13,
  12, 13, 14, 15, 16, 17,
  16, 17, 18, 19, 20, 21,
  20, 21, 22, 23, 24, 25,
  24, 25, 26, 27, 28, 29,
  28, 29, 30, 31, 32, 1
];


/**
 * P, permutation function.
 * @type {!e2e.ByteArray}
 * @const
 */
e2e.cipher.Des.permutationFunction = [
  16, 7, 20, 21,
  29, 12, 28, 17,
  1, 15, 23, 26,
  5, 18, 31, 10,
  2, 8, 24, 14,
  32, 27, 3, 9,
  19, 13, 30, 6,
  22, 11, 4, 25
];


/**
 * Note that S-boxes in spec are 1-indexed.
 * @type {Array.<Array.<!e2e.ByteArray>>}
 * @const
 */
e2e.cipher.Des.sBoxes = [
  [
    [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
    [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
    [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
    [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
  ],
  [
    [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
    [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
    [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
    [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
  ],
  [
    [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
    [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
    [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
    [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
  ],
  [
    [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
    [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
    [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
    [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
  ],
  [
    [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
    [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
    [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
    [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
  ],
  [
    [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
    [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
    [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
    [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
  ],
  [
    [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
    [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
    [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
    [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
  ],
  [
    [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
    [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
    [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
    [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
  ]
];


/**
 * PC-1, Permuted choice 1.
 * @type {!e2e.ByteArray}
 * @const
 */
e2e.cipher.Des.permutedChoice1 = [
  57, 49, 41, 33, 25, 17, 9,
  1, 58, 50, 42, 34, 26, 18,
  10, 2, 59, 51, 43, 35, 27,
  19, 11, 3, 60, 52, 44, 36,
  63, 55, 47, 39, 31, 23, 15,
  7, 62, 54, 46, 38, 30, 22,
  14, 6, 61, 53, 45, 37, 29,
  21, 13, 5, 28, 20, 12, 4
];


/**
 * Note iterations in spec are 1-indexed.
 * @type {!e2e.ByteArray}
 * @const
 */
e2e.cipher.Des.leftShifts =
    [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];


/**
 * PC-2, Permuted choice 2.
 * @type {!e2e.ByteArray}
 * @const
 */
e2e.cipher.Des.permutedChoice2 = [
  14, 17, 11, 24, 1, 5,
  3, 28, 15, 6, 21, 10,
  23, 19, 12, 4, 26, 8,
  16, 7, 27, 20, 13, 2,
  41, 52, 31, 37, 47, 55,
  30, 40, 51, 45, 33, 48,
  44, 49, 39, 56, 34, 53,
  46, 42, 50, 36, 29, 32
];


e2e.cipher.factory.add(e2e.cipher.TripleDes,
                               e2e.cipher.Algorithm.TRIPLE_DES);

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implementation of IDEA.
 * @author rowen@google.com (Russell Owen)
 */

goog.provide('e2e.cipher.Idea');

goog.require('e2e.AlgorithmImpl');
goog.require('e2e.BigNum');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.SymmetricCipher');
goog.require('e2e.cipher.factory');
goog.require('e2e.fixedtiming');

/**
 * Basic implementation of IDEA.
 * @param {e2e.cipher.Algorithm} algorithm The algorithm being implemented.
 * @param {e2e.cipher.key.Key=} opt_keyObj The key to use.
 * @implements {e2e.cipher.SymmetricCipher}
 * @extends {e2e.AlgorithmImpl}
 * @constructor
 */
e2e.cipher.Idea = function(algorithm, opt_keyObj) {
  /**
   * Encryption subkeys generated from main key
   * @type {Array.<!e2e.BigNum>}
   * @private
   */
  this.encryptSubKeys_ = [];
  /**
   * Encryption subkeys generated from main key
   * @type {Array.<!e2e.BigNum>}
   * @private
   */
  this.decryptSubKeys_ = [];

  this.keySize = 128;  // key size in bits
  goog.base(this, algorithm, opt_keyObj);
};
goog.inherits(e2e.cipher.Idea, e2e.AlgorithmImpl);

/**
 * Number of encryption rounds
 * @type {number}
 */
e2e.cipher.Idea.prototype.rounds = 8;

/**
 * Number of encryption subkeys
 * @type {number}
 * @const
 */
e2e.cipher.Idea.prototype.num_subkeys =
    (6 * e2e.cipher.Idea.prototype.rounds + 4);

/** @inheritDoc */
e2e.cipher.Idea.prototype.blockSize = 8;  // 64 bits.

/** @inheritDoc */
e2e.cipher.Idea.prototype.setKey = function(keyObj) {
  goog.base(this, 'setKey', keyObj, keyObj.key.length);
  this.initEncryptSubkeys_();
  this.initDecryptSubkeys_();
};

/***
 * Expand out the encryption subkeys
 * @private
 * @return {Array.<!e2e.BigNum>}
 */
e2e.cipher.Idea.prototype.initEncryptSubkeys_ = function() {
  var shiftInt = e2e.BigNum.fromInteger(8);
  var twoInt = e2e.BigNum.fromInteger(2);
  // Divide the 128 bit key into 8 subkeys of 16 bits each.
  this.encryptSubKeys_ = [];
  for (var i = 0; i < this.key.key.length; i += 2) {
    this.encryptSubKeys_.push(e2e.BigNum.fromInteger(
        (this.key.key[i + 1] | (this.key.key[i] << 8)) >>> 0));
  }

  for (i = 8; i < this.num_subkeys; i++) {
    var index1 = e2e.BigNum.fromInteger(i + 1);
    var index2 = e2e.BigNum.fromInteger(i + 2);
    index1 = index1.mod(shiftInt).isEqual(e2e.BigNum.ZERO) ? i - 15 : i - 7;
    index2 = index2.mod(shiftInt).isLess(twoInt) ? i - 14 : i - 6;
    this.encryptSubKeys_[i] =
        e2e.cipher.Idea.LSWfromInteger(
            this.encryptSubKeys_[index1].shiftLeft(9).or(
                this.encryptSubKeys_[index2].shiftRight(7)));
  }
  return this.encryptSubKeys_;
};

/***
 * Expand out the decryption subkeys
 * @private
 * @return {Array.<!e2e.BigNum>}
 */
e2e.cipher.Idea.prototype.initDecryptSubkeys_ = function() {
  var si = 0;
  var ffff = e2e.BigNum.fromInteger(0xffff);

  this.decryptSubKeys_[6 * this.rounds] =
      e2e.cipher.Idea.invMod16(this.encryptSubKeys_[si++]);
  this.decryptSubKeys_[6 * this.rounds + 1] =
      e2e.cipher.Idea.LSWfromInteger(
          this.encryptSubKeys_[si++].negate().and(ffff));
  this.decryptSubKeys_[6 * this.rounds + 2] =
      e2e.cipher.Idea.LSWfromInteger(
          this.encryptSubKeys_[si++].negate().and(ffff));
  this.decryptSubKeys_[6 * this.rounds + 3] =
      e2e.cipher.Idea.invMod16(this.encryptSubKeys_[si++]);

  for (var i = 6 * (this.rounds - 1); i >= 0; i -= 6) {
    this.decryptSubKeys_[i + 4] = this.encryptSubKeys_[si++];
    this.decryptSubKeys_[i + 5] = this.encryptSubKeys_[si++];
    this.decryptSubKeys_[i] =
        e2e.cipher.Idea.invMod16(this.encryptSubKeys_[si++]);
    this.decryptSubKeys_[e2e.fixedtiming.select(1, i + 2, (i == 0) | 0)] =
        e2e.cipher.Idea.LSWfromInteger(
            this.encryptSubKeys_[si++].negate().and(ffff));
    this.decryptSubKeys_[e2e.fixedtiming.select(2, i + 1, (i == 0) | 0)] =
        e2e.cipher.Idea.LSWfromInteger(
            this.encryptSubKeys_[si++].negate().and(ffff));
    this.decryptSubKeys_[i + 3] =
        e2e.cipher.Idea.invMod16(this.encryptSubKeys_[si++]);
  }

  return this.decryptSubKeys_;
};

/***
 * Apply the IDEA cipher to the data using the provided key
 *
 * @param {Array.<!e2e.BigNum>} block
 * @param {Array.<!e2e.BigNum>} key
 * @return {Array.<!e2e.BigNum>}
 */
e2e.cipher.Idea.prototype.applyKey = function(block, key) {
  var ki = 0; // key index
  var w1 = block[0];
  var w2 = block[1];
  var w3 = block[2];
  var w4 = block[3];
  var t1, t2;

  for (var i = this.rounds; i > 0; i--) {
    w1 = e2e.cipher.Idea.multMod16(w1, key[ki++]);
    w2 = e2e.cipher.Idea.LSWfromInteger(w2.add(key[ki++]));
    w3 = e2e.cipher.Idea.LSWfromInteger(w3.add(key[ki++]));
    w4 = e2e.cipher.Idea.multMod16(w4, key[ki++]);

    t2 = w1.xor(w3);
    t2 = e2e.cipher.Idea.multMod16(t2, key[ki++]);
    t1 = e2e.cipher.Idea.LSWfromInteger(t2.add(w2.xor(w4)));
    t1 = e2e.cipher.Idea.multMod16(t1, key[ki++]);
    t2 = e2e.cipher.Idea.LSWfromInteger(t1.add(t2));

    w1 = w1.xor(t1);
    w4 = w4.xor(t2);

    t2 = t2.xor(w2);
    w2 = w3.xor(t1);
    w3 = t2;
  }

  w1 = e2e.cipher.Idea.multMod16(w1, key[ki++]);
  block[0] = w1;
  block[1] = e2e.cipher.Idea.LSWfromInteger(w3.add(key[ki++]));
  block[2] = e2e.cipher.Idea.LSWfromInteger(w2.add(key[ki++]));
  w4 = e2e.cipher.Idea.multMod16(w4, key[ki++]);
  block[3] = w4;

  return block;
};

/** @inheritDoc */
e2e.cipher.Idea.prototype.encrypt = function(data) {
  return e2e.async.Result.toResult(
      this.blockAndTackle(data, this.encryptSubKeys_));
};

/** @inheritDoc */
e2e.cipher.Idea.prototype.decrypt = function(data) {
  return e2e.async.Result.toResult(
      this.blockAndTackle(data, this.decryptSubKeys_));
};


/***
 * Divide the byte array into 64 bit blocks and transform each with the key.
 * @param {!e2e.ByteArray} data The data to transform
 * @param {Array.<!e2e.BigNum>} key Transformation key
 * @return {!e2e.ByteArray}
 */
e2e.cipher.Idea.prototype.blockAndTackle = function(data, key) {
  var din = 0; // data index
  var blockSize = this.blockSize / 2; // size in words
  var lowByte = e2e.BigNum.fromInteger(0xFF);
  var highByte = e2e.BigNum.fromInteger(0xFF00);
  var out = [];
  while (din < data.length) {
    var block = [];
    for (var i = 0; i < blockSize; i++) {
      block[i] = e2e.BigNum.fromInteger((data[din++] << 8) | (data[din++]));
    }
    block = this.applyKey(block, key);
    for (var i = 0; i < blockSize; i++) {
      out.push(block[i].and(highByte).toByteArray()[0] | 0);
      out.push(block[i].and(lowByte).toByteArray()[0] | 0);
    }
  }
  return out;
};

/***
 * Compute the inverse multiplicative of x mod 2^16+1 using a^(p-2) mod p
 *
 * @param {!e2e.BigNum} x
 * @return {!e2e.BigNum}
 */
e2e.cipher.Idea.invMod16 = function(x) {
  var m = e2e.BigNum.fromInteger(Math.pow(2, 16) + 1);
  var y = x.clone();
  for (var i = 0; i < 15; i++) {
    y = y.square().mod(m);
    y = y.multiply(x).mod(m);
  }
  return y;
};

/***
 * Compute (x * y) mod 2^16+1
 * But y == 0 is a special case specific to the IDEA algorithm.
 *
 * @param {!e2e.BigNum} x First multiplicand
 * @param {!e2e.BigNum} y Second multiplicand
 * @return {!e2e.BigNum}
 */
e2e.cipher.Idea.multMod16 = function(x, y) {
  var m = e2e.BigNum.fromInteger(Math.pow(2, 16) + 1);
  x = x.mod(e2e.BigNum.fromInteger(Math.pow(2, 16)));
  y = y.mod(e2e.BigNum.fromInteger(Math.pow(2, 16)));

  var mSubY = m.subtract(y);
  var mSubX = m.subtract(x);
  var xZero = e2e.BigNum.select(
      e2e.BigNum.fromInteger(0xffff), e2e.BigNum.fromInteger(0),
      x.isEqual(e2e.BigNum.ZERO) | 0); // mask bits set if x is zero.
  var xZeroN = e2e.BigNum.select(
      e2e.BigNum.fromInteger(0), e2e.BigNum.fromInteger(0xffff),
      x.isEqual(e2e.BigNum.ZERO) | 0); // mask bits set if x != zero.
  var yZero = e2e.BigNum.select(
      e2e.BigNum.fromInteger(0xffff), e2e.BigNum.fromInteger(0),
      y.isEqual(e2e.BigNum.ZERO) | 0); // mask bits set if y is zero.
  var yZeroN = e2e.BigNum.select(
      e2e.BigNum.fromInteger(0), e2e.BigNum.fromInteger(0xffff),
      y.isEqual(e2e.BigNum.ZERO) | 0); // mask bits set if y is zero.;
  return (
      xZero.and(mSubY).or(
      yZero.and(mSubX).and(xZeroN).or(
      // When multiplying, the result ANDs with xZeroN (0xFFFF).
      xZeroN.and(yZeroN).and(x.multiply(y).mod(m))
      )));
};


/**
 * Return the least significant bits of a e2e.BigNum
 * @param {!e2e.BigNum} intVal The int to mask
 * @return {!e2e.BigNum} the least signification 16 bits of intVal
 */
e2e.cipher.Idea.LSWfromInteger = function(intVal) {
  var mask = e2e.BigNum.fromInteger(0xFFFF);
  return intVal.and(mask);
};

/**
 * Return the most significant bits of a e2e.BigNum
 * @param {!e2e.BigNum} intVal The int to mask
 * @return {!e2e.BigNum} the most signification 16 bits of intVal
 */
e2e.cipher.Idea.MSWfromInteger = function(intVal) {
  var mask = e2e.BigNum.fromInteger(0xFFFF0000);
  return intVal.and(mask);
};


e2e.cipher.factory.add(e2e.cipher.Idea, e2e.cipher.Algorithm.IDEA);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires all ciphers to load them all into the factory.
 */
/** @suppress {extraProvide} this aggregation needs a namespace */
goog.provide('e2e.cipher.all');

/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.Aes');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.Blowfish');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.Cast5');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.Des');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.Ecdh');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.ElGamal');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.Idea');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.Rsa');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.cipher.TripleDes');

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implements RFC 4880 String to Key specification.
 * @author evn@google.com (Eduardo Vela)
 * @author adhintz@google.com (Drew Hintz)
 * @author coruus@gmail.com (David Leon Gil)
 */

goog.provide('e2e.openpgp.DummyS2k');
goog.provide('e2e.openpgp.IteratedS2K');
goog.provide('e2e.openpgp.S2k');
goog.provide('e2e.openpgp.SaltedS2K');
goog.provide('e2e.openpgp.SimpleS2K');


goog.require('e2e');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.error.InvalidArgumentsError');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.object');



/**
 * Generates an S2K object with the specified type, salt and count as specified
 * in RFC 4880 Section 3.7. We have subclasses for the different types of S2K.
 * @param {e2e.hash.Hash} hash An instance of the hash algorithm to use.
 * @constructor
 */
e2e.openpgp.S2k = function(hash) {
  /**
   * An instance of the hash algorithm to use.
   * @type {e2e.hash.Hash}
   * @protected
   */
  this.hash = hash;
};


/**
 * Maximum number of bytes in salt.
 * @type {number}
 * @const
 */
e2e.openpgp.S2k.MAX_SALT_SIZE = 8;


/**
 * The different types of S2K algorithms.
 * @enum {number}
 */
e2e.openpgp.S2k.Type = {
  'SIMPLE': 0,
  'SALTED': 1,
  'ITERATED': 3,
  'DUMMY': 101
};


/**
 * The type of s2k algorithm to use.
 * @type {e2e.openpgp.S2k.Type}
 */
e2e.openpgp.S2k.prototype.type;


/**
 * Generates a key from the given input. To be implemented by the subclasses.
 * @param {!e2e.ByteArray} passphrase A ByteArray representation of the
 *     passphrase (must be encoded in UTF-8).
 * @param {number} length The length of the key requested.
 * @return {!e2e.ByteArray} The key generated from that passphrase using
 *     the S2K algorithm.
 */
e2e.openpgp.S2k.prototype.getKey = goog.abstractMethod;


/**
 * Serializes the S2K object to a string.
 * @return {!e2e.ByteArray} The serialized S2K.
 */
e2e.openpgp.S2k.prototype.serialize = function() {
  return goog.array.concat(
      this.type,
      this.hash ? e2e.openpgp.constants.getId(this.hash.algorithm) : 0);
};


/**
 * Parses (and extracts) an S2K object from the given ByteArray.
 * Throws e2e.openpgp.error.Error if it fails.
 * @param {!e2e.ByteArray} bytes The ByteArray to extract the S2K from.
 * @return {e2e.openpgp.S2k} The generated S2K instance.
 */
e2e.openpgp.S2k.parse = function(bytes) {
  var type = bytes.shift();
  if (!goog.object.containsValue(e2e.openpgp.S2k.Type, type)) {
    throw new e2e.openpgp.error.ParseError('Invalid S2K type.');
  }
  type = /** @type {e2e.openpgp.S2k.Type} */ (type);
  var hid = bytes.shift();
  var hash;
  if (type == e2e.openpgp.S2k.Type.DUMMY && !hid) {
    // Allow empty hash algo for dummy s2k.
    hash = null;
  } else {
    hash = e2e.openpgp.constants.getInstance(
        e2e.openpgp.constants.Type.HASH, hid);
  }
  hash = /** @type {e2e.hash.Hash} */ (hash);
  var salt, encodedCount;
  if (type === e2e.openpgp.S2k.Type.SALTED ||
      type === e2e.openpgp.S2k.Type.ITERATED) {
    salt = bytes.splice(0, 8);
    if (salt.length != 8) {
      throw new e2e.openpgp.error.ParseError('Invalid S2K packet.');
    }
    if (type === e2e.openpgp.S2k.Type.ITERATED) {
      encodedCount = bytes.shift();
      return new e2e.openpgp.IteratedS2K(hash, salt, encodedCount);
    } else {
      return new e2e.openpgp.SaltedS2K(hash, salt);
    }
  } else if (type === e2e.openpgp.S2k.Type.SIMPLE) {
    return new e2e.openpgp.SimpleS2K(hash);
  } else if (type === e2e.openpgp.S2k.Type.DUMMY) {
    /* We're basing this on GnuPG's dummy S2k extension. First three bytes are
     * 'E2E' or 'GPG', last byte is a mode. See the enums defined below for
     * the values of these modes.
     */
    var header = bytes.splice(0, 3);
    if (header.length === 3 && bytes.length >= 1) {
      return new e2e.openpgp.DummyS2k(hash, header, bytes.shift());
    }
  }
  // TODO(user): Implement a scrypt KDF as a new S2K type.
  throw new e2e.openpgp.error.ParseError('Invalid S2K type.');
};



/**
 * Implements a dummy S2k algorithm for E2E.
 * @param {e2e.hash.Hash} hash An instance of the hash algorithm to use.
 * @param {!e2e.ByteArray} header ['E','2','E'] or ['G','N','U']
 * @param {number} mode A byte indicating S2k mode
 * @constructor
 * @extends {e2e.openpgp.S2k}
 */
e2e.openpgp.DummyS2k = function(hash, header, mode) {
  goog.asserts.assert(
      header.length === e2e.openpgp.DummyS2k.E2E_HEADER.length &&
      header.length === e2e.openpgp.DummyS2k.GPG_HEADER.length);
  var is_e2e = goog.array.equals(header, e2e.openpgp.DummyS2k.E2E_HEADER);
  var is_gpg = goog.array.equals(header, e2e.openpgp.DummyS2k.GPG_HEADER);

  this.dummy = is_e2e ? e2e.openpgp.DummyS2k.DummyTypes.E2E :
                        e2e.openpgp.DummyS2k.DummyTypes.GPG;
  var mode_enum = is_e2e ? e2e.openpgp.DummyS2k.E2E_modes :
                           e2e.openpgp.DummyS2k.GPG_modes;
  if (!goog.object.containsValue(mode_enum, mode)) {
    throw new e2e.openpgp.error.ParseError('Invalid S2k mode.');
  }

  if (is_e2e) {
    this.mode = /** @type {e2e.openpgp.DummyS2k.E2E_modes}*/ (mode);
  } else if (is_gpg) {
    this.mode = /** @type {e2e.openpgp.DummyS2k.GPG_modes}*/ (mode);
  } else {
    throw new e2e.openpgp.error.ParseError('Invalid dummy S2k header!');
  }
  goog.base(this, hash);
};
goog.inherits(e2e.openpgp.DummyS2k, e2e.openpgp.S2k);


/**
 * Enum for different dummy S2ks
 * @enum {number}
 */
e2e.openpgp.DummyS2k.DummyTypes = {
  GPG: 0,
  E2E: 1
};


/** @type {!e2e.openpgp.DummyS2k.DummyTypes} */
e2e.openpgp.DummyS2k.prototype.dummy;


/** @type {e2e.openpgp.DummyS2k.GPG_modes | e2e.openpgp.DummyS2k.E2E_modes} */
e2e.openpgp.DummyS2k.prototype.mode;


/**
 * Enum for GPG modes
 * @enum {number}
 */
e2e.openpgp.DummyS2k.GPG_modes = {
  NO_SECRET: 0x01,
  SMARTCARD_STUB: 0x02
};


/**
 * Enum for E2E modes (currently, upper 6 bits are reserved for future
 * extensions)
 * @enum {number}
 */
e2e.openpgp.DummyS2k.E2E_modes = {
  SERIALIZED: 0x0,
  WEB_CRYPTO: 0x1,
  HARDWARE: 0x2
};


/** @inheritDoc */
e2e.openpgp.DummyS2k.prototype.type = e2e.openpgp.S2k.Type.DUMMY;


/** @inheritDoc */
e2e.openpgp.DummyS2k.prototype.getKey = function(passphrase, length) {
  throw new e2e.openpgp.error.UnsupportedError(
      'Cannot get key from special locations!');
};


/** @type {!e2e.ByteArray} */
e2e.openpgp.DummyS2k.GPG_HEADER = [0x47, 0x4e, 0x55]; // 'GNU'


/** @type {!e2e.ByteArray} */
e2e.openpgp.DummyS2k.E2E_HEADER = [0x45, 0x32, 0x45]; // 'E2E'


/** @inheritDoc */
e2e.openpgp.DummyS2k.prototype.serialize = function() {
  return goog.array.concat(
      goog.base(this, 'serialize'),
      this.is_e2e_ ? e2e.openpgp.DummyS2k.E2E_HEADER :
      e2e.openpgp.DummyS2k.GPG_HEADER,
      this.mode);
};



/**
 * Implements the Simple S2K algorithm.
 * @param {e2e.hash.Hash} hash An instance of the hash algorithm to use.
 * @constructor
 * @extends {e2e.openpgp.S2k}
 */
e2e.openpgp.SimpleS2K = function(hash) {
  goog.base(this, hash);
};
goog.inherits(e2e.openpgp.SimpleS2K, e2e.openpgp.S2k);


/** @inheritDoc */
e2e.openpgp.SimpleS2K.prototype.type = e2e.openpgp.S2k.Type.SIMPLE;


/** @inheritDoc */
e2e.openpgp.SimpleS2K.prototype.getKey = function(passphrase, length) {
  var hashed = [], original_length = length;
  while (length > 0) {
    // Hash the passphrase repeatedly by appending 0's at the begining.
    var checksum = this.hash.hash(passphrase);
    passphrase.unshift(0);
    length -= checksum.length;
    goog.array.extend(hashed, checksum);
  }
  return hashed.slice(0, original_length);
};



/**
 * Implements the Salted S2K algorithm. Throws e2e.openpgp.error.Error if it
 * fails.
 * @param {e2e.hash.Hash} hash An instance of the hash algorithm to use.
 * @param {!e2e.ByteArray} salt The salt to use for the S2K.
 * @constructor
 * @extends {e2e.openpgp.SimpleS2K}
 */
e2e.openpgp.SaltedS2K = function(hash, salt) {
  goog.base(this, hash);
  if (salt.length != 8 || !e2e.isByteArray(salt)) {
    throw new e2e.openpgp.error.InvalidArgumentsError('Invalid salt.');
  }
  /**
   * The salt for the key.
   * @type {!e2e.ByteArray}
   * @private
   */
  this.salt_ = salt;
};
goog.inherits(e2e.openpgp.SaltedS2K, e2e.openpgp.SimpleS2K);


/** @inheritDoc */
e2e.openpgp.SaltedS2K.prototype.type = e2e.openpgp.S2k.Type.SALTED;


/** @inheritDoc */
e2e.openpgp.SaltedS2K.prototype.getKey = function(passphrase, length) {
  var salted_passphrase = this.salt_.concat(passphrase);
  return goog.base(this, 'getKey', salted_passphrase, length);
};


/** @inheritDoc */
e2e.openpgp.SaltedS2K.prototype.serialize = function() {
  return goog.array.concat(
      goog.base(this, 'serialize'),
      this.salt_);
};



/**
 * Implements the Iterated S2K algorithm. Throws e2e.openpgp.error.Error if
 * it fails.
 * @param {e2e.hash.Hash} hash An instance of the hash algorithm to use.
 * @param {!e2e.ByteArray} salt The salt to use for the S2K.
 * @param {number} encodedCount The encoded number of bytes to be hashed.
 * @constructor
 * @extends {e2e.openpgp.SimpleS2K}
 */
e2e.openpgp.IteratedS2K = function(hash, salt, encodedCount) {
  goog.base(this, hash);
  if (salt.length != 8 || !e2e.isByteArray(salt)) {
    throw new e2e.openpgp.error.InvalidArgumentsError('Invalid salt.');
  }
  if (!e2e.isByte(encodedCount)) {
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'Invalid encoded count.');
  }
  /**
   * The salt to use for the S2K. Must be 8 bytes long.
   * @type {!e2e.ByteArray}
   * @private
   */
  this.salt_ = salt;
  /**
   * The encoded number of bytes to be hashed.
   * @type {number}
   * @private
   */
  this.encodedCount_ = encodedCount;
  /**
   * The decoded number of bytes to be hashed.
   * @type {number}
   * @private
   */
  this.count_ = e2e.openpgp.IteratedS2K.getCount_(encodedCount);
};
goog.inherits(e2e.openpgp.IteratedS2K, e2e.openpgp.SimpleS2K);


/** @inheritDoc */
e2e.openpgp.IteratedS2K.prototype.type = e2e.openpgp.S2k.Type.ITERATED;


/** @inheritDoc */
e2e.openpgp.IteratedS2K.prototype.getKey = function(passphrase, length) {
  var salted_passphrase = this.salt_.concat(passphrase);
  var count = this.count_;

  if (count < salted_passphrase.length) {
    count = salted_passphrase.length;
  }

  // Construct an array with multiple copies of salted_passphrase. This enables
  // us to pass block_size chunks of salted_passphrase into the hash function.
  // This runs twice as fast as the naive approach.
  var block_size = this.hash.blockSize;
  var reps = Math.ceil(block_size / salted_passphrase.length) + 1;
  var repeated = goog.array.flatten(goog.array.repeat(salted_passphrase, reps));
  var slices = [];
  for (var i = 0; i < salted_passphrase.length; i++) {
    slices.push(repeated.slice(i, i + block_size));
  }

  var num_zero_prepend = 0;
  var hashed = [], original_length = length;
  while (length > 0) { // Loop to handle when checksum len < length requested.
    this.hash.reset();
    var remaining = count;  // Number of input bytes we still want.
    if (num_zero_prepend > 0) {
      var firstRound = goog.array.repeat(0, num_zero_prepend);
      // Align initial hash input size to block size.
      var size = (block_size < remaining) ? block_size : remaining;
      size -= num_zero_prepend;
      if (size < 0) {
        size = 0;
      }
      goog.array.extend(firstRound, repeated.slice(0, size));
      this.hash.update(firstRound);
      remaining -= size;
    }
    while (remaining > 0) {
      var offset = (count - remaining) % salted_passphrase.length;
      var size = (block_size < remaining) ? block_size : remaining;
      if (size == block_size) {
        this.hash.update(slices[offset]);
      } else {
        this.hash.update(repeated.slice(offset, offset + size));
      }
      remaining -= size;
    }
    var checksum = this.hash.digest();
    length -= checksum.length;
    goog.array.extend(hashed, checksum);
    num_zero_prepend += 1;
  }
  return hashed.slice(0, original_length);
};


/** @inheritDoc */
e2e.openpgp.IteratedS2K.prototype.serialize = function() {
  return goog.array.concat(
      goog.base(this, 'serialize'),
      this.salt_,
      this.encodedCount_);
};


/**
 * The EXPBIAS constant as defined in RFC 4880 Section 3.7.1.3.
 * @type {number}
 * @const
 * @private
 */
e2e.openpgp.IteratedS2K.EXPBIAS_ = 6;


/**
 * Returns the number of iterations for a given count using the algorithm
 * defined in RFC 4880 Section 3.7.1.3. Must be in the range [0-255].
 * Throws e2e.openpgp.error.Error if it fails.
 * @param {number} c The encoded count for.
 * @return {number} The number of bytes to be hashed.
 * @private
 */
e2e.openpgp.IteratedS2K.getCount_ = function(c) {
  if (e2e.isByte(c)) {
    return (0x10 + (c & 0x0F)) << ((c >> 4) +
                                   e2e.openpgp.IteratedS2K.EXPBIAS_);
  } else {
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'Invalid encoded count.');
  }
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides a base class to implement Modes of Operation.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.ciphermode.CipherMode');

/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.ByteArray');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.cipher.ciphertext');



/**
 * Constructor for all modes of operation.
 * @param {e2e.cipher.SymmetricCipher} cipher The cipher to use.
 * @constructor
 */
e2e.ciphermode.CipherMode = function(cipher) {
  /**
   * The cipher to use in this mode of operation.
   * @type {e2e.cipher.SymmetricCipher}
   * @protected
   */
  this.cipher = cipher;
};

/**
 * Asynchronous call to encrypt the data with a given iv.
 * @param {!e2e.ByteArray} data The data to encrypt.
 * @param {!e2e.ByteArray} iv The initialization vector.
 * @return {!e2e.async.Result.<!e2e.cipher.ciphertext.Symmetric>} The
 *     encrypted data.
 */
e2e.ciphermode.CipherMode.prototype.encrypt = goog.abstractMethod;


/**
 * Asynchronous call to decrypt the data with the given iv.
 * @param {!e2e.ByteArray} data The data to decrypt.
 * @param {!e2e.ByteArray} iv The initialization vector.
 * @return {!e2e.async.Result.<!e2e.ByteArray>} The decrypted data.
 */
e2e.ciphermode.CipherMode.prototype.decrypt = goog.abstractMethod;

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implements Cipher Feedback Mode.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.ciphermode.Cfb');

goog.require('e2e.async.Result');
goog.require('e2e.ciphermode.CipherMode');
goog.require('goog.array');
goog.require('goog.crypt');


/**
 * Cipher Feedback converts a block cipher into a stream cipher by using the
 * output of the previous block's ciphertext as the input to the encrypt
 * function, which is then XOR'd with the plaintext.
 * @param {e2e.cipher.SymmetricCipher} cipher The cipher to use.
 * @extends {e2e.ciphermode.CipherMode}
 * @constructor
 */
e2e.ciphermode.Cfb = function(cipher) {
  goog.base(this, cipher);
};
goog.inherits(e2e.ciphermode.Cfb, e2e.ciphermode.CipherMode);


/** @inheritDoc */
e2e.ciphermode.Cfb.prototype.encrypt = function(data, iv) {
  var fre = e2e.async.Result.getValue(this.cipher.encrypt(iv));
  /** @type {!e2e.cipher.ciphertext.Symmetric} */
  var c = [];

  for (var i = 0; i < data.length; i += this.cipher.blockSize) {
    var fr = goog.array.slice(data, i, i + this.cipher.blockSize);
    Array.prototype.push.apply(c,
        goog.crypt.xorByteArray(fr, fre.slice(0, fr.length)));
    fre = e2e.async.Result.getValue(
        this.cipher.encrypt(c.slice(-this.cipher.blockSize)));
  }
  return e2e.async.Result.toResult(c);
};


/** @inheritDoc */
e2e.ciphermode.Cfb.prototype.decrypt = function(data, iv) {
  var fre = e2e.async.Result.getValue(this.cipher.encrypt(iv));
  var p = [];
  for (var i = 0; i < data.length; i += this.cipher.blockSize) {
    var fr = goog.array.slice(data, i, i + this.cipher.blockSize);
    Array.prototype.push.apply(p,
        goog.crypt.xorByteArray(fr, fre.slice(0, fr.length)));
    fre = e2e.async.Result.getValue(this.cipher.encrypt(fr));
  }
  return e2e.async.Result.toResult(p);
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implements a cipher or signer where the key itself is
 * encrypted. TODO(user): Replace this with WrappedKey.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.EncryptedCipher');
goog.provide('e2e.openpgp.EncryptedCipher.KeyDerivationType');
goog.provide('e2e.openpgp.EncryptedCipher.LockedKeyError');

goog.require('e2e');
goog.require('e2e.AlgorithmImpl');
goog.require('e2e.algorithm.KeyLocations');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.AsymmetricCipher');
goog.require('e2e.ciphermode.Cfb');
goog.require('e2e.hash.Md5');
goog.require('e2e.hash.Sha1');
goog.require('e2e.openpgp');
goog.require('e2e.openpgp.IteratedS2K');
goog.require('e2e.openpgp.Mpi');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.error.DecryptError');
goog.require('e2e.openpgp.error.Error');
goog.require('e2e.openpgp.error.InvalidArgumentsError');
goog.require('e2e.openpgp.error.MissingPassphraseError');
goog.require('e2e.openpgp.error.WrongPassphraseError');
goog.require('e2e.random');
goog.require('e2e.signer.Algorithm');
goog.require('e2e.signer.Signer');
goog.require('goog.array');


/**
 * An EncryptedCipher wraps a e2e.cipher.Cipher so that some of the
 * operations (sign/decrypt) are only available after unlocking the encrypted
 * key material.
 * @param {!e2e.ByteArray} encryptedKeyData The encrypted key data.
 * @param {e2e.openpgp.EncryptedCipher.KeyDerivationType} keyDerivation The
 *     key derivation style to use.
 * @param {e2e.cipher.Cipher|e2e.signer.Signer} cipher Instance
 *     of the cipher with the public key.
 * @param {e2e.cipher.Algorithm=} opt_algorithm The algorithm to
 *     use for decrypting the encrypted key data.
 * @param {!e2e.ByteArray=} opt_iv The initialization vector for the key
 *     data.
 * @param {e2e.openpgp.S2k=} opt_s2k The S2K instance to use to generate
 *     the key from a passphrase.
 * @constructor
 * @extends {e2e.AlgorithmImpl}
 * @implements {e2e.cipher.AsymmetricCipher}
 * @implements {e2e.signer.Signer}
 */
e2e.openpgp.EncryptedCipher = function(
    encryptedKeyData,
    keyDerivation,
    cipher,
    opt_algorithm,
    opt_iv,
    opt_s2k) {
  /**
   * Used to mark whether the key is locked.
   * @type {boolean}
   * @private
   */
  this.locked_ = true;
  /**
   * The key derivation type to be used for decrypting the data.
   * @type {e2e.openpgp.EncryptedCipher.KeyDerivationType}
   * @private
   */
  this.keyDerivation_ = keyDerivation;
  switch (this.keyDerivation_) {
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_SHA1:
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_CHECKSUM:
      if (!goog.isDefAndNotNull(opt_s2k)) {
        throw new e2e.openpgp.error.InvalidArgumentsError(
            'Invalid S2K in encrypted cipher.');
      }
      /**
       * The S2K specifier for generating the key.
       * @type {e2e.openpgp.S2k|undefined}
       * @private
       */
      this.s2k_ = opt_s2k;
      // Falling through, no break;
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.MD5:
      if (!goog.isDefAndNotNull(opt_iv) ||
          !e2e.isByteArray(opt_iv) ||
          !goog.isDefAndNotNull(opt_algorithm)) {
        throw new e2e.openpgp.error.InvalidArgumentsError(
            'Invalid IV for encrypted cipher');
      }
      /**
       * The IV to be used for decrypting the data.
       * @type {!e2e.ByteArray|undefined}
       * @private
       */
      this.iv_ = opt_iv;
      /**
       * The algorithm in which the key is encrypted.
       * @type {e2e.cipher.Algorithm|undefined}
       * @private
       */
      this.symmetricAlgorithm_ = opt_algorithm;
      // Falling through, no break;
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.PLAINTEXT:
      /**
       * The cipher to use.
       * @type {e2e.cipher.Cipher|e2e.signer.Signer}
       * @private
       */
      this.cipher_ = cipher;
      if (!e2e.isByteArray(encryptedKeyData)) {
        throw new e2e.openpgp.error.InvalidArgumentsError(
            'Invalid Encrypted Key Data');
      }
      /**
       * The potentially encrypted key data.
       * @type {!e2e.ByteArray}
       */
      this.encryptedKeyData = encryptedKeyData;
      break;
    default:
      throw new e2e.openpgp.error.InvalidArgumentsError(
          'Invalid Key Derivation Type.');
  }
  goog.base(this, cipher.algorithm);
};
goog.inherits(e2e.openpgp.EncryptedCipher, e2e.AlgorithmImpl);


/**
 * The key bytes, only available after key was unlocked.
 * @type {!e2e.ByteArray}
 * @private
 */
e2e.openpgp.EncryptedCipher.prototype.keyBytes_;

/**
 * Returns the key derivation type.
 * @return {e2e.openpgp.EncryptedCipher.KeyDerivationType|undefined}
 */
e2e.openpgp.EncryptedCipher.prototype.getKeyDerivationType = function() {
  return this.keyDerivation_;
};


/**
 * Returns the key derivation IV.
 * @return {!e2e.ByteArray|undefined}
 */
e2e.openpgp.EncryptedCipher.prototype.getKeyDerivationIv = function() {
  return this.iv_;
};


/**
 * Returns the key derivation algorithm.
 * @return {e2e.cipher.Algorithm|undefined}
 */
e2e.openpgp.EncryptedCipher.prototype.getKeyDerivationAlgorithm =
    function() {
  return this.symmetricAlgorithm_;
};


/**
 * Returns the key derivation S2k.
 * @return {e2e.openpgp.S2k|undefined}
 */
e2e.openpgp.EncryptedCipher.prototype.getKeyDerivationS2k = function() {
  return this.s2k_;
};


/**
 * @const {number} Default iterated salt for encrypting with a passphrase.
 */
e2e.openpgp.EncryptedCipher.DEFAULT_COUNT = 96;


/**
 * @const {e2e.cipher.Algorithm} Default cipher to use to encrypt
 *     with a passphrase.
 */
e2e.openpgp.EncryptedCipher.DEFAULT_CIPHER =
    e2e.cipher.Algorithm.AES256;


/**
 * Locks the key with the given passphrase.
 * @param {!e2e.ByteArray=} opt_passphrase
 */
e2e.openpgp.EncryptedCipher.prototype.lockKey = function(
    opt_passphrase) {
  if (this.locked_) {
    throw new e2e.openpgp.EncryptedCipher.LockedKeyError(this);
  }
  if (!goog.isDef(opt_passphrase)) {
    this.keyDerivation_ =
      e2e.openpgp.EncryptedCipher.KeyDerivationType.PLAINTEXT;
    this.iv_ = [];
    this.symmetricAlgorithm_ = undefined;
    this.s2k_ = undefined;
    this.encryptedKeyData = this.keyBytes_.concat(
        e2e.openpgp.calculateNumericChecksum(this.keyBytes_));
  } else {
    // Encrypt all ciphers with passphrase on SHA1 Salted Iterated S2K.
    this.keyDerivation_ =
        e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_SHA1;
    var salt = e2e.random.getRandomBytes(8);
    this.symmetricAlgorithm_ =
        e2e.openpgp.EncryptedCipher.DEFAULT_CIPHER;
    var cipher = /** @type {e2e.cipher.SymmetricCipher} */ (
        e2e.openpgp.constants.getInstance(
            e2e.openpgp.constants.Type.SYMMETRIC_KEY,
            this.symmetricAlgorithm_));
    this.iv_ = e2e.random.getRandomBytes(
        cipher.blockSize);
    var count = e2e.openpgp.EncryptedCipher.DEFAULT_COUNT;
    // TODO(user): Maybe we can use a cheaper function here instead of sha1.
    this.s2k_ = new e2e.openpgp.IteratedS2K(
        new e2e.hash.Sha1, salt, count);
    var symCipher = /** @type {e2e.cipher.SymmetricCipher} */ (
        e2e.openpgp.constants.getInstance(
            e2e.openpgp.constants.Type.SYMMETRIC_KEY,
            e2e.openpgp.EncryptedCipher.DEFAULT_CIPHER));
    var cfbSymCipher = new e2e.ciphermode.Cfb(symCipher);
    var key = this.s2k_.getKey(opt_passphrase, symCipher.keySize);
    symCipher.setKey({key: key});
    var sha1 = new e2e.hash.Sha1;
    var hash = sha1.hash(this.keyBytes_);
    // TODO(user): Make this call asynchronous.
    this.encryptedKeyData = e2e.async.Result.getValue(
      cfbSymCipher.encrypt(this.keyBytes_.concat(hash), this.iv_));
  }
};


/**
 * Checks if the key data is valid and sets the key. Can throw an error
 * if the key type is unrecognized.
 * @param {!e2e.ByteArray} decryptedKeyData The key data.
 * @private
 */
e2e.openpgp.EncryptedCipher.prototype.unlockAndVerifyKey_ = function(
    decryptedKeyData) {
  switch (this.keyDerivation_) {
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_SHA1:
      // S2K_SHA1 uses sha1 for the checksum.
      this.unlockKeyWithSha1Checksum_(decryptedKeyData);
      break;
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.PLAINTEXT:
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_CHECKSUM:
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.MD5:
      // The MD5, plaintext and S2K checksum use numeric checksum.
      this.unlockKeyWithNumericChecksum_(decryptedKeyData);
      break;
    default:
      // This should never happen, but..
      throw new e2e.openpgp.error.InvalidArgumentsError(
          'Invalid Key Derivation Type.');
  }
};


/**
 * Unlocks the key so that this key can be used for private operations. If this
 * key isn't encrypted verify that its checksum is correct; otherwise decrypt it
 * and verify checksum. There are several ways of decrypting an encrypted
 * cipher, and there are different checksums that can be used to verify the key
 * was correct. Each has different decryption modes of operation as well, and
 * the encoding of the data inside the code is formatted differently depending
 * on which key derivation type.
 * @param {!e2e.ByteArray=} opt_passphrase The passphrase to use to
 *     decrypt it.
 */
e2e.openpgp.EncryptedCipher.prototype.unlockKey = function(
    opt_passphrase) {
  if (!this.locked_) {
    return;
  }
  // Special casing for unencrypted keys.
  if (this.keyDerivation_ ==
      e2e.openpgp.EncryptedCipher.KeyDerivationType.PLAINTEXT) {
    // Plaintext key derivation type uses numeric checksum.
    this.unlockAndVerifyKey_(this.encryptedKeyData);
    return;
  } else if (!goog.isDef(this.iv_) || !goog.isDef(this.symmetricAlgorithm_)) {
    throw new e2e.openpgp.error.DecryptError(
        'Missing encrypted key metadata.');
  }

  var key;
  var symCipher = /** @type {e2e.cipher.SymmetricCipher} */ (
      e2e.openpgp.constants.getInstance(
          e2e.openpgp.constants.Type.SYMMETRIC_KEY,
          this.symmetricAlgorithm_));
  var cfbSymCipher = new e2e.ciphermode.Cfb(symCipher);
  switch (this.keyDerivation_) {
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_SHA1:
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_CHECKSUM:
      // For SHA1 and numeric checksum a passphrase is required.
      if (!goog.isDef(opt_passphrase)) {
        throw new e2e.openpgp.error.MissingPassphraseError();
      }
      key = this.s2k_.getKey(opt_passphrase, symCipher.keySize);
      break;
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.MD5:
      // For MD5 there's no S2K, and the key is simply the MD5 of the secret.
      var md5 = new e2e.hash.Md5;
      if (!goog.isDef(opt_passphrase)) {
        throw new e2e.openpgp.error.MissingPassphraseError();
      }
      key = md5.hash(opt_passphrase);
      break;
    default:
      // This should never happen, but..
      throw new e2e.openpgp.error.InvalidArgumentsError(
          'Invalid Key Derivation Type.');
  }
  symCipher.setKey({key: key});
  // TODO(user): Make this call asynchronous.
  var decryptedData = e2e.async.Result.getValue(
      cfbSymCipher.decrypt(this.encryptedKeyData, this.iv_));
  this.unlockAndVerifyKey_(decryptedData);
};


/**
 * Verifies the data is valid, and unlocks the key to do private operations.
 * @param {!e2e.ByteArray} data The data to verify and import.
 * @private
 */
e2e.openpgp.EncryptedCipher.prototype.unlockKeyWithSha1Checksum_ =
    function(data) {
  var key = data.slice(0, -20);
  var chk = data.slice(-20);
  var sha1 = new e2e.hash.Sha1;
  var hash = /** @type {!e2e.ByteArray} */ (sha1.hash(key));
  if (!e2e.compareByteArray(chk, hash)) {
    throw new e2e.openpgp.error.WrongPassphraseError();
  }
  this.unlockKey_(key);
};


/**
 * Verifies the data is valid, and unlocks the key to do private operations.
 * @param {!e2e.ByteArray} data The data to verify and import.
 * @private
 */
e2e.openpgp.EncryptedCipher.prototype.unlockKeyWithNumericChecksum_ =
    function(data) {
  var key = data.slice(0, -2);
  var checksum = data.slice(-2);
  if (!e2e.compareByteArray(checksum,
      e2e.openpgp.calculateNumericChecksum(key))) {
    throw new e2e.openpgp.error.WrongPassphraseError();
  }
  this.unlockKey_(key);
};


/**
 * Unlocks the encrypted cipher so that it can do private operations.
 * @param {!e2e.ByteArray} keyBytes The key data to use to get the MPIs.
 * @private
 */
e2e.openpgp.EncryptedCipher.prototype.unlockKey_ = function(keyBytes) {
  // Make a copy of the key to avoid changing it.
  var key = keyBytes.slice(0);
  var keyData = this.cipher_.getKey();
  switch (this.cipher_.algorithm) {
  case e2e.cipher.Algorithm.RSA:
    keyData.d = goog.array.clone(e2e.openpgp.Mpi.parse(key));
    keyData.p = goog.array.clone(e2e.openpgp.Mpi.parse(key));
    keyData.q = goog.array.clone(e2e.openpgp.Mpi.parse(key));
    keyData.u = goog.array.clone(e2e.openpgp.Mpi.parse(key));
    break;
  case e2e.signer.Algorithm.DSA:
  case e2e.cipher.Algorithm.ELGAMAL:
    keyData.x = goog.array.clone(e2e.openpgp.Mpi.parse(key));
    break;
  case e2e.cipher.Algorithm.ECDH:
  case e2e.signer.Algorithm.ECDSA:
    keyData.privKey = goog.array.clone(e2e.openpgp.Mpi.parse(key));
    break;
  default:
    throw new e2e.openpgp.error.InvalidArgumentsError('Unknown algorithm');
  }
  // TODO(user): Figure out what loc this is once multiple locs are supported.
  keyData.loc = e2e.algorithm.KeyLocations.JAVASCRIPT;
  this.cipher_.setKey(keyData);
  this.locked_ = false;
  this.keyBytes_ = keyBytes;
};


/** @inheritDoc */
e2e.openpgp.EncryptedCipher.prototype.getKey = function() {
  return this.cipher_.getKey();
};

/** @inheritDoc */
e2e.openpgp.EncryptedCipher.prototype.encrypt = function(data) {
  return this.cipher_.encrypt(data);
};


/** @inheritDoc */
e2e.openpgp.EncryptedCipher.prototype.decrypt = function(data) {
  if (this.locked_) {
    throw new e2e.openpgp.EncryptedCipher.LockedKeyError(this);
  }
  return this.cipher_.decrypt(data);
};


/** @override */
e2e.openpgp.EncryptedCipher.prototype.sign = function(data) {
  if (this.locked_) {
    throw new e2e.openpgp.EncryptedCipher.LockedKeyError(this);
  }
  return this.cipher_.sign(data);
};


/** @override */
e2e.openpgp.EncryptedCipher.prototype.verify = function(data, sig) {
  return this.cipher_.verify(data, sig);
};


/** @override */
e2e.openpgp.EncryptedCipher.prototype.getHash = function() {
  return this.cipher_.getHash();
};


/** @override */
e2e.openpgp.EncryptedCipher.prototype.setHash = function(hash) {
    this.cipher_.setHash(hash);
};


/**
 * @return {boolean} True iff the cipher is locked.
 */
e2e.openpgp.EncryptedCipher.prototype.isLocked = function() {
  return Boolean(this.locked_);
};


/**
 * Defines the different types of key derivation to decrypt the key material.
 * It is defined in RFC 4880 Section 5.5.3. as string-to-key usage conventions.
 * @enum {number}
 */
e2e.openpgp.EncryptedCipher.KeyDerivationType = {
  'S2K_CHECKSUM': 255,
  'S2K_SHA1': 254,
  'PLAINTEXT': 0,
  'MD5': 1
};


/**
 * Exception used when a private operation is done on a locked cipher.
 * @param {e2e.openpgp.EncryptedCipher} cipher The locked cipher.
 * @constructor
 * @extends {e2e.openpgp.error.Error}
 */
e2e.openpgp.EncryptedCipher.LockedKeyError = function(cipher) {
  /**
   * The locked encrypted cipher.
   * @type {e2e.openpgp.EncryptedCipher}
   */
  this.cipher = cipher;
  goog.base(this, 'Operation not allowed on locked key. Unlock key first.');
};
goog.inherits(e2e.openpgp.EncryptedCipher.LockedKeyError,
              e2e.openpgp.error.Error);

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Represents a key packet (parent of public and private key).
 * @author evn@google.com (Eduardo Vela)
 */


goog.provide('e2e.openpgp.packet.Key');
goog.provide('e2e.openpgp.packet.Key.Usage');

goog.require('e2e');
goog.require('e2e.openpgp.EncryptedCipher');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.error.SerializationError');
goog.require('e2e.openpgp.error.SignatureError');
goog.require('e2e.openpgp.packet.Packet');
goog.require('e2e.openpgp.packet.Signature');
goog.require('e2e.openpgp.packet.Signature.SignatureType');
/** @suppress {extraRequire} manually import typedefs due to b/15739810 */
goog.require('e2e.openpgp.types');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.crypt');



/**
 * A Key Packet that is the parent of SecretKey and PublicKey.
 * @param {number} version The version of the key. Should be 0x04.
 * @param {number} timestamp The creation time of the key.
 * @param {!e2e.cipher.Cipher|!e2e.signer.Signer} cipher An
 *     instance of the cipher used.
 * @param {!e2e.ByteArray=} opt_fingerprint The fingerprint of the key.
 * @param {!e2e.ByteArray=} opt_keyId The key ID of the key. Should be
 *     passed in for v3 keys, but not for v4 keys.
 * @extends {e2e.openpgp.packet.Packet}
 * @constructor
 */
e2e.openpgp.packet.Key = function(
    version, timestamp, cipher, opt_fingerprint, opt_keyId) {
  goog.base(this);
  /**
   * The version of the key.
   * @type {number}
   */
  this.version = version;

  var keyId;
  if (version == 3 || version == 2) {
    keyId = opt_keyId;
  }

  if (goog.isDefAndNotNull(opt_fingerprint)) {
    /**
     * The fingerprint of the key.
     * @type {!e2e.ByteArray}
     */
    this.fingerprint = opt_fingerprint;

    if (version == 4) {  // V4 fingerprint specified at 12.2 in RFC.
      keyId = this.fingerprint.slice(-8);
    }
  }
  /**
   * If available, the key ID of the key.
   * @type {!e2e.ByteArray|undefined}
   */
  this.keyId = keyId;
  /**
   * The timestamp of the creation of this public key.
   * @type {number}
   */
  this.timestamp = timestamp;
  /**
   * The cipher of this public key (RSA/DSA/etc..).
   * @type {!e2e.cipher.Cipher|!e2e.signer.Signer}
   */
  this.cipher = cipher;
  /**
   * @type {!Array.<!e2e.openpgp.packet.Signature>}
   * @private
   */
  this.bindingSignatures_ = [];
  /**
   * @type {!Array.<!e2e.openpgp.packet.Signature>}
   * @private
   */
  this.revocations_ = [];
  /**
   * Usages of the key packet that have been certified in signatures.
   * @type {!Array.<!e2e.openpgp.packet.Key.Usage>}
   * @private
   */
  this.certifiedUsage_ = [];
};
goog.inherits(e2e.openpgp.packet.Key,
              e2e.openpgp.packet.Packet);


/**
 * @enum {string} Key usage.
 */
e2e.openpgp.packet.Key.Usage = {
  'ENCRYPT': 'encrypt',
  'SIGN': 'sign'
};


/**
 * @return {!e2e.openpgp.packet.PublicKey}
 */
e2e.openpgp.packet.Key.prototype.getPublicKeyPacket = goog.abstractMethod;


/**
 * True iff key is a subkey. Used to implement common key logic in this class
 * without introducing circular dependencies.
 * @type {boolean}
 */
e2e.openpgp.packet.Key.prototype.isSubkey = false;


/**
 * Adds the key binding signature.
 * Caution! Signature is not verified, use verifySignatures() function to verify
 * the signature.
 * @param {!e2e.openpgp.packet.Signature} signature
 */
e2e.openpgp.packet.Key.prototype.addBindingSignature = function(signature) {
  if (signature.signatureType !==
      e2e.openpgp.packet.Signature.SignatureType.SUBKEY) {
    throw new e2e.openpgp.error.ParseError(
        'Invalid binding signature type.');
  }
  if (Boolean(signature.attributes && signature.attributes.KEY_FLAG_SIGN)) {
      // RFC 4880 5.2.1.
      // A signature that binds a signing subkey MUST have
      // an Embedded Signature subpacket in this binding signature that
      // contains a 0x19 signature made by the signing subkey on the
      // primary key and subkey.
      if (!signature.embeddedSignature) {
        throw new e2e.openpgp.error.ParseError(
            'Missing required key cross-signature.');
      }
      var crossSignature = signature.embeddedSignature;
      if (!this.keyId ||
          !goog.array.equals(crossSignature.getSignerKeyId(), this.keyId) ||
          crossSignature.signatureType !==
              e2e.openpgp.packet.Signature.SignatureType.PRIMARY_KEY) {
        throw new e2e.openpgp.error.ParseError('Invalid key cross-signature.');
      }
  }
  this.bindingSignatures_.push(signature);
};


/**
 * Checks if a key has valid (unrevoked) binding signature to a given key
 *     packet. This function will throw SignatureError if any signature
 *     verification fails.
 * @param {!e2e.openpgp.packet.Key} verifyingKey key packet that should
 *     verify the signatures
 * @return {boolean} True if key has valid binding.
 */
e2e.openpgp.packet.Key.prototype.verifySignatures = function(verifyingKey) {
  // Always process signatures to throw errors on any signature tampering.

  // There should be no valid revocation signatures.
  var isRevoked = false;
  goog.array.forEach(this.revocations_, function(signature) {
      if (this.verifyRevocation_(signature, verifyingKey)) {
        isRevoked = true;
      }
  }, this);
  var hasBinding = false;
  // Subkeys needs to have a binding signature. See RFC 4880 11.1.
  goog.array.forEach(this.bindingSignatures_, function(signature) {
    if (this.verifyBindingSignature_(signature, verifyingKey)) {
      hasBinding = true;
    }
  }, this);
  return (!isRevoked && (!this.isSubKey || hasBinding));
};


/**
 * Adds the key/subkey revocation signature.
 * Caution! Signature is not verified, use verifySignatures() function to verify
 * the signature.
 * @param {!e2e.openpgp.packet.Signature} signature Revocation signature
 */
e2e.openpgp.packet.Key.prototype.addRevocation = function(signature) {
  if (signature.signatureType !== (this.isSubkey ?
      e2e.openpgp.packet.Signature.SignatureType.SUBKEY_REVOCATION :
      e2e.openpgp.packet.Signature.SignatureType.KEY_REVOCATION)) {
    throw new e2e.openpgp.error.ParseError(
        'Invalid revocation signature type.');
  }
  this.revocations_.push(signature);
};


/**
 * Verifies key/subkey revocation signature.
 * @param {!e2e.openpgp.packet.Signature} signature Revocation signature
 * @param {!e2e.openpgp.packet.Key} verifyingKey key packet that should
 *     verify the signature
 * @return {boolean} True iff signature verified correctly.
 * @private
 */
e2e.openpgp.packet.Key.prototype.verifyRevocation_ = function(signature,
    verifyingKey) {
  if (this.isSubkey) {
    return this.verifySignatureInternal_(
        signature,
        verifyingKey,
        this.getKeyBindingSignatureData_(verifyingKey),
        'Subkey revocation signature verification failed.');
  } else {
    return this.verifySignatureInternal_(
        signature,
        verifyingKey,
        this.getPublicKeyPacket().getBytesToSign(),
        'Key revocation signature verification failed.');
  }
};


/**
 * Verifies subkey binding signature.
 * @param {!e2e.openpgp.packet.Signature} signature Subkey binding signature
 * @param {!e2e.openpgp.packet.Key} verifyingKey key packet that should
 *     verify the signature
 * @return {boolean} True iff signature verified correctly.
 * @private
 */
e2e.openpgp.packet.Key.prototype.verifyBindingSignature_ = function(signature,
    verifyingKey) {
  var result = this.verifySignatureInternal_(
      signature,
      verifyingKey,
      this.getKeyBindingSignatureData_(verifyingKey),
      'Binding signature verification failed.');
  if (result) {
    if (signature.attributes &&
        signature.attributes.hasOwnProperty('KEY_FLAGS')) {
      this.certifiedUsage_ = [];
      if (signature.attributes.KEY_FLAG_SIGN) {
        this.certifiedUsage_.push(e2e.openpgp.packet.Key.Usage.SIGN);
      }
      if (signature.attributes.KEY_FLAG_ENCRYPT_COMMUNICATION ||
          signature.attributes.KEY_FLAG_ENCRYPT_STORAGE) {
        this.certifiedUsage_.push(e2e.openpgp.packet.Key.Usage.ENCRYPT);
      }
    }
  }
  return result;
};


/**
 * Verifies the signature, throwing error when verification fails or if
 *     signature is not of expected type.
 * @param {!e2e.openpgp.packet.Signature} signature Revocation signature
 * @param {!e2e.openpgp.packet.Key} verifyingKey key packet that should
 *     verify the signature
 * @param {!e2e.ByteArray} signedData data that was signed.
 * @param {string} verificationErrorMsg error message when signature did not
 *     verify.
 * @return {boolean} True iff signature verified correctly.
 * @private
 */
e2e.openpgp.packet.Key.prototype.verifySignatureInternal_ = function(signature,
    verifyingKey, signedData, verificationErrorMsg) {
  if (!verifyingKey.keyId || !goog.array.equals(signature.getSignerKeyId(),
      verifyingKey.keyId)) {
    // Key mismatch, ignore signature.
    return false;
  }
  var signer = /** @type {!e2e.signer.Signer} */ (verifyingKey.cipher);
  try {
    var signatureVerified = signature.verify(signedData,
      goog.asserts.assertObject(signer));
  } catch (e) {
    // Ignore signatures that throw unsupported errors (e.g. weak hash
    // algorithms)
    if (e instanceof e2e.openpgp.error.UnsupportedError) {
      return false;
    }
    throw e;
  }
  if (!signatureVerified) {
    throw new e2e.openpgp.error.SignatureError(verificationErrorMsg);
  }
  // Process embedded signature
  if (this.isSubkey &&
      signature.attributes &&
      signature.attributes.KEY_FLAG_SIGN &&
      signature.signatureType ===
          e2e.openpgp.packet.Signature.SignatureType.SUBKEY) {
      if (!signature.embeddedSignature) {
        throw new e2e.openpgp.error.SignatureError(
            'Missing cross-signature for a signing subkey.');
      }
      if (signature.embeddedSignature.signatureType !==
          e2e.openpgp.packet.Signature.SignatureType.PRIMARY_KEY) {
        throw new e2e.openpgp.error.SignatureError(
            'Invalid cross-signature type.');
      }
      return this.verifySignatureInternal_(
          signature.embeddedSignature,
          this.getPublicKeyPacket(),
          signedData,
          'Cross-signature verification failed.');
  }
  return true;
};


/**
 * Returns data for creating a subkey binding signature between this (bound key)
 *     and a given binding key.
 * @param  {!e2e.openpgp.packet.Key} bindingKey Key to bind to
 * @return {!e2e.ByteArray} Signature data.
 * @private
 */
e2e.openpgp.packet.Key.prototype.getKeyBindingSignatureData_ = function(
    bindingKey) {
  return goog.array.flatten(
      bindingKey.getPublicKeyPacket().getBytesToSign(),
      this.getPublicKeyPacket().getBytesToSign());
};


/**
 * Creates and attaches a SubKey Binding Signature, issued by the specified key
 *     packet.
 * @param {!e2e.openpgp.packet.SecretKey} bindingKey
 * @param {!e2e.openpgp.packet.Signature.SignatureType} type
 * @return {!e2e.async.Result.<undefined>}
 */
e2e.openpgp.packet.Key.prototype.bindTo = function(bindingKey, type) {
  var data = this.getKeyBindingSignatureData_(bindingKey);

  var sigRes = e2e.openpgp.packet.Signature.construct(
      bindingKey,
      data,
      type,
      {
        'SIGNATURE_CREATION_TIME': e2e.dwordArrayToByteArray(
            [Math.floor(new Date().getTime() / 1e3)]),
        'ISSUER': bindingKey.keyId
      });
  return sigRes.addCallback(function(sig) {
    this.bindingSignatures_.push(sig);
  }, this);
};


/** @override */
e2e.openpgp.packet.Key.prototype.serialize = function() {
  var serialized = goog.base(this, 'serialize');
  goog.array.forEach(
      this.revocations_.concat(this.bindingSignatures_),
      function(sig) {
        goog.array.extend(serialized, sig.serialize());
      });
  return serialized;
};


/**
 * Specifies whether the key packet can be used for a specific use.
 * It only takes the cipher capabilities into consideration. In order to check
 * whether the key owner wants the key to be used in a certain way, call
 * isCertifiedTo().
 * @param {e2e.openpgp.packet.Key.Usage} use Either 'sign' or 'encrypt'.
 * @return {boolean}
 */
e2e.openpgp.packet.Key.prototype.can = function(use) {
  return false;
};


/**
 * Specifies whether the key packet has been certified for a specific use.
 * @param {e2e.openpgp.packet.Key.Usage} use Either 'sign' or 'encrypt'.
 * @return {boolean}
 */
e2e.openpgp.packet.Key.prototype.isCertifiedTo = function(use) {
  return goog.array.contains(this.certifiedUsage_, use);
};


/**
 * Converts a key packet to KeyPacketInfo.
 * @return {!e2e.openpgp.KeyPacketInfo}
 */
e2e.openpgp.packet.Key.prototype.toKeyPacketInfo = function() {
  return {
    /** @suppress {missingRequire} Only used for an instanceof check. */
    secret: this instanceof e2e.openpgp.packet.SecretKey,
    fingerprint: this.fingerprint,
    fingerprintHex: this.getFingerprintHex_(),
    algorithm: this.cipher.algorithm
  };
};


/**
 * Returns human-readable key fingerprint formatted as a hexadecimal string,
 * with spaces separating each 4 hex digits, and 5 digit blocks.
 * @return {string}
 * @private
 */
e2e.openpgp.packet.Key.prototype.getFingerprintHex_ = function() {
  var hex = goog.crypt.byteArrayToHex(this.fingerprint).toUpperCase();
  hex = hex.replace(/([0-9A-F]{4})/g, '$1 '); // Group by 4 digits.
  hex = hex.replace(/(([0-9A-F]{4} ){5})/g, '$1 '); // Space after 5 groups.
  return hex.trim();
};


/**
 * Gets a byte array representing the key data to create the signature over.
 * See RFC 4880 5.2.4 for details.
 * @return {!e2e.ByteArray} The serialization of the key packet.
 */
e2e.openpgp.packet.Key.prototype.getBytesToSign = function() {
  var serialized = this.serializePacketBody(); // goog.base(this, 'serialize');
  if (serialized.length > 0xFFFF) {
    throw new e2e.openpgp.error.SerializationError(
        'Key packet length is too big.');
  }
  var length = e2e.dwordArrayToByteArray(
      [serialized.length]).slice(2);
  return goog.array.flatten(
      0x99,
      length,
      serialized
  );
};

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Represents a public key packet.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.packet.PublicKey');

goog.require('e2e');
goog.require('e2e.algorithm.KeyLocations');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.factory');
goog.require('e2e.hash.Md5');
goog.require('e2e.hash.Sha1');
goog.require('e2e.openpgp.Mpi');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.error.SerializationError');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.openpgp.packet.Key');
goog.require('e2e.openpgp.packet.factory');
goog.require('e2e.signer.Algorithm');
goog.require('e2e.signer.factory');
goog.require('goog.array');
goog.require('goog.asserts');



/**
 * A Public Key Packet (Tag 6) RFC 4880 Section 5.5.1.1.
 * @param {number} version The version of the key. Should be 0x04.
 * @param {number} timestamp The creation time of the key.
 * @param {!e2e.cipher.Cipher|!e2e.signer.Signer} cipher
 *     An instance of the cipher used.
 * @param {!e2e.ByteArray=} opt_fingerprint The fingerprint of the key.
 * @param {!e2e.ByteArray=} opt_keyId The key ID of the key. Should be
 *     passed in for v3 keys, but not for v4 keys.
 * @extends {e2e.openpgp.packet.Key}
 * @constructor
 */
e2e.openpgp.packet.PublicKey = function(
    version, timestamp, cipher, opt_fingerprint, opt_keyId) {
  goog.base(this, version, timestamp, cipher, opt_fingerprint, opt_keyId);
};
goog.inherits(e2e.openpgp.packet.PublicKey,
              e2e.openpgp.packet.Key);


/**
 * The prefix to use to calculate a fingerprint.
 * @type {number}
 * @const
 */
e2e.openpgp.packet.PublicKey.FINGERPRINT_PREFIX = 0x99;


/** @inheritDoc */
e2e.openpgp.packet.PublicKey.prototype.tag = 6;


/** @inheritDoc */
e2e.openpgp.packet.PublicKey.prototype.serializePacketBody =
    function() {
  var cipherId = e2e.openpgp.constants.getId(this.cipher.algorithm);
  var keyObj = this.cipher.getKey();
  var keyData;
  switch (this.cipher.algorithm) {
    case e2e.cipher.Algorithm.RSA:
      keyData = goog.array.flatten(
          new e2e.openpgp.Mpi(keyObj['n']).serialize(),
          new e2e.openpgp.Mpi(keyObj['e']).serialize());
      break;
    case e2e.signer.Algorithm.DSA:
      keyData = goog.array.flatten(
          new e2e.openpgp.Mpi(keyObj['p']).serialize(),
          new e2e.openpgp.Mpi(keyObj['q']).serialize(),
          new e2e.openpgp.Mpi(keyObj['g']).serialize(),
          new e2e.openpgp.Mpi(keyObj['y']).serialize());
      break;
    case e2e.cipher.Algorithm.ELGAMAL:
      keyData = goog.array.flatten(
          new e2e.openpgp.Mpi(keyObj['p']).serialize(),
          new e2e.openpgp.Mpi(keyObj['g']).serialize(),
          new e2e.openpgp.Mpi(keyObj['y']).serialize());
      break;
    case e2e.signer.Algorithm.ECDSA:
      keyData = goog.array.flatten(
          keyObj['curve'],
          new e2e.openpgp.Mpi(keyObj['pubKey']).serialize());
      break;
    case e2e.cipher.Algorithm.ECDH:
      keyData = goog.array.flatten(
          // Curve is in serialized MPI format. Its first byte is its length.
          keyObj['curve'],
          new e2e.openpgp.Mpi(keyObj['pubKey']).serialize(),
          // kdfInfo is in serialized MPI format. Its first byte is its length.
          keyObj['kdfInfo']);
      break;
    default:
      throw new e2e.openpgp.error.SerializationError('Unknown algorithm.');
  }
  if (this.version == 4) {
    return goog.array.flatten(
        this.version,
        e2e.dwordArrayToByteArray([this.timestamp]),
        cipherId,
        keyData);
  } else if (this.version == 3 || this.version == 2) {
    return goog.array.flatten(
        this.version,
        e2e.dwordArrayToByteArray([this.timestamp]),
        0, 0, // TODO(user) days until expiration
        cipherId,
        keyData);
  } else {
    throw new e2e.openpgp.error.SerializationError('Unknown version.');
  }
};



/** @override */
e2e.openpgp.packet.PublicKey.prototype.can = function(use) {
  if (use == e2e.openpgp.packet.Key.Usage.ENCRYPT) {
    return e2e.cipher.factory.has(
        /** @type {e2e.cipher.Algorithm} */ (this.cipher.algorithm));
  }
  return false;
};


/** @override */
e2e.openpgp.packet.PublicKey.prototype.getPublicKeyPacket = function() {
  return this;
};


/**
 * Extracts a Public Key Packet from the body, and returns a PublicKey.
 * @param {!e2e.ByteArray} body The body from where to extract the data.
 * @return {!e2e.openpgp.packet.PublicKey} The generated packet.
 */
e2e.openpgp.packet.PublicKey.parse = function(body) {
  var fingerprintCopy = body.slice();
  var version = body.shift();
  if (version != 4 && version != 3 && version != 2) {
    throw new e2e.openpgp.error.UnsupportedError(
        'Deprecated key packet version.');
  }
  var timestamp = e2e.byteArrayToDwordArray(body.splice(0, 4))[0];
  if (version == 3 || version == 2) {
    var daysUntilExpiration = e2e.byteArrayToWord(body.splice(0, 2));
  }
  var cipherId = body.shift();
  var cipherAlgorithm = e2e.openpgp.constants.getAlgorithm(
      e2e.openpgp.constants.Type.PUBLIC_KEY, cipherId);
  var cipher;
  var keyData = {};
  keyData.loc = e2e.algorithm.KeyLocations.JAVASCRIPT;
  // TODO(user): Clean up these types, add loc fields when b/16299258 is fixed.
  switch (cipherAlgorithm) {
    case e2e.cipher.Algorithm.RSA:
      var n = e2e.openpgp.Mpi.parse(body);
      var e = e2e.openpgp.Mpi.parse(body);
      keyData = /** @type {!e2e.cipher.key.Rsa} */({
        'n': goog.array.clone(n),
        'e': goog.array.clone(e)});
      cipher = e2e.cipher.factory.require(cipherAlgorithm, keyData);
      break;
    case e2e.cipher.Algorithm.ELGAMAL:
      var p = e2e.openpgp.Mpi.parse(body);
      var g = e2e.openpgp.Mpi.parse(body);
      var y = e2e.openpgp.Mpi.parse(body);
      keyData = /** @type {!e2e.cipher.key.ElGamal} */(
          {'p': goog.array.clone(p),
           'g': goog.array.clone(g),
           'y': goog.array.clone(y)});
      cipher = e2e.cipher.factory.require(cipherAlgorithm, keyData);
      break;
    case e2e.signer.Algorithm.DSA:
      var p = e2e.openpgp.Mpi.parse(body);
      var q = e2e.openpgp.Mpi.parse(body);
      var g = e2e.openpgp.Mpi.parse(body);
      var y = e2e.openpgp.Mpi.parse(body);
      keyData = /** @type {!e2e.signer.key.Dsa} */(
          {'p': goog.array.clone(p),
           'q': goog.array.clone(q),
           'g': goog.array.clone(g),
           'y': goog.array.clone(y)});
      cipher = e2e.signer.factory.require(cipherAlgorithm, keyData);
      break;
    case e2e.signer.Algorithm.ECDSA:
      var curveSize = body.shift();
      var curve = body.splice(0, curveSize);
      var pubKey = e2e.openpgp.Mpi.parse(body);
      keyData = /** @type {!e2e.signer.key.Ecdsa} */(
            {'curve': goog.array.concat(curveSize, curve),
             'pubKey': goog.array.clone(pubKey)});
      cipher = e2e.signer.factory.require(cipherAlgorithm, keyData);
      break;
    case e2e.cipher.Algorithm.ECDH:
      var curveSize = body.shift();
      var curve = body.splice(0, curveSize);
      var pubKey = e2e.openpgp.Mpi.parse(body);
      var kdfInfo = body.splice(0, 4);
      keyData = /** @type {!e2e.cipher.key.Ecdh} */(
            {'curve': goog.array.concat(curveSize, curve),
             'kdfInfo': goog.array.clone(kdfInfo),
             'pubKey': goog.array.clone(pubKey)});
      // Cannot require() here as we need the fingerprint calculation first.
      cipher = null;  // Set to avoid compile warning.
      break;
    default:
      throw new e2e.openpgp.error.UnsupportedError('Unknown algorithm');
  }

  var fingerprint;
  var keyId = null;
  // Algorithm to calculate v4 fingerprints per RFC 4880 Section 12.2.
  // fingerprintCopy contains: version + timestamp + algorithm + key data.
  // body.length is the left over data for the next packets, so it is not
  // included in the fingerprinted data.
  if (version == 4) {
    fingerprintCopy.splice(-body.length, body.length);
    fingerprint = e2e.openpgp.packet.PublicKey.calculateFingerprint(
        fingerprintCopy);
    if (cipherAlgorithm == e2e.cipher.Algorithm.ECDH) {
      keyData['fingerprint'] = fingerprint;
      cipher = e2e.cipher.factory.require(
          /** @type {e2e.cipher.Algorithm} */ (cipherAlgorithm),
          keyData);
    }
  } else {
    // We threw an exception earlier if it wasn't 2, 3, or 4
    goog.asserts.assert(version == 3 || version == 2);

    // For a V3 key, the eight-octet Key ID consists of the low 64 bits of
    // the public modulus of the RSA key.
    keyId = keyData['n'].slice(-8);

    // The fingerprint of a V3 key is formed by hashing the body (but not
    // the two-octet length) of the MPIs that form the key material (public
    // modulus n, followed by exponent e) with MD5.
    var md5 = new e2e.hash.Md5();
    fingerprint = /** @type {!e2e.ByteArray} */ (md5.hash(
        goog.array.concat(keyData['n'], keyData['e'])));
  }

  return new e2e.openpgp.packet.PublicKey(version, timestamp,
                                          goog.asserts.assertObject(cipher),
                                          fingerprint, keyId);
};


/**
 * Calculates the v4 fingerprints per RFC 4880 Section 12.2.
 * @param {!e2e.ByteArray} pubKey The public key, which contains
 *     version + timestamp + algorithm + key data.
 * @return {!e2e.ByteArray}
 */
e2e.openpgp.packet.PublicKey.calculateFingerprint = function(pubKey) {
  var fingerprintData = goog.array.concat(
    e2e.openpgp.packet.PublicKey.FINGERPRINT_PREFIX,
    pubKey.length >>> 8,
    pubKey.length % 256,
    pubKey);
  var sha1 = new e2e.hash.Sha1();
  return /** @type {!e2e.ByteArray} */ (sha1.hash(fingerprintData));
};

e2e.openpgp.packet.factory.add(e2e.openpgp.packet.PublicKey);

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Represents a secret key packet.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.packet.SecretKey');

goog.require('e2e.cipher.factory');
goog.require('e2e.openpgp.EncryptedCipher');
goog.require('e2e.openpgp.S2k');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.error.SerializationError');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.openpgp.packet.Key');
goog.require('e2e.openpgp.packet.PublicKey');
goog.require('e2e.openpgp.packet.factory');
goog.require('e2e.signer.factory');
goog.require('goog.array');
goog.require('goog.asserts');


/**
 * A Secret Key Packet (Tag 5) RFC 4880 Section 5.5.1.3.
 * @param {number} version The version of the key.
 * @param {number} timestamp The creation time of the key.
 * @param {!e2e.cipher.Cipher} cipher The cipher with the keys.
 * @param {!e2e.ByteArray=} opt_fingerprint The fingerprint of the key.
 * @param {!e2e.ByteArray=} opt_keyId The key ID of the key. Should be
 *     passed in for v3 keys, but not for v4 keys.
 * @extends {e2e.openpgp.packet.Key}
 * @constructor
 */
e2e.openpgp.packet.SecretKey = function(
    version, timestamp, cipher, opt_fingerprint, opt_keyId) {
  goog.asserts.assert(cipher instanceof e2e.openpgp.EncryptedCipher,
      'The cipher for a secret key packet should be encrypted.');
  goog.base(this, version, timestamp, cipher, opt_fingerprint, opt_keyId);
};
goog.inherits(e2e.openpgp.packet.SecretKey,
              e2e.openpgp.packet.Key);


/** @inheritDoc */
e2e.openpgp.packet.SecretKey.prototype.tag = 5;


/**
 * The secret key packets use encrypted ciphers rather than ciphers.
 * @type {!e2e.openpgp.EncryptedCipher}
 * @override
 */
e2e.openpgp.packet.SecretKey.prototype.cipher;


/** @inheritDoc */
e2e.openpgp.packet.SecretKey.prototype.serializePacketBody = function() {
  var pubKey = new e2e.openpgp.packet.PublicKey(
      this.version, this.timestamp, this.cipher, this.fingerprint, this.keyId);
  var serializedPubKey = pubKey.serializePacketBody();
  var kd = this.cipher.getKeyDerivationType();
  if (kd == e2e.openpgp.EncryptedCipher.KeyDerivationType.PLAINTEXT) {
    return goog.array.flatten(
        serializedPubKey,
        kd,
        this.cipher.encryptedKeyData);
  } else if (
      kd == e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_CHECKSUM ||
      kd == e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_SHA1) {
    var s2k = this.cipher.getKeyDerivationS2k(),
        iv = this.cipher.getKeyDerivationIv(),
        kda = this.cipher.getKeyDerivationAlgorithm();
    if (!goog.isDef(s2k) || !goog.isDef(iv) || !goog.isDef(kda)) {
      throw new e2e.openpgp.error.SerializationError(
          'Missing key metadata.');
    }
    return goog.array.flatten(
        serializedPubKey, kd, e2e.openpgp.constants.getId(kda),
        s2k.serialize(), iv, this.cipher.encryptedKeyData);
  }
  throw new e2e.openpgp.error.UnsupportedError(
      'Key derivation type not supported.');
};


/** @override */
e2e.openpgp.packet.SecretKey.prototype.can = function(use) {
  if (use == e2e.openpgp.packet.Key.Usage.SIGN) {
    return e2e.signer.factory.has(
        /** @type {e2e.signer.Algorithm} */ (this.cipher.algorithm));
  }
  return false;
};


/** @override */
e2e.openpgp.packet.SecretKey.prototype.getPublicKeyPacket = function() {
  return new e2e.openpgp.packet.PublicKey(
      this.version, this.timestamp, this.cipher, this.fingerprint, this.keyId);
};


/**
 * Extracts a Secret Key Packet from the body, and returns a SecretKey.
 * @param {!e2e.ByteArray} body The body from where to extract the data.
 * @return {!e2e.openpgp.packet.SecretKey} The generated packet.
 */
e2e.openpgp.packet.SecretKey.parse = function(body) {
  var pubkey = e2e.openpgp.packet.PublicKey.parse(body);
  var pubCipher = /** @type {e2e.cipher.AsymmetricCipher} */ (
      pubkey.cipher);
  var kd = body.shift();
  var symAlgo, algId = -1, s2k, iv, encrypted = true;
  switch (kd) {
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_CHECKSUM:
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_SHA1:
      kd = /** @type {e2e.openpgp.EncryptedCipher.KeyDerivationType} */ (
          kd);
      algId = body.shift();
      s2k = e2e.openpgp.S2k.parse(body);
      break;
    case e2e.openpgp.EncryptedCipher.KeyDerivationType.PLAINTEXT:
      kd = /** @type {e2e.openpgp.EncryptedCipher.KeyDerivationType} */ (
          kd);
      encrypted = false;
      break;
    default:
      algId = kd;
      kd = e2e.openpgp.EncryptedCipher.KeyDerivationType.MD5;
      break;
  }
  if (encrypted) {
    symAlgo = e2e.openpgp.constants.getAlgorithm(
        e2e.openpgp.constants.Type.SYMMETRIC_KEY, algId);
    symAlgo = /** @type {e2e.cipher.Algorithm} */ (symAlgo);
    var symCipher = /** @type {e2e.cipher.SymmetricCipher} */ (
      e2e.cipher.factory.require(symAlgo));
    iv = body.splice(0, symCipher.blockSize);
  }
  var encryptedKeyData = body.splice(0, body.length);
  var encCipher = new e2e.openpgp.EncryptedCipher(
      encryptedKeyData, kd, pubCipher, symAlgo, iv, s2k);
  return new e2e.openpgp.packet.SecretKey(pubkey.version,
                                              pubkey.timestamp,
                                              encCipher,
                                              pubkey.fingerprint,
                                              pubkey.keyId);
};


e2e.openpgp.packet.factory.add(
    e2e.openpgp.packet.SecretKey);

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Array with limited API, optimized only for splice
 *     from the beginning operations.
 *
 * @author koto@google.com (Krzysztof Kotowicz)
 */

goog.provide('e2e.openpgp.ByteStream');

goog.require('goog.asserts');

/**
 * ByteStream object with an API emulating Array, but exposing only splice(0,x)
 * and shift() functions and a length property.
 * Use it when repeatedly slicing from the left of a large array for
 * optimization.
 * @param {e2e.ByteArray} array Internal array
 * @constructor
 */
e2e.openpgp.ByteStream = function(array) {
  /**
   * @type {e2e.ByteArray}
   * @private
   */
  this.array_ = array;


  /**
   * @type {number}
   */
  this.length = array.length;

  /**
   * @type {number}
   * @private
   */
  this.index_ = 0;
};


/**
 * Removes elements from the front of an array, returning them.
 * @param {number} index The index at which to start changing the array.
 *     Must be 0. Parameter is left for the API to be compatible with Array.
 * @param {number} howMany How many elements to remove (0 means no removal).
 * @return {e2e.ByteArray} Extracted elements
 */
e2e.openpgp.ByteStream.prototype.splice = function(index,
    howMany) {
  // Only splice(0, x) is supported. Adding elements is not supported.
  goog.asserts.assert(index == 0);
  goog.asserts.assert(howMany >= 0);
  goog.asserts.assert(arguments.length == 2);
  goog.asserts.assert(this.index_ + howMany <= this.array_.length);
  var slice = this.array_.slice(this.index_, this.index_ +
     howMany);
  this.length -= howMany;
  this.index_ += howMany;
  return slice;
};


/**
 * Returns the first element, removing it from the array.
 * @return {number}
 */
e2e.openpgp.ByteStream.prototype.shift = function() {
  return this.splice(0, 1)[0];
};


/**
 * Returns the array after performing all splice() and shift() operations.
 * @return {e2e.ByteArray}
 */
e2e.openpgp.ByteStream.prototype.toArray = function() {
  return this.array_.slice(this.index_);
};

/**
 * typed array defines
 */

goog.provide('USE_TYPEDARRAY');

/** @define {boolean} use typed array flag. */
var USE_TYPEDARRAY = true;


goog.provide('Zlib.Huffman');

goog.require('USE_TYPEDARRAY');

goog.scope(function() {

/**
 * build huffman table from length list.
 * @param {!(Array.<number>|Uint8Array)} lengths length list.
 * @return {!Array} huffman table.
 */
Zlib.Huffman.buildHuffmanTable = function(lengths) {
  /** @type {number} length list size. */
  var listSize = lengths.length;
  /** @type {number} max code length for table size. */
  var maxCodeLength = 0;
  /** @type {number} min code length for table size. */
  var minCodeLength = Number.POSITIVE_INFINITY;
  /** @type {number} table size. */
  var size;
  /** @type {!(Array|Uint8Array)} huffman code table. */
  var table;
  /** @type {number} bit length. */
  var bitLength;
  /** @type {number} huffman code. */
  var code;
  /**
   * サイズが 2^maxlength 個のテーブルを埋めるためのスキップ長.
   * @type {number} skip length for table filling.
   */
  var skip;
  /** @type {number} reversed code. */
  var reversed;
  /** @type {number} reverse temp. */
  var rtemp;
  /** @type {number} loop counter. */
  var i;
  /** @type {number} loop limit. */
  var il;
  /** @type {number} loop counter. */
  var j;
  /** @type {number} table value. */
  var value;

  // Math.max は遅いので最長の値は for-loop で取得する
  for (i = 0, il = listSize; i < il; ++i) {
    if (lengths[i] > maxCodeLength) {
      maxCodeLength = lengths[i];
    }
    if (lengths[i] < minCodeLength) {
      minCodeLength = lengths[i];
    }
  }

  size = 1 << maxCodeLength;
  table = new (USE_TYPEDARRAY ? Uint32Array : Array)(size);

  // ビット長の短い順からハフマン符号を割り当てる
  for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {
    for (i = 0; i < listSize; ++i) {
      if (lengths[i] === bitLength) {
        // ビットオーダーが逆になるためビット長分並びを反転する
        for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {
          reversed = (reversed << 1) | (rtemp & 1);
          rtemp >>= 1;
        }

        // 最大ビット長をもとにテーブルを作るため、
        // 最大ビット長以外では 0 / 1 どちらでも良い箇所ができる
        // そのどちらでも良い場所は同じ値で埋めることで
        // 本来のビット長以上のビット数取得しても問題が起こらないようにする
        value = (bitLength << 16) | i;
        for (j = reversed; j < size; j += skip) {
          table[j] = value;
        }

        ++code;
      }
    }

    // 次のビット長へ
    ++bitLength;
    code <<= 1;
    skip <<= 1;
  }

  return [table, maxCodeLength, minCodeLength];
};


// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

goog.provide('Zlib.RawInflate');

goog.require('USE_TYPEDARRAY');
goog.require('Zlib.Huffman');

//-----------------------------------------------------------------------------

/** @define {number} buffer block size. */
var ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]

//-----------------------------------------------------------------------------

goog.scope(function() {

var buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;

/**
 * @constructor
 * @param {!(Uint8Array|Array.<number>)} input input buffer.
 * @param {Object} opt_params option parameter.
 *
 * opt_params は以下のプロパティを指定する事ができます。
 *   - index: input buffer の deflate コンテナの開始位置.
 *   - blockSize: バッファのブロックサイズ.
 *   - bufferType: Zlib.RawInflate.BufferType の値によってバッファの管理方法を指定する.
 *   - resize: 確保したバッファが実際の大きさより大きかった場合に切り詰める.
 */
Zlib.RawInflate = function(input, opt_params) {
  /** @type {!(Array.<number>|Uint8Array)} inflated buffer */
  this.buffer;
  /** @type {!Array.<(Array.<number>|Uint8Array)>} */
  this.blocks = [];
  /** @type {number} block size. */
  this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;
  /** @type {!number} total output buffer pointer. */
  this.totalpos = 0;
  /** @type {!number} input buffer pointer. */
  this.ip = 0;
  /** @type {!number} bit stream reader buffer. */
  this.bitsbuf = 0;
  /** @type {!number} bit stream reader buffer size. */
  this.bitsbuflen = 0;
  /** @type {!(Array.<number>|Uint8Array)} input buffer. */
  this.input = USE_TYPEDARRAY ? new Uint8Array(input) : input;
  /** @type {!(Uint8Array|Array.<number>)} output buffer. */
  this.output;
  /** @type {!number} output buffer pointer. */
  this.op;
  /** @type {boolean} is final block flag. */
  this.bfinal = false;
  /** @type {Zlib.RawInflate.BufferType} buffer management. */
  this.bufferType = Zlib.RawInflate.BufferType.ADAPTIVE;
  /** @type {boolean} resize flag for memory size optimization. */
  this.resize = false;
  /** @type {number} previous RLE value */
  this.prev;

  // option parameters
  if (opt_params || !(opt_params = {})) {
    if (opt_params['index']) {
      this.ip = opt_params['index'];
    }
    if (opt_params['bufferSize']) {
      this.bufferSize = opt_params['bufferSize'];
    }
    if (opt_params['bufferType']) {
      this.bufferType = opt_params['bufferType'];
    }
    if (opt_params['resize']) {
      this.resize = opt_params['resize'];
    }
  }

  // initialize
  switch (this.bufferType) {
    case Zlib.RawInflate.BufferType.BLOCK:
      this.op = Zlib.RawInflate.MaxBackwardLength;
      this.output =
        new (USE_TYPEDARRAY ? Uint8Array : Array)(
          Zlib.RawInflate.MaxBackwardLength +
          this.bufferSize +
          Zlib.RawInflate.MaxCopyLength
        );
      break;
    case Zlib.RawInflate.BufferType.ADAPTIVE:
      this.op = 0;
      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);
      this.expandBuffer = this.expandBufferAdaptive;
      this.concatBuffer = this.concatBufferDynamic;
      this.decodeHuffman = this.decodeHuffmanAdaptive;
      break;
    default:
      throw new Error('invalid inflate mode');
  }
};

/**
 * @enum {number}
 */
Zlib.RawInflate.BufferType = {
  BLOCK: 0,
  ADAPTIVE: 1
};

/**
 * decompress.
 * @return {!(Uint8Array|Array.<number>)} inflated buffer.
 */
Zlib.RawInflate.prototype.decompress = function() {
  while (!this.bfinal) {
    this.parseBlock();
  }

  return this.concatBuffer();
};

/**
 * @const
 * @type {number} max backward length for LZ77.
 */
Zlib.RawInflate.MaxBackwardLength = 32768;

/**
 * @const
 * @type {number} max copy length for LZ77.
 */
Zlib.RawInflate.MaxCopyLength = 258;

/**
 * huffman order
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */
Zlib.RawInflate.Order = (function(table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
})([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);

/**
 * huffman length code table.
 * @const
 * @type {!(Array.<number>|Uint16Array)}
 */
Zlib.RawInflate.LengthCodeTable = (function(table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
})([
  0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b,
  0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b,
  0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3,
  0x00e3, 0x0102, 0x0102, 0x0102
]);

/**
 * huffman length extra-bits table.
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */
Zlib.RawInflate.LengthExtraTable = (function(table) {
  return USE_TYPEDARRAY ? new Uint8Array(table) : table;
})([
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
  5, 5, 0, 0, 0
]);

/**
 * huffman dist code table.
 * @const
 * @type {!(Array.<number>|Uint16Array)}
 */
Zlib.RawInflate.DistCodeTable = (function(table) {
  return USE_TYPEDARRAY ? new Uint16Array(table) : table;
})([
  0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011,
  0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181,
  0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001,
  0x3001, 0x4001, 0x6001
]);

/**
 * huffman dist extra-bits table.
 * @const
 * @type {!(Array.<number>|Uint8Array)}
 */
Zlib.RawInflate.DistExtraTable = (function(table) {
  return USE_TYPEDARRAY ? new Uint8Array(table) : table;
})([
  0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,
  11, 12, 12, 13, 13
]);

/**
 * fixed huffman length code table
 * @const
 * @type {!Array}
 */
Zlib.RawInflate.FixedLiteralLengthTable = (function(table) {
  return table;
})((function() {
  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(288);
  var i, il;

  for (i = 0, il = lengths.length; i < il; ++i) {
    lengths[i] =
      (i <= 143) ? 8 :
      (i <= 255) ? 9 :
      (i <= 279) ? 7 :
      8;
  }

  return buildHuffmanTable(lengths);
})());

/**
 * fixed huffman distance code table
 * @const
 * @type {!Array}
 */
Zlib.RawInflate.FixedDistanceTable = (function(table) {
  return table;
})((function() {
  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(30);
  var i, il;

  for (i = 0, il = lengths.length; i < il; ++i) {
    lengths[i] = 5;
  }

  return buildHuffmanTable(lengths);
})());

/**
 * parse deflated block.
 */
Zlib.RawInflate.prototype.parseBlock = function() {
  /** @type {number} header */
  var hdr = this.readBits(3);

  // BFINAL
  if (hdr & 0x1) {
    this.bfinal = true;
  }

  // BTYPE
  hdr >>>= 1;
  switch (hdr) {
    // uncompressed
    case 0:
      this.parseUncompressedBlock();
      break;
    // fixed huffman
    case 1:
      this.parseFixedHuffmanBlock();
      break;
    // dynamic huffman
    case 2:
      this.parseDynamicHuffmanBlock();
      break;
    // reserved or other
    default:
      throw new Error('unknown BTYPE: ' + hdr);
  }
};

/**
 * read inflate bits
 * @param {number} length bits length.
 * @return {number} read bits.
 */
Zlib.RawInflate.prototype.readBits = function(length) {
  var bitsbuf = this.bitsbuf;
  var bitsbuflen = this.bitsbuflen;
  var input = this.input;
  var ip = this.ip;

  /** @type {number} */
  var inputLength = input.length;
  /** @type {number} input and output byte. */
  var octet;

  // not enough buffer
  while (bitsbuflen < length) {
    // input byte
    if (ip >= inputLength) {
      throw new Error('input buffer is broken');
    }

    // concat octet
    bitsbuf |= input[ip++] << bitsbuflen;
    bitsbuflen += 8;
  }

  // output byte
  octet = bitsbuf & /* MASK */ ((1 << length) - 1);
  bitsbuf >>>= length;
  bitsbuflen -= length;

  this.bitsbuf = bitsbuf;
  this.bitsbuflen = bitsbuflen;
  this.ip = ip;

  return octet;
};

/**
 * read huffman code using table
 * @param {Array} table huffman code table.
 * @return {number} huffman code.
 */
Zlib.RawInflate.prototype.readCodeByTable = function(table) {
  var bitsbuf = this.bitsbuf;
  var bitsbuflen = this.bitsbuflen;
  var input = this.input;
  var ip = this.ip;

  /** @type {number} */
  var inputLength = input.length;
  /** @type {!(Array.<number>|Uint8Array)} huffman code table */
  var codeTable = table[0];
  /** @type {number} */
  var maxCodeLength = table[1];
  /** @type {number} code length & code (16bit, 16bit) */
  var codeWithLength;
  /** @type {number} code bits length */
  var codeLength;

  // not enough buffer
  while (bitsbuflen < maxCodeLength) {
    if (ip >= inputLength) {
      break;
    }
    bitsbuf |= input[ip++] << bitsbuflen;
    bitsbuflen += 8;
  }

  // read max length
  codeWithLength = codeTable[bitsbuf & ((1 << maxCodeLength) - 1)];
  codeLength = codeWithLength >>> 16;

  this.bitsbuf = bitsbuf >> codeLength;
  this.bitsbuflen = bitsbuflen - codeLength;
  this.ip = ip;

  return codeWithLength & 0xffff;
};

/**
 * parse uncompressed block.
 */
Zlib.RawInflate.prototype.parseUncompressedBlock = function() {
  var input = this.input;
  var ip = this.ip;
  var output = this.output;
  var op = this.op;

  /** @type {number} */
  var inputLength = input.length;
  /** @type {number} block length */
  var len;
  /** @type {number} number for check block length */
  var nlen;
  /** @type {number} output buffer length */
  var olength = output.length;
  /** @type {number} copy counter */
  var preCopy;

  // skip buffered header bits
  this.bitsbuf = 0;
  this.bitsbuflen = 0;

  // len
  if (ip + 1 >= inputLength) {
    throw new Error('invalid uncompressed block header: LEN');
  }
  len = input[ip++] | (input[ip++] << 8);

  // nlen
  if (ip + 1 >= inputLength) {
    throw new Error('invalid uncompressed block header: NLEN');
  }
  nlen = input[ip++] | (input[ip++] << 8);

  // check len & nlen
  if (len === ~nlen) {
    throw new Error('invalid uncompressed block header: length verify');
  }

  // check size
  if (ip + len > input.length) { throw new Error('input buffer is broken'); }

  // expand buffer
  switch (this.bufferType) {
    case Zlib.RawInflate.BufferType.BLOCK:
      // pre copy
      while (op + len > output.length) {
        preCopy = olength - op;
        len -= preCopy;
        if (USE_TYPEDARRAY) {
          output.set(input.subarray(ip, ip + preCopy), op);
          op += preCopy;
          ip += preCopy;
        } else {
          while (preCopy--) {
            output[op++] = input[ip++];
          }
        }
        this.op = op;
        output = this.expandBuffer();
        op = this.op;
      }
      break;
    case Zlib.RawInflate.BufferType.ADAPTIVE:
      while (op + len > output.length) {
        output = this.expandBuffer({fixRatio: 2});
      }
      break;
    default:
      throw new Error('invalid inflate mode');
  }

  // copy
  if (USE_TYPEDARRAY) {
    output.set(input.subarray(ip, ip + len), op);
    op += len;
    ip += len;
  } else {
    while (len--) {
      output[op++] = input[ip++];
    }
  }

  this.ip = ip;
  this.op = op;
  this.output = output;
};

/**
 * parse fixed huffman block.
 */
Zlib.RawInflate.prototype.parseFixedHuffmanBlock = function() {
  this.decodeHuffman(
    Zlib.RawInflate.FixedLiteralLengthTable,
    Zlib.RawInflate.FixedDistanceTable
  );
};

/**
 * parse dynamic huffman block.
 */
Zlib.RawInflate.prototype.parseDynamicHuffmanBlock = function() {
  /** @type {number} number of literal and length codes. */
  var hlit = this.readBits(5) + 257;
  /** @type {number} number of distance codes. */
  var hdist = this.readBits(5) + 1;
  /** @type {number} number of code lengths. */
  var hclen = this.readBits(4) + 4;
  /** @type {!(Uint8Array|Array.<number>)} code lengths. */
  var codeLengths =
    new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.Order.length);
  /** @type {!Array} code lengths table. */
  var codeLengthsTable;
  /** @type {!(Uint8Array|Array.<number>)} literal and length code lengths. */
  var litlenLengths;
  /** @type {!(Uint8Array|Array.<number>)} distance code lengths. */
  var distLengths;
  /** @type {number} loop counter. */
  var i;

  // decode code lengths
  for (i = 0; i < hclen; ++i) {
    codeLengths[Zlib.RawInflate.Order[i]] = this.readBits(3);
  }
  if (!USE_TYPEDARRAY) {
    for (i = hclen, hclen = codeLengths.length; i < hclen; ++i) {
      codeLengths[Zlib.RawInflate.Order[i]] = 0;
    }
  }
  codeLengthsTable = buildHuffmanTable(codeLengths);

  /**
   * decode function
   * @param {number} num number of lengths.
   * @param {!Array} table code lengths table.
   * @param {!(Uint8Array|Array.<number>)} lengths code lengths buffer.
   * @return {!(Uint8Array|Array.<number>)} code lengths buffer.
   */
  function decode(num, table, lengths) {
    /** @type {number} */
    var code;
    /** @type {number} */
    var prev = this.prev;
    /** @type {number} */
    var repeat;
    /** @type {number} */
    var i;

    for (i = 0; i < num;) {
      code = this.readCodeByTable(table);
      switch (code) {
        case 16:
          repeat = 3 + this.readBits(2);
          while (repeat--) { lengths[i++] = prev; }
          break;
        case 17:
          repeat = 3 + this.readBits(3);
          while (repeat--) { lengths[i++] = 0; }
          prev = 0;
          break;
        case 18:
          repeat = 11 + this.readBits(7);
          while (repeat--) { lengths[i++] = 0; }
          prev = 0;
          break;
        default:
          lengths[i++] = code;
          prev = code;
          break;
      }
    }

    this.prev = prev;

    return lengths;
  }

  // literal and length code
  litlenLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit);

  // distance code
  distLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(hdist);

  this.prev = 0;
  this.decodeHuffman(
    buildHuffmanTable(decode.call(this, hlit, codeLengthsTable, litlenLengths)),
    buildHuffmanTable(decode.call(this, hdist, codeLengthsTable, distLengths))
  );
};

/**
 * decode huffman code
 * @param {!Array} litlen literal and length code table.
 * @param {!Array} dist distination code table.
 */
Zlib.RawInflate.prototype.decodeHuffman = function(litlen, dist) {
  var output = this.output;
  var op = this.op;

  this.currentLitlenTable = litlen;

  /** @type {number} output position limit. */
  var olength = output.length - Zlib.RawInflate.MaxCopyLength;
  /** @type {number} huffman code. */
  var code;
  /** @type {number} table index. */
  var ti;
  /** @type {number} huffman code distination. */
  var codeDist;
  /** @type {number} huffman code length. */
  var codeLength;

  while ((code = this.readCodeByTable(litlen)) !== 256) {
    // literal
    if (code < 256) {
      if (op >= olength) {
        this.op = op;
        output = this.expandBuffer();
        op = this.op;
      }
      output[op++] = code;

      continue;
    }

    // length code
    ti = code - 257;
    codeLength = Zlib.RawInflate.LengthCodeTable[ti];
    if (Zlib.RawInflate.LengthExtraTable[ti] > 0) {
      codeLength += this.readBits(Zlib.RawInflate.LengthExtraTable[ti]);
    }

    // dist code
    code = this.readCodeByTable(dist);
    codeDist = Zlib.RawInflate.DistCodeTable[code];
    if (Zlib.RawInflate.DistExtraTable[code] > 0) {
      codeDist += this.readBits(Zlib.RawInflate.DistExtraTable[code]);
    }

    // lz77 decode
    if (op >= olength) {
      this.op = op;
      output = this.expandBuffer();
      op = this.op;
    }
    while (codeLength--) {
      output[op] = output[(op++) - codeDist];
    }
  }

  while (this.bitsbuflen >= 8) {
    this.bitsbuflen -= 8;
    this.ip--;
  }
  this.op = op;
};

/**
 * decode huffman code (adaptive)
 * @param {!Array} litlen literal and length code table.
 * @param {!Array} dist distination code table.
 */
Zlib.RawInflate.prototype.decodeHuffmanAdaptive = function(litlen, dist) {
  var output = this.output;
  var op = this.op;

  this.currentLitlenTable = litlen;

  /** @type {number} output position limit. */
  var olength = output.length;
  /** @type {number} huffman code. */
  var code;
  /** @type {number} table index. */
  var ti;
  /** @type {number} huffman code distination. */
  var codeDist;
  /** @type {number} huffman code length. */
  var codeLength;

  while ((code = this.readCodeByTable(litlen)) !== 256) {
    // literal
    if (code < 256) {
      if (op >= olength) {
        output = this.expandBuffer();
        olength = output.length;
      }
      output[op++] = code;

      continue;
    }

    // length code
    ti = code - 257;
    codeLength = Zlib.RawInflate.LengthCodeTable[ti];
    if (Zlib.RawInflate.LengthExtraTable[ti] > 0) {
      codeLength += this.readBits(Zlib.RawInflate.LengthExtraTable[ti]);
    }

    // dist code
    code = this.readCodeByTable(dist);
    codeDist = Zlib.RawInflate.DistCodeTable[code];
    if (Zlib.RawInflate.DistExtraTable[code] > 0) {
      codeDist += this.readBits(Zlib.RawInflate.DistExtraTable[code]);
    }

    // lz77 decode
    if (op + codeLength > olength) {
      output = this.expandBuffer();
      olength = output.length;
    }
    while (codeLength--) {
      output[op] = output[(op++) - codeDist];
    }
  }

  while (this.bitsbuflen >= 8) {
    this.bitsbuflen -= 8;
    this.ip--;
  }
  this.op = op;
};

/**
 * expand output buffer.
 * @param {Object=} opt_param option parameters.
 * @return {!(Array.<number>|Uint8Array)} output buffer.
 */
Zlib.RawInflate.prototype.expandBuffer = function(opt_param) {
  /** @type {!(Array.<number>|Uint8Array)} store buffer. */
  var buffer =
    new (USE_TYPEDARRAY ? Uint8Array : Array)(
        this.op - Zlib.RawInflate.MaxBackwardLength
    );
  /** @type {number} backward base point */
  var backward = this.op - Zlib.RawInflate.MaxBackwardLength;
  /** @type {number} copy index. */
  var i;
  /** @type {number} copy limit */
  var il;

  var output = this.output;

  // copy to output buffer
  if (USE_TYPEDARRAY) {
    buffer.set(output.subarray(Zlib.RawInflate.MaxBackwardLength, buffer.length));
  } else {
    for (i = 0, il = buffer.length; i < il; ++i) {
      buffer[i] = output[i + Zlib.RawInflate.MaxBackwardLength];
    }
  }

  this.blocks.push(buffer);
  this.totalpos += buffer.length;

  // copy to backward buffer
  if (USE_TYPEDARRAY) {
    output.set(
      output.subarray(backward, backward + Zlib.RawInflate.MaxBackwardLength)
    );
  } else {
    for (i = 0; i < Zlib.RawInflate.MaxBackwardLength; ++i) {
      output[i] = output[backward + i];
    }
  }

  this.op = Zlib.RawInflate.MaxBackwardLength;

  return output;
};

/**
 * expand output buffer. (adaptive)
 * @param {Object=} opt_param option parameters.
 * @return {!(Array.<number>|Uint8Array)} output buffer pointer.
 */
Zlib.RawInflate.prototype.expandBufferAdaptive = function(opt_param) {
  /** @type {!(Array.<number>|Uint8Array)} store buffer. */
  var buffer;
  /** @type {number} expantion ratio. */
  var ratio = (this.input.length / this.ip + 1) | 0;
  /** @type {number} maximum number of huffman code. */
  var maxHuffCode;
  /** @type {number} new output buffer size. */
  var newSize;
  /** @type {number} max inflate size. */
  var maxInflateSize;

  var input = this.input;
  var output = this.output;

  if (opt_param) {
    if (typeof opt_param.fixRatio === 'number') {
      ratio = opt_param.fixRatio;
    }
    if (typeof opt_param.addRatio === 'number') {
      ratio += opt_param.addRatio;
    }
  }

  // calculate new buffer size
  if (ratio < 2) {
    maxHuffCode =
      (input.length - this.ip) / this.currentLitlenTable[2];
    maxInflateSize = (maxHuffCode / 2 * 258) | 0;
    newSize = maxInflateSize < output.length ?
      output.length + maxInflateSize :
      output.length << 1;
  } else {
    newSize = output.length * ratio;
  }

  // buffer expantion
  if (USE_TYPEDARRAY) {
    buffer = new Uint8Array(newSize);
    buffer.set(output);
  } else {
    buffer = output;
  }

  this.output = buffer;

  return this.output;
};

/**
 * concat output buffer.
 * @return {!(Array.<number>|Uint8Array)} output buffer.
 */
Zlib.RawInflate.prototype.concatBuffer = function() {
  /** @type {number} buffer pointer. */
  var pos = 0;
  /** @type {number} buffer pointer. */
  var limit = this.totalpos + (this.op - Zlib.RawInflate.MaxBackwardLength);
  /** @type {!(Array.<number>|Uint8Array)} output block array. */
  var output = this.output;
  /** @type {!Array} blocks array. */
  var blocks = this.blocks;
  /** @type {!(Array.<number>|Uint8Array)} output block array. */
  var block;
  /** @type {!(Array.<number>|Uint8Array)} output buffer. */
  var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(limit);
  /** @type {number} loop counter. */
  var i;
  /** @type {number} loop limiter. */
  var il;
  /** @type {number} loop counter. */
  var j;
  /** @type {number} loop limiter. */
  var jl;

  // single buffer
  if (blocks.length === 0) {
    return USE_TYPEDARRAY ?
      this.output.subarray(Zlib.RawInflate.MaxBackwardLength, this.op) :
      this.output.slice(Zlib.RawInflate.MaxBackwardLength, this.op);
  }

  // copy to buffer
  for (i = 0, il = blocks.length; i < il; ++i) {
    block = blocks[i];
    for (j = 0, jl = block.length; j < jl; ++j) {
      buffer[pos++] = block[j];
    }
  }

  // current buffer
  for (i = Zlib.RawInflate.MaxBackwardLength, il = this.op; i < il; ++i) {
    buffer[pos++] = output[i];
  }

  this.blocks = [];
  this.buffer = buffer;

  return this.buffer;
};

/**
 * concat output buffer. (dynamic)
 * @return {!(Array.<number>|Uint8Array)} output buffer.
 */
Zlib.RawInflate.prototype.concatBufferDynamic = function() {
  /** @type {Array.<number>|Uint8Array} output buffer. */
  var buffer;
  var op = this.op;

  if (USE_TYPEDARRAY) {
    if (this.resize) {
      buffer = new Uint8Array(op);
      buffer.set(this.output.subarray(0, op));
    } else {
      buffer = this.output.subarray(0, op);
    }
  } else {
    if (this.output.length > op) {
      this.output.length = op;
    }
    buffer = this.output;
  }

  this.buffer = buffer;

  return this.buffer;
};

// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

/**
 * @fileoverview Heap Sort 実装. ハフマン符号化で使用する.
 */

goog.provide('Zlib.Heap');

goog.require('USE_TYPEDARRAY');

goog.scope(function() {

/**
 * カスタムハフマン符号で使用するヒープ実装
 * @param {number} length ヒープサイズ.
 * @constructor
 */
Zlib.Heap = function(length) {
  this.buffer = new (USE_TYPEDARRAY ? Uint16Array : Array)(length * 2);
  this.length = 0;
};

/**
 * 親ノードの index 取得
 * @param {number} index 子ノードの index.
 * @return {number} 親ノードの index.
 *
 */
Zlib.Heap.prototype.getParent = function(index) {
  return ((index - 2) / 4 | 0) * 2;
};

/**
 * 子ノードの index 取得
 * @param {number} index 親ノードの index.
 * @return {number} 子ノードの index.
 */
Zlib.Heap.prototype.getChild = function(index) {
  return 2 * index + 2;
};

/**
 * Heap に値を追加する
 * @param {number} index キー index.
 * @param {number} value 値.
 * @return {number} 現在のヒープ長.
 */
Zlib.Heap.prototype.push = function(index, value) {
  var current, parent,
      heap = this.buffer,
      swap;

  current = this.length;
  heap[this.length++] = value;
  heap[this.length++] = index;

  // ルートノードにたどり着くまで入れ替えを試みる
  while (current > 0) {
    parent = this.getParent(current);

    // 親ノードと比較して親の方が小さければ入れ替える
    if (heap[current] > heap[parent]) {
      swap = heap[current];
      heap[current] = heap[parent];
      heap[parent] = swap;

      swap = heap[current + 1];
      heap[current + 1] = heap[parent + 1];
      heap[parent + 1] = swap;

      current = parent;
    // 入れ替えが必要なくなったらそこで抜ける
    } else {
      break;
    }
  }

  return this.length;
};

/**
 * Heapから一番大きい値を返す
 * @return {{index: number, value: number, length: number}} {index: キーindex,
 *     value: 値, length: ヒープ長} の Object.
 */
Zlib.Heap.prototype.pop = function() {
  var index, value,
      heap = this.buffer, swap,
      current, parent;

  value = heap[0];
  index = heap[1];

  // 後ろから値を取る
  this.length -= 2;
  heap[0] = heap[this.length];
  heap[1] = heap[this.length + 1];

  parent = 0;
  // ルートノードから下がっていく
  while (true) {
    current = this.getChild(parent);

    // 範囲チェック
    if (current >= this.length) {
      break;
    }

    // 隣のノードと比較して、隣の方が値が大きければ隣を現在ノードとして選択
    if (current + 2 < this.length && heap[current + 2] > heap[current]) {
      current += 2;
    }

    // 親ノードと比較して親の方が小さい場合は入れ替える
    if (heap[current] > heap[parent]) {
      swap = heap[parent];
      heap[parent] = heap[current];
      heap[current] = swap;

      swap = heap[parent + 1];
      heap[parent + 1] = heap[current + 1];
      heap[current + 1] = swap;
    } else {
      break;
    }

    parent = current;
  }

  return {index: index, value: value, length: this.length};
};


// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

/**
 * @fileoverview bit 単位での書き込み実装.
 */
goog.provide('Zlib.BitStream');

goog.require('USE_TYPEDARRAY');

goog.scope(function() {

/**
 * ビットストリーム
 * @constructor
 * @param {!(Array|Uint8Array)=} buffer output buffer.
 * @param {number=} bufferPosition start buffer pointer.
 */
Zlib.BitStream = function(buffer, bufferPosition) {
  /** @type {number} buffer index. */
  this.index = typeof bufferPosition === 'number' ? bufferPosition : 0;
  /** @type {number} bit index. */
  this.bitindex = 0;
  /** @type {!(Array|Uint8Array)} bit-stream output buffer. */
  this.buffer = buffer instanceof (USE_TYPEDARRAY ? Uint8Array : Array) ?
    buffer :
    new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.BitStream.DefaultBlockSize);

  // 入力された index が足りなかったら拡張するが、倍にしてもダメなら不正とする
  if (this.buffer.length * 2 <= this.index) {
    throw new Error("invalid index");
  } else if (this.buffer.length <= this.index) {
    this.expandBuffer();
  }
};

/**
 * デフォルトブロックサイズ.
 * @const
 * @type {number}
 */
Zlib.BitStream.DefaultBlockSize = 0x8000;

/**
 * expand buffer.
 * @return {!(Array|Uint8Array)} new buffer.
 */
Zlib.BitStream.prototype.expandBuffer = function() {
  /** @type {!(Array|Uint8Array)} old buffer. */
  var oldbuf = this.buffer;
  /** @type {number} loop counter. */
  var i;
  /** @type {number} loop limiter. */
  var il = oldbuf.length;
  /** @type {!(Array|Uint8Array)} new buffer. */
  var buffer =
    new (USE_TYPEDARRAY ? Uint8Array : Array)(il << 1);

  // copy buffer
  if (USE_TYPEDARRAY) {
    buffer.set(oldbuf);
  } else {
    // XXX: loop unrolling
    for (i = 0; i < il; ++i) {
      buffer[i] = oldbuf[i];
    }
  }

  return (this.buffer = buffer);
};


/**
 * 数値をビットで指定した数だけ書き込む.
 * @param {number} number 書き込む数値.
 * @param {number} n 書き込むビット数.
 * @param {boolean=} reverse 逆順に書き込むならば true.
 */
Zlib.BitStream.prototype.writeBits = function(number, n, reverse) {
  var buffer = this.buffer;
  var index = this.index;
  var bitindex = this.bitindex;

  /** @type {number} current octet. */
  var current = buffer[index];
  /** @type {number} loop counter. */
  var i;

  /**
   * 32-bit 整数のビット順を逆にする
   * @param {number} n 32-bit integer.
   * @return {number} reversed 32-bit integer.
   * @private
   */
  function rev32_(n) {
    return (Zlib.BitStream.ReverseTable[n & 0xFF] << 24) |
      (Zlib.BitStream.ReverseTable[n >>> 8 & 0xFF] << 16) |
      (Zlib.BitStream.ReverseTable[n >>> 16 & 0xFF] << 8) |
      Zlib.BitStream.ReverseTable[n >>> 24 & 0xFF];
  }

  if (reverse && n > 1) {
    number = n > 8 ?
      rev32_(number) >> (32 - n) :
      Zlib.BitStream.ReverseTable[number] >> (8 - n);
  }

  // Byte 境界を超えないとき
  if (n + bitindex < 8) {
    current = (current << n) | number;
    bitindex += n;
  // Byte 境界を超えるとき
  } else {
    for (i = 0; i < n; ++i) {
      current = (current << 1) | ((number >> n - i - 1) & 1);

      // next byte
      if (++bitindex === 8) {
        bitindex = 0;
        buffer[index++] = Zlib.BitStream.ReverseTable[current];
        current = 0;

        // expand
        if (index === buffer.length) {
          buffer = this.expandBuffer();
        }
      }
    }
  }
  buffer[index] = current;

  this.buffer = buffer;
  this.bitindex = bitindex;
  this.index = index;
};


/**
 * ストリームの終端処理を行う
 * @return {!(Array|Uint8Array)} 終端処理後のバッファを byte array で返す.
 */
Zlib.BitStream.prototype.finish = function() {
  var buffer = this.buffer;
  var index = this.index;

  /** @type {!(Array|Uint8Array)} output buffer. */
  var output;

  // bitindex が 0 の時は余分に index が進んでいる状態
  if (this.bitindex > 0) {
    buffer[index] <<= 8 - this.bitindex;
    buffer[index] = Zlib.BitStream.ReverseTable[buffer[index]];
    index++;
  }

  // array truncation
  if (USE_TYPEDARRAY) {
    output = buffer.subarray(0, index);
  } else {
    buffer.length = index;
    output = buffer;
  }

  return output;
};

/**
 * 0-255 のビット順を反転したテーブル
 * @const
 * @type {!(Uint8Array|Array.<number>)}
 */
Zlib.BitStream.ReverseTable = (function(table) {
  return table;
})((function() {
  /** @type {!(Array|Uint8Array)} reverse table. */
  var table = new (USE_TYPEDARRAY ? Uint8Array : Array)(256);
  /** @type {number} loop counter. */
  var i;

  // generate
  for (i = 0; i < 256; ++i) {
    table[i] = (function(n) {
      var r = n;
      var s = 7;

      for (n >>>= 1; n; n >>>= 1) {
        r <<= 1;
        r |= n & 1;
        --s;
      }

      return (r << s & 0xff) >>> 0;
    })(i);
  }

  return table;
})());


// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

/**
 * @fileoverview Deflate (RFC1951) 符号化アルゴリズム実装.
 */

goog.provide('Zlib.RawDeflate');

goog.require('USE_TYPEDARRAY');
goog.require('Zlib.BitStream');
goog.require('Zlib.Heap');

goog.scope(function() {

/**
 * Raw Deflate 実装
 *
 * @constructor
 * @param {!(Array.<number>|Uint8Array)} input 符号化する対象のバッファ.
 * @param {Object=} opt_params option parameters.
 *
 * typed array が使用可能なとき、outputBuffer が Array は自動的に Uint8Array に
 * 変換されます.
 * 別のオブジェクトになるため出力バッファを参照している変数などは
 * 更新する必要があります.
 */
Zlib.RawDeflate = function(input, opt_params) {
  /** @type {Zlib.RawDeflate.CompressionType} */
  this.compressionType = Zlib.RawDeflate.CompressionType.DYNAMIC;
  /** @type {number} */
  this.lazy = 0;
  /** @type {!(Array.<number>|Uint32Array)} */
  this.freqsLitLen;
  /** @type {!(Array.<number>|Uint32Array)} */
  this.freqsDist;
  /** @type {!(Array.<number>|Uint8Array)} */
  this.input =
    (USE_TYPEDARRAY && input instanceof Array) ? new Uint8Array(input) : input;
  /** @type {!(Array.<number>|Uint8Array)} output output buffer. */
  this.output;
  /** @type {number} pos output buffer position. */
  this.op = 0;

  // option parameters
  if (opt_params) {
    if (opt_params['lazy']) {
      this.lazy = opt_params['lazy'];
    }
    if (typeof opt_params['compressionType'] === 'number') {
      this.compressionType = opt_params['compressionType'];
    }
    if (opt_params['outputBuffer']) {
      this.output =
        (USE_TYPEDARRAY && opt_params['outputBuffer'] instanceof Array) ?
        new Uint8Array(opt_params['outputBuffer']) : opt_params['outputBuffer'];
    }
    if (typeof opt_params['outputIndex'] === 'number') {
      this.op = opt_params['outputIndex'];
    }
  }

  if (!this.output) {
    this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(0x8000);
  }
};

/**
 * @enum {number}
 */
Zlib.RawDeflate.CompressionType = {
  NONE: 0,
  FIXED: 1,
  DYNAMIC: 2,
  RESERVED: 3
};


/**
 * LZ77 の最小マッチ長
 * @const
 * @type {number}
 */
Zlib.RawDeflate.Lz77MinLength = 3;

/**
 * LZ77 の最大マッチ長
 * @const
 * @type {number}
 */
Zlib.RawDeflate.Lz77MaxLength = 258;

/**
 * LZ77 のウィンドウサイズ
 * @const
 * @type {number}
 */
Zlib.RawDeflate.WindowSize = 0x8000;

/**
 * 最長の符号長
 * @const
 * @type {number}
 */
Zlib.RawDeflate.MaxCodeLength = 16;

/**
 * ハフマン符号の最大数値
 * @const
 * @type {number}
 */
Zlib.RawDeflate.HUFMAX = 286;

/**
 * 固定ハフマン符号の符号化テーブル
 * @const
 * @type {Array.<Array.<number, number>>}
 */
Zlib.RawDeflate.FixedHuffmanTable = (function() {
  var table = [], i;

  for (i = 0; i < 288; i++) {
    switch (true) {
      case (i <= 143): table.push([i       + 0x030, 8]); break;
      case (i <= 255): table.push([i - 144 + 0x190, 9]); break;
      case (i <= 279): table.push([i - 256 + 0x000, 7]); break;
      case (i <= 287): table.push([i - 280 + 0x0C0, 8]); break;
      default:
        throw 'invalid literal: ' + i;
    }
  }

  return table;
})();

/**
 * DEFLATE ブロックの作成
 * @return {!(Array.<number>|Uint8Array)} 圧縮済み byte array.
 */
Zlib.RawDeflate.prototype.compress = function() {
  /** @type {!(Array.<number>|Uint8Array)} */
  var blockArray;
  /** @type {number} */
  var position;
  /** @type {number} */
  var length;

  var input = this.input;

  // compression
  switch (this.compressionType) {
    case Zlib.RawDeflate.CompressionType.NONE:
      // each 65535-Byte (length header: 16-bit)
      for (position = 0, length = input.length; position < length;) {
        blockArray = USE_TYPEDARRAY ?
          input.subarray(position, position + 0xffff) :
          input.slice(position, position + 0xffff);
        position += blockArray.length;
        this.makeNocompressBlock(blockArray, (position === length));
      }
      break;
    case Zlib.RawDeflate.CompressionType.FIXED:
      this.output = this.makeFixedHuffmanBlock(input, true);
      this.op = this.output.length;
      break;
    case Zlib.RawDeflate.CompressionType.DYNAMIC:
      this.output = this.makeDynamicHuffmanBlock(input, true);
      this.op = this.output.length;
      break;
    default:
      throw 'invalid compression type';
  }

  return this.output;
};

/**
 * 非圧縮ブロックの作成
 * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
 * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
 * @return {!(Array.<number>|Uint8Array)} 非圧縮ブロック byte array.
 */
Zlib.RawDeflate.prototype.makeNocompressBlock =
function(blockArray, isFinalBlock) {
  /** @type {number} */
  var bfinal;
  /** @type {Zlib.RawDeflate.CompressionType} */
  var btype;
  /** @type {number} */
  var len;
  /** @type {number} */
  var nlen;
  /** @type {number} */
  var i;
  /** @type {number} */
  var il;

  var output = this.output;
  var op = this.op;

  // expand buffer
  if (USE_TYPEDARRAY) {
    output = new Uint8Array(this.output.buffer);
    while (output.length <= op + blockArray.length + 5) {
      output = new Uint8Array(output.length << 1);
    }
    output.set(this.output);
  }

  // header
  bfinal = isFinalBlock ? 1 : 0;
  btype = Zlib.RawDeflate.CompressionType.NONE;
  output[op++] = (bfinal) | (btype << 1);

  // length
  len = blockArray.length;
  nlen = (~len + 0x10000) & 0xffff;
  output[op++] =          len & 0xff;
  output[op++] =  (len >>> 8) & 0xff;
  output[op++] =         nlen & 0xff;
  output[op++] = (nlen >>> 8) & 0xff;

  // copy buffer
  if (USE_TYPEDARRAY) {
     output.set(blockArray, op);
     op += blockArray.length;
     output = output.subarray(0, op);
  } else {
    for (i = 0, il = blockArray.length; i < il; ++i) {
      output[op++] = blockArray[i];
    }
    output.length = op;
  }

  this.op = op;
  this.output = output;

  return output;
};

/**
 * 固定ハフマンブロックの作成
 * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
 * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
 * @return {!(Array.<number>|Uint8Array)} 固定ハフマン符号化ブロック byte array.
 */
Zlib.RawDeflate.prototype.makeFixedHuffmanBlock =
function(blockArray, isFinalBlock) {
  /** @type {Zlib.BitStream} */
  var stream = new Zlib.BitStream(USE_TYPEDARRAY ?
    new Uint8Array(this.output.buffer) : this.output, this.op);
  /** @type {number} */
  var bfinal;
  /** @type {Zlib.RawDeflate.CompressionType} */
  var btype;
  /** @type {!(Array.<number>|Uint16Array)} */
  var data;

  // header
  bfinal = isFinalBlock ? 1 : 0;
  btype = Zlib.RawDeflate.CompressionType.FIXED;

  stream.writeBits(bfinal, 1, true);
  stream.writeBits(btype, 2, true);

  data = this.lz77(blockArray);
  this.fixedHuffman(data, stream);

  return stream.finish();
};

/**
 * 動的ハフマンブロックの作成
 * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
 * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
 * @return {!(Array.<number>|Uint8Array)} 動的ハフマン符号ブロック byte array.
 */
Zlib.RawDeflate.prototype.makeDynamicHuffmanBlock =
function(blockArray, isFinalBlock) {
  /** @type {Zlib.BitStream} */
  var stream = new Zlib.BitStream(USE_TYPEDARRAY ?
    new Uint8Array(this.output.buffer) : this.output, this.op);
  /** @type {number} */
  var bfinal;
  /** @type {Zlib.RawDeflate.CompressionType} */
  var btype;
  /** @type {!(Array.<number>|Uint16Array)} */
  var data;
  /** @type {number} */
  var hlit;
  /** @type {number} */
  var hdist;
  /** @type {number} */
  var hclen;
  /** @const @type {Array.<number>} */
  var hclenOrder =
        [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
  /** @type {!(Array.<number>|Uint8Array)} */
  var litLenLengths;
  /** @type {!(Array.<number>|Uint16Array)} */
  var litLenCodes;
  /** @type {!(Array.<number>|Uint8Array)} */
  var distLengths;
  /** @type {!(Array.<number>|Uint16Array)} */
  var distCodes;
  /** @type {{
   *   codes: !(Array.<number>|Uint32Array),
   *   freqs: !(Array.<number>|Uint32Array)
   * }} */
  var treeSymbols;
  /** @type {!(Array.<number>|Uint8Array)} */
  var treeLengths;
  /** @type {Array} */
  var transLengths = new Array(19);
  /** @type {!(Array.<number>|Uint16Array)} */
  var treeCodes;
  /** @type {number} */
  var code;
  /** @type {number} */
  var bitlen;
  /** @type {number} */
  var i;
  /** @type {number} */
  var il;

  // header
  bfinal = isFinalBlock ? 1 : 0;
  btype = Zlib.RawDeflate.CompressionType.DYNAMIC;

  stream.writeBits(bfinal, 1, true);
  stream.writeBits(btype, 2, true);

  data = this.lz77(blockArray);

  // リテラル・長さ, 距離のハフマン符号と符号長の算出
  litLenLengths = this.getLengths_(this.freqsLitLen, 15);
  litLenCodes = this.getCodesFromLengths_(litLenLengths);
  distLengths = this.getLengths_(this.freqsDist, 7);
  distCodes = this.getCodesFromLengths_(distLengths);

  // HLIT, HDIST の決定
  for (hlit = 286; hlit > 257 && litLenLengths[hlit - 1] === 0; hlit--) {}
  for (hdist = 30; hdist > 1 && distLengths[hdist - 1] === 0; hdist--) {}

  // HCLEN
  treeSymbols =
    this.getTreeSymbols_(hlit, litLenLengths, hdist, distLengths);
  treeLengths = this.getLengths_(treeSymbols.freqs, 7);
  for (i = 0; i < 19; i++) {
    transLengths[i] = treeLengths[hclenOrder[i]];
  }
  for (hclen = 19; hclen > 4 && transLengths[hclen - 1] === 0; hclen--) {}

  treeCodes = this.getCodesFromLengths_(treeLengths);

  // 出力
  stream.writeBits(hlit - 257, 5, true);
  stream.writeBits(hdist - 1, 5, true);
  stream.writeBits(hclen - 4, 4, true);
  for (i = 0; i < hclen; i++) {
    stream.writeBits(transLengths[i], 3, true);
  }

  // ツリーの出力
  for (i = 0, il = treeSymbols.codes.length; i < il; i++) {
    code = treeSymbols.codes[i];

    stream.writeBits(treeCodes[code], treeLengths[code], true);

    // extra bits
    if (code >= 16) {
      i++;
      switch (code) {
        case 16: bitlen = 2; break;
        case 17: bitlen = 3; break;
        case 18: bitlen = 7; break;
        default:
          throw 'invalid code: ' + code;
      }

      stream.writeBits(treeSymbols.codes[i], bitlen, true);
    }
  }

  this.dynamicHuffman(
    data,
    [litLenCodes, litLenLengths],
    [distCodes, distLengths],
    stream
  );

  return stream.finish();
};


/**
 * 動的ハフマン符号化(カスタムハフマンテーブル)
 * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 符号化済み byte array.
 * @param {!Zlib.BitStream} stream 書き込み用ビットストリーム.
 * @return {!Zlib.BitStream} ハフマン符号化済みビットストリームオブジェクト.
 */
Zlib.RawDeflate.prototype.dynamicHuffman =
function(dataArray, litLen, dist, stream) {
  /** @type {number} */
  var index;
  /** @type {number} */
  var length;
  /** @type {number} */
  var literal;
  /** @type {number} */
  var code;
  /** @type {number} */
  var litLenCodes;
  /** @type {number} */
  var litLenLengths;
  /** @type {number} */
  var distCodes;
  /** @type {number} */
  var distLengths;

  litLenCodes = litLen[0];
  litLenLengths = litLen[1];
  distCodes = dist[0];
  distLengths = dist[1];

  // 符号を BitStream に書き込んでいく
  for (index = 0, length = dataArray.length; index < length; ++index) {
    literal = dataArray[index];

    // literal or length
    stream.writeBits(litLenCodes[literal], litLenLengths[literal], true);

    // 長さ・距離符号
    if (literal > 256) {
      // length extra
      stream.writeBits(dataArray[++index], dataArray[++index], true);
      // distance
      code = dataArray[++index];
      stream.writeBits(distCodes[code], distLengths[code], true);
      // distance extra
      stream.writeBits(dataArray[++index], dataArray[++index], true);
    // 終端
    } else if (literal === 256) {
      break;
    }
  }

  return stream;
};

/**
 * 固定ハフマン符号化
 * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 符号化済み byte array.
 * @param {!Zlib.BitStream} stream 書き込み用ビットストリーム.
 * @return {!Zlib.BitStream} ハフマン符号化済みビットストリームオブジェクト.
 */
Zlib.RawDeflate.prototype.fixedHuffman = function(dataArray, stream) {
  /** @type {number} */
  var index;
  /** @type {number} */
  var length;
  /** @type {number} */
  var literal;

  // 符号を BitStream に書き込んでいく
  for (index = 0, length = dataArray.length; index < length; index++) {
    literal = dataArray[index];

    // 符号の書き込み
    Zlib.BitStream.prototype.writeBits.apply(
      stream,
      Zlib.RawDeflate.FixedHuffmanTable[literal]
    );

    // 長さ・距離符号
    if (literal > 0x100) {
      // length extra
      stream.writeBits(dataArray[++index], dataArray[++index], true);
      // distance
      stream.writeBits(dataArray[++index], 5);
      // distance extra
      stream.writeBits(dataArray[++index], dataArray[++index], true);
    // 終端
    } else if (literal === 0x100) {
      break;
    }
  }

  return stream;
};

/**
 * マッチ情報
 * @param {!number} length マッチした長さ.
 * @param {!number} backwardDistance マッチ位置との距離.
 * @constructor
 */
Zlib.RawDeflate.Lz77Match = function(length, backwardDistance) {
  /** @type {number} match length. */
  this.length = length;
  /** @type {number} backward distance. */
  this.backwardDistance = backwardDistance;
};

/**
 * 長さ符号テーブル.
 * [コード, 拡張ビット, 拡張ビット長] の配列となっている.
 * @const
 * @type {!(Array.<number>|Uint32Array)}
 */
Zlib.RawDeflate.Lz77Match.LengthCodeTable = (function(table) {
  return USE_TYPEDARRAY ? new Uint32Array(table) : table;
})((function() {
  /** @type {!Array} */
  var table = [];
  /** @type {number} */
  var i;
  /** @type {!Array.<number>} */
  var c;

  for (i = 3; i <= 258; i++) {
    c = code(i);
    table[i] = (c[2] << 24) | (c[1] << 16) | c[0];
  }

  /**
   * @param {number} length lz77 length.
   * @return {!Array.<number>} lz77 codes.
   */
  function code(length) {
    switch (true) {
      case (length === 3): return [257, length - 3, 0]; break;
      case (length === 4): return [258, length - 4, 0]; break;
      case (length === 5): return [259, length - 5, 0]; break;
      case (length === 6): return [260, length - 6, 0]; break;
      case (length === 7): return [261, length - 7, 0]; break;
      case (length === 8): return [262, length - 8, 0]; break;
      case (length === 9): return [263, length - 9, 0]; break;
      case (length === 10): return [264, length - 10, 0]; break;
      case (length <= 12): return [265, length - 11, 1]; break;
      case (length <= 14): return [266, length - 13, 1]; break;
      case (length <= 16): return [267, length - 15, 1]; break;
      case (length <= 18): return [268, length - 17, 1]; break;
      case (length <= 22): return [269, length - 19, 2]; break;
      case (length <= 26): return [270, length - 23, 2]; break;
      case (length <= 30): return [271, length - 27, 2]; break;
      case (length <= 34): return [272, length - 31, 2]; break;
      case (length <= 42): return [273, length - 35, 3]; break;
      case (length <= 50): return [274, length - 43, 3]; break;
      case (length <= 58): return [275, length - 51, 3]; break;
      case (length <= 66): return [276, length - 59, 3]; break;
      case (length <= 82): return [277, length - 67, 4]; break;
      case (length <= 98): return [278, length - 83, 4]; break;
      case (length <= 114): return [279, length - 99, 4]; break;
      case (length <= 130): return [280, length - 115, 4]; break;
      case (length <= 162): return [281, length - 131, 5]; break;
      case (length <= 194): return [282, length - 163, 5]; break;
      case (length <= 226): return [283, length - 195, 5]; break;
      case (length <= 257): return [284, length - 227, 5]; break;
      case (length === 258): return [285, length - 258, 0]; break;
      default: throw 'invalid length: ' + length;
    }
  }

  return table;
})());

/**
 * 距離符号テーブル
 * @param {!number} dist 距離.
 * @return {!Array.<number>} コード、拡張ビット、拡張ビット長の配列.
 * @private
 */
Zlib.RawDeflate.Lz77Match.prototype.getDistanceCode_ = function(dist) {
  /** @type {!Array.<number>} distance code table. */
  var r;

  switch (true) {
    case (dist === 1): r = [0, dist - 1, 0]; break;
    case (dist === 2): r = [1, dist - 2, 0]; break;
    case (dist === 3): r = [2, dist - 3, 0]; break;
    case (dist === 4): r = [3, dist - 4, 0]; break;
    case (dist <= 6): r = [4, dist - 5, 1]; break;
    case (dist <= 8): r = [5, dist - 7, 1]; break;
    case (dist <= 12): r = [6, dist - 9, 2]; break;
    case (dist <= 16): r = [7, dist - 13, 2]; break;
    case (dist <= 24): r = [8, dist - 17, 3]; break;
    case (dist <= 32): r = [9, dist - 25, 3]; break;
    case (dist <= 48): r = [10, dist - 33, 4]; break;
    case (dist <= 64): r = [11, dist - 49, 4]; break;
    case (dist <= 96): r = [12, dist - 65, 5]; break;
    case (dist <= 128): r = [13, dist - 97, 5]; break;
    case (dist <= 192): r = [14, dist - 129, 6]; break;
    case (dist <= 256): r = [15, dist - 193, 6]; break;
    case (dist <= 384): r = [16, dist - 257, 7]; break;
    case (dist <= 512): r = [17, dist - 385, 7]; break;
    case (dist <= 768): r = [18, dist - 513, 8]; break;
    case (dist <= 1024): r = [19, dist - 769, 8]; break;
    case (dist <= 1536): r = [20, dist - 1025, 9]; break;
    case (dist <= 2048): r = [21, dist - 1537, 9]; break;
    case (dist <= 3072): r = [22, dist - 2049, 10]; break;
    case (dist <= 4096): r = [23, dist - 3073, 10]; break;
    case (dist <= 6144): r = [24, dist - 4097, 11]; break;
    case (dist <= 8192): r = [25, dist - 6145, 11]; break;
    case (dist <= 12288): r = [26, dist - 8193, 12]; break;
    case (dist <= 16384): r = [27, dist - 12289, 12]; break;
    case (dist <= 24576): r = [28, dist - 16385, 13]; break;
    case (dist <= 32768): r = [29, dist - 24577, 13]; break;
    default: throw 'invalid distance';
  }

  return r;
};

/**
 * マッチ情報を LZ77 符号化配列で返す.
 * なお、ここでは以下の内部仕様で符号化している
 * [ CODE, EXTRA-BIT-LEN, EXTRA, CODE, EXTRA-BIT-LEN, EXTRA ]
 * @return {!Array.<number>} LZ77 符号化 byte array.
 */
Zlib.RawDeflate.Lz77Match.prototype.toLz77Array = function() {
  /** @type {number} */
  var length = this.length;
  /** @type {number} */
  var dist = this.backwardDistance;
  /** @type {Array} */
  var codeArray = [];
  /** @type {number} */
  var pos = 0;
  /** @type {!Array.<number>} */
  var code;

  // length
  code = Zlib.RawDeflate.Lz77Match.LengthCodeTable[length];
  codeArray[pos++] = code & 0xffff;
  codeArray[pos++] = (code >> 16) & 0xff;
  codeArray[pos++] = code >> 24;

  // distance
  code = this.getDistanceCode_(dist);
  codeArray[pos++] = code[0];
  codeArray[pos++] = code[1];
  codeArray[pos++] = code[2];

  return codeArray;
};

/**
 * LZ77 実装
 * @param {!(Array.<number>|Uint8Array)} dataArray LZ77 符号化するバイト配列.
 * @return {!(Array.<number>|Uint16Array)} LZ77 符号化した配列.
 */
Zlib.RawDeflate.prototype.lz77 = function(dataArray) {
  /** @type {number} input position */
  var position;
  /** @type {number} input length */
  var length;
  /** @type {number} loop counter */
  var i;
  /** @type {number} loop limiter */
  var il;
  /** @type {number} chained-hash-table key */
  var matchKey;
  /** @type {Object.<number, Array.<number>>} chained-hash-table */
  var table = {};
  /** @const @type {number} */
  var windowSize = Zlib.RawDeflate.WindowSize;
  /** @type {Array.<number>} match list */
  var matchList;
  /** @type {Zlib.RawDeflate.Lz77Match} longest match */
  var longestMatch;
  /** @type {Zlib.RawDeflate.Lz77Match} previous longest match */
  var prevMatch;
  /** @type {!(Array.<number>|Uint16Array)} lz77 buffer */
  var lz77buf = USE_TYPEDARRAY ?
    new Uint16Array(dataArray.length * 2) : [];
  /** @type {number} lz77 output buffer pointer */
  var pos = 0;
  /** @type {number} lz77 skip length */
  var skipLength = 0;
  /** @type {!(Array.<number>|Uint32Array)} */
  var freqsLitLen = new (USE_TYPEDARRAY ? Uint32Array : Array)(286);
  /** @type {!(Array.<number>|Uint32Array)} */
  var freqsDist = new (USE_TYPEDARRAY ? Uint32Array : Array)(30);
  /** @type {number} */
  var lazy = this.lazy;
  /** @type {*} temporary variable */
  var tmp;

  // 初期化
  if (!USE_TYPEDARRAY) {
    for (i = 0; i <= 285;) { freqsLitLen[i++] = 0; }
    for (i = 0; i <= 29;) { freqsDist[i++] = 0; }
  }
  freqsLitLen[256] = 1; // EOB の最低出現回数は 1

  /**
   * マッチデータの書き込み
   * @param {Zlib.RawDeflate.Lz77Match} match LZ77 Match data.
   * @param {!number} offset スキップ開始位置(相対指定).
   * @private
   */
  function writeMatch(match, offset) {
    /** @type {Array.<number>} */
    var lz77Array = match.toLz77Array();
    /** @type {number} */
    var i;
    /** @type {number} */
    var il;

    for (i = 0, il = lz77Array.length; i < il; ++i) {
      lz77buf[pos++] = lz77Array[i];
    }
    freqsLitLen[lz77Array[0]]++;
    freqsDist[lz77Array[3]]++;
    skipLength = match.length + offset - 1;
    prevMatch = null;
  }

  // LZ77 符号化
  for (position = 0, length = dataArray.length; position < length; ++position) {
    // ハッシュキーの作成
    for (matchKey = 0, i = 0, il = Zlib.RawDeflate.Lz77MinLength; i < il; ++i) {
      if (position + i === length) {
        break;
      }
      matchKey = (matchKey << 8) | dataArray[position + i];
    }

    // テーブルが未定義だったら作成する
    if (table[matchKey] === void 0) { table[matchKey] = []; }
    matchList = table[matchKey];

    // skip
    if (skipLength-- > 0) {
      matchList.push(position);
      continue;
    }

    // マッチテーブルの更新 (最大戻り距離を超えているものを削除する)
    while (matchList.length > 0 && position - matchList[0] > windowSize) {
      matchList.shift();
    }

    // データ末尾でマッチしようがない場合はそのまま流しこむ
    if (position + Zlib.RawDeflate.Lz77MinLength >= length) {
      if (prevMatch) {
        writeMatch(prevMatch, -1);
      }

      for (i = 0, il = length - position; i < il; ++i) {
        tmp = dataArray[position + i];
        lz77buf[pos++] = tmp;
        ++freqsLitLen[tmp];
      }
      break;
    }

    // マッチ候補から最長のものを探す
    if (matchList.length > 0) {
      longestMatch = this.searchLongestMatch_(dataArray, position, matchList);

      if (prevMatch) {
        // 現在のマッチの方が前回のマッチよりも長い
        if (prevMatch.length < longestMatch.length) {
          // write previous literal
          tmp = dataArray[position - 1];
          lz77buf[pos++] = tmp;
          ++freqsLitLen[tmp];

          // write current match
          writeMatch(longestMatch, 0);
        } else {
          // write previous match
          writeMatch(prevMatch, -1);
        }
      } else if (longestMatch.length < lazy) {
        prevMatch = longestMatch;
      } else {
        writeMatch(longestMatch, 0);
      }
    // 前回マッチしていて今回マッチがなかったら前回のを採用
    } else if (prevMatch) {
      writeMatch(prevMatch, -1);
    } else {
      tmp = dataArray[position];
      lz77buf[pos++] = tmp;
      ++freqsLitLen[tmp];
    }

    matchList.push(position); // マッチテーブルに現在の位置を保存
  }

  // 終端処理
  lz77buf[pos++] = 256;
  freqsLitLen[256]++;
  this.freqsLitLen = freqsLitLen;
  this.freqsDist = freqsDist;

  return /** @type {!(Uint16Array|Array.<number>)} */ (
    USE_TYPEDARRAY ?  lz77buf.subarray(0, pos) : lz77buf
  );
};

/**
 * マッチした候補の中から最長一致を探す
 * @param {!Object} data plain data byte array.
 * @param {!number} position plain data byte array position.
 * @param {!Array.<number>} matchList 候補となる位置の配列.
 * @return {!Zlib.RawDeflate.Lz77Match} 最長かつ最短距離のマッチオブジェクト.
 * @private
 */
Zlib.RawDeflate.prototype.searchLongestMatch_ =
function(data, position, matchList) {
  var match,
      currentMatch,
      matchMax = 0, matchLength,
      i, j, l, dl = data.length;

  // 候補を後ろから 1 つずつ絞り込んでゆく
  permatch:
  for (i = 0, l = matchList.length; i < l; i++) {
    match = matchList[l - i - 1];
    matchLength = Zlib.RawDeflate.Lz77MinLength;

    // 前回までの最長一致を末尾から一致検索する
    if (matchMax > Zlib.RawDeflate.Lz77MinLength) {
      for (j = matchMax; j > Zlib.RawDeflate.Lz77MinLength; j--) {
        if (data[match + j - 1] !== data[position + j - 1]) {
          continue permatch;
        }
      }
      matchLength = matchMax;
    }

    // 最長一致探索
    while (matchLength < Zlib.RawDeflate.Lz77MaxLength &&
           position + matchLength < dl &&
           data[match + matchLength] === data[position + matchLength]) {
      ++matchLength;
    }

    // マッチ長が同じ場合は後方を優先
    if (matchLength > matchMax) {
      currentMatch = match;
      matchMax = matchLength;
    }

    // 最長が確定したら後の処理は省略
    if (matchLength === Zlib.RawDeflate.Lz77MaxLength) {
      break;
    }
  }

  return new Zlib.RawDeflate.Lz77Match(matchMax, position - currentMatch);
};

/**
 * Tree-Transmit Symbols の算出
 * reference: PuTTY Deflate implementation
 * @param {number} hlit HLIT.
 * @param {!(Array.<number>|Uint8Array)} litlenLengths リテラルと長さ符号の符号長配列.
 * @param {number} hdist HDIST.
 * @param {!(Array.<number>|Uint8Array)} distLengths 距離符号の符号長配列.
 * @return {{
 *   codes: !(Array.<number>|Uint32Array),
 *   freqs: !(Array.<number>|Uint32Array)
 * }} Tree-Transmit Symbols.
 */
Zlib.RawDeflate.prototype.getTreeSymbols_ =
function(hlit, litlenLengths, hdist, distLengths) {
  var src = new (USE_TYPEDARRAY ? Uint32Array : Array)(hlit + hdist),
      i, j, runLength, l,
      result = new (USE_TYPEDARRAY ? Uint32Array : Array)(286 + 30),
      nResult,
      rpt,
      freqs = new (USE_TYPEDARRAY ? Uint8Array : Array)(19);

  j = 0;
  for (i = 0; i < hlit; i++) {
    src[j++] = litlenLengths[i];
  }
  for (i = 0; i < hdist; i++) {
    src[j++] = distLengths[i];
  }

  // 初期化
  if (!USE_TYPEDARRAY) {
    for (i = 0, l = freqs.length; i < l; ++i) {
      freqs[i] = 0;
    }
  }

  // 符号化
  nResult = 0;
  for (i = 0, l = src.length; i < l; i += j) {
    // Run Length Encoding
    for (j = 1; i + j < l && src[i + j] === src[i]; ++j) {}

    runLength = j;

    if (src[i] === 0) {
      // 0 の繰り返しが 3 回未満ならばそのまま
      if (runLength < 3) {
        while (runLength-- > 0) {
          result[nResult++] = 0;
          freqs[0]++;
        }
      } else {
        while (runLength > 0) {
          // 繰り返しは最大 138 までなので切り詰める
          rpt = (runLength < 138 ? runLength : 138);

          if (rpt > runLength - 3 && rpt < runLength) {
            rpt = runLength - 3;
          }

          // 3-10 回 -> 17
          if (rpt <= 10) {
            result[nResult++] = 17;
            result[nResult++] = rpt - 3;
            freqs[17]++;
          // 11-138 回 -> 18
          } else {
            result[nResult++] = 18;
            result[nResult++] = rpt - 11;
            freqs[18]++;
          }

          runLength -= rpt;
        }
      }
    } else {
      result[nResult++] = src[i];
      freqs[src[i]]++;
      runLength--;

      // 繰り返し回数が3回未満ならばランレングス符号は要らない
      if (runLength < 3) {
        while (runLength-- > 0) {
          result[nResult++] = src[i];
          freqs[src[i]]++;
        }
      // 3 回以上ならばランレングス符号化
      } else {
        while (runLength > 0) {
          // runLengthを 3-6 で分割
          rpt = (runLength < 6 ? runLength : 6);

          if (rpt > runLength - 3 && rpt < runLength) {
            rpt = runLength - 3;
          }

          result[nResult++] = 16;
          result[nResult++] = rpt - 3;
          freqs[16]++;

          runLength -= rpt;
        }
      }
    }
  }

  return {
    codes:
      USE_TYPEDARRAY ? result.subarray(0, nResult) : result.slice(0, nResult),
    freqs: freqs
  };
};

/**
 * ハフマン符号の長さを取得する
 * @param {!(Array.<number>|Uint32Array)} freqs 出現カウント.
 * @param {number} limit 符号長の制限.
 * @return {!(Array.<number>|Uint8Array)} 符号長配列.
 * @private
 */
Zlib.RawDeflate.prototype.getLengths_ = function(freqs, limit) {
  /** @type {number} */
  var nSymbols = freqs.length;
  /** @type {Zlib.Heap} */
  var heap = new Zlib.Heap(2 * Zlib.RawDeflate.HUFMAX);
  /** @type {!(Array.<number>|Uint8Array)} */
  var length = new (USE_TYPEDARRAY ? Uint8Array : Array)(nSymbols);
  /** @type {Array} */
  var nodes;
  /** @type {!(Array.<number>|Uint8Array)} */
  var values;
  /** @type {!(Array.<number>|Uint8Array)} */
  var codeLength;
  /** @type {number} */
  var i;
  /** @type {number} */
  var il;

  // 配列の初期化
  if (!USE_TYPEDARRAY) {
    for (i = 0; i < nSymbols; i++) {
      length[i] = 0;
    }
  }

  // ヒープの構築
  for (i = 0; i < nSymbols; ++i) {
    if (freqs[i] > 0) {
      heap.push(i, freqs[i]);
    }
  }
  nodes = new Array(heap.length / 2);
  values = new (USE_TYPEDARRAY ? Uint32Array : Array)(heap.length / 2);

  // 非 0 の要素が一つだけだった場合は、そのシンボルに符号長 1 を割り当てて終了
  if (nodes.length === 1) {
    length[heap.pop().index] = 1;
    return length;
  }

  // Reverse Package Merge Algorithm による Canonical Huffman Code の符号長決定
  for (i = 0, il = heap.length / 2; i < il; ++i) {
    nodes[i] = heap.pop();
    values[i] = nodes[i].value;
  }
  codeLength = this.reversePackageMerge_(values, values.length, limit);

  for (i = 0, il = nodes.length; i < il; ++i) {
    length[nodes[i].index] = codeLength[i];
  }

  return length;
};

/**
 * Reverse Package Merge Algorithm.
 * @param {!(Array.<number>|Uint32Array)} freqs sorted probability.
 * @param {number} symbols number of symbols.
 * @param {number} limit code length limit.
 * @return {!(Array.<number>|Uint8Array)} code lengths.
 */
Zlib.RawDeflate.prototype.reversePackageMerge_ = function(freqs, symbols, limit) {
  /** @type {!(Array.<number>|Uint16Array)} */
  var minimumCost = new (USE_TYPEDARRAY ? Uint16Array : Array)(limit);
  /** @type {!(Array.<number>|Uint8Array)} */
  var flag = new (USE_TYPEDARRAY ? Uint8Array : Array)(limit);
  /** @type {!(Array.<number>|Uint8Array)} */
  var codeLength = new (USE_TYPEDARRAY ? Uint8Array : Array)(symbols);
  /** @type {Array} */
  var value = new Array(limit);
  /** @type {Array} */
  var type  = new Array(limit);
  /** @type {Array.<number>} */
  var currentPosition = new Array(limit);
  /** @type {number} */
  var excess = (1 << limit) - symbols;
  /** @type {number} */
  var half = (1 << (limit - 1));
  /** @type {number} */
  var i;
  /** @type {number} */
  var j;
  /** @type {number} */
  var t;
  /** @type {number} */
  var weight;
  /** @type {number} */
  var next;

  /**
   * @param {number} j
   */
  function takePackage(j) {
    /** @type {number} */
    var x = type[j][currentPosition[j]];

    if (x === symbols) {
      takePackage(j+1);
      takePackage(j+1);
    } else {
      --codeLength[x];
    }

    ++currentPosition[j];
  }

  minimumCost[limit-1] = symbols;

  for (j = 0; j < limit; ++j) {
    if (excess < half) {
      flag[j] = 0;
    } else {
      flag[j] = 1;
      excess -= half;
    }
    excess <<= 1;
    minimumCost[limit-2-j] = (minimumCost[limit-1-j] / 2 | 0) + symbols;
  }
  minimumCost[0] = flag[0];

  value[0] = new Array(minimumCost[0]);
  type[0]  = new Array(minimumCost[0]);
  for (j = 1; j < limit; ++j) {
    if (minimumCost[j] > 2 * minimumCost[j-1] + flag[j]) {
      minimumCost[j] = 2 * minimumCost[j-1] + flag[j];
    }
    value[j] = new Array(minimumCost[j]);
    type[j]  = new Array(minimumCost[j]);
  }

  for (i = 0; i < symbols; ++i) {
    codeLength[i] = limit;
  }

  for (t = 0; t < minimumCost[limit-1]; ++t) {
    value[limit-1][t] = freqs[t];
    type[limit-1][t]  = t;
  }

  for (i = 0; i < limit; ++i) {
    currentPosition[i] = 0;
  }
  if (flag[limit-1] === 1) {
    --codeLength[0];
    ++currentPosition[limit-1];
  }

  for (j = limit-2; j >= 0; --j) {
    i = 0;
    weight = 0;
    next = currentPosition[j+1];

    for (t = 0; t < minimumCost[j]; t++) {
      weight = value[j+1][next] + value[j+1][next+1];

      if (weight > freqs[i]) {
        value[j][t] = weight;
        type[j][t] = symbols;
        next += 2;
      } else {
        value[j][t] = freqs[i];
        type[j][t] = i;
        ++i;
      }
    }

    currentPosition[j] = 0;
    if (flag[j] === 1) {
      takePackage(j);
    }
  }

  return codeLength;
};

/**
 * 符号長配列からハフマン符号を取得する
 * reference: PuTTY Deflate implementation
 * @param {!(Array.<number>|Uint8Array)} lengths 符号長配列.
 * @return {!(Array.<number>|Uint16Array)} ハフマン符号配列.
 * @private
 */
Zlib.RawDeflate.prototype.getCodesFromLengths_ = function(lengths) {
  var codes = new (USE_TYPEDARRAY ? Uint16Array : Array)(lengths.length),
      count = [],
      startCode = [],
      code = 0, i, il, j, m;

  // Count the codes of each length.
  for (i = 0, il = lengths.length; i < il; i++) {
    count[lengths[i]] = (count[lengths[i]] | 0) + 1;
  }

  // Determine the starting code for each length block.
  for (i = 1, il = Zlib.RawDeflate.MaxCodeLength; i <= il; i++) {
    startCode[i] = code;
    code += count[i] | 0;
    code <<= 1;
  }

  // Determine the code for each symbol. Mirrored, of course.
  for (i = 0, il = lengths.length; i < il; i++) {
    code = startCode[lengths[i]];
    startCode[lengths[i]] += 1;
    codes[i] = 0;

    for (j = 0, m = lengths[i]; j < m; j++) {
      codes[i] = (codes[i] << 1) | (code & 1);
      code >>>= 1;
    }
  }

  return codes;
};

// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Wraps the original deflate implementation to conform to e2e.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.compression.Zip');

goog.require('Zlib.RawDeflate');
goog.require('Zlib.RawInflate');
goog.require('e2e.async.Result');
goog.require('e2e.compression.Algorithm');
goog.require('e2e.compression.Compression');
goog.require('e2e.compression.factory');
goog.require('goog.array');


/**
 * Wrapper around the external zip raw deflate implementation.
 * @extends {e2e.compression.Compression}
 * @constructor
 */
e2e.compression.Zip = function() {
  goog.base(this, e2e.compression.Algorithm.ZIP);
};
goog.inherits(e2e.compression.Zip,
    e2e.compression.Compression);


/** @inheritDoc */
e2e.compression.Zip.prototype.decompress = function(compressedData) {
  var data = (new Zlib.RawInflate(compressedData)).decompress();
  data = goog.array.clone(data);
  return e2e.async.Result.toResult(data);
};


/** @inheritDoc */
e2e.compression.Zip.prototype.compress = function(data) {
  var compressedData = (new Zlib.RawDeflate(data)).compress();
  compressedData = goog.array.clone(compressedData);
  return e2e.async.Result.toResult(compressedData);
};


e2e.compression.factory.add(e2e.compression.Zip,
                                    e2e.compression.Algorithm.ZIP);

/**
 * @fileoverview Zlib namespace. Zlib の仕様に準拠した圧縮は Zlib.Deflate で実装
 * されている. これは Inflate との共存を考慮している為.
 */

goog.provide('Zlib');

//-----------------------------------------------------------------------------

goog.scope(function() {

/**
 * Compression Method
 * @enum {number}
 */
Zlib.CompressionMethod = {
  DEFLATE: 8,
  RESERVED: 15
};

// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

/**
 * @fileoverview 雑多な関数群をまとめたモジュール実装.
 */
goog.provide('Zlib.Util');

goog.scope(function() {

/**
 * Byte String から Byte Array に変換.
 * @param {!string} str byte string.
 * @return {!Array.<number>} byte array.
 */
Zlib.Util.stringToByteArray = function(str) {
  /** @type {!Array.<(string|number)>} */
  var tmp = str.split('');
  /** @type {number} */
  var i;
  /** @type {number} */
  var il;

  for (i = 0, il = tmp.length; i < il; i++) {
    tmp[i] = (tmp[i].charCodeAt(0) & 0xff) >>> 0;
  }

  return tmp;
};

// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

/**
 * @fileoverview Adler32 checksum 実装.
 */
goog.provide('Zlib.Adler32');

goog.require('USE_TYPEDARRAY');
goog.require('Zlib.Util');

goog.scope(function() {

/**
 * Adler32 ハッシュ値の作成
 * @param {!(Array|Uint8Array|string)} array 算出に使用する byte array.
 * @return {number} Adler32 ハッシュ値.
 */
Zlib.Adler32 = function(array) {
  if (typeof(array) === 'string') {
    array = Zlib.Util.stringToByteArray(array);
  }
  return Zlib.Adler32.update(1, array);
};

/**
 * Adler32 ハッシュ値の更新
 * @param {number} adler 現在のハッシュ値.
 * @param {!(Array|Uint8Array)} array 更新に使用する byte array.
 * @return {number} Adler32 ハッシュ値.
 */
Zlib.Adler32.update = function(adler, array) {
  /** @type {number} */
  var s1 = adler & 0xffff;
  /** @type {number} */
  var s2 = (adler >>> 16) & 0xffff;
  /** @type {number} array length */
  var len = array.length;
  /** @type {number} loop length (don't overflow) */
  var tlen;
  /** @type {number} array index */
  var i = 0;

  while (len > 0) {
    tlen = len > Zlib.Adler32.OptimizationParameter ?
      Zlib.Adler32.OptimizationParameter : len;
    len -= tlen;
    do {
      s1 += array[i++];
      s2 += s1;
    } while (--tlen);

    s1 %= 65521;
    s2 %= 65521;
  }

  return ((s2 << 16) | s1) >>> 0;
};

/**
 * Adler32 最適化パラメータ
 * 現状では 1024 程度が最適.
 * @see http://jsperf.com/adler-32-simple-vs-optimized/3
 * @define {number}
 */
Zlib.Adler32.OptimizationParameter = 1024;

// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

goog.provide('Zlib.Inflate');

goog.require('USE_TYPEDARRAY');
goog.require('Zlib.Adler32');
goog.require('Zlib.RawInflate');

goog.scope(function() {

/**
 * @constructor
 * @param {!(Uint8Array|Array)} input deflated buffer.
 * @param {Object=} opt_params option parameters.
 *
 * opt_params は以下のプロパティを指定する事ができます。
 *   - index: input buffer の deflate コンテナの開始位置.
 *   - blockSize: バッファのブロックサイズ.
 *   - verify: 伸張が終わった後 adler-32 checksum の検証を行うか.
 *   - bufferType: Zlib.Inflate.BufferType の値によってバッファの管理方法を指定する.
 *       Zlib.Inflate.BufferType は Zlib.RawInflate.BufferType のエイリアス.
 */
Zlib.Inflate = function(input, opt_params) {
  /** @type {number} */
  var bufferSize;
  /** @type {Zlib.Inflate.BufferType} */
  var bufferType;
  /** @type {number} */
  var cmf;
  /** @type {number} */
  var flg;

  /** @type {!(Uint8Array|Array)} */
  this.input = input;
  /** @type {number} */
  this.ip = 0;
  /** @type {Zlib.RawInflate} */
  this.rawinflate;
  /** @type {(boolean|undefined)} verify flag. */
  this.verify;

  // option parameters
  if (opt_params || !(opt_params = {})) {
    if (opt_params['index']) {
      this.ip = opt_params['index'];
    }
    if (opt_params['verify']) {
      this.verify = opt_params['verify'];
    }
  }

  // Compression Method and Flags
  cmf = input[this.ip++];
  flg = input[this.ip++];

  // compression method
  switch (cmf & 0x0f) {
    case Zlib.CompressionMethod.DEFLATE:
      this.method = Zlib.CompressionMethod.DEFLATE;
      break;
    default:
      throw new Error('unsupported compression method');
  }

  // fcheck
  if (((cmf << 8) + flg) % 31 !== 0) {
    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
  }

  // fdict (not supported)
  if (flg & 0x20) {
    throw new Error('fdict flag is not supported');
  }

  // RawInflate
  this.rawinflate = new Zlib.RawInflate(input, {
    'index': this.ip,
    'bufferSize': opt_params['bufferSize'],
    'bufferType': opt_params['bufferType'],
    'resize': opt_params['resize']
  });
}

/**
 * @enum {number}
 */
Zlib.Inflate.BufferType = Zlib.RawInflate.BufferType;

/**
 * decompress.
 * @return {!(Uint8Array|Array)} inflated buffer.
 */
Zlib.Inflate.prototype.decompress = function() {
  /** @type {!(Array|Uint8Array)} input buffer. */
  var input = this.input;
  /** @type {!(Uint8Array|Array)} inflated buffer. */
  var buffer;
  /** @type {number} adler-32 checksum */
  var adler32;

  buffer = this.rawinflate.decompress();
  this.ip = this.rawinflate.ip;

  // verify adler-32
  if (this.verify) {
    adler32 = (
      input[this.ip++] << 24 | input[this.ip++] << 16 |
      input[this.ip++] << 8 | input[this.ip++]
    ) >>> 0;

    if (adler32 !== Zlib.Adler32(buffer)) {
      throw new Error('invalid adler-32 checksum');
    }
  }

  return buffer;
};

// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

/**
 * @fileoverview Deflate (RFC1951) 実装.
 * Deflateアルゴリズム本体は Zlib.RawDeflate で実装されている.
 */
goog.provide('Zlib.Deflate');

goog.require('USE_TYPEDARRAY');
goog.require('Zlib');
goog.require('Zlib.Adler32');
goog.require('Zlib.RawDeflate');

goog.scope(function() {

/**
 * Zlib Deflate
 * @constructor
 * @param {!(Array|Uint8Array)} input 符号化する対象の byte array.
 * @param {Object=} opt_params option parameters.
 */
Zlib.Deflate = function(input, opt_params) {
  /** @type {!(Array|Uint8Array)} */
  this.input = input;
  /** @type {!(Array|Uint8Array)} */
  this.output =
    new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Deflate.DefaultBufferSize);
  /** @type {Zlib.Deflate.CompressionType} */
  this.compressionType = Zlib.Deflate.CompressionType.DYNAMIC;
  /** @type {Zlib.RawDeflate} */
  this.rawDeflate;
  /** @type {Object} */
  var rawDeflateOption = {};
  /** @type {string} */
  var prop;

  // option parameters
  if (opt_params || !(opt_params = {})) {
    if (typeof opt_params['compressionType'] === 'number') {
      this.compressionType = opt_params['compressionType'];
    }
  }

  // copy options
  for (prop in opt_params) {
    rawDeflateOption[prop] = opt_params[prop];
  }

  // set raw-deflate output buffer
  rawDeflateOption['outputBuffer'] = this.output;

  this.rawDeflate = new Zlib.RawDeflate(this.input, rawDeflateOption);
};

/**
 * @const
 * @type {number} デフォルトバッファサイズ.
 */
Zlib.Deflate.DefaultBufferSize = 0x8000;

/**
 * @enum {number}
 */
Zlib.Deflate.CompressionType = Zlib.RawDeflate.CompressionType;

/**
 * 直接圧縮に掛ける.
 * @param {!(Array|Uint8Array)} input target buffer.
 * @param {Object=} opt_params option parameters.
 * @return {!(Array|Uint8Array)} compressed data byte array.
 */
Zlib.Deflate.compress = function(input, opt_params) {
  return (new Zlib.Deflate(input, opt_params)).compress();
};

/**
 * Deflate Compression.
 * @return {!(Array|Uint8Array)} compressed data byte array.
 */
Zlib.Deflate.prototype.compress = function() {
  /** @type {Zlib.CompressionMethod} */
  var cm;
  /** @type {number} */
  var cinfo;
  /** @type {number} */
  var cmf;
  /** @type {number} */
  var flg;
  /** @type {number} */
  var fcheck;
  /** @type {number} */
  var fdict;
  /** @type {number} */
  var flevel;
  /** @type {number} */
  var clevel;
  /** @type {number} */
  var adler;
  /** @type {boolean} */
  var error = false;
  /** @type {!(Array|Uint8Array)} */
  var output;
  /** @type {number} */
  var pos = 0;

  output = this.output;

  // Compression Method and Flags
  cm = Zlib.CompressionMethod.DEFLATE;
  switch (cm) {
    case Zlib.CompressionMethod.DEFLATE:
      cinfo = Math.LOG2E * Math.log(Zlib.RawDeflate.WindowSize) - 8;
      break;
    default:
      throw new Error('invalid compression method');
  }
  cmf = (cinfo << 4) | cm;
  output[pos++] = cmf;

  // Flags
  fdict = 0;
  switch (cm) {
    case Zlib.CompressionMethod.DEFLATE:
      switch (this.compressionType) {
        case Zlib.Deflate.CompressionType.NONE: flevel = 0; break;
        case Zlib.Deflate.CompressionType.FIXED: flevel = 1; break;
        case Zlib.Deflate.CompressionType.DYNAMIC: flevel = 2; break;
        default: throw new Error('unsupported compression type');
      }
      break;
    default:
      throw new Error('invalid compression method');
  }
  flg = (flevel << 6) | (fdict << 5);
  fcheck = 31 - (cmf * 256 + flg) % 31;
  flg |= fcheck;
  output[pos++] = flg;

  // Adler-32 checksum
  adler = Zlib.Adler32(this.input);

  this.rawDeflate.op = pos;
  output = this.rawDeflate.compress();
  pos = output.length;

  if (USE_TYPEDARRAY) {
    // subarray 分を元にもどす
    output = new Uint8Array(output.buffer);
    // expand buffer
    if (output.length <= pos + 4) {
      this.output = new Uint8Array(output.length + 4);
      this.output.set(output);
      output = this.output;
    }
    output = output.subarray(0, pos + 4);
  }

  // adler32
  output[pos++] = (adler >> 24) & 0xff;
  output[pos++] = (adler >> 16) & 0xff;
  output[pos++] = (adler >>  8) & 0xff;
  output[pos++] = (adler      ) & 0xff;

  return output;
};

// end of scope
});

/* vim:set expandtab ts=2 sw=2 tw=80: */

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Wraps the original ZLIB implementation to conform to e2e.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.compression.Zlib');

goog.require('Zlib');
goog.require('Zlib.Deflate');
goog.require('Zlib.Inflate');
goog.require('e2e.async.Result');
goog.require('e2e.compression.Algorithm');
goog.require('e2e.compression.Compression');
goog.require('e2e.compression.factory');
goog.require('goog.array');


/**
 * Wrapper around the external zlib implementation.
 * @extends {e2e.compression.Compression}
 * @constructor
 */
e2e.compression.Zlib = function() {
  goog.base(this, e2e.compression.Algorithm.ZLIB);
};
goog.inherits(e2e.compression.Zlib,
    e2e.compression.Compression);


/** @inheritDoc */
e2e.compression.Zlib.prototype.decompress = function(compressedData) {
  var data = (new Zlib.Inflate(compressedData)).decompress();
  data = goog.array.clone(data);
  return e2e.async.Result.toResult(data);
};


/** @inheritDoc */
e2e.compression.Zlib.prototype.compress = function(data) {
  var compressedData = (new Zlib.Deflate(data)).compress();
  compressedData = goog.array.clone(compressedData);
  return e2e.async.Result.toResult(compressedData);
};


e2e.compression.factory.add(e2e.compression.Zlib,
                                    e2e.compression.Algorithm.ZLIB);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires all compression algorithms to load them into the
 * factory.
 */
/** @suppress {extraProvide} this aggregation needs a namespace */
goog.provide('e2e.compression.all');

/** @suppress {extraRequire} intentional import */
goog.require('e2e.compression.Zip');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.compression.Zlib');

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview User ID packet.
 */

goog.provide('e2e.openpgp.packet.UserId');

goog.require('e2e');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.compression.all');
goog.require('e2e.compression.factory');
goog.require('e2e.hash.Algorithm');
/** @suppress {extraRequire} intentional import */
goog.require('e2e.hash.all');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.packet.Packet');
goog.require('e2e.openpgp.packet.Signature');
goog.require('e2e.openpgp.packet.factory');
goog.require('goog.array');



/**
 * User ID Packet (Tag 13) defined in RFC 4880 section 5.11.
 * @param {string} userId The user ID.
 * @constructor
 * @extends {e2e.openpgp.packet.Packet}
 */
e2e.openpgp.packet.UserId = function(userId) {
  goog.base(this);
  /**
   * UTF-8 text representing the name and email address of the key holder.
   * @type {string}
   */
  this.userId = userId;
  /**
   * @type {!Array.<!e2e.openpgp.packet.Signature>}
   * @private
   */
  this.certifications_ = [];
  /**
   * @type {!Array.<!e2e.openpgp.packet.Signature>}
   * @private
   */
  this.revocations_ = [];
};
goog.inherits(e2e.openpgp.packet.UserId,
              e2e.openpgp.packet.Packet);


/** @inheritDoc */
e2e.openpgp.packet.UserId.prototype.tag = 13;


/**
 * Parses and extracts the data from the body. It will consume all data from the
 * array.
 * @param {!e2e.ByteArray} data The data to parse.
 * @return {e2e.openpgp.packet.UserId} A user ID Packet.
 */
e2e.openpgp.packet.UserId.parse = function(data) {
  var userId = e2e.byteArrayToString(data);
  data = [];
  return new e2e.openpgp.packet.UserId(userId);
};


/** @inheritDoc */
e2e.openpgp.packet.UserId.prototype.serializePacketBody = function() {
  return e2e.stringToByteArray(this.userId);
};


/** @override */
e2e.openpgp.packet.UserId.prototype.serialize = function() {
  var serialized = goog.base(this, 'serialize');
  goog.array.forEach(
      this.revocations_.concat(this.certifications_),
      function(sig) {
        goog.array.extend(serialized, sig.serialize());
      });
  return serialized;
};


/**
 * @param {e2e.openpgp.packet.Signature} signature
 */
e2e.openpgp.packet.UserId.prototype.addCertification = function(signature) {
  if (!signature.isCertificationSignature()) {
    throw new e2e.openpgp.error.ParseError(
        'Signature is not a certification signature.');
  }
  this.certifications_.push(signature);
};


/**
 * Adds the User ID revocation signature.
 * Caution! Signature is not verified, use verifySignatures() function to verify
 * the signature.
 * @param {!e2e.openpgp.packet.Signature} signature Revocation signature
 */
e2e.openpgp.packet.UserId.prototype.addRevocation = function(signature) {
  if (signature.signatureType !==
      e2e.openpgp.packet.Signature.SignatureType.CERTIFICATION_REVOCATION) {
    throw new e2e.openpgp.error.ParseError(
        'Invalid revocation signature type.');
  }
  this.revocations_.push(signature);
};


/**
 * @param {e2e.openpgp.packet.Signature} signature
 * @param {!e2e.openpgp.packet.Key} verifyingKey key packet that should
 *     verify the certification signature.
 * @param {!e2e.ByteArray} signedData data that was signed.
 * @param {string} verificationErrorMsg error message when signature did not
 *     verify.
 * @return {boolean} True iff signature verified correctly.
 * @private
 */
e2e.openpgp.packet.UserId.prototype.verifySignatureInternal_ = function(
    signature, verifyingKey, signedData, verificationErrorMsg) {
  if (!verifyingKey.keyId || !goog.array.equals(signature.getSignerKeyId(),
      verifyingKey.keyId)) {
    // Different key, ignore signature.
    return false;
  }
  var signer = /** @type {!e2e.signer.Signer} */ (verifyingKey.cipher);
  try {
    var signatureVerified = signature.verify(signedData,
      goog.asserts.assertObject(signer));
  } catch (e) {
    // Ignore signatures that throw unsupported errors (e.g. weak hash
    // algorithms)
    if (e instanceof e2e.openpgp.error.UnsupportedError) {
      return false;
    }
    throw e;
  }
  if (!signatureVerified) {
    throw new e2e.openpgp.error.SignatureError(verificationErrorMsg);
  }
  return true;
};


/**
 * @param {e2e.openpgp.packet.Signature} signature
 * @param {!e2e.openpgp.packet.Key} verifyingKey key packet that should
 *     verify the certification signature.
 * @return {boolean} True iff signature verified correctly.
 * @private
 */
e2e.openpgp.packet.UserId.prototype.verifyCertification_ = function(signature,
    verifyingKey) {
  return this.verifySignatureInternal_(
      signature,
      verifyingKey,
      this.getCertificationSignatureData_(verifyingKey),
      'Certification signature verification failed.');
};


/**
 * Checks if a packet has valid certification signature by a given
 *     key packet. This function will throw error if signature verification
 *     fails.
 * @param {!e2e.openpgp.packet.Key} verifyingKey key packet that should
 *     verify the signatures
 * @return {boolean} True if key has a valid certification.
 */
e2e.openpgp.packet.UserId.prototype.verifySignatures = function(verifyingKey) {
  // Revocation removes related certification signatures.
  goog.array.forEach(this.revocations_,
      goog.bind(this.applyRevocation_, this, verifyingKey));
  // User ID needs to have a valid certification signature. See RFC 4880 11.1.
  var hasCertification = false;
  // Process all signatures to detect tampering.
  goog.array.forEach(this.certifications_, function(signature) {
      if (this.verifyCertification_(signature, verifyingKey))
        hasCertification = true;
  }, this);
  return hasCertification;
};


/**
 * Applies a revocation signature, removing all certification signatures by a
 * given key.
 * @param {!e2e.openpgp.packet.Key} verifyingKey key packet that should
 *     verify the signatures
 * @param  {!e2e.openpgp.packet.Signature} revocation revocation signature
 * @private
 */
e2e.openpgp.packet.UserId.prototype.applyRevocation_ = function(verifyingKey,
    revocation) {
  if (this.verifySignatureInternal_(
        revocation,
        verifyingKey,
        this.getCertificationSignatureData_(verifyingKey),
        'User ID revocation signature verification failed.')) {
    var revocationKey = revocation.getSignerKeyId();
    for (var i = this.certifications_.length - 1; i >= 0; i--) {
      if (goog.array.equals(revocationKey,
          this.certifications_[i].getSignerKeyId())) {
        // Invalidate certifications by the same key
        this.certifications_.splice(i, 1);
      }
    }
  }
};


/**
 * Returns data for creating a certification signature between this packet and
 *     a given binding key.
 * @param  {!e2e.openpgp.packet.Key} certifyingKey Key that certified
 * @return {!e2e.ByteArray} Signature data.
 * @private
 */
e2e.openpgp.packet.UserId.prototype.getCertificationSignatureData_ = function(
    certifyingKey) {
  return goog.array.flatten(
      certifyingKey.getPublicKeyPacket().getBytesToSign(),
      this.getBytesToSign());
};


/**
 * @return {Array.<e2e.openpgp.packet.Signature>} certifications
 */
e2e.openpgp.packet.UserId.prototype.getCertifications = function() {
  return this.certifications_;
};


/**
 * @param {e2e.openpgp.packet.SecretKey} key
 */
e2e.openpgp.packet.UserId.prototype.certifyBy = function(key) {
  var data = goog.array.flatten(
      key.getPublicKeyPacket().getBytesToSign(),
      this.getBytesToSign()
  );
  var sigResult = e2e.openpgp.packet.Signature.construct(
      key,
      data,
      e2e.openpgp.packet.Signature.SignatureType.GENERIC_USER_ID,
      this.getSignatureAttributes_(key));

  sigResult.addCallback(function(sig) {
    this.certifications_.push(sig);
  }, this);
};


/**
 * Returns key certification signature attributes, including End-to-End
 * algorithm preferences.
 * @param {e2e.openpgp.packet.SecretKey} key
 * @return {Object.<string, number|!e2e.ByteArray>}  Attributes
 * @private
 */
e2e.openpgp.packet.UserId.prototype.getSignatureAttributes_ = function(key) {
  // Prefer only SHA-2 family.
  var hashAlgos = [
    e2e.hash.Algorithm.SHA256,
    e2e.hash.Algorithm.SHA384,
    e2e.hash.Algorithm.SHA512,
    e2e.hash.Algorithm.SHA224
  ];
  var hashIds = goog.array.map(hashAlgos, e2e.openpgp.constants.getId);
  // Prefer all available compression mechanisms.
  var compressionAlgos = e2e.compression.factory.getAvailable();
  var compressionIds = goog.array.map(compressionAlgos,
      e2e.openpgp.constants.getId);
  // Prefer only the default symmetric algorithm (AES-256).
  var symAlgos = [
    e2e.openpgp.constants.DEFAULT_SYMMETRIC_CIPHER
  ];
  var symIds = goog.array.map(symAlgos, e2e.openpgp.constants.getId);

  return {
    'SIGNATURE_CREATION_TIME': e2e.dwordArrayToByteArray(
        [Math.floor(new Date().getTime() / 1e3)]),
    'ISSUER': key.keyId,
    'PREFERRED_SYMMETRIC_ALGORITHMS': symIds,
    'PREFERRED_HASH_ALGORITHMS': hashIds,
    'PREFERRED_COMPRESSION_ALGORITHMS': compressionIds,
    'FEATURES': [0x01] // Modification detection. See RFC 4880 5.2.3.24.
  };
};


/**
 * Gets a byte array representing the User ID data to create the signature over.
 * This is intended for signatures of type 0x10 through 0x13.
 * See RFC 4880 5.2.4 for details.
 * @return {!e2e.ByteArray} The bytes to sign.
 * @protected
 */
e2e.openpgp.packet.UserId.prototype.getBytesToSign = function() {
  return goog.array.flatten(
      0xB4,
      e2e.dwordArrayToByteArray([this.userId.length]),
      e2e.stringToByteArray(this.userId)
  );
};


e2e.openpgp.packet.factory.add(e2e.openpgp.packet.UserId);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview User Attribute packet stub.
 */

goog.provide('e2e.openpgp.packet.UserAttribute');

goog.require('e2e.openpgp.packet.UserId');
goog.require('e2e.openpgp.packet.factory');


/**
 * User Attribute Packet (Tag 17) defined in RFC 4880 section 5.12. Data inside
 *     the packet is not parsed.
 * @constructor
 * @extends {e2e.openpgp.packet.UserId}
 * @param {!e2e.ByteArray} data Attribute data.
 */
e2e.openpgp.packet.UserAttribute = function(data) {

  /**
   * @type {!e2e.ByteArray}
   */
  this.data = data;
  goog.base(this, '');
};
goog.inherits(e2e.openpgp.packet.UserAttribute,
              e2e.openpgp.packet.UserId);


/** @inheritDoc */
e2e.openpgp.packet.UserAttribute.prototype.tag = 17;


/**
 * Gets a byte array representing the User attribute data to create the
 *     signature over. This is intended for signatures of type 0x10 through
 *     0x13. See RFC 4880 5.2.4 for details.
 * @return {!e2e.ByteArray} The bytes to sign.
 * @protected
 */
e2e.openpgp.packet.UserAttribute.prototype.getBytesToSign = function() {
  return goog.array.flatten(
      0xD1,
      e2e.dwordArrayToByteArray([this.data.length]),
      this.data
  );
};


/**
 * @param {!e2e.ByteArray} data data to parse
 * @return {e2e.openpgp.packet.UserAttribute}
 */
e2e.openpgp.packet.UserAttribute.parse = function(data) {
  //TODO: implement subpacket parsing
  var body = data;
  data = [];
  return new e2e.openpgp.packet.UserAttribute(body);
};


e2e.openpgp.packet.factory.add(e2e.openpgp.packet.UserAttribute);

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Represents a public subkey packet.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.packet.PublicSubkey');

goog.require('e2e.openpgp.packet.PublicKey');
goog.require('e2e.openpgp.packet.factory');




/**
 * A Public Subkey Packet (Tag 14) RFC 4880 Section 5.5.1.2.
 * @param {number} version The version of the key.
 * @param {number} timestamp The creation time of the key.
 * @param {!e2e.cipher.Cipher|!e2e.signer.Signer} cipher An
 *     instance of the cipher used.
 * @param {!e2e.ByteArray=} opt_fingerprint The fingerprint of the key.
 * @extends {e2e.openpgp.packet.PublicKey}
 * @constructor
 */
e2e.openpgp.packet.PublicSubkey = function(
    version, timestamp, cipher, opt_fingerprint) {
  goog.base(this, version, timestamp, cipher, opt_fingerprint);
};
goog.inherits(e2e.openpgp.packet.PublicSubkey,
              e2e.openpgp.packet.PublicKey);


/** @inheritDoc */
e2e.openpgp.packet.PublicSubkey.prototype.tag = 14;


/**
 * @override
 */
e2e.openpgp.packet.PublicSubkey.prototype.isSubkey = true;


/**
 * Extracts a Public Subkey Packet from the body, and returns a
 * PublicSubKey.
 * @param {!e2e.ByteArray} body The body from where to extract the data.
 * @return {!e2e.openpgp.packet.PublicSubkey} The generated subkey.
 */
e2e.openpgp.packet.PublicSubkey.parse = function(body) {
  var pubkey = e2e.openpgp.packet.PublicKey.parse(body);
  var subkey = new e2e.openpgp.packet.PublicSubkey(pubkey.version,
                                                       pubkey.timestamp,
                                                       pubkey.cipher,
                                                       pubkey.fingerprint);
  return subkey;
};

e2e.openpgp.packet.factory.add(e2e.openpgp.packet.PublicSubkey);

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Represents a secret subkey packet.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.packet.SecretSubkey');

goog.require('e2e.openpgp.packet.PublicSubkey');
goog.require('e2e.openpgp.packet.SecretKey');
goog.require('e2e.openpgp.packet.factory');



/**
 * A Secret Subkey Packet (Tag 7) RFC 4880 Section 5.5.1.4.
 * @param {number} version The version of the key.
 * @param {number} timestamp The creation time of the key.
 * @param {!e2e.openpgp.EncryptedCipher} cipher The encrypted cipher.
 * @param {!e2e.ByteArray=} opt_fingerprint The fingerprint of the key.
 * @extends {e2e.openpgp.packet.SecretKey}
 * @constructor
 */
e2e.openpgp.packet.SecretSubkey = function(
    version, timestamp, cipher, opt_fingerprint) {
  goog.base(this, version, timestamp, cipher, opt_fingerprint);
};
goog.inherits(e2e.openpgp.packet.SecretSubkey,
              e2e.openpgp.packet.SecretKey);


/** @inheritDoc */
e2e.openpgp.packet.SecretSubkey.prototype.tag = 7;


/**
 * @override
 */
e2e.openpgp.packet.SecretSubkey.prototype.isSubkey = true;


/** @override */
e2e.openpgp.packet.SecretSubkey.prototype.getPublicKeyPacket = function() {
  return new e2e.openpgp.packet.PublicSubkey(
      this.version, this.timestamp, this.cipher, this.fingerprint);
};


/**
 * Extracts a Secret Subkey Packet from the body, and returns a
 * SecretSubkey.
 * @param {!e2e.ByteArray} body The body from where to extract the data.
 * @return {!e2e.openpgp.packet.SecretSubkey} The generated subkey.
 */
e2e.openpgp.packet.SecretSubkey.parse = function(body) {
  var seckey = e2e.openpgp.packet.SecretKey.parse(body);
  var subkey = new e2e.openpgp.packet.SecretSubkey(seckey.version,
                                                       seckey.timestamp,
                                                       seckey.cipher,
                                                       seckey.fingerprint);
  return subkey;
};

e2e.openpgp.packet.factory.add(e2e.openpgp.packet.SecretSubkey);

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Trust packet. Not currently used, and ignored when imported.
 */

goog.provide('e2e.openpgp.packet.Trust');

goog.require('e2e.openpgp.packet.Packet');
goog.require('e2e.openpgp.packet.factory');



/**
 * @constructor
 * @extends {e2e.openpgp.packet.Packet}
 */
e2e.openpgp.packet.Trust = function() {
  goog.base(this);
};
goog.inherits(e2e.openpgp.packet.Trust,
              e2e.openpgp.packet.Packet);


/** @inheritDoc */
e2e.openpgp.packet.Trust.prototype.tag = 12;


/** @override */
e2e.openpgp.packet.Trust.prototype.serializePacketBody = function() {
  return [];
};


/**
 * @param {!e2e.ByteArray} body
 * @return {e2e.openpgp.packet.Trust}
 */
e2e.openpgp.packet.Trust.parse = function(body) {
  return new e2e.openpgp.packet.Trust;
};


e2e.openpgp.packet.factory.add(e2e.openpgp.packet.Trust);


// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Base class for transferable OpenPGP key blocks.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.block.TransferableKey');

goog.require('e2e.openpgp.block.Block');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.error.SignatureError');
goog.require('e2e.openpgp.packet.PublicSubkey');
goog.require('e2e.openpgp.packet.SecretSubkey');
goog.require('e2e.openpgp.packet.Signature');
goog.require('e2e.openpgp.packet.Trust');
goog.require('e2e.openpgp.packet.UserAttribute');
goog.require('e2e.openpgp.packet.UserId');
goog.require('goog.array');


/**
 * Representation of a transferable key block. According to the OpenPGP RFC
 * (RFC 4880) Section 11.1/2, a transferable key block is represented as:
 *  - One Public-Key or Secret-Key packet
 *  - Zero or more revocation signatures
 *  - One or more User ID packets
 *  - After each User ID packet, zero or more Signature packets
 *    (certifications)
 *  - Zero or more User Attribute packets
 *  - After each User Attribute packet, zero or more Signature packets
 *    (certifications)
 *  - Zero or more Subkey packets
 *  - After each Subkey packet, one Signature packet, plus optionally a
 *    revocation
 * @param {function(new:e2e.openpgp.packet.Key, number, number,
 *     !e2e.cipher.Cipher, !e2e.ByteArray)} keyPacketClass The
 *     class of key packet to parse.
 * @constructor
 * @extends {e2e.openpgp.block.Block}
 */
e2e.openpgp.block.TransferableKey = function(keyPacketClass) {
  /**
   * The class of key packet to extract.
   * @type {function(new:e2e.openpgp.packet.Key,
   *     number, number, !e2e.cipher.Cipher, !e2e.ByteArray)}
   */
  this.keyPacketClass = keyPacketClass;
  /**
   * Main key, public or private, for this block.
   * @type {?e2e.openpgp.packet.Key}
   */
  this.keyPacket = null;
  /**
   * List of user IDs in this block.
   * @type {!Array.<!e2e.openpgp.packet.UserId>}
   */
  this.userIds = [];
  /**
   * List of subkeys on this block.
   * @type {!Array.<!e2e.openpgp.packet.Key>}
   */
  this.subKeys = [];
  /**
   * List of user attributes in this block.
   * @type {!Array.<!e2e.openpgp.packet.UserAttribute>}
   */
  this.userAttributes = [];
  goog.base(this);
};
goog.inherits(e2e.openpgp.block.TransferableKey,
    e2e.openpgp.block.Block);


/**
 * @return {!Array.<string>} The user ids for this key block.
 */
e2e.openpgp.block.TransferableKey.prototype.getUserIds = function() {
  return goog.array.map(this.userIds, function(uid) {return uid.userId;});
};


/** @inheritDoc */
e2e.openpgp.block.TransferableKey.prototype.parse = function(packets) {
  var packet = packets[0];
  if (packet instanceof this.keyPacketClass) {
    this.keyPacket = packet;
    this.packets.push(packets.shift());
  } else {
    throw new e2e.openpgp.error.ParseError(
        'Invalid block. Missing primary key packet.');
  }
  packet = packets[0];
  while (packet instanceof e2e.openpgp.packet.Signature) {
    if (packet.signatureType !==
        e2e.openpgp.packet.Signature.SignatureType.KEY_REVOCATION) {
      throw new e2e.openpgp.error.ParseError(
          'Invalid block. Only key revocation signatures are allowed after ' +
          'key packets.');
    }
    this.keyPacket.addRevocation(packet);
    this.packets.push(packets.shift());
    packet = packets[0];
  }
  while (packet instanceof e2e.openpgp.packet.UserId ||
      packet instanceof e2e.openpgp.packet.UserAttribute) {
    // Be compatible with GnuPG that creates invalid OpenPGP blocks interwining
    // UserId and UserAttribute sequences. According to
    // http://tools.ietf.org/html/rfc4880#section-11.1 UserId sequences should
    // always come first. See Issue #33.
    while (packet instanceof e2e.openpgp.packet.UserId) {
      // UserAttribute extends UserId
      if (packet instanceof e2e.openpgp.packet.UserAttribute) {
        this.userAttributes.push(packet);
      } else {
        this.userIds.push(packet);
      }
      var userIdOrAttribute = packet;
      this.packets.push(packets.shift());
      packet = packets[0];
      while (packet instanceof e2e.openpgp.packet.Signature) {
        // TODO(user): Figure out what to do with foreign certifications
        if (packet.isCertificationSignature()) {
          userIdOrAttribute.addCertification(packet);
        } else if (packet.signatureType === e2e.openpgp.packet.Signature.
            SignatureType.CERTIFICATION_REVOCATION) {
          userIdOrAttribute.addRevocation(packet);
        }
        this.packets.push(packets.shift());
        while (packets[0] instanceof e2e.openpgp.packet.Trust) {
          packets.shift();
        }
        packet = packets[0];
      }
    }
  }
  if (this.userIds.length < 1) {
    throw new e2e.openpgp.error.ParseError('Invalid block. Missing User ID.');
  }
  while (packet instanceof e2e.openpgp.packet.PublicSubkey ||
        packet instanceof e2e.openpgp.packet.SecretSubkey) {
    var subKey = packet;
    this.subKeys.push(packet);
    this.packets.push(packets.shift());
    packet = packets[0];
    // RFC4880 requires a signature for subkeys, however some clients, such as
    // PGP 8.0.3, do not include signatures on secretsubkeys.
    // Some keys apparently have more than one signature per subkey.
    // GnuPG puts subkey revocation signatures before subkey signatures, and it
    // does not contradict RFC 4880.
    while (packet instanceof e2e.openpgp.packet.Signature) {
      // Process subkey signatures.
      if (packet.signatureType ==
          e2e.openpgp.packet.Signature.SignatureType.SUBKEY) {
        // TODO(user): Add support for signing key not being the main key.
        subKey.addBindingSignature(packet);
        this.packets.push(packets.shift());
        // Ignore trust packets.
        while (packets[0] instanceof e2e.openpgp.packet.Trust) {
          packets.shift();
        }
        packet = packets[0];
      } else if (packet.signatureType ==
                 e2e.openpgp.packet.Signature.SignatureType.SUBKEY_REVOCATION) {
        subKey.addRevocation(packet);
        this.packets.push(packets.shift());
        packet = packets[0];
      } else {
        break;
      }
    }
  }
  return packets;
};


/**
 * Verify all certification, binding and revocation signatures present in
 *     key block. This will remove all keys and User IDs with non-verifying or
 *     missing signatures. Revoked keys and User IDs are also removed.
 *  This method will throw an error if the resulting TransferableKey has no
 *  user IDs or any signature has been tampered with.
 */
e2e.openpgp.block.TransferableKey.prototype.processSignatures = function() {
  var signingKey = goog.asserts.assertObject(this.keyPacket);

  if (!this.keyPacket.verifySignatures(signingKey)) {
    // main key is invalid
    throw new e2e.openpgp.error.SignatureError(
      'Main key is invalid.');
  }
  // Process subkeys
  var keysToRemove = [];
  for (var i = this.subKeys.length - 1; i >= 0; i--) {
    if (!this.subKeys[i].verifySignatures(signingKey)) {
      // Remove subKey, it's invalid
      this.subKeys.splice(i, 1);
    }
  }
  // Process user IDs
  for (i = this.userIds.length - 1; i >= 0; i--) {
    if (!this.userIds[i].verifySignatures(signingKey)) {
      this.userIds.splice(i, 1);
    }
  }
  if (this.userIds.length == 0) {
    throw new e2e.openpgp.error.SignatureError('No certified user IDs.');
  }
  for (i = this.userAttributes.length - 1; i >= 0; i--) {
    if (!this.userAttributes[i].verifySignatures(signingKey)) {
      this.userAttributes.splice(i, 1);
    }
  }
};


/**
 * Chooses a key packet for the specified use. Prefers keys that have been
 * certified by the key owner for a specified use.
 * @param {e2e.openpgp.packet.Key.Usage} use The use of the key.
 * @param {function(new:T, ...)} type The constructor of the key to get.
 * @param {boolean} preferSubkey If true, subkey with a capability is preferred
 *     to main key packet.
 * @return {T} A key packet of the specified type.
 * @template T
 * @protected
 */
e2e.openpgp.block.TransferableKey.prototype.getKeyTo =
    function(use, type, preferSubkey) {
  if (!preferSubkey) { // Check main key packet capabilities first
    if (this.keyPacket.can(use) && this.keyPacket instanceof type) {
      return this.keyPacket;
    }
  }

  var certifiedKey = goog.array.find(
    this.subKeys, function(key) {
      return key.isCertifiedTo(use) && key.can(use) && key instanceof type;
    });

  if (certifiedKey) {
    return certifiedKey;
  }

  // Fallback if no key was certified for a usage.
  return goog.array.find(
      this.subKeys.concat(this.keyPacket), function(key) {
        return key.can(use) && key instanceof type;
    });
};


/**
 * Chooses a key packet for encryption.
 * @return {e2e.openpgp.packet.PublicKey}
 */
e2e.openpgp.block.TransferableKey.prototype.getKeyToEncrypt =
    goog.abstractMethod;


/**
 * Chooses a key packet for signing.
 * @return {e2e.openpgp.packet.SecretKey}
 */
e2e.openpgp.block.TransferableKey.prototype.getKeyToSign =
    goog.abstractMethod;


/**
 * True if the key contains material that can be serialized in Key objects.
 * @type {boolean}
 */
e2e.openpgp.block.TransferableKey.prototype.SERIALIZE_IN_KEY_OBJECT = false;


/**
 * Returns a key or one of the subkeys of a given key ID.
 * @param {!e2e.ByteArray} keyId Key ID to find the key by.
 * @return {?e2e.openpgp.packet.Key} Found key
 */
e2e.openpgp.block.TransferableKey.prototype.getKeyById = function(keyId) {
  if (this.keyPacket.keyId && goog.array.equals(this.keyPacket.keyId, keyId)) {
    return this.keyPacket;
  }
  return goog.array.find(this.subKeys, function(key) {
    return !!key.keyId && goog.array.equals(key.keyId, keyId);
  });
};


/**
 * Checks if a key or one of the subkeys has a given key ID.
 * @param {!e2e.ByteArray} keyId Key ID to find the key by.
 * @return {boolean} If true, this TransferableKey has a key with given ID.
 */
e2e.openpgp.block.TransferableKey.prototype.hasKeyById = function(keyId) {
  return !!this.getKeyById(keyId);
};


/** @inheritDoc */
e2e.openpgp.block.TransferableKey.prototype.serialize = function() {
  return goog.array.flatten(goog.array.map(
      [this.keyPacket].concat(this.userIds).concat(this.subKeys),
      function(packet) {
        return packet.serialize();
      }));
};


/**
 * Creates a Key object representing the TransferableKey.
 * @param {boolean=} opt_dontSerialize if true, skip key serialization in
 *     results.
 * @return {!e2e.openpgp.Key}
 */
e2e.openpgp.block.TransferableKey.prototype.toKeyObject = function(
    opt_dontSerialize) {
  return {
    key: this.keyPacket.toKeyPacketInfo(),
    subKeys: goog.array.map(
      this.subKeys, function(subKey) {
        return subKey.toKeyPacketInfo();
      }),
    uids: this.getUserIds(),
    serialized: /** @type {!e2e.ByteArray} */(
      (opt_dontSerialize || !this.SERIALIZE_IN_KEY_OBJECT) ?
      [] : this.serialize())
  };
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 *
 * @fileoverview Transferable Secret Key Block.
 *
 */

goog.provide('e2e.openpgp.block.TransferableSecretKey');

goog.require('e2e.openpgp.block.TransferableKey');
goog.require('e2e.openpgp.packet.Key');
goog.require('e2e.openpgp.packet.SecretKey');
goog.require('goog.array');

/**
 * Transferable Secret Key Block.
 * @constructor
 * @extends {e2e.openpgp.block.TransferableKey}
 */
e2e.openpgp.block.TransferableSecretKey = function() {
  goog.base(this, e2e.openpgp.packet.SecretKey);
};
goog.inherits(e2e.openpgp.block.TransferableSecretKey,
    e2e.openpgp.block.TransferableKey);


/**
 * Attempts to unlock all key packets with the given passphrase.
 * @param {!e2e.ByteArray=} opt_passphrase The passphrase.
 * @return {boolean} Whether the unlocking was succesful.
 */
e2e.openpgp.block.TransferableSecretKey.prototype.unlock =
    function(opt_passphrase) {
  try {
    this.keyPacket.cipher.unlockKey(opt_passphrase);
    goog.array.forEach(this.subKeys, function(subKey) {
      subKey.cipher.unlockKey(opt_passphrase);
    });
  } catch (e) {
    return false;
  }
  return true;
};


/**
 * Attempts to lock all key packets with the given passphrase.
 * @param {!e2e.ByteArray=} opt_passphrase The passphrase.
 * @return {boolean} Whether the locking was succesful.
 */
e2e.openpgp.block.TransferableSecretKey.prototype.lock =
    function(opt_passphrase) {
  try {
    this.keyPacket.cipher.lockKey(opt_passphrase);
    goog.array.forEach(this.subKeys, function(subKey) {
      subKey.cipher.lockKey(opt_passphrase);
    });
  } catch (e) {
    return false;
  }
  return true;
};


/** @override */
e2e.openpgp.block.TransferableSecretKey.prototype.getKeyToSign =
    function() {
  return this.getKeyTo(
      e2e.openpgp.packet.Key.Usage.SIGN,
      e2e.openpgp.packet.SecretKey,
      false); // Prefer main key to subkeys.
};


/** @inheritDoc */
e2e.openpgp.block.TransferableSecretKey.prototype.header =
    'PRIVATE KEY BLOCK';

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Compressed Data packet (Tag 8).
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.openpgp.packet.Compressed');

goog.require('e2e.async.Result');
goog.require('e2e.compression.Algorithm');
goog.require('e2e.compression.factory');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.packet.Data');
goog.require('e2e.openpgp.packet.factory');
goog.require('goog.array');


/**
 * Representation of a Compressed Data packet.
 * @param {e2e.compression.Algorithm} algorithm The compression
 *     algorithm.
 * @param {!e2e.ByteArray} compressedData The compressed data.
 * @extends {e2e.openpgp.packet.Data}
 * @constructor
 */
e2e.openpgp.packet.Compressed = function(algorithm, compressedData) {
  goog.base(this);
  /**
   * The data compression algorithm.
   * @type {e2e.compression.Algorithm}
   * @protected
   */
  this.algorithm = algorithm;
  /**
   * The compressed data.
   * @type {!e2e.ByteArray}
   * @protected
   */
  this.compressedData = compressedData;
  /** @inheritDoc */
  this.data = [];
};
goog.inherits(e2e.openpgp.packet.Compressed,
    e2e.openpgp.packet.Data);


/** @inheritDoc */
e2e.openpgp.packet.Compressed.prototype.tag = 8;


/**
 * Decompresses the compressedData and populates this.data.
 */
e2e.openpgp.packet.Compressed.prototype.decompress = function() {
  var compress = e2e.compression.factory.require(this.algorithm);
  this.data = /** @type {!e2e.ByteArray} */ (
      e2e.async.Result.getValue(compress.decompress(this.compressedData)));
};


/**
 * Makes a compressed packet starting with uncompressed data, typically a
 * serialized literal data packet.
 * @param {!e2e.ByteArray} data The data to compress.
 * @return {e2e.openpgp.packet.Compressed} packet.
 */
e2e.openpgp.packet.Compressed.construct = function(data) {
  // TODO(user) Add optional parameter specifying the compression algorithm.
  var algorithm = e2e.compression.factory.require(
      e2e.compression.Algorithm.ZLIB);
  var compressedData = /** @type {!e2e.ByteArray} */ (
      e2e.async.Result.getValue(algorithm.compress(data)));
  return new e2e.openpgp.packet.Compressed(algorithm.algorithm,
      compressedData);
};


/** @inheritDoc */
e2e.openpgp.packet.Compressed.prototype.serializePacketBody = function() {
  var id = e2e.openpgp.constants.getId(this.algorithm);
  return goog.array.concat(id, this.compressedData);
};


/**
 * Parses and extracts the data from the body.
 * Throws a {@code e2e.openpgp.error.ParseError} if malformed.
 * @param {!e2e.ByteArray} body The data to parse.
 * @return {e2e.openpgp.packet.Compressed} packet.
 */
e2e.openpgp.packet.Compressed.parse = function(body) {
  var algorithm = /** @type {e2e.compression.Algorithm} */ (
      e2e.openpgp.constants.getAlgorithm(
          e2e.openpgp.constants.Type.COMPRESSION,
          body.shift()));
  return new e2e.openpgp.packet.Compressed(algorithm, body);
};


e2e.openpgp.packet.factory.add(e2e.openpgp.packet.Compressed);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Compressed Message Blocks contain another block.
 */

goog.provide('e2e.openpgp.block.Compressed');

goog.require('e2e.openpgp.block.Message');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.packet.Compressed');


/**
 * Representation of a compressed message block.
 * @param {Array.<!e2e.openpgp.packet.Signature>=} opt_signatures
 * @constructor
 * @extends {e2e.openpgp.block.Message}
 */
e2e.openpgp.block.Compressed = function(opt_signatures) {
  goog.base(this, opt_signatures);
};
goog.inherits(e2e.openpgp.block.Compressed,
    e2e.openpgp.block.Message);


/**
 * Maximum nesting level of compressed blocks - see CVE-2013-4402
 * @const {number}
 */
e2e.openpgp.block.Compressed.prototype.MAX_COMPRESSION_NESTING_LEVEL = 20;


/** @override */
e2e.openpgp.block.Compressed.prototype.serializeMessage = function() {
  return this.compressedPacket_.compressedData;
};


/**
 * Extracts a block from the compressed data.
 * @return {!e2e.openpgp.block.Block}
 */
e2e.openpgp.block.Compressed.prototype.getBlock = function() {
  this.compressedPacket_.decompress();
  var data = this.compressedPacket_.data;
  // TODO(user): Can this be refactored to avoid the circular dependency?
  /** @suppress {missingRequire} We assume the factory is already present. */
  var decryptedBlock = e2e.openpgp.block.factory.parseByteArrayMulti(data);
  if (decryptedBlock.length != 1) {
    throw new e2e.openpgp.error.ParseError('Invalid compressed block.');
  }
  return decryptedBlock[0];
};


/** @override */
e2e.openpgp.block.Compressed.prototype.getLiteralMessage = function() {
  var msgBlock = this, currentLevel = 0;
  while (msgBlock instanceof e2e.openpgp.block.Compressed) {
    if (currentLevel >= this.MAX_COMPRESSION_NESTING_LEVEL) {
      throw new e2e.openpgp.error.ParseError(
                  'input data with too deeply nested packets');
    }
    msgBlock = msgBlock.getBlock();
    currentLevel++;
  }
  return msgBlock.getLiteralMessage();
};


/** @override */
e2e.openpgp.block.Compressed.prototype.parse = function(packets) {
  if (packets[0] instanceof e2e.openpgp.packet.Compressed) {
    this.compressedPacket_ = packets.shift();
  }
  return packets;
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 *
 * @fileoverview TransferablePublicKey block.
 *
 */

goog.provide('e2e.openpgp.block.TransferablePublicKey');

goog.require('e2e.openpgp.block.TransferableKey');
goog.require('e2e.openpgp.packet.Key');
goog.require('e2e.openpgp.packet.PublicKey');

/**
 * Transferable Public Key Block.
 * @constructor
 * @extends {e2e.openpgp.block.TransferableKey}
 */
e2e.openpgp.block.TransferablePublicKey = function() {
  goog.base(this, e2e.openpgp.packet.PublicKey);
};
goog.inherits(e2e.openpgp.block.TransferablePublicKey,
    e2e.openpgp.block.TransferableKey);


/** @override */
e2e.openpgp.block.TransferablePublicKey.prototype.SERIALIZE_IN_KEY_OBJECT =
    true;


/** @override */
e2e.openpgp.block.TransferablePublicKey.prototype.getKeyToEncrypt =
    function() {
  return this.getKeyTo(
      e2e.openpgp.packet.Key.Usage.ENCRYPT,
      e2e.openpgp.packet.PublicKey,
      true); // Prefer one of subkeys to main key.
};


/** @inheritDoc */
e2e.openpgp.block.TransferablePublicKey.prototype.header =
    'PUBLIC KEY BLOCK';

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Representation of Encrypted Session Key packets.
 */

goog.provide('e2e.openpgp.packet.EncryptedSessionKey');

goog.require('e2e.openpgp.packet.Packet');


/**
 * Represents encrypted session key packets (Tag 1 and 3) as specified in
 * RFC 4880 Section 5.1 and Section 5.3.
 * @param {number} version The version of the key packet.
 * @param {e2e.cipher.Algorithm} algorithm The public key algorithm.
 * @param {e2e.cipher.ciphertext.CipherText} encryptedKey Encrypted
 *     session key.
 * @extends {e2e.openpgp.packet.Packet}
 * @constructor
 */
e2e.openpgp.packet.EncryptedSessionKey = function(
    version, algorithm, encryptedKey) {
  this.version = version;
  this.algorithm = algorithm;
  this.encryptedKey = encryptedKey;
  /**
   * keyObj containing the symmetric session key.
   * @type {e2e.cipher.key.SymmetricKey|undefined}
   */
  this.sessionKey;
  /**
   * Symmetric encryption algorithm used to encrypt the following
   * Symmetrically Encrypted Data Packet. Used with this.sessionKey.
   * @type {!e2e.cipher.Algorithm|undefined}
   */
  this.symmetricAlgorithm;
};
goog.inherits(e2e.openpgp.packet.EncryptedSessionKey,
    e2e.openpgp.packet.Packet);


/**
 * Decrypts the encrypted session key.
 * @param {e2e.cipher.key.Key} key The key to decrypt the session key.
 * @return {e2e.async.Result.<boolean>} True if decryption suceeded.
 */
e2e.openpgp.packet.EncryptedSessionKey.prototype.decryptSessionKey =
  goog.abstractMethod;


/**
 * Obtains the decrypted session keyObj if available.
 * Throws {@code Error} if the session key does not exist. This happens if
 *     decryptSessionKey() has not yet been called.
 * @return {e2e.cipher.key.Key} The decrypted session key as a keyObj.
 */
e2e.openpgp.packet.EncryptedSessionKey.prototype.getSessionKey =
    function() {
  if (this.sessionKey) {
    return this.sessionKey;
  }
  throw new Error('Invalid session key.');
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Marker packet.
 */

goog.provide('e2e.openpgp.packet.Marker');

goog.require('e2e.openpgp.packet.Packet');
goog.require('e2e.openpgp.packet.factory');



/**
 * @constructor
 * @extends {e2e.openpgp.packet.Packet}
 */
e2e.openpgp.packet.Marker = function() {
  goog.base(this);
};
goog.inherits(e2e.openpgp.packet.Marker,
              e2e.openpgp.packet.Packet);


/** @inheritDoc */
e2e.openpgp.packet.Marker.prototype.tag = 10;


/** @override */
e2e.openpgp.packet.Marker.prototype.serializePacketBody = function() {
  return [0x50, 0x47, 0x50];
};


/**
 * @param {!e2e.ByteArray} body
 * @return {e2e.openpgp.packet.Marker}
 */
e2e.openpgp.packet.Marker.parse = function(body) {
  return new e2e.openpgp.packet.Marker;
};


e2e.openpgp.packet.factory.add(e2e.openpgp.packet.Marker);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Encrypted Data packet. Parent class for
 *   Symmetrically Encrypted Data Packet (Tag 9) and
 *   Symmetrically Encrypted Integrity Protected Data Packet (Tag 18).
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.openpgp.packet.EncryptedData');

goog.require('e2e.openpgp.packet.Data');


/**
 * Representation of an Encrypted Data Packet.
 * @param {!e2e.ByteArray} encryptedData The encrypted data.
 * @extends {e2e.openpgp.packet.Data}
 * @constructor
 */
e2e.openpgp.packet.EncryptedData = function(
    encryptedData) {
  goog.base(this);

  /**
   * The encrypted data.
   * @type {!e2e.ByteArray}
   * @protected
   */
  this.encryptedData = encryptedData;

  /** @inheritDoc */
  this.data = [];
};
goog.inherits(e2e.openpgp.packet.EncryptedData,
    e2e.openpgp.packet.Data);


/**
 * Decrypts the encryptedData and populates this.data.
 * @param {e2e.cipher.Algorithm} algorithm The encryption algorithm.
 * @param {e2e.cipher.key.Key=} opt_keyObj The key object
 *     to decrypt the data.
 */
e2e.openpgp.packet.EncryptedData.prototype.decrypt =
    goog.abstractMethod;

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Symmetric-Key Encrypted Session Key packet.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.openpgp.packet.SymmetricKey');

goog.require('e2e.async.Result');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.ciphermode.Cfb');
goog.require('e2e.hash.Algorithm');
goog.require('e2e.hash.factory');
goog.require('e2e.openpgp.IteratedS2K');
goog.require('e2e.openpgp.S2k');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.openpgp.packet.EncryptedSessionKey');
goog.require('e2e.openpgp.packet.factory');
goog.require('e2e.random');
goog.require('goog.array');


/**
 * Representation of a Symmetric-Key Encrypted Session-Key Packet (Tag 3).
 * As defined in RFC 4880 Section 5.3.
 * @param {number} version The Encrypted Session Key Packet version.
 * @param {e2e.cipher.Algorithm} algorithm The symmetric key algorithm.
 * @param {!e2e.ByteArray} encryptedKey The encrypted key.
 * @param {e2e.openpgp.S2k} s2k The string-to-key object.
 * @constructor
 * @extends {e2e.openpgp.packet.EncryptedSessionKey}
 */
e2e.openpgp.packet.SymmetricKey = function(
    version, algorithm, encryptedKey, s2k) {
  goog.base(this, version, algorithm, encryptedKey);
  /**
   * String-to-key object to use with passphrase.
   * @type {e2e.openpgp.S2k}
   * @private
   */
  this.s2k_ = s2k;
};
goog.inherits(
    e2e.openpgp.packet.SymmetricKey,
    e2e.openpgp.packet.EncryptedSessionKey);


/** @inheritDoc */
e2e.openpgp.packet.SymmetricKey.prototype.decryptSessionKey =
    function(key) {
  // Note that the key argument here is actually the passphrase, before s2k.
  var passphrase = key['passphrase'];
  // Make a cipher just to see the key length that we want.
  var cipher = /** @type {e2e.cipher.SymmetricCipher} */ (
      e2e.openpgp.constants.getInstance(
        e2e.openpgp.constants.Type.SYMMETRIC_KEY,
        this.algorithm));
  key = {'key': this.s2k_.getKey(passphrase, cipher.keySize)};
  if (this.encryptedKey.length > 0) {
    cipher.setKey(key);
    var iv = goog.array.repeat(0, cipher.blockSize);
    var cfbCipher = new e2e.ciphermode.Cfb(cipher);
    return cfbCipher.decrypt(
        /** @type !e2e.ByteArray */(this.encryptedKey), iv).addCallback(
        function(decoded) {
          try {
            this.symmetricAlgorithm =
                /** @type {e2e.cipher.Algorithm} */ (
                e2e.openpgp.constants.getAlgorithm(
                  e2e.openpgp.constants.Type.SYMMETRIC_KEY,
                  decoded.shift()));
          } catch (e) {
            if (e instanceof e2e.openpgp.error.UnsupportedError) {
              // We have invalid algorithm, therefore decryption failed.
              return false;
            } else {
              throw e;
            }
          }
          this.sessionKey = {'key': decoded};
          return true;
    }, this);
  } else { // No ESK, so just use the s2k for the session key.
    this.symmetricAlgorithm = this.algorithm;
    this.sessionKey = key; // already a keyObj
    return e2e.async.Result.toResult(true);
  }
};


/** @inheritDoc */
e2e.openpgp.packet.SymmetricKey.prototype.tag = 3;


/** @inheritDoc */
e2e.openpgp.packet.SymmetricKey.prototype.serializePacketBody = function() {
  return goog.array.concat(
      this.version,
      e2e.openpgp.constants.getId(this.algorithm),
      this.s2k_.serialize(),
      this.encryptedKey);
};


/**
 * Constructs an SymmetricKey packet from an unencrypted session key.
 * @param {!e2e.ByteArray} passphrase Symmetrically encrypt session key
 *   with this passphrase.
 * @param {!e2e.ByteArray} sessionKey Unencrypted session key.
 * @return {e2e.openpgp.packet.SymmetricKey}
 */
e2e.openpgp.packet.SymmetricKey.construct =
    function(passphrase, sessionKey) {
  var hash = e2e.hash.factory.require(
      e2e.hash.Algorithm.SHA1);
  var s2k = new e2e.openpgp.IteratedS2K(hash,
      e2e.random.getRandomBytes(8),  // salt
      96);  // The default encodedCount for GnuPG is 96 (decodes to 65536).
  var cipher = /** @type {e2e.cipher.SymmetricCipher} */ (
      e2e.openpgp.constants.getInstance(
        e2e.openpgp.constants.Type.SYMMETRIC_KEY,
        e2e.cipher.Algorithm.AES256));
  cipher.setKey({'key': s2k.getKey(passphrase, cipher.keySize)});
  var cfbCipher = new e2e.ciphermode.Cfb(cipher);
  var unencryptedKeyData = goog.array.concat(
      e2e.openpgp.constants.getId(e2e.cipher.Algorithm.AES256),
      sessionKey);
  var result = cfbCipher.encrypt(unencryptedKeyData,
      goog.array.repeat(0, cipher.blockSize));  // IV
  var encryptedKey = /** @type !e2e.ByteArray */(
      e2e.async.Result.getValue(result));
  var packet = new e2e.openpgp.packet.SymmetricKey(
      4, //version
      e2e.cipher.Algorithm.AES256,
      encryptedKey,
      s2k);
  return packet;
};


/** @inheritDoc */
e2e.openpgp.packet.SymmetricKey.parse = function(body) {
  var version = body.shift();
  if (version != 4) {
    throw new e2e.openpgp.error.ParseError(
        'Unknown SKESK packet version.');
  }
  var algorithmId = body.shift();
  var algorithm = /** @type e2e.cipher.Algorithm.<string> */ (
      e2e.openpgp.constants.getAlgorithm(
          e2e.openpgp.constants.Type.SYMMETRIC_KEY, algorithmId));
  var s2k = e2e.openpgp.S2k.parse(body);
  // Any bytes left in body are the encryptedKey. Possibly empty.
  return new e2e.openpgp.packet.SymmetricKey(
      version, algorithm, body, s2k);
};


e2e.openpgp.packet.factory.add(e2e.openpgp.packet.SymmetricKey);

// Copyright 2005 Bob Ippolito. All Rights Reserved.
// Modifications Copyright 2009 The Closure Library Authors.
// All Rights Reserved.

/**
 * Portions of this code are from MochiKit, received by The Closure
 * Library Authors under the MIT license. All other code is Copyright
 * 2005-2009 The Closure Library Authors. All Rights Reserved.
 */

/**
 * @fileoverview Class for tracking multiple asynchronous operations and
 * handling the results. The DeferredList object here is patterned after the
 * DeferredList object in the Twisted python networking framework.
 *
 * Based on the MochiKit code.
 *
 * See: http://twistedmatrix.com/projects/core/documentation/howto/defer.html
 *
 * @author brenneman@google.com (Shawn Brenneman)
 */

goog.provide('goog.async.DeferredList');

goog.require('goog.async.Deferred');



/**
 * Constructs an object that waits on the results of multiple asynchronous
 * operations and marshals the results. It is itself a <code>Deferred</code>,
 * and may have an execution sequence of callback functions added to it. Each
 * <code>DeferredList</code> instance is single use and may be fired only once.
 *
 * The default behavior of a <code>DeferredList</code> is to wait for a success
 * or error result from every <code>Deferred</code> in its input list. Once
 * every result is available, the <code>DeferredList</code>'s execution sequence
 * is fired with a list of <code>[success, result]</code> array pairs, where
 * <code>success</code> is a boolean indicating whether <code>result</code> was
 * the product of a callback or errback. The list's completion criteria and
 * result list may be modified by setting one or more of the boolean options
 * documented below.
 *
 * <code>Deferred</code> instances passed into a <code>DeferredList</code> are
 * independent, and may have additional callbacks and errbacks added to their
 * execution sequences after they are passed as inputs to the list.
 *
 * @param {!Array.<!goog.async.Deferred>} list An array of deferred results to
 *     wait for.
 * @param {boolean=} opt_fireOnOneCallback Whether to stop waiting as soon as
 *     one input completes successfully. In this case, the
 *     <code>DeferredList</code>'s callback chain will be called with a two
 *     element array, <code>[index, result]</code>, where <code>index</code>
 *     identifies which input <code>Deferred</code> produced the successful
 *     <code>result</code>.
 * @param {boolean=} opt_fireOnOneErrback Whether to stop waiting as soon as one
 *     input reports an error. The failing result is passed to the
 *     <code>DeferredList</code>'s errback sequence.
 * @param {boolean=} opt_consumeErrors When true, any errors fired by a
 *     <code>Deferred</code> in the input list will be captured and replaced
 *     with a succeeding null result. Any callbacks added to the
 *     <code>Deferred</code> after its use in the <code>DeferredList</code> will
 *     receive null instead of the error.
 * @param {Function=} opt_canceler A function that will be called if the
 *     <code>DeferredList</code> is canceled. @see goog.async.Deferred#cancel
 * @param {Object=} opt_defaultScope The default scope to invoke callbacks or
 *     errbacks in.
 * @constructor
 * @extends {goog.async.Deferred}
 */
goog.async.DeferredList = function(
    list, opt_fireOnOneCallback, opt_fireOnOneErrback, opt_consumeErrors,
    opt_canceler, opt_defaultScope) {

  goog.async.DeferredList.base(this, 'constructor',
      opt_canceler, opt_defaultScope);

  /**
   * The list of Deferred objects to wait for.
   * @const {!Array.<!goog.async.Deferred>}
   * @private
   */
  this.list_ = list;

  /**
   * The stored return values of the Deferred objects.
   * @const {!Array}
   * @private
   */
  this.deferredResults_ = [];

  /**
   * Whether to fire on the first successful callback instead of waiting for
   * every Deferred to complete.
   * @const {boolean}
   * @private
   */
  this.fireOnOneCallback_ = !!opt_fireOnOneCallback;

  /**
   * Whether to fire on the first error result received instead of waiting for
   * every Deferred to complete.
   * @const {boolean}
   * @private
   */
  this.fireOnOneErrback_ = !!opt_fireOnOneErrback;

  /**
   * Whether to stop error propagation on the input Deferred objects. If the
   * DeferredList sees an error from one of the Deferred inputs, the error will
   * be captured, and the Deferred will be returned to success state with a null
   * return value.
   * @const {boolean}
   * @private
   */
  this.consumeErrors_ = !!opt_consumeErrors;

  /**
   * The number of input deferred objects that have fired.
   * @private {number}
   */
  this.numFinished_ = 0;

  for (var i = 0; i < list.length; i++) {
    var d = list[i];
    d.addCallbacks(goog.bind(this.handleCallback_, this, i, true),
                   goog.bind(this.handleCallback_, this, i, false));
  }

  if (list.length == 0 && !this.fireOnOneCallback_) {
    this.callback(this.deferredResults_);
  }
};
goog.inherits(goog.async.DeferredList, goog.async.Deferred);


/**
 * Registers the result from an input deferred callback or errback. The result
 * is returned and may be passed to additional handlers in the callback chain.
 *
 * @param {number} index The index of the firing deferred object in the input
 *     list.
 * @param {boolean} success Whether the result is from a callback or errback.
 * @param {*} result The result of the callback or errback.
 * @return {*} The result, to be handled by the next handler in the deferred's
 *     callback chain (if any). If consumeErrors is set, an error result is
 *     replaced with null.
 * @private
 */
goog.async.DeferredList.prototype.handleCallback_ = function(
    index, success, result) {

  this.numFinished_++;
  this.deferredResults_[index] = [success, result];

  if (!this.hasFired()) {
    if (this.fireOnOneCallback_ && success) {
      this.callback([index, result]);
    } else if (this.fireOnOneErrback_ && !success) {
      this.errback(result);
    } else if (this.numFinished_ == this.list_.length) {
      this.callback(this.deferredResults_);
    }
  }

  if (this.consumeErrors_ && !success) {
    result = null;
  }

  return result;
};


/** @override */
goog.async.DeferredList.prototype.errback = function(res) {
  goog.async.DeferredList.base(this, 'errback', res);

  // On error, cancel any pending requests.
  for (var i = 0; i < this.list_.length; i++) {
    this.list_[i].cancel();
  }
};


/**
 * Creates a <code>DeferredList</code> that gathers results from multiple
 * <code>Deferred</code> inputs. If all inputs succeed, the callback is fired
 * with the list of results as a flat array. If any input fails, the list's
 * errback is fired immediately with the offending error, and all other pending
 * inputs are canceled.
 *
 * @param {!Array.<!goog.async.Deferred>} list The list of <code>Deferred</code>
 *     inputs to wait for.
 * @return {!goog.async.Deferred} The deferred list of results from the inputs
 *     if they all succeed, or the error result of the first input to fail.
 */
goog.async.DeferredList.gatherResults = function(list) {
  return new goog.async.DeferredList(list, false, true).
      addCallback(function(results) {
        var output = [];
        for (var i = 0; i < results.length; i++) {
          output[i] = results[i][1];
        }
        return output;
      });
};

// Copyright 2012 Google Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implementations of Encoding Method of Encryption (EME) in
 * PKCS#1.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.pkcs.eme.Oaep');
goog.provide('e2e.pkcs.eme.Pkcs1');

goog.require('e2e');
goog.require('e2e.hash.Sha1');
goog.require('e2e.pkcs.Error');
goog.require('e2e.random');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.crypt');
goog.require('goog.object');



/**
 * The OAEP encoding method as described in RFC 3447 section 7.1 with SHA-1,
 *     MGF1 and an empty label. This is compatible with OpenSSL's
 *     RSA_PKCS1_OAEP_PADDING padding mode.
 * @constructor
 */
e2e.pkcs.eme.Oaep = function() {
  /**
   * The SHA-1 hash of the empty label, used to verify the decryption.
   * Is equivalent to the output of new e2e.hash.Sha1().hash([]).
   * @private {!e2e.ByteArray}
   */
   this.labelHash_ = [
     0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55,
     0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09];
};


/**
 * Encodes the given message according to the OAEP method as described in
 *     RFC 3447 section 7.1.1 with SHA-1, MGF1 and an empty label.
 * @param {number} k The size of the key in bytes.
 * @param {!e2e.ByteArray} m The message to encode.
 * @return {!e2e.ByteArray} The encoded message.
 */
e2e.pkcs.eme.Oaep.prototype.encode = function(k, m) {
  // OAEP can operate only on messages of length up to k - 2hLen - 2 octets,
  // where hlen is the length of the output from the underlying hash function,
  // which is SHA-1 in this case, and k is the length in octets of the modulus.
  if (m.length > k - this.labelHash_.length - 2) {
    throw new e2e.pkcs.Error('Message too long.');
  }
  var ps = goog.array.repeat(
      0x00, k - m.length - this.labelHash_.length * 2 - 2);
  var db = goog.array.flatten(this.labelHash_, ps, 0x01, m);
  goog.asserts.assert(db.length == k - this.labelHash_.length - 1);

  var seed = e2e.random.getRandomBytes(this.labelHash_.length);
  var dbMask = this.maskGenerationFunction_(
      seed, k - this.labelHash_.length - 1);
  var maskedDb = goog.crypt.xorByteArray(db, dbMask);
  var seedMask = this.maskGenerationFunction_(
      maskedDb, this.labelHash_.length);
  var maskedSeed = goog.crypt.xorByteArray(seed, seedMask);

  return [0x00].concat(maskedSeed).concat(maskedDb);
};


/**
 * Decodes the given message according to the OAEP method as defined in
 *     RFC 3447 section 7.1.2 with SHA-1, MGF1 and an empty label.
 *     Note: this function may leak some timing, which could be exploited to
 *     decrypt messages without knowing the private key. As a result, it
 *     must not be used anywhere except for interoperative testing.
 * @param {number} k The size of the key in bytes.
 * @param {!e2e.ByteArray} c The message to decode.
 * @return {!e2e.ByteArray} The decoded message.
 * @protected
 */
e2e.pkcs.eme.Oaep.prototype.decodeForTestingOnly = function(k, c) {
  var maskedSeed = c.slice(1, this.labelHash_.length + 1);
  var maskedDb = c.slice(this.labelHash_.length + 1);
  goog.asserts.assert(maskedDb.length == k - this.labelHash_.length - 1);
  var seedMask = this.maskGenerationFunction_(
      maskedDb, this.labelHash_.length);
  var seed = goog.crypt.xorByteArray(maskedSeed, seedMask);
  var dbMask = this.maskGenerationFunction_(
      seed, k - this.labelHash_.length - 1);
  var db = goog.crypt.xorByteArray(maskedDb, dbMask);
  var labelHash = db.slice(0, this.labelHash_.length);
  var paddedMsg = db.slice(this.labelHash_.length);
  var i = goog.array.indexOf(paddedMsg, 0x01);
  var error = 0;
  error |= (c[0] != 0x00);
  error |= (!e2e.compareByteArray(this.labelHash_, labelHash));
  error |= (i == -1);
  if (error) {
    throw new e2e.pkcs.Error('Decryption error.');
  }
  return paddedMsg.slice(i + 1);
};


/**
 * Mask generation function (MGF1) used in the OAEP encoding method as
 *     described in RFC 3447 section B.2.1 and RFC 2437 section 10.2.1.
 *     This is the mask function used in OpenSSL.
 * @param {!e2e.ByteArray} seed The seed from which mask is generated.
 * @param {number} maskLen intended length in octets of the mask, at most
 *     2^32 * HashLength.
 * @return {!e2e.ByteArray}
 * @private
 */
e2e.pkcs.eme.Oaep.prototype.maskGenerationFunction_ =
    function(seed, maskLen) {
  if (maskLen > (this.labelHash_.length * 0x100000000)) {
    throw new e2e.pkcs.Error('Mask too long.');
  }
  var mask = [];
  var n = Math.ceil(maskLen / this.labelHash_.length);
  for (var i = 0; i < n; ++i) {
    mask = mask.concat(new e2e.hash.Sha1().hash(
        seed.concat(e2e.dwordArrayToByteArray([i]))));
  }
  goog.asserts.assert(mask.length >= maskLen);
  return mask.slice(0, maskLen);
};


/**
 * The PKCS#1 version 1.5 encoding method as described in RFC 3447. This is
 *     compatible with OpenSSL's RSA_PKCS1_PADDING padding mode.
 * @constructor
 */
e2e.pkcs.eme.Pkcs1 = function() {
};


/**
 * Encodes the given message according to EME PKCS1-v1.5.
 * @param {number} k The size of the key in bytes.
 * @param {!e2e.ByteArray} m The message to encode.
 * @return {!e2e.ByteArray} The encoded message.
 */
e2e.pkcs.eme.Pkcs1.prototype.encode = function(k, m) {
  var em, ps;
  if (m.length > k - 11) {
    throw new e2e.pkcs.Error('Message too long.');
  }
  ps = e2e.random.getRandomBytes(k - m.length - 3, [0]);
  em = [0x00, 0x02].concat(ps).concat([0x00]).concat(m);
  return em;
};


/**
 * Defines the status of a state machine to decode EME encoded messages.
 * @enum {number}
 */
e2e.pkcs.eme.Pkcs1.DecodeState = {
  'START': 1,
  'HEADER': 2,
  'RANDOM': 3,
  'KEY': 4,
  'UNDEFINED': 5
};


/**
 * Type for transitions in for the decoding of EME PKCS packages.
 * @typedef {{error:number, state:e2e.pkcs.eme.Pkcs1.DecodeState}}
 */
e2e.pkcs.eme.Pkcs1.Transition;


/**
 * Type for transitions in for the decoding of EME PKCS packages.
 * @typedef {Object.<string, e2e.pkcs.eme.Pkcs1.Transition>}
 */
e2e.pkcs.eme.Pkcs1.TransitionMap;


/**
 * @type {Object.<e2e.pkcs.eme.Pkcs1.DecodeState,
 *     e2e.pkcs.eme.Pkcs1.TransitionMap>}
 */
e2e.pkcs.eme.Pkcs1.decodeStateTransitions = {};
e2e.pkcs.eme.Pkcs1.decodeStateTransitions[
    e2e.pkcs.eme.Pkcs1.DecodeState.START] = {
  '0': {
    'error': 0,
    'state': e2e.pkcs.eme.Pkcs1.DecodeState.START
  },
  '2': {
    'error': 0,
    'state': e2e.pkcs.eme.Pkcs1.DecodeState.RANDOM
  },
  'default': {
    'error': 1,
    'state': e2e.pkcs.eme.Pkcs1.DecodeState.RANDOM
  }
};
e2e.pkcs.eme.Pkcs1.decodeStateTransitions[
    e2e.pkcs.eme.Pkcs1.DecodeState.RANDOM] = {
  '0': {
    'error': 0,
    'state': e2e.pkcs.eme.Pkcs1.DecodeState.KEY
  },
  'default': {
    'error': 0,
    'state': e2e.pkcs.eme.Pkcs1.DecodeState.RANDOM
  }
};
e2e.pkcs.eme.Pkcs1.decodeStateTransitions[
    e2e.pkcs.eme.Pkcs1.DecodeState.KEY] = {
  'default': {
    'error': 0,
    'state': e2e.pkcs.eme.Pkcs1.DecodeState.KEY
  }
};
e2e.pkcs.eme.Pkcs1.decodeStateTransitions[
    e2e.pkcs.eme.Pkcs1.DecodeState.UNDEFINED] = {
  'default': {
    'error': 1,
    'state': e2e.pkcs.eme.Pkcs1.DecodeState.UNDEFINED
  }
};


/**
 * Stores the transitions on a per-byte array to make access faster than a
 * hash table (object/dictionary).
 * @type {Object.<e2e.pkcs.eme.Pkcs1.DecodeState,
 *     Object.<number, e2e.pkcs.eme.Pkcs1.Transition>>}
 */
e2e.pkcs.eme.Pkcs1.decodeStateTransitionsArray = {};


/**
 * Converts a decodeStateTransitions to an Array to accelerate access time.
 * @param {Object.<string|number, e2e.pkcs.eme.Pkcs1.Transition>}
 *     trans The transitions to set in the Array.
 * @param {e2e.pkcs.eme.Pkcs1.DecodeState} state The state that the
 *     list of transitions refers to.
 */
e2e.pkcs.eme.Pkcs1.decodeStateToArray = function(trans, state) {
  var arr = [];
  for (var i = 0; i < 256; i++) {
    arr.push(trans[i] || trans['default']);
  }
  e2e.pkcs.eme.Pkcs1.decodeStateTransitionsArray[state] = arr;
};

goog.object.forEach(e2e.pkcs.eme.Pkcs1.decodeStateTransitions,
                    e2e.pkcs.eme.Pkcs1.decodeStateToArray);

/**
 * Decodes the given encoded message according to EME PKCS1-v1.5. This MUST be
 * done close to constant time, that's why we have a state machine.
 * @param {!e2e.ByteArray} em The data to decode.
 * @param {number=} opt_messageLength The expected length of the message.
 * @param {number=} opt_keySize The size of the key (which should be em size).
 * @return {!e2e.ByteArray} The decoded message.
 */
e2e.pkcs.eme.Pkcs1.prototype.decode = function(
    em, opt_messageLength, opt_keySize) {
  var error = 0;
  var msg = [];
  var em2 = em.splice(0);
  if (goog.isDef(opt_messageLength) && goog.isDef(opt_keySize)) {
    if (opt_keySize == em.length + 1) {
      // Some implementations remove leading 0's, so we add them back.
      em.unshift(0);
    }
    // We know the length of the key, so we don't need to scan.
    msg = em2.slice(-opt_messageLength);
    var paddingLength = em2.length - opt_messageLength;
    // Should be 0.
    error |= em[0];
    // Should be 2.
    error |= em[1] - 2;
    for (var i = 2; i < paddingLength; i++) {
      // Should be anything but 0.
      error |= em[i] ^ 0xFF;
    }
    // Should be 0.
    error |= em[paddingLength];
  } else {
    var state = e2e.pkcs.eme.Pkcs1.DecodeState.START;

    var nextState = e2e.pkcs.eme.Pkcs1.decodeStateTransitionsArray;
    var undef = nextState[
        e2e.pkcs.eme.Pkcs1.DecodeState.UNDEFINED];
    var c = goog.object.getCount(
        e2e.pkcs.eme.Pkcs1.DecodeState) + 1;
    var accumulators = [];
    for (var i = 0; i < c; i++) {
      accumulators[i] = [];
    }
    msg = accumulators[e2e.pkcs.eme.Pkcs1.DecodeState.KEY];
    var rnd = accumulators[e2e.pkcs.eme.Pkcs1.DecodeState.RANDOM];

    if (em2.length < 10) {
      em2 = goog.array.repeat(0, 10);
      error = 1;
    }

    goog.array.forEach(em2, function(b, i) {
        // === WARNING ===
        // If we can't know the expected length of the key, we need to visit all
        // bytes in constant time to verify they are valid. Don't add any code
        // that might fork in this function.
        var hasError, newState;
        var newStateObj = nextState[state][b];
        newState = newStateObj.state;
        hasError = newStateObj.error;
        accumulators[state].push(b);
        error |= hasError;
        state = newState;
      });
    error |= 1 * (msg.length == 0);
    error |= 1 * (rnd.length <= 8);
  }

  if (error) {
    throw new e2e.pkcs.Error('Decryption error.');
  }
  return msg;
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Simple wrapper for a cipher and EME PKCS1 v1.5.
 */

goog.require('e2e.pkcs.eme.Pkcs1');
goog.require('e2e.scheme.EncryptionScheme');

goog.provide('e2e.scheme.Eme');



/**
 * JavaScript implementation of EME PKCS1 v1.5.
 * @param {e2e.cipher.Cipher} cipher
 * @constructor
 * @extends {e2e.scheme.EncryptionScheme}
 */
e2e.scheme.Eme = function(cipher) {
  goog.base(this, cipher);
  this.cipher = cipher;
};
goog.inherits(e2e.scheme.Eme, e2e.scheme.EncryptionScheme);


/** @override */
e2e.scheme.Eme.prototype.encryptJavaScript = function(plaintext) {
  return this.cipher.encrypt(
      new e2e.pkcs.eme.Pkcs1().encode(
          this.cipher.keySize, plaintext));
};


/** @override */
e2e.scheme.Eme.prototype.decryptJavaScript = function(ciphertext) {
  return this.cipher.decrypt(ciphertext).addCallback(function(m) {
    return new e2e.pkcs.eme.Pkcs1().decode(m);
  });
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implementation of RSAES-PKCS1-v1_5 as defined in RFC 3447.
 */

goog.require('e2e.async.Result');
goog.require('e2e.scheme.Eme');

goog.provide('e2e.scheme.Rsaes');



/**
 * Implementation using alternative schemes if available.
 * @param {e2e.cipher.Cipher} cipher
 * @constructor
 * @extends {e2e.scheme.Eme}
 */
e2e.scheme.Rsaes = function(cipher) {
  this.algorithmIdentifier = {
    'name': 'RSAES-PKCS1-v1_5',
    'modulusLength': cipher.keySize,
    'publicExponent': new Uint8Array(cipher.getKey()['e'])
  };
  goog.base(this, cipher);
};
goog.inherits(e2e.scheme.Rsaes, e2e.scheme.Eme);


/** @override */
e2e.scheme.Rsaes.prototype.encryptWebCrypto = function(plaintext) {
  var result = new e2e.async.Result;
  this.crypto.encrypt(
      this.algorithmIdentifier,
      this.key,
      new Uint8Array(plaintext)
  ).then(
      goog.bind(result.callback, result)
  ).catch (
      goog.bind(result.errback, result));
  return result.addCallback(function(c) {
    return {'c': [].slice.call(new Uint8Array(c))};
  });
};


/** @override */
e2e.scheme.Rsaes.prototype.decryptWebCrypto = function(ciphertext) {
  var result = new e2e.async.Result;
  this.crypto.decrypt(
      this.algorithmIdentifier,
      this.key,
      new Uint8Array(ciphertext['c'])
  ).then(
      goog.bind(result.callback, result)).catch (
      goog.bind(result.errback, result));
  return result.addCallback(function(p) {
    return [].slice.call(new Uint8Array(p));
  });
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A scheme for using different sources (e.g., webcrypto, JS) to
 * encrypt with ecdh.
 */
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.scheme.EncryptionScheme');

goog.provide('e2e.scheme.Ecdh');



/**
 * Provides functions that e2e.scheme.Scheme will call.
 * @param {e2e.cipher.Cipher} cipher
 * @constructor
 * @extends {e2e.scheme.EncryptionScheme}
 */
e2e.scheme.Ecdh = function(cipher) {
  // This isn't actually implemented in Chrome yet...
  this.algorithmIdentifier = {
    'name': 'ECDH',
    'namedCurve': 'P-256'
  };
  goog.base(this, cipher);
};
goog.inherits(e2e.scheme.Ecdh, e2e.scheme.EncryptionScheme);


/** @override */
e2e.scheme.Ecdh.prototype.encryptWebCrypto = function(plaintext) {
  throw new e2e.openpgp.error.UnsupportedError(
      "Chrome doesn't support ecdh yet!");
};


/** @override */
e2e.scheme.Ecdh.prototype.decryptWebCrypto = function(ciphertext) {
  throw new e2e.openpgp.error.UnsupportedError(
      "Chrome doesn't support ecdh yet!");
};


/** @override */
e2e.scheme.Ecdh.prototype.encryptJavaScript = function(plaintext) {
  return this.cipher.encrypt(plaintext);
};


/** @override */
e2e.scheme.Ecdh.prototype.decryptJavaScript = function(ciphertext) {
  return this.cipher.decrypt(ciphertext);
};


/** @override */
e2e.scheme.Ecdh.prototype.decryptHardware = function(ciphertext) {
  throw new e2e.openpgp.error.UnsupportedError(
      "Hardware API doesn't exist yet");
};


// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Public-Key Encrypted Session Key packet.
 */

goog.provide('e2e.openpgp.packet.PKEncryptedSessionKey');

goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.Ecdh');
goog.require('e2e.cipher.Rsa');
goog.require('e2e.cipher.factory');
goog.require('e2e.openpgp');
goog.require('e2e.openpgp.Mpi');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.packet.EncryptedSessionKey');
goog.require('e2e.openpgp.packet.factory');
goog.require('e2e.scheme.Ecdh');
goog.require('e2e.scheme.Eme');
goog.require('e2e.scheme.Rsaes');
goog.require('goog.array');



/**
 * Representation of a Public-Key Encrypted Session-Key Packet (Tag 1).
 * As defined in RFC 4880 Section 5.1.
 * @param {number} version The Encrypted Session Key Packet version.
 * @param {!e2e.ByteArray} keyId The keyId of the public key.
 * @param {e2e.cipher.Algorithm} algorithm The public key algorithm.
 * @param {e2e.cipher.ciphertext.CipherText} encryptedKey The encrypted
 *     key material with values as MPIs.
 * @constructor
 * @extends {e2e.openpgp.packet.EncryptedSessionKey}
 */
e2e.openpgp.packet.PKEncryptedSessionKey = function(
    version, keyId, algorithm, encryptedKey) {
  goog.base(this, version, algorithm, encryptedKey);
  this.keyId = keyId;
};
goog.inherits(e2e.openpgp.packet.PKEncryptedSessionKey,
    e2e.openpgp.packet.EncryptedSessionKey);


/** @inheritDoc */
e2e.openpgp.packet.PKEncryptedSessionKey.prototype.decryptSessionKey =
    function(key) {
  var cipher = e2e.cipher.factory.require(this.algorithm, key);
  var res;
  if (cipher instanceof e2e.cipher.Rsa) {
    // Use WebCrypto for RSA.
    res = new e2e.scheme.Rsaes(cipher).decrypt(this.encryptedKey);
  } else if (cipher instanceof e2e.cipher.Ecdh) {
    res = new e2e.scheme.Ecdh(cipher).decrypt(this.encryptedKey).addCallback(
        this.removeEccPadding_, this);
  } else {
    // Use JS for anything else (ElGamal).
    res = new e2e.scheme.Eme(cipher).decrypt(this.encryptedKey);
  }
  return res.addCallback(this.extractKey_, this);
};


/**
 * Removes the padding for ECC OpenPGP keys.
 * @param {!e2e.ByteArray} decrypted The data with the padding.
 * @return {!e2e.ByteArray} The data without the padding.
 * @private
 */
e2e.openpgp.packet.PKEncryptedSessionKey.prototype.removeEccPadding_ =
    function(decrypted) {
  // Format: 1 byte algo id, key, 2 byte checksum, padding.
  // Specified in http://tools.ietf.org/html/rfc6637#section-8
  // Code is repeated below in extractKey_ because we don't know the size.
  var keySize = e2e.openpgp.constants.getInstance(
      e2e.openpgp.constants.Type.SYMMETRIC_KEY,
      decrypted[0]).keySize;
  var paddingSize = decrypted.length - 1 - 2 - keySize;
  var padding = decrypted.splice(-paddingSize, paddingSize);
  // Padding bytes defined in PKCS #5 v2.0, section 6.1.1, row 4.
  // This style is taken from RFC 1423.
  goog.array.forEach(padding, function(b) {
    if (b != paddingSize) {
      throw new e2e.openpgp.error.ParseError(
          'Bad session key padding');
    }
  });
  return decrypted;
};


/**
 * Verifies the checksum and extracts the key of a session key. Throws if
 * the checksum is invalid.
 * @param {!e2e.ByteArray} decoded The decoded key (without padding).
 * @return {boolean} Whether the key was extracted correctly.
 * @private
 */
e2e.openpgp.packet.PKEncryptedSessionKey.prototype.extractKey_ =
    function(decoded) {
  // Format specified in RFC 4880 section 5.1 and RFC 6637 section 8.
  this.symmetricAlgorithm = /** @type {e2e.cipher.Algorithm} */ (
      e2e.openpgp.constants.getAlgorithm(
          e2e.openpgp.constants.Type.SYMMETRIC_KEY,
          decoded.shift()));
  // Last two bytes are the checksum.
  var checksum = decoded.splice(-2, 2);
  if (!goog.array.equals(checksum,
      e2e.openpgp.calculateNumericChecksum(decoded))) {
    throw new e2e.openpgp.error.ParseError(
        'Bad checksum for decrypted session key.');
  }
  this.sessionKey = {'key': decoded};
  return true;
};


/** @inheritDoc */
e2e.openpgp.packet.PKEncryptedSessionKey.prototype.tag = 1;


/** @inheritDoc */
e2e.openpgp.packet.PKEncryptedSessionKey.prototype.
    serializePacketBody = function() {
  var body = goog.array.concat(
      this.version,
      this.keyId,
      e2e.openpgp.constants.getId(this.algorithm));
  switch (this.algorithm) {
    case e2e.cipher.Algorithm.RSA:
      goog.array.extend(body, this.encryptedKey['c']);
      break;
    case e2e.cipher.Algorithm.ELGAMAL:
      goog.array.extend(body,
          this.encryptedKey['u'],
          this.encryptedKey['v']);
      break;
    case e2e.cipher.Algorithm.ECDH:
      goog.array.extend(body,
          this.encryptedKey['v'],
          this.encryptedKey['u'].length,
          this.encryptedKey['u']);  // Encrypted symmetric key.
      break;
    default:
      throw new e2e.openpgp.error.ParseError('Unknown algorithm.');
  }
  return body;
};


/**
 * Constructs an PKEncryptedSessionKey packet from an unencrypted session key.
 * @param {e2e.openpgp.packet.Key} publicKey Encrypt session key for this
 *   public key.
 * @param {!e2e.ByteArray} sessionKey Unencrypted session key.
 * @return {e2e.async.Result.<e2e.openpgp.packet.PKEncryptedSessionKey>}
 */
e2e.openpgp.packet.PKEncryptedSessionKey.construct = function(publicKey,
    sessionKey) {
  var m = [];
  m.push(e2e.openpgp.constants.getId(e2e.cipher.Algorithm.AES256));
  m = m.concat(sessionKey);
  m = m.concat(
      e2e.openpgp.calculateNumericChecksum(sessionKey));
  var encryptedResult;
  if (publicKey.cipher.algorithm == e2e.cipher.Algorithm.RSA) {
    var cipher = /** @type {e2e.cipher.Rsa} */(publicKey.cipher);
    var rsaes = new e2e.scheme.Rsaes(cipher);
    encryptedResult = rsaes.encrypt(m);
  } else if (publicKey.cipher.algorithm == e2e.cipher.Algorithm.ECDH) {
    // 40 bytes in RFC 6637, section 8.
    var paddingSize = 40 - m.length;
    goog.array.extend(m, goog.array.repeat(paddingSize, paddingSize));
    encryptedResult = publicKey.cipher.encrypt(m);
  } else {
    var eme = new e2e.scheme.Eme(
        /** @type {e2e.cipher.Cipher}*/ (publicKey.cipher));
    encryptedResult = eme.encrypt(m);
  }
  return encryptedResult.addCallback(
      goog.bind(
          e2e.openpgp.packet.PKEncryptedSessionKey.createPacketForKey_,
          null, publicKey));
};


/**
 * Obtains a public key encrypted session key packet for the given encrypted
 * key data and public key.
 * @param {e2e.openpgp.packet.Key} publicKey The public key used to
 *     encrypt the session key.
 * @param {e2e.cipher.ciphertext.Asymmetric} encrypted The encrypted
 *     session key.
 * @return {e2e.openpgp.packet.PKEncryptedSessionKey} The key packet.
 * @private
 */
e2e.openpgp.packet.PKEncryptedSessionKey.createPacketForKey_ =
    function(publicKey, encrypted) {
  var encryptedKey;
  switch (publicKey.cipher.algorithm) {
    case e2e.cipher.Algorithm.RSA:
      encryptedKey = {
        'c': (new e2e.openpgp.Mpi(encrypted['c'])).serialize()};
      break;
    case e2e.cipher.Algorithm.ELGAMAL:
      encryptedKey = {
        'u': (new e2e.openpgp.Mpi(encrypted['u'])).serialize(),
        'v': (new e2e.openpgp.Mpi(encrypted['v'])).serialize()
      };
      break;
    case e2e.cipher.Algorithm.ECDH:
      encryptedKey = {
        'u': encrypted['u'],  // Encrypted symmetric key.
        'v': (new e2e.openpgp.Mpi(encrypted['v'])).serialize()};
      break;
    default:
      throw new Error('Unknown algorithm.');
  }
  var keyId;
  if (publicKey.keyId) {
    keyId = publicKey.keyId;
  } else {
    // All 0 means to try all keys (RFC 4880 Section 5.1).
    keyId = goog.array.repeat(0, 8);
  }
  return new e2e.openpgp.packet.PKEncryptedSessionKey(
      3,  // version
      keyId,
      publicKey.cipher.algorithm,
      encryptedKey);  // Encrypted session key in encoded format.
};


/** @inheritDoc */
e2e.openpgp.packet.PKEncryptedSessionKey.parse = function(body) {
  var version = body.shift();
  if (version != 3) {
    throw new e2e.openpgp.error.ParseError(
        'Unknown PKESK packet version.');
  }
  var keyId = body.splice(0, 8);
  var algorithmId = body.shift();
  var algorithm = e2e.openpgp.constants.getAlgorithm(
      e2e.openpgp.constants.Type.PUBLIC_KEY, algorithmId);
  var encryptedKey = /** @type {e2e.cipher.ciphertext.CipherText} */ (
      {});
  switch (algorithm) {
    case e2e.cipher.Algorithm.RSA:
      encryptedKey['c'] = goog.array.clone(e2e.openpgp.Mpi.parse(body));
      break;
    case e2e.cipher.Algorithm.ELGAMAL:
      encryptedKey['u'] = goog.array.clone(e2e.openpgp.Mpi.parse(body));
      encryptedKey['v'] = goog.array.clone(e2e.openpgp.Mpi.parse(body));
      break;
    case e2e.cipher.Algorithm.ECDH:
      encryptedKey['v'] = goog.array.clone(e2e.openpgp.Mpi.parse(body));
      var length = body.shift();
      encryptedKey['u'] = body.splice(0, length);  // Encrypted symmetric key.
      break;
    default:
      throw new e2e.openpgp.error.ParseError('Unknown algorithm.');
  }
  return new e2e.openpgp.packet.PKEncryptedSessionKey(
      version, keyId, algorithm, encryptedKey);
};

e2e.openpgp.packet.factory.add(
    e2e.openpgp.packet.PKEncryptedSessionKey);

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implements OpenPGP's variation of CFB mode.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.Ocfb');

goog.require('e2e.ciphermode.Cfb');
goog.require('e2e.ciphermode.CipherMode');
goog.require('e2e.random');



/**
 * Implements OpenPGP's variation of CFB mode. Defined in RFC 4880 Section 13.9.
 * @param {e2e.cipher.SymmetricCipher} cipher The cipher to use.
 * @param {boolean} resync Specifies if we should do the resyncronization step.
 * @extends {e2e.ciphermode.CipherMode}
 * @constructor
 */
e2e.openpgp.Ocfb = function(cipher, resync) {
  goog.base(this, cipher);
  /**
   * Specifies if we should do the resynchronization step.
   * @type {boolean}
   */
  this.resync = resync;
  /**
   * Classic Cipher Feedback implementation used internally.
   * @type {e2e.ciphermode.Cfb}
   */
  this.cfb = new e2e.ciphermode.Cfb(cipher);
};
goog.inherits(e2e.openpgp.Ocfb, e2e.ciphermode.CipherMode);


/** @inheritDoc */
e2e.openpgp.Ocfb.prototype.encrypt = function(data, opt_iv) {
  var rnd = e2e.random.getRandomBytes(this.cipher.blockSize);
  return this.cipher.encrypt(rnd).addCallback(function(ciphertext) {
    // Generate a bad resync on purpose. See Issue 114.
    // https://eprint.iacr.org/2005/033.pdf
    ciphertext.push(0xBA, 0xDD);
    var iv;
    if (this.resync) {
      iv = ciphertext.slice(2, this.cipher.blockSize + 2);
    } else {
      iv = ciphertext.slice();
    }
    return this.cfb.encrypt(data, iv).addCallback(function(cfbData) {
      return ciphertext.concat(cfbData);
    });
  }, this);
};


/** @inheritDoc */
e2e.openpgp.Ocfb.prototype.decrypt = function(data, opt_iv) {
  var iv;
  if (this.resync) {
    iv = data.slice(2, this.cipher.blockSize + 2);
  } else {
    iv = data.slice(0, this.cipher.blockSize);
  }
  data = data.slice(this.cipher.blockSize + 2);
  return this.cfb.decrypt(data, iv);
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Symmetrically Encrypted Data packet.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.openpgp.packet.SymmetricallyEncrypted');
goog.provide('e2e.openpgp.packet.SymmetricallyEncryptedIntegrity');

goog.require('e2e');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.factory');
goog.require('e2e.ciphermode.Cfb');
goog.require('e2e.hash.Sha1');
goog.require('e2e.openpgp.Ocfb');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.constants.Type');
goog.require('e2e.openpgp.error.DecryptError');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.packet.EncryptedData');
goog.require('e2e.openpgp.packet.factory');
goog.require('e2e.random');
goog.require('goog.array');


/**
 * Representation of a Symmetrically Encrypted Data Packet (Tag 9).
 * As defined in RFC 4880 Section 5.7.
 * @param {!e2e.ByteArray} encryptedData The encrypted data.
 * @extends {e2e.openpgp.packet.EncryptedData}
 * @constructor
 */
e2e.openpgp.packet.SymmetricallyEncrypted = function(
    encryptedData) {
  goog.base(this, encryptedData);
};
goog.inherits(e2e.openpgp.packet.SymmetricallyEncrypted,
    e2e.openpgp.packet.EncryptedData);


/** @inheritDoc */
e2e.openpgp.packet.SymmetricallyEncrypted.prototype.tag = 9;


/** @inheritDoc */
e2e.openpgp.packet.SymmetricallyEncrypted.prototype.decrypt =
    function(algorithm, keyObj) {
  var cipher = /** @type {e2e.cipher.SymmetricCipher} */ (
      e2e.openpgp.constants.getInstance(
          e2e.openpgp.constants.Type.SYMMETRIC_KEY, algorithm, keyObj));
  var ocfbCipher = new e2e.openpgp.Ocfb(cipher, true);
  this.data = /** @type !e2e.ByteArray */ (
      e2e.async.Result.getValue(ocfbCipher.decrypt(this.encryptedData, [])));
};


/** @inheritDoc */
e2e.openpgp.packet.SymmetricallyEncrypted.prototype.serializePacketBody =
    function() {
  return this.encryptedData;
};


/**
 * Parses and extracts the data from the body.
 * Throws a {@code e2e.openpgp.error.ParseError} if malformed.
 * @param {!e2e.ByteArray} body The data to parse.
 * @return {e2e.openpgp.packet.SymmetricallyEncrypted} packet.
 */
e2e.openpgp.packet.SymmetricallyEncrypted.parse =
    function(body) {
  return new e2e.openpgp.packet.SymmetricallyEncrypted(body);
};

e2e.openpgp.packet.factory.add(
    e2e.openpgp.packet.SymmetricallyEncrypted);


/**
 * Representation of a Sym. Encrypted Integrity Protected Data Packet (Tag 18).
 * As defined in RFC 4880 Section 5.13.
 * @param {!e2e.ByteArray} encryptedData The encrypted data.
 * @extends {e2e.openpgp.packet.SymmetricallyEncrypted}
 * @constructor
 */
e2e.openpgp.packet.SymmetricallyEncryptedIntegrity = function(
    encryptedData) {
  goog.base(this, encryptedData);
};
goog.inherits(e2e.openpgp.packet.SymmetricallyEncryptedIntegrity,
    e2e.openpgp.packet.SymmetricallyEncrypted);


/** @inheritDoc */
e2e.openpgp.packet.SymmetricallyEncryptedIntegrity.prototype.tag = 18;


/** @inheritDoc */
e2e.openpgp.packet.SymmetricallyEncryptedIntegrity.prototype.decrypt =
    function(algorithm, keyObj) {
  var cipher = /** @type {e2e.cipher.SymmetricCipher} */ (
      e2e.cipher.factory.require(algorithm, keyObj));
  var iv = goog.array.repeat(0, cipher.blockSize);
  var cfbCipher = new e2e.ciphermode.Cfb(cipher);
  var plaintext = /** @type {!e2e.ByteArray} */ (
      e2e.async.Result.getValue(cfbCipher.decrypt(this.encryptedData, iv)));
  // MDC is at end of packet. It's 2 bytes of header and 20 bytes of hash.
  var mdc = plaintext.splice(-20, 20);
  var sha1 = new e2e.hash.Sha1();
  var mdcCalculated = sha1.hash(plaintext);
  var mdcHeader = plaintext.splice(-2, 2);
  var prefix = plaintext.splice(0, cipher.blockSize + 2);
  if (!e2e.compareByteArray(mdc, mdcCalculated)) {
    throw new e2e.openpgp.error.DecryptError(
        'Modification Detection Code has incorrect value.');
  }
  this.data = plaintext;
};


/**
 * Makes a Symmetrically Encrypted Integrity-protected packet containing the
 * specified plaintext packet. Does the encryption and creates the MDC.
 * @param {!e2e.ByteArray} innerPacket The unencrypted inner packet.
 * @param {!e2e.cipher.SymmetricCipher} cipher The cipher to use for encryption.
 * @return {e2e.openpgp.packet.SymmetricallyEncryptedIntegrity}
 */
e2e.openpgp.packet.SymmetricallyEncryptedIntegrity.construct = function(
    innerPacket, cipher) {
  var prefix = e2e.random.getRandomBytes(cipher.blockSize);
  var plaintext = goog.array.concat(prefix,
      prefix[prefix.length - 2],  // Last two bytes of prefix are repeated.
      prefix[prefix.length - 1],
      innerPacket,
      [0xD3, 0x14]);  // MDC header
  var sha1 = new e2e.hash.Sha1();
  var mdcCalculated = sha1.hash(plaintext);
  goog.array.extend(plaintext, mdcCalculated);
  var iv = goog.array.repeat(0, cipher.blockSize);
  var cfbCipher = new e2e.ciphermode.Cfb(cipher);
  var ciphertext = /** @type !e2e.ByteArray */ (
      e2e.async.Result.getValue(cfbCipher.encrypt(plaintext, iv)));
  var packet = new e2e.openpgp.packet.SymmetricallyEncryptedIntegrity(
      ciphertext);
  return packet;
};


/** @inheritDoc */
e2e.openpgp.packet.SymmetricallyEncryptedIntegrity.prototype.
serializePacketBody = function() {
  // SEIP has a prefix byte of version 1.
  return goog.array.concat(1, this.encryptedData);
};


/**
 * Parses and extracts the data from the body.
 * Throws a {@code e2e.openpgp.error.ParseError} if malformed.
 * @param {!e2e.ByteArray} body The data to parse.
 * @return {e2e.openpgp.packet.SymmetricallyEncryptedIntegrity} packet.
 */
e2e.openpgp.packet.SymmetricallyEncryptedIntegrity.parse =
    function(body) {
  var version = body.shift();
  if (version != 1) {
    throw new e2e.openpgp.error.ParseError('Invalid tag18 version.');
  }
  return new e2e.openpgp.packet.SymmetricallyEncryptedIntegrity(body);
};

e2e.openpgp.packet.factory.add(
    e2e.openpgp.packet.SymmetricallyEncryptedIntegrity);

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Encrypted Message block.
 * @author adhintz@google.com (Drew Hintz)
 */

goog.provide('e2e.openpgp.block.EncryptedMessage');

goog.require('e2e');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Error');
goog.require('e2e.cipher.factory');
goog.require('e2e.openpgp.block.Message');
goog.require('e2e.openpgp.constants');
goog.require('e2e.openpgp.error.DecryptError');
goog.require('e2e.openpgp.error.InvalidArgumentsError');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.error.PassphraseError');
goog.require('e2e.openpgp.packet.Compressed');
goog.require('e2e.openpgp.packet.EncryptedData');
goog.require('e2e.openpgp.packet.EncryptedSessionKey');
goog.require('e2e.openpgp.packet.PKEncryptedSessionKey');
goog.require('e2e.openpgp.packet.SymmetricKey');
goog.require('e2e.openpgp.packet.SymmetricallyEncryptedIntegrity');
goog.require('e2e.random');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.async.DeferredList');



/**
 * Representation of an Encrypted Message block. According to RFC 4880
 * Section 11.3, this block is represented as:
 *  - Optional repeated Encrypted Session Key (ESK) packets -- either public
 *      or symmetric.
 *  - One Encrypted Data block. Can be either a Symmetrically Encrypted Data
 *      Packet or a Symmetrically Encrypted Integrity Protected Data Packet.
 * @param {Array.<e2e.openpgp.packet.EncryptedSessionKey>=} opt_eskPackets
 *     List of Encrypted Session Key (ESK) packets in this block.
 * @param {e2e.openpgp.packet.EncryptedData=} opt_encryptedData
 *     Packet for the encrypted data block.
 * @param {Array.<!e2e.openpgp.packet.Signature>=} opt_signatures
 * @extends {e2e.openpgp.block.Message}
 * @constructor
 */
e2e.openpgp.block.EncryptedMessage = function(opt_eskPackets,
    opt_encryptedData, opt_signatures) {
  /**
   * List of Encrypted Session Key (ESK) packets in this block.
   * @type {Array.<!e2e.openpgp.packet.EncryptedSessionKey>}
   */
  this.eskPackets = opt_eskPackets || null;
  /**
   * Packet for the encrypted data block.
   * NOTE: The contents for this packet are another OpenPGP message.
   * @type {e2e.openpgp.packet.EncryptedData}
 */
  this.encryptedData = opt_encryptedData || null;
  goog.base(this, opt_signatures);
};
goog.inherits(e2e.openpgp.block.EncryptedMessage,
    e2e.openpgp.block.Message);


/**
 * Decrypts the encrypted message and returns the containing decrypted block.
 * @param {function(!e2e.ByteArray):e2e.openpgp.packet.Key}
 *     getKeyForSessionKeyCallback A callback to get a key packet with a given
 *     key id.
 * @param {function(string, function(string))} passphraseCallback A callback to
 *     get a passphrase for a given hint.
 * @return {!e2e.async.Result.<!e2e.openpgp.block.Message>}
 */
e2e.openpgp.block.EncryptedMessage.prototype.decrypt = function(
    getKeyForSessionKeyCallback, passphraseCallback) {
  // Search for a secret key that can decrypt the session key. foundSecretKeys
  // will contain an entry for each of eskPackets. Some entries might be null
  // e.g. when eskPacket is for a passhphrase.
  var foundSecretKeys = goog.array.map(
      this.eskPackets,
      function(eskPacket) {
        return getKeyForSessionKeyCallback(eskPacket.keyId);
      }, this);

  // Try to decrypt with all found secret keys.
  var decryptResults =
      /** @type {!Array.<
              !goog.async.Deferred.<!e2e.openpgp.block.Message>>} */ (
          goog.array.filter(
              goog.array.map(foundSecretKeys, this.decryptWithSecretKey_, this),
              goog.isDefAndNotNull));

  var res;
  if (decryptResults.length == 0) {
    // We couldn't find any public keys, try to find passphrases.
    res = this.decryptWithPassphrase_(passphraseCallback);
  } else {
    res = new goog.async.DeferredList(decryptResults);
  }

  return res.addCallback(this.decryptCallback_, this);
};


/**
 * Returns the first valid decryption result, or throws an exception if none.
 * @param {!Array} list The list of results.
 * @return {!e2e.openpgp.block.Message}
 * @private
 */
e2e.openpgp.block.EncryptedMessage.prototype.decryptCallback_ = function(
    list) {
  var valid = goog.array.find(list, function(r) {
    return r[0];
  });
  if (valid) {
    return valid[1];
  }
  throw new e2e.openpgp.error.DecryptError(
      'Encrypted message decryption failed.');
};


/**
 * Tries to decrypt the session key (as specified by index) with a given secret
 * key packet.
 * @param {!e2e.openpgp.packet.SecretKey} secretKey The secret key to try with.
 * @param {number} index The index (on eskPackets) to try to decrypt.
 * @return {e2e.async.Result.<!e2e.openpgp.block.Message>} Deferred decryption
 *     result or null, if no secretKey was passed.
 * @private
 */
e2e.openpgp.block.EncryptedMessage.prototype.decryptWithSecretKey_ =
    function(secretKey, index) {
  if (!secretKey) {
    return null;
  }
  return this.decryptKeyAndMessage_(
      goog.asserts.assertObject(secretKey.cipher.getKey()),
      this.eskPackets[index]);
};


/**
 * Tries to decrypt the session key and then the message.
 * @param {!e2e.cipher.key.Key} key The key object.
 * @param {!e2e.openpgp.packet.EncryptedSessionKey} eskPacket The encrypted
 *     session key packet to decrypt with the key object.
 * @return {!e2e.async.Result.<!e2e.openpgp.block.Message>}
 * @private
 */
e2e.openpgp.block.EncryptedMessage.prototype.decryptKeyAndMessage_ = function(
    key, eskPacket) {
  var decryptSuccess = eskPacket.decryptSessionKey(key);
  return decryptSuccess.addCallback(function(success) {
    if (!success) {
      throw new e2e.openpgp.error.DecryptError(
          'Session key decryption failed.');
    }
    return this.decryptMessage_(eskPacket);
  }, this);
};


/**
 * Attempts to decrypt the block with a passphrase. Will return an exception
 * in the errback if it fails.
 * @param {function(string, function(string))} passphraseCallback The callback
 *     for the passphrase.
 * @return {!e2e.async.Result.<!e2e.openpgp.block.Message>}
 * @private
 */
e2e.openpgp.block.EncryptedMessage.prototype.decryptWithPassphrase_ = function(
    passphraseCallback) {
  var result = new e2e.async.Result();
  var symEskPackets = goog.array.filter(
      this.eskPackets, function(esk) {
        return esk instanceof e2e.openpgp.packet.SymmetricKey;
      });
  if (symEskPackets.length == 0) {
    throw new e2e.openpgp.error.DecryptError('No keys found for message.');
  }
  // try to find the correct passphrase
  this.silencePassphraseCallback_ = false;
  this.repeatPassphraseCallback_ = false;
  var decryptCallback = goog.bind(function(passphrase) {
    try {
      var res = this.testPassphrase_(
          passphraseCallback, symEskPackets, passphrase);
      res.addCallback(function(list) {
        var failed = goog.array.every(list, function(f) {
          return !f[0];
        });
        if (!failed) {
          result.callback(list);
        } else {
          if (this.silencePassphraseCallback_ ||
              !this.repeatPassphraseCallback_) {
            throw new e2e.openpgp.error.DecryptError(
                'Passphrase decryption failed');
          } else {
            passphraseCallback('', decryptCallback);
          }
        }
      }, this);
    } catch (e) {
      result.errback(e);
    }
  }, this);
  passphraseCallback('', decryptCallback);
  return result;
};


/**
 * Tries to decrypt the ESK packets with a given passphrase.
 * @param {function(string, function(string))} passphraseCallback A callback to
 *     get a passphrase for a given hint.
 * @param {!Array.<!e2e.openpgp.packet.EncryptedSessionKey>} symEskPackets The
 *     list of symmetrically encrypted session key packets.
 * @param {string} passphraseString The passphrase to try to use to decrypt the
 *     ESK packet.
 * @return {!goog.async.DeferredList} The deferred list of message blocks.
 * @private
 */
e2e.openpgp.block.EncryptedMessage.prototype.testPassphrase_ = function(
    passphraseCallback, symEskPackets, passphraseString) {
  var passphraseKey = {'passphrase': e2e.stringToByteArray(passphraseString)};
  var results = goog.array.map(
      symEskPackets, goog.bind(this.testPassphraseKey_, this, passphraseKey));
  return new goog.async.DeferredList(
      /** @type {!Array.<!goog.async.Deferred> } */ (results));
};


/**
 * Tries to decrypt the session key and then the message (this is just a very
 *     thin wrapper around decryptKeyAndMessage that silences the passphrase).
 * @param {!e2e.cipher.key.Key} key The key object.
 * @param {!e2e.openpgp.packet.EncryptedSessionKey} eskPacket The encrypted
 *     session key packet to decrypt with the key object.
 * @return {!e2e.async.Result.<!e2e.openpgp.block.Message>}
 * @private
 */
e2e.openpgp.block.EncryptedMessage.prototype.testPassphraseKey_ = function(
    key, eskPacket) {
  return this.decryptKeyAndMessage_(key, eskPacket).addCallback(function() {
    this.silencePassphraseCallback_ = true;
  }, this).addErrback(function(e) {
    // Error types that can be caught on an incorrect decryption:
    // e2e.openpgp.error.PassphraseError - when the symmetric
    // ESK decryption is incorrect and the ESK cipher byte is invalid.
    // e2e.cipher.Error - when we have an incorrectly decrypted
    // ESK, but the ESK cipher byte happens to be valid and the SEIP
    // packet decrypts to have an invalid cipher choice.
    // e2e.openpgp.error.DecryptError - when the ESK incorrectly
    // decrypts, the ESK cipher byte happens to be valid, the SEIP
    // cipher byte happens to be valid, but the SEIP decryption fails
    // the duplicated two bytes and/or MDC check.
    if ((e instanceof e2e.cipher.Error) ||
        (e instanceof e2e.openpgp.error.PassphraseError) ||
        (e instanceof e2e.openpgp.error.DecryptError)) {
      this.repeatPassphraseCallback_ = true;
    } else {
      // We caught an unexpected error, fail the operation.
      this.silencePassphraseCallback_ = true;
    }
  }, this);
};


/**
 * Decrypts the encrypted data packet with the session key.
 * @param {!e2e.openpgp.packet.EncryptedSessionKey} eskPacket The unlocked
 *     session key packet.
 * @return {!e2e.openpgp.block.Message}
 * @private
 */
e2e.openpgp.block.EncryptedMessage.prototype.decryptMessage_ = function(
    eskPacket) {
  if (!goog.isDef(eskPacket.symmetricAlgorithm)) {
    throw new e2e.openpgp.error.DecryptError('Invalid session key packet.');
  }
  this.encryptedData.decrypt(
      eskPacket.symmetricAlgorithm, eskPacket.getSessionKey());
  var decryptedData = this.encryptedData.data;
  // TODO(user): Can this be refactored to avoid the circular dependency?
  /** @suppress {missingRequire} We assume the factory is already present. */
  var decryptedBlocks = e2e.openpgp.block.factory.parseByteArrayMulti(
      decryptedData, this.getCharset());
  if (decryptedBlocks.length == 1) {
    var decryptedBlock = decryptedBlocks[0];
    if (decryptedBlock instanceof e2e.openpgp.block.Message) {
      return decryptedBlock;
    }
  }
  throw new e2e.openpgp.error.ParseError('Invalid decrypted message.');
};


/** @inheritDoc */
e2e.openpgp.block.EncryptedMessage.prototype.parse = function(packets) {
  var eskPackets = [];
  while (packets[0] instanceof
         e2e.openpgp.packet.EncryptedSessionKey) {
    eskPackets.push(packets.shift());
  }
  if (packets[0] instanceof
      e2e.openpgp.packet.EncryptedData) {
    var encryptedData = packets.shift();
  } else {
    throw new e2e.openpgp.error.ParseError(
        'Invalid EncryptedMessage. Missing encrypted data block.');
  }

  this.eskPackets = eskPackets;
  this.encryptedData = /** @type {e2e.openpgp.packet.EncryptedData} */
      (encryptedData);
  return packets;
};


/** @inheritDoc */
e2e.openpgp.block.EncryptedMessage.prototype.serializeMessage = function() {
  var result = [];
  goog.array.forEach(this.eskPackets, function(eskPacket) {
    goog.array.extend(result, eskPacket.serialize());
  });
  goog.array.extend(result, this.encryptedData.serialize());
  return result;
};


/**
 * Makes an EncryptedMessage containing data. Encrypts the data for
 * the public keys passed in.
 * @param {!e2e.openpgp.block.LiteralMessage} literalMessage
 *   Data to encrypt.
 * @param {!Array.<!e2e.openpgp.block.TransferableKey>=} opt_publicKeys
 *   Keys to encrypt to.
 * @param {!Array.<string>=} opt_passphrases Symmetrically encrypt
 *   session key with each of these passphrases. Either opt_publicKeys or
 *   opt_passphrases must be provided or
 *   {e2e.openpgp.error.InvalidArgumentsError} will be thrown.
 * @param {e2e.openpgp.block.TransferableKey=} opt_signatureKey The key used
 *   to sign the message. Throws {e2e.openpgp.error.InvalidArgumentsError} if no
 *   provided key has a signing capability.
 * @return {!e2e.async.Result.<!e2e.openpgp.block.EncryptedMessage>}
 */
e2e.openpgp.block.EncryptedMessage.construct = function(
    literalMessage, opt_publicKeys, opt_passphrases, opt_signatureKey) {
  // Prepare encryption keys.
  var publicKeys = opt_publicKeys || [];
  var passphrases = opt_passphrases || [];
  goog.array.forEach(passphrases, function(passphrase, i, passphrases) {
    passphrases[i] = e2e.stringToByteArray(passphrase);
  });
  publicKeys = goog.array.filter(goog.array.map(
      publicKeys,
      function(keyBlock) {
        return keyBlock.getKeyToEncrypt();
      }), goog.isDefAndNotNull);
  if (publicKeys.length == 0 && passphrases.length == 0) {
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'No public key nor passphrase was provided, encryption is impossible.');
  }
  // Optionally sign the message.
  var sigKeyPacket = opt_signatureKey && opt_signatureKey.getKeyToSign();
  if (opt_signatureKey && !sigKeyPacket) {
    // Signature was requested, but no provided key can sign.
    throw new e2e.openpgp.error.InvalidArgumentsError(
        'Provided key does not have a signing capability.');
  }
  /** @type {!e2e.async.Result.<undefined>} */
  var signResult = new e2e.async.Result;
  if (sigKeyPacket) {
    // Creates OnePassSignature + LiteralData + Signature sequence.
    // That sequence will be later compressed and encrypted.
    // This allows e.g. GnuPG to verify the signature.
    signResult = literalMessage.signWithOnePass(sigKeyPacket);
  } else {
    signResult.callback();
  }
  var cipher = /** @type {!e2e.cipher.SymmetricCipher} */ (
      e2e.cipher.factory.require(
          e2e.openpgp.constants.DEFAULT_SYMMETRIC_CIPHER));
  var sessionKey = e2e.random.getRandomBytes(cipher.keySize);
  cipher.setKey({key: sessionKey});

  var encryptedResult = signResult.addCallback(function() {
    var compressedPacket = e2e.openpgp.packet.Compressed.construct(
        literalMessage.serialize());

    return e2e.openpgp.packet.SymmetricallyEncryptedIntegrity.construct(
        compressedPacket.serialize(),
        cipher);
  });

  var encryptedSessions = [];
  goog.array.forEach(passphrases, function(passphrase) {
    var packet = e2e.openpgp.packet.SymmetricKey.construct(
        passphrase, sessionKey);
    encryptedSessions.push(packet);
  });

  var pending = publicKeys.slice();
  var blockResult = new e2e.async.Result;
  goog.array.forEach(publicKeys, function(publicKey) {
    var packetResult = e2e.openpgp.packet.PKEncryptedSessionKey.construct(
        publicKey, sessionKey);
    packetResult.addCallback(function(packet) {
      encryptedSessions.push(packet);
      pending.splice(pending.indexOf(publicKey), 1);
      if (pending.length == 0) {
        encryptedResult.addCallback(function(encrypted) {
          // Make sure that blockresult won't finish until encryptedResult does.
          blockResult.callback(encrypted);
        });
      }
    });
  });
  if (publicKeys.length == 0) {
    encryptedResult.addCallback(function(encrypted) {
      // Make sure that blockresult won't finish until encryptedResult does.
      blockResult.callback(encrypted);
    });
  }

  blockResult.addCallback(function(encryptedData) {
    var block = new e2e.openpgp.block.EncryptedMessage(
        encryptedSessions,
        encryptedData);
    return block;
  });
  return blockResult;
};


/** @inheritDoc */
e2e.openpgp.block.EncryptedMessage.prototype.header = 'MESSAGE';

// Copyright 2012 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Generates blocks from a list of packets.
 * @author evn@google.com (Eduardo Vela)
 */

goog.provide('e2e.openpgp.block.factory');

goog.require('e2e.openpgp.ByteStream');
goog.require('e2e.openpgp.asciiArmor');
goog.require('e2e.openpgp.block.Compressed');
goog.require('e2e.openpgp.block.EncryptedMessage');
goog.require('e2e.openpgp.block.LiteralMessage');
goog.require('e2e.openpgp.block.TransferableKey');
goog.require('e2e.openpgp.block.TransferablePublicKey');
goog.require('e2e.openpgp.block.TransferableSecretKey');
goog.require('e2e.openpgp.packet.Compressed');
goog.require('e2e.openpgp.packet.Data');
goog.require('e2e.openpgp.packet.EncryptedData');
goog.require('e2e.openpgp.packet.EncryptedSessionKey');
goog.require('e2e.openpgp.packet.LiteralData');
goog.require('e2e.openpgp.packet.Marker');
goog.require('e2e.openpgp.packet.OnePassSignature');
goog.require('e2e.openpgp.packet.PublicKey');
goog.require('e2e.openpgp.packet.SecretKey');
goog.require('e2e.openpgp.packet.Signature');
goog.require('e2e.openpgp.parse');

/**
 * Parses a single block out of an array of packets. Consumes packets parsed.
 * RFC 4880 Section 11.3.
 * @param {!Array.<e2e.openpgp.packet.Packet>} packets Packets to extract.
 * @return {?e2e.openpgp.block.Block} The first block extracted or null.
 */
e2e.openpgp.block.factory.parseBlock = function(packets) {
  /**
   * @type {!e2e.openpgp.block.Block}
   */
  var block;
  if (packets.length < 1) {
    return null;
  }
  var signatures = [], onepass = [];
  while (packets[0] instanceof e2e.openpgp.packet.Marker) {
    packets.shift();
  }
  var firstPacket = packets[0];
  while (firstPacket instanceof e2e.openpgp.packet.Signature ||
         firstPacket instanceof e2e.openpgp.packet.OnePassSignature) {
    if (firstPacket instanceof e2e.openpgp.packet.OnePassSignature) {
      onepass.push(packets[0]);
    }
    signatures.push(packets.shift());
    firstPacket = packets[0];
  }
  if (firstPacket instanceof e2e.openpgp.packet.Data ||
      firstPacket instanceof e2e.openpgp.packet.EncryptedSessionKey) {
    if (firstPacket instanceof e2e.openpgp.packet.EncryptedData ||
        firstPacket instanceof e2e.openpgp.packet.EncryptedSessionKey) {
      block = new e2e.openpgp.block.EncryptedMessage(signatures);
      block.parse(packets);
    } else if (firstPacket instanceof e2e.openpgp.packet.LiteralData) {
      block = new e2e.openpgp.block.LiteralMessage(signatures);
      block.parse(packets);
    } else if (firstPacket instanceof e2e.openpgp.packet.Compressed) {
      block = new e2e.openpgp.block.Compressed(signatures);
      block.parse(packets);
    }
    block.consumeOnePassSignatures(onepass, packets);
  } else if (firstPacket instanceof e2e.openpgp.packet.SecretKey) {
    block = new e2e.openpgp.block.TransferableSecretKey();
    block.parse(packets);
  } else if (firstPacket instanceof e2e.openpgp.packet.PublicKey) {
    block = new e2e.openpgp.block.TransferablePublicKey();
    block.parse(packets);
  }
  if (!block) {
    throw new Error('No valid block.');
  }

  return block;
};

/**
 * Parses a single block out of ASCII Armor text.
 * @param {string} ascii ASCII armored text to parse into a block.
 * @return {e2e.openpgp.block.Block} The block extracted.
 */
e2e.openpgp.block.factory.parseAscii = function(ascii) {
  var data = e2e.openpgp.asciiArmor.parse(ascii);
  return e2e.openpgp.block.factory.parseByteArray(
      data.data, data.charset);
};

/**
 * Parses a single block out of a ByteArray.
 * @param {!e2e.ByteArray} data ByteArray to parse into a block.
 * @param {string=} opt_charset The charset used to encode strings.
 * @return {e2e.openpgp.block.Block} The block extracted.
 */
e2e.openpgp.block.factory.parseByteArray = function(data, opt_charset) {
  var packets = e2e.openpgp.block.factory.byteArrayToPackets(data);
  var block = e2e.openpgp.block.factory.parseBlock(packets);
  if (block) {
    block.setCharset(opt_charset);
  }
  return block;
};

/**
 * Parses a multiple blocks out of ASCII Armor text.
 * @param {string} ascii ASCII armored text to parse into a block.
 * @return {!Array.<!e2e.openpgp.block.Block>} The blocks extracted.
 */
e2e.openpgp.block.factory.parseAsciiMulti = function(ascii) {
  var data = e2e.openpgp.asciiArmor.parse(ascii);
  return e2e.openpgp.block.factory.parseByteArrayMulti(
      data.data, data.charset);
};

/**
 * Parses a multiple blocks out of a ByteArray.
 * @param {!e2e.ByteArray} data ByteArray to parse into a block.
 * @param {string=} opt_charset The charset used to encode strings.
 * @return {!Array.<!e2e.openpgp.block.Block>} The blocks extracted.
 */
e2e.openpgp.block.factory.parseByteArrayMulti = function(data, opt_charset) {
  var packets = e2e.openpgp.block.factory.byteArrayToPackets(data);
  var blocks = [];
  while (packets.length) {
    var block = e2e.openpgp.block.factory.parseBlock(packets);
    if (block) {
      block.setCharset(opt_charset);
      blocks.push(block);
    }
  }
  return blocks;
};


/**
 * Parses packets out of a ByteArray. Does not modify the ByteArray.
 * @param {!e2e.ByteArray} data ByteArray to parse into packets.
 * @return {!Array.<!e2e.openpgp.packet.Packet>} The packets extracted.
 */
e2e.openpgp.block.factory.byteArrayToPackets = function(data) {
  var packets = [];
  var byteStream = new e2e.openpgp.ByteStream(data);
  while (byteStream.length) {
    var packet = e2e.openpgp.parse.parseSerializedPacket(byteStream);
    if (packet) {
      packets.push(packet);
    }
  }
  return packets;
};


/**
 * Extract key blocks from passed blocks array and returns Keys object. Keys
 *     serialization will not be included in the results, as this function
 *     should be called to display the results in the UI, where serialization
 *     is not needed.
 * @param  {!Array.<!e2e.openpgp.block.Block>} blocks Blocks to extract keys
 *     from.
 * @return {!e2e.openpgp.Keys} Extracted Keys.
 */
e2e.openpgp.block.factory.extractKeys = function(blocks) {
  /** @type {!e2e.openpgp.Keys} */
  var keys = [];
  for (var b = 0; b < blocks.length; b++) {
    if (blocks[b] instanceof e2e.openpgp.block.TransferableKey) {
      blocks[b].processSignatures();
      keys.push(blocks[b].toKeyObject(true));
    }
  }
  return keys;
};

// Copyright 2008 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Simple utilities for dealing with URI strings.
 *
 * This is intended to be a lightweight alternative to constructing goog.Uri
 * objects.  Whereas goog.Uri adds several kilobytes to the binary regardless
 * of how much of its functionality you use, this is designed to be a set of
 * mostly-independent utilities so that the compiler includes only what is
 * necessary for the task.  Estimated savings of porting is 5k pre-gzip and
 * 1.5k post-gzip.  To ensure the savings remain, future developers should
 * avoid adding new functionality to existing functions, but instead create
 * new ones and factor out shared code.
 *
 * Many of these utilities have limited functionality, tailored to common
 * cases.  The query parameter utilities assume that the parameter keys are
 * already encoded, since most keys are compile-time alphanumeric strings.  The
 * query parameter mutation utilities also do not tolerate fragment identifiers.
 *
 * By design, these functions can be slower than goog.Uri equivalents.
 * Repeated calls to some of functions may be quadratic in behavior for IE,
 * although the effect is somewhat limited given the 2kb limit.
 *
 * One advantage of the limited functionality here is that this approach is
 * less sensitive to differences in URI encodings than goog.Uri, since these
 * functions modify the strings in place, rather than decoding and
 * re-encoding.
 *
 * Uses features of RFC 3986 for parsing/formatting URIs:
 *   http://www.ietf.org/rfc/rfc3986.txt
 *
 * @author gboyer@google.com (Garrett Boyer) - The "lightened" design.
 */

goog.provide('goog.uri.utils');
goog.provide('goog.uri.utils.ComponentIndex');
goog.provide('goog.uri.utils.QueryArray');
goog.provide('goog.uri.utils.QueryValue');
goog.provide('goog.uri.utils.StandardQueryParam');

goog.require('goog.asserts');
goog.require('goog.string');
goog.require('goog.userAgent');


/**
 * Character codes inlined to avoid object allocations due to charCode.
 * @enum {number}
 * @private
 */
goog.uri.utils.CharCode_ = {
  AMPERSAND: 38,
  EQUAL: 61,
  HASH: 35,
  QUESTION: 63
};


/**
 * Builds a URI string from already-encoded parts.
 *
 * No encoding is performed.  Any component may be omitted as either null or
 * undefined.
 *
 * @param {?string=} opt_scheme The scheme such as 'http'.
 * @param {?string=} opt_userInfo The user name before the '@'.
 * @param {?string=} opt_domain The domain such as 'www.google.com', already
 *     URI-encoded.
 * @param {(string|number|null)=} opt_port The port number.
 * @param {?string=} opt_path The path, already URI-encoded.  If it is not
 *     empty, it must begin with a slash.
 * @param {?string=} opt_queryData The URI-encoded query data.
 * @param {?string=} opt_fragment The URI-encoded fragment identifier.
 * @return {string} The fully combined URI.
 */
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo,
    opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = '';

  if (opt_scheme) {
    out += opt_scheme + ':';
  }

  if (opt_domain) {
    out += '//';

    if (opt_userInfo) {
      out += opt_userInfo + '@';
    }

    out += opt_domain;

    if (opt_port) {
      out += ':' + opt_port;
    }
  }

  if (opt_path) {
    out += opt_path;
  }

  if (opt_queryData) {
    out += '?' + opt_queryData;
  }

  if (opt_fragment) {
    out += '#' + opt_fragment;
  }

  return out;
};


/**
 * A regular expression for breaking a URI into its component parts.
 *
 * {@link http://www.ietf.org/rfc/rfc3986.txt} says in Appendix B
 * As the "first-match-wins" algorithm is identical to the "greedy"
 * disambiguation method used by POSIX regular expressions, it is natural and
 * commonplace to use a regular expression for parsing the potential five
 * components of a URI reference.
 *
 * The following line is the regular expression for breaking-down a
 * well-formed URI reference into its components.
 *
 * <pre>
 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
 *  12            3  4          5       6  7        8 9
 * </pre>
 *
 * The numbers in the second line above are only to assist readability; they
 * indicate the reference points for each subexpression (i.e., each paired
 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
 * For example, matching the above expression to
 * <pre>
 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
 * </pre>
 * results in the following subexpression matches:
 * <pre>
 *    $1 = http:
 *    $2 = http
 *    $3 = //www.ics.uci.edu
 *    $4 = www.ics.uci.edu
 *    $5 = /pub/ietf/uri/
 *    $6 = <undefined>
 *    $7 = <undefined>
 *    $8 = #Related
 *    $9 = Related
 * </pre>
 * where <undefined> indicates that the component is not present, as is the
 * case for the query component in the above example. Therefore, we can
 * determine the value of the five components as
 * <pre>
 *    scheme    = $2
 *    authority = $4
 *    path      = $5
 *    query     = $7
 *    fragment  = $9
 * </pre>
 *
 * The regular expression has been modified slightly to expose the
 * userInfo, domain, and port separately from the authority.
 * The modified version yields
 * <pre>
 *    $1 = http              scheme
 *    $2 = <undefined>       userInfo -\
 *    $3 = www.ics.uci.edu   domain     | authority
 *    $4 = <undefined>       port     -/
 *    $5 = /pub/ietf/uri/    path
 *    $6 = <undefined>       query without ?
 *    $7 = Related           fragment without #
 * </pre>
 * @type {!RegExp}
 * @private
 */
goog.uri.utils.splitRe_ = new RegExp(
    '^' +
    '(?:' +
        '([^:/?#.]+)' +                  // scheme - ignore special characters
                                         // used by other URL parts such as :,
                                         // ?, /, #, and .
    ':)?' +
    '(?://' +
        '(?:([^/?#]*)@)?' +              // userInfo
        '([^/#?]*?)' +                   // domain
        '(?::([0-9]+))?' +               // port
        '(?=[/#?]|$)' +                  // authority-terminating character
    ')?' +
    '([^?#]+)?' +                        // path
    '(?:\\?([^#]*))?' +                  // query
    '(?:#(.*))?' +                       // fragment
    '$');


/**
 * The index of each URI component in the return value of goog.uri.utils.split.
 * @enum {number}
 */
goog.uri.utils.ComponentIndex = {
  SCHEME: 1,
  USER_INFO: 2,
  DOMAIN: 3,
  PORT: 4,
  PATH: 5,
  QUERY_DATA: 6,
  FRAGMENT: 7
};


/**
 * Splits a URI into its component parts.
 *
 * Each component can be accessed via the component indices; for example:
 * <pre>
 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
 * </pre>
 *
 * @param {string} uri The URI string to examine.
 * @return {!Array.<string|undefined>} Each component still URI-encoded.
 *     Each component that is present will contain the encoded value, whereas
 *     components that are not present will be undefined or empty, depending
 *     on the browser's regular expression implementation.  Never null, since
 *     arbitrary strings may still look like path names.
 */
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();

  // See @return comment -- never null.
  return /** @type {!Array.<string|undefined>} */ (
      uri.match(goog.uri.utils.splitRe_));
};


/**
 * Safari has a nasty bug where if you have an http URL with a username, e.g.,
 * http://evil.com%2F@google.com/
 * Safari will report that window.location.href is
 * http://evil.com/google.com/
 * so that anyone who tries to parse the domain of that URL will get
 * the wrong domain. We've seen exploits where people use this to trick
 * Safari into loading resources from evil domains.
 *
 * To work around this, we run a little "Safari phishing check", and throw
 * an exception if we see this happening.
 *
 * There is no convenient place to put this check. We apply it to
 * anyone doing URI parsing on Webkit. We're not happy about this, but
 * it fixes the problem.
 *
 * This should be removed once Safari fixes their bug.
 *
 * Exploit reported by Masato Kinugawa.
 *
 * @type {boolean}
 * @private
 */
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;


/**
 * Check to see if the user is being phished.
 * @private
 */
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    // Turn protection off, so that we don't recurse.
    goog.uri.utils.needsPhishingProtection_ = false;

    // Use quoted access, just in case the user isn't using location externs.
    var location = goog.global['location'];
    if (location) {
      var href = location['href'];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location['hostname']) {
          // Phishing attack
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};


/**
 * @param {?string} uri A possibly null string.
 * @param {boolean=} opt_preserveReserved If true, percent-encoding of RFC-3986
 *     reserved characters will not be removed.
 * @return {?string} The string URI-decoded, or null if uri is null.
 * @private
 */
goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
  if (!uri) {
    return uri;
  }

  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);
};


/**
 * Gets a URI component by index.
 *
 * It is preferred to use the getPathEncoded() variety of functions ahead,
 * since they are more readable.
 *
 * @param {goog.uri.utils.ComponentIndex} componentIndex The component index.
 * @param {string} uri The URI to examine.
 * @return {?string} The still-encoded component, or null if the component
 *     is not present.
 * @private
 */
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  // Convert undefined, null, and empty string into null.
  return goog.uri.utils.split(uri)[componentIndex] || null;
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The protocol or scheme, or null if none.  Does not
 *     include trailing colons or slashes.
 */
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(
      goog.uri.utils.ComponentIndex.SCHEME, uri);
};


/**
 * Gets the effective scheme for the URL.  If the URL is relative then the
 * scheme is derived from the page's location.
 * @param {string} uri The URI to examine.
 * @return {string} The protocol or scheme, always lower case.
 */
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  // NOTE: When called from a web worker in Firefox 3.5, location maybe null.
  // All other browsers with web workers support self.location from the worker.
  return scheme ? scheme.toLowerCase() : '';
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The user name still encoded, or null if none.
 */
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(
      goog.uri.utils.ComponentIndex.USER_INFO, uri);
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The decoded user info, or null if none.
 */
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(
      goog.uri.utils.getUserInfoEncoded(uri));
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The domain name still encoded, or null if none.
 */
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(
      goog.uri.utils.ComponentIndex.DOMAIN, uri);
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The decoded domain, or null if none.
 */
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(
      goog.uri.utils.getDomainEncoded(uri), true /* opt_preserveReserved */);
};


/**
 * @param {string} uri The URI to examine.
 * @return {?number} The port number, or null if none.
 */
goog.uri.utils.getPort = function(uri) {
  // Coerce to a number.  If the result of getComponentByIndex_ is null or
  // non-numeric, the number coersion yields NaN.  This will then return
  // null for all non-numeric cases (though also zero, which isn't a relevant
  // port number).
  return Number(goog.uri.utils.getComponentByIndex_(
      goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The path still encoded, or null if none. Includes the
 *     leading slash, if any.
 */
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(
      goog.uri.utils.ComponentIndex.PATH, uri);
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The decoded path, or null if none.  Includes the leading
 *     slash, if any.
 */
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(
      goog.uri.utils.getPathEncoded(uri), true /* opt_preserveReserved */);
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The query data still encoded, or null if none.  Does not
 *     include the question mark itself.
 */
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(
      goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The fragment identifier, or null if none.  Does not
 *     include the hash mark itself.
 */
goog.uri.utils.getFragmentEncoded = function(uri) {
  // The hash mark may not appear in any other part of the URL.
  var hashIndex = uri.indexOf('#');
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};


/**
 * @param {string} uri The URI to examine.
 * @param {?string} fragment The encoded fragment identifier, or null if none.
 *     Does not include the hash mark itself.
 * @return {string} The URI with the fragment set.
 */
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? '#' + fragment : '');
};


/**
 * @param {string} uri The URI to examine.
 * @return {?string} The decoded fragment identifier, or null if none.  Does
 *     not include the hash mark.
 */
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(
      goog.uri.utils.getFragmentEncoded(uri));
};


/**
 * Extracts everything up to the port of the URI.
 * @param {string} uri The URI string.
 * @return {string} Everything up to and including the port.
 */
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(
      pieces[goog.uri.utils.ComponentIndex.SCHEME],
      pieces[goog.uri.utils.ComponentIndex.USER_INFO],
      pieces[goog.uri.utils.ComponentIndex.DOMAIN],
      pieces[goog.uri.utils.ComponentIndex.PORT]);
};


/**
 * Extracts the path of the URL and everything after.
 * @param {string} uri The URI string.
 * @return {string} The URI, starting at the path and including the query
 *     parameters and fragment identifier.
 */
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null,
      pieces[goog.uri.utils.ComponentIndex.PATH],
      pieces[goog.uri.utils.ComponentIndex.QUERY_DATA],
      pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};


/**
 * Gets the URI with the fragment identifier removed.
 * @param {string} uri The URI to examine.
 * @return {string} Everything preceding the hash mark.
 */
goog.uri.utils.removeFragment = function(uri) {
  // The hash mark may not appear in any other part of the URL.
  var hashIndex = uri.indexOf('#');
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};


/**
 * Ensures that two URI's have the exact same domain, scheme, and port.
 *
 * Unlike the version in goog.Uri, this checks protocol, and therefore is
 * suitable for checking against the browser's same-origin policy.
 *
 * @param {string} uri1 The first URI.
 * @param {string} uri2 The second URI.
 * @return {boolean} Whether they have the same scheme, domain and port.
 */
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] ==
             pieces2[goog.uri.utils.ComponentIndex.DOMAIN] &&
         pieces1[goog.uri.utils.ComponentIndex.SCHEME] ==
             pieces2[goog.uri.utils.ComponentIndex.SCHEME] &&
         pieces1[goog.uri.utils.ComponentIndex.PORT] ==
             pieces2[goog.uri.utils.ComponentIndex.PORT];
};


/**
 * Asserts that there are no fragment or query identifiers, only in uncompiled
 * mode.
 * @param {string} uri The URI to examine.
 * @private
 */
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  // NOTE: would use goog.asserts here, but jscompiler doesn't know that
  // indexOf has no side effects.
  if (goog.DEBUG && (uri.indexOf('#') >= 0 || uri.indexOf('?') >= 0)) {
    throw Error('goog.uri.utils: Fragment or query identifiers are not ' +
        'supported: [' + uri + ']');
  }
};


/**
 * Supported query parameter values by the parameter serializing utilities.
 *
 * If a value is null or undefined, the key-value pair is skipped, as an easy
 * way to omit parameters conditionally.  Non-array parameters are converted
 * to a string and URI encoded.  Array values are expanded into multiple
 * &key=value pairs, with each element stringized and URI-encoded.
 *
 * @typedef {*}
 */
goog.uri.utils.QueryValue;


/**
 * An array representing a set of query parameters with alternating keys
 * and values.
 *
 * Keys are assumed to be URI encoded already and live at even indices.  See
 * goog.uri.utils.QueryValue for details on how parameter values are encoded.
 *
 * Example:
 * <pre>
 * var data = [
 *   // Simple param: ?name=BobBarker
 *   'name', 'BobBarker',
 *   // Conditional param -- may be omitted entirely.
 *   'specialDietaryNeeds', hasDietaryNeeds() ? getDietaryNeeds() : null,
 *   // Multi-valued param: &house=LosAngeles&house=NewYork&house=null
 *   'house', ['LosAngeles', 'NewYork', null]
 * ];
 * </pre>
 *
 * @typedef {!Array.<string|goog.uri.utils.QueryValue>}
 */
goog.uri.utils.QueryArray;


/**
 * Appends a URI and query data in a string buffer with special preconditions.
 *
 * Internal implementation utility, performing very few object allocations.
 *
 * @param {!Array.<string|undefined>} buffer A string buffer.  The first element
 *     must be the base URI, and may have a fragment identifier.  If the array
 *     contains more than one element, the second element must be an ampersand,
 *     and may be overwritten, depending on the base URI.  Undefined elements
 *     are treated as empty-string.
 * @return {string} The concatenated URI and query data.
 * @private
 */
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    // At least one query parameter was added.  We need to check the
    // punctuation mark, which is currently an ampersand, and also make sure
    // there aren't any interfering fragment identifiers.
    var baseUri = /** @type {string} */ (buffer[0]);
    var hashIndex = baseUri.indexOf('#');
    if (hashIndex >= 0) {
      // Move the fragment off the base part of the URI into the end.
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf('?');
    if (questionIndex < 0) {
      // No question mark, so we need a question mark instead of an ampersand.
      buffer[1] = '?';
    } else if (questionIndex == baseUri.length - 1) {
      // Question mark is the very last character of the existing URI, so don't
      // append an additional delimiter.
      buffer[1] = undefined;
    }
  }

  return buffer.join('');
};


/**
 * Appends key=value pairs to an array, supporting multi-valued objects.
 * @param {string} key The key prefix.
 * @param {goog.uri.utils.QueryValue} value The value to serialize.
 * @param {!Array.<string>} pairs The array to which the 'key=value' strings
 *     should be appended.
 * @private
 */
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    // Convince the compiler it's an array.
    goog.asserts.assertArray(value);
    for (var j = 0; j < value.length; j++) {
      // Convert to string explicitly, to short circuit the null and array
      // logic in this function -- this ensures that null and undefined get
      // written as literal 'null' and 'undefined', and arrays don't get
      // expanded out but instead encoded in the default way.
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else if (value != null) {
    // Skip a top-level null or undefined entirely.
    pairs.push('&', key,
        // Check for empty string. Zero gets encoded into the url as literal
        // strings.  For empty string, skip the equal sign, to be consistent
        // with UriBuilder.java.
        value === '' ? '' : '=',
        goog.string.urlEncode(value));
  }
};


/**
 * Builds a buffer of query data from a sequence of alternating keys and values.
 *
 * @param {!Array.<string|undefined>} buffer A string buffer to append to.  The
 *     first element appended will be an '&', and may be replaced by the caller.
 * @param {goog.uri.utils.QueryArray|Arguments} keysAndValues An array with
 *     alternating keys and values -- see the typedef.
 * @param {number=} opt_startIndex A start offset into the arary, defaults to 0.
 * @return {!Array.<string|undefined>} The buffer argument.
 * @private
 */
goog.uri.utils.buildQueryDataBuffer_ = function(
    buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0),
      0) % 2 == 0, 'goog.uri.utils: Key/value lists must be even in length.');

  for (var i = opt_startIndex || 0; i < keysAndValues.length; i += 2) {
    goog.uri.utils.appendKeyValuePairs_(
        keysAndValues[i], keysAndValues[i + 1], buffer);
  }

  return buffer;
};


/**
 * Builds a query data string from a sequence of alternating keys and values.
 * Currently generates "&key&" for empty args.
 *
 * @param {goog.uri.utils.QueryArray} keysAndValues Alternating keys and
 *     values.  See the typedef.
 * @param {number=} opt_startIndex A start offset into the arary, defaults to 0.
 * @return {string} The encoded query string, in the form 'a=1&b=2'.
 */
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_(
      [], keysAndValues, opt_startIndex);
  buffer[0] = ''; // Remove the leading ampersand.
  return buffer.join('');
};


/**
 * Builds a buffer of query data from a map.
 *
 * @param {!Array.<string|undefined>} buffer A string buffer to append to.  The
 *     first element appended will be an '&', and may be replaced by the caller.
 * @param {Object.<goog.uri.utils.QueryValue>} map An object where keys are
 *     URI-encoded parameter keys, and the values conform to the contract
 *     specified in the goog.uri.utils.QueryValue typedef.
 * @return {!Array.<string|undefined>} The buffer argument.
 * @private
 */
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }

  return buffer;
};


/**
 * Builds a query data string from a map.
 * Currently generates "&key&" for empty args.
 *
 * @param {Object} map An object where keys are URI-encoded parameter keys,
 *     and the values are arbitrary types or arrays.  Keys with a null value
 *     are dropped.
 * @return {string} The encoded query string, in the form 'a=1&b=2'.
 */
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = '';
  return buffer.join('');
};


/**
 * Appends URI parameters to an existing URI.
 *
 * The variable arguments may contain alternating keys and values.  Keys are
 * assumed to be already URI encoded.  The values should not be URI-encoded,
 * and will instead be encoded by this function.
 * <pre>
 * appendParams('http://www.foo.com?existing=true',
 *     'key1', 'value1',
 *     'key2', 'value?willBeEncoded',
 *     'key3', ['valueA', 'valueB', 'valueC'],
 *     'key4', null);
 * result: 'http://www.foo.com?existing=true&' +
 *     'key1=value1&' +
 *     'key2=value%3FwillBeEncoded&' +
 *     'key3=valueA&key3=valueB&key3=valueC'
 * </pre>
 *
 * A single call to this function will not exhibit quadratic behavior in IE,
 * whereas multiple repeated calls may, although the effect is limited by
 * fact that URL's generally can't exceed 2kb.
 *
 * @param {string} uri The original URI, which may already have query data.
 * @param {...(goog.uri.utils.QueryArray|string|goog.uri.utils.QueryValue)} var_args
 *     An array or argument list conforming to goog.uri.utils.QueryArray.
 * @return {string} The URI with all query parameters added.
 */
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(
      arguments.length == 2 ?
      goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) :
      goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};


/**
 * Appends query parameters from a map.
 *
 * @param {string} uri The original URI, which may already have query data.
 * @param {Object} map An object where keys are URI-encoded parameter keys,
 *     and the values are arbitrary types or arrays.  Keys with a null value
 *     are dropped.
 * @return {string} The new parameters.
 */
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(
      goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};


/**
 * Appends a single URI parameter.
 *
 * Repeated calls to this can exhibit quadratic behavior in IE6 due to the
 * way string append works, though it should be limited given the 2kb limit.
 *
 * @param {string} uri The original URI, which may already have query data.
 * @param {string} key The key, which must already be URI encoded.
 * @param {*=} opt_value The value, which will be stringized and encoded
 *     (assumed not already to be encoded).  If omitted, undefined, or null, the
 *     key will be added as a valueless parameter.
 * @return {string} The URI with the query parameter added.
 */
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, '&', key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push('=', goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};


/**
 * Finds the next instance of a query parameter with the specified name.
 *
 * Does not instantiate any objects.
 *
 * @param {string} uri The URI to search.  May contain a fragment identifier
 *     if opt_hashIndex is specified.
 * @param {number} startIndex The index to begin searching for the key at.  A
 *     match may be found even if this is one character after the ampersand.
 * @param {string} keyEncoded The URI-encoded key.
 * @param {number} hashOrEndIndex Index to stop looking at.  If a hash
 *     mark is present, it should be its index, otherwise it should be the
 *     length of the string.
 * @return {number} The position of the first character in the key's name,
 *     immediately after either a question mark or a dot.
 * @private
 */
goog.uri.utils.findParam_ = function(
    uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;

  // Search for the key itself and post-filter for surronuding punctuation,
  // rather than expensively building a regexp.
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 &&
      index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    // Ensure that the preceding character is '&' or '?'.
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND ||
        precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      // Ensure the following character is '&', '=', '#', or NaN
      // (end of string).
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar ||
          followingChar == goog.uri.utils.CharCode_.EQUAL ||
          followingChar == goog.uri.utils.CharCode_.AMPERSAND ||
          followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }

  return -1;
};


/**
 * Regular expression for finding a hash mark or end of string.
 * @type {RegExp}
 * @private
 */
goog.uri.utils.hashOrEndRe_ = /#|$/;


/**
 * Determines if the URI contains a specific key.
 *
 * Performs no object instantiations.
 *
 * @param {string} uri The URI to process.  May contain a fragment
 *     identifier.
 * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.
 * @return {boolean} Whether the key is present.
 */
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded,
      uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};


/**
 * Gets the first value of a query parameter.
 * @param {string} uri The URI to process.  May contain a fragment.
 * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.
 * @return {?string} The first value of the parameter (URI-decoded), or null
 *     if the parameter is not found.
 */
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(
      uri, 0, keyEncoded, hashOrEndIndex);

  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf('&', foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    // Progress forth to the end of the "key=" or "key&" substring.
    foundIndex += keyEncoded.length + 1;
    // Use substr, because it (unlike substring) will return empty string
    // if foundIndex > endPosition.
    return goog.string.urlDecode(
        uri.substr(foundIndex, endPosition - foundIndex));
  }
};


/**
 * Gets all values of a query parameter.
 * @param {string} uri The URI to process.  May contain a framgnet.
 * @param {string} keyEncoded The URI-encoded key.  Case-snsitive.
 * @return {!Array.<string>} All URI-decoded values with the given key.
 *     If the key is not found, this will have length 0, but never be null.
 */
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];

  while ((foundIndex = goog.uri.utils.findParam_(
      uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    // Find where this parameter ends, either the '&' or the end of the
    // query parameters.
    position = uri.indexOf('&', foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }

    // Progress forth to the end of the "key=" or "key&" substring.
    foundIndex += keyEncoded.length + 1;
    // Use substr, because it (unlike substring) will return empty string
    // if foundIndex > position.
    result.push(goog.string.urlDecode(uri.substr(
        foundIndex, position - foundIndex)));
  }

  return result;
};


/**
 * Regexp to find trailing question marks and ampersands.
 * @type {RegExp}
 * @private
 */
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;


/**
 * Removes all instances of a query parameter.
 * @param {string} uri The URI to process.  Must not contain a fragment.
 * @param {string} keyEncoded The URI-encoded key.
 * @return {string} The URI with all instances of the parameter removed.
 */
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];

  // Look for a query parameter.
  while ((foundIndex = goog.uri.utils.findParam_(
      uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    // Get the portion of the query string up to, but not including, the ?
    // or & starting the parameter.
    buffer.push(uri.substring(position, foundIndex));
    // Progress to immediately after the '&'.  If not found, go to the end.
    // Avoid including the hash mark.
    position = Math.min((uri.indexOf('&', foundIndex) + 1) || hashOrEndIndex,
        hashOrEndIndex);
  }

  // Append everything that is remaining.
  buffer.push(uri.substr(position));

  // Join the buffer, and remove trailing punctuation that remains.
  return buffer.join('').replace(
      goog.uri.utils.trailingQueryPunctuationRe_, '$1');
};


/**
 * Replaces all existing definitions of a parameter with a single definition.
 *
 * Repeated calls to this can exhibit quadratic behavior due to the need to
 * find existing instances and reconstruct the string, though it should be
 * limited given the 2kb limit.  Consider using appendParams to append multiple
 * parameters in bulk.
 *
 * @param {string} uri The original URI, which may already have query data.
 * @param {string} keyEncoded The key, which must already be URI encoded.
 * @param {*} value The value, which will be stringized and encoded (assumed
 *     not already to be encoded).
 * @return {string} The URI with the query parameter added.
 */
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(
      goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};


/**
 * Generates a URI path using a given URI and a path with checks to
 * prevent consecutive "//". The baseUri passed in must not contain
 * query or fragment identifiers. The path to append may not contain query or
 * fragment identifiers.
 *
 * @param {string} baseUri URI to use as the base.
 * @param {string} path Path to append.
 * @return {string} Updated URI.
 */
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);

  // Remove any trailing '/'
  if (goog.string.endsWith(baseUri, '/')) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  // Remove any leading '/'
  if (goog.string.startsWith(path, '/')) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, '/', path);
};


/**
 * Replaces the path.
 * @param {string} uri URI to use as the base.
 * @param {string} path New path.
 * @return {string} Updated URI.
 */
goog.uri.utils.setPath = function(uri, path) {
  // Add any missing '/'.
  if (!goog.string.startsWith(path, '/')) {
    path = '/' + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(
      parts[goog.uri.utils.ComponentIndex.SCHEME],
      parts[goog.uri.utils.ComponentIndex.USER_INFO],
      parts[goog.uri.utils.ComponentIndex.DOMAIN],
      parts[goog.uri.utils.ComponentIndex.PORT],
      path,
      parts[goog.uri.utils.ComponentIndex.QUERY_DATA],
      parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};


/**
 * Standard supported query parameters.
 * @enum {string}
 */
goog.uri.utils.StandardQueryParam = {

  /** Unused parameter for unique-ifying. */
  RANDOM: 'zx'
};


/**
 * Sets the zx parameter of a URI to a random value.
 * @param {string} uri Any URI.
 * @return {string} That URI with the "zx" parameter added or replaced to
 *     contain a random string.
 */
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri,
      goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Class for parsing and formatting URIs.
 *
 * Use goog.Uri(string) to parse a URI string.  Use goog.Uri.create(...) to
 * create a new instance of the goog.Uri object from Uri parts.
 *
 * e.g: <code>var myUri = new goog.Uri(window.location);</code>
 *
 * Implements RFC 3986 for parsing/formatting URIs.
 * http://www.ietf.org/rfc/rfc3986.txt
 *
 * Some changes have been made to the interface (more like .NETs), though the
 * internal representation is now of un-encoded parts, this will change the
 * behavior slightly.
 *
 */

goog.provide('goog.Uri');
goog.provide('goog.Uri.QueryData');

goog.require('goog.array');
goog.require('goog.string');
goog.require('goog.structs');
goog.require('goog.structs.Map');
goog.require('goog.uri.utils');
goog.require('goog.uri.utils.ComponentIndex');
goog.require('goog.uri.utils.StandardQueryParam');



/**
 * This class contains setters and getters for the parts of the URI.
 * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part
 * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the
 * decoded path, <code>/foo bar</code>.
 *
 * Reserved characters (see RFC 3986 section 2.2) can be present in
 * their percent-encoded form in scheme, domain, and path URI components and
 * will not be auto-decoded. For example:
 * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will
 * return <code>relative/path%2fto/resource</code>.
 *
 * The constructor accepts an optional unparsed, raw URI string.  The parser
 * is relaxed, so special characters that aren't escaped but don't cause
 * ambiguities will not cause parse failures.
 *
 * All setters return <code>this</code> and so may be chained, a la
 * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.
 *
 * @param {*=} opt_uri Optional string URI to parse
 *        (use goog.Uri.create() to create a URI from parts), or if
 *        a goog.Uri is passed, a clone is created.
 * @param {boolean=} opt_ignoreCase If true, #getParameterValue will ignore
 * the case of the parameter name.
 *
 * @constructor
 */
goog.Uri = function(opt_uri, opt_ignoreCase) {
  // Parse in the uri string
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ?
        opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
    this.ignoreCase_ = !!opt_ignoreCase;

    // Set the parts -- decoding as we do so.
    // COMPATABILITY NOTE - In IE, unmatched fields may be empty strings,
    // whereas in other browsers they will be undefined.
    this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || '', true);
    this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || '', true);
    this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || '', true);
    this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
    this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || '', true);
    this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || '', true);
    this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || '', true);

  } else {
    this.ignoreCase_ = !!opt_ignoreCase;
    this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
  }
};


/**
 * If true, we preserve the type of query parameters set programmatically.
 *
 * This means that if you set a parameter to a boolean, and then call
 * getParameterValue, you will get a boolean back.
 *
 * If false, we will coerce parameters to strings, just as they would
 * appear in real URIs.
 *
 * TODO(nicksantos): Remove this once people have time to fix all tests.
 *
 * @type {boolean}
 */
goog.Uri.preserveParameterTypesCompatibilityFlag = false;


/**
 * Parameter name added to stop caching.
 * @type {string}
 */
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;


/**
 * Scheme such as "http".
 * @type {string}
 * @private
 */
goog.Uri.prototype.scheme_ = '';


/**
 * User credentials in the form "username:password".
 * @type {string}
 * @private
 */
goog.Uri.prototype.userInfo_ = '';


/**
 * Domain part, e.g. "www.google.com".
 * @type {string}
 * @private
 */
goog.Uri.prototype.domain_ = '';


/**
 * Port, e.g. 8080.
 * @type {?number}
 * @private
 */
goog.Uri.prototype.port_ = null;


/**
 * Path, e.g. "/tests/img.png".
 * @type {string}
 * @private
 */
goog.Uri.prototype.path_ = '';


/**
 * Object representing query data.
 * @type {!goog.Uri.QueryData}
 * @private
 */
goog.Uri.prototype.queryData_;


/**
 * The fragment without the #.
 * @type {string}
 * @private
 */
goog.Uri.prototype.fragment_ = '';


/**
 * Whether or not this Uri should be treated as Read Only.
 * @type {boolean}
 * @private
 */
goog.Uri.prototype.isReadOnly_ = false;


/**
 * Whether or not to ignore case when comparing query params.
 * @type {boolean}
 * @private
 */
goog.Uri.prototype.ignoreCase_ = false;


/**
 * @return {string} The string form of the url.
 * @override
 */
goog.Uri.prototype.toString = function() {
  var out = [];

  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(
        scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ':');
  }

  var domain = this.getDomain();
  if (domain) {
    out.push('//');

    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(
          userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), '@');
    }

    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));

    var port = this.getPort();
    if (port != null) {
      out.push(':', String(port));
    }
  }

  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != '/') {
      out.push('/');
    }
    out.push(goog.Uri.encodeSpecialChars_(
        path,
        path.charAt(0) == '/' ?
            goog.Uri.reDisallowedInAbsolutePath_ :
            goog.Uri.reDisallowedInRelativePath_,
        true));
  }

  var query = this.getEncodedQuery();
  if (query) {
    out.push('?', query);
  }

  var fragment = this.getFragment();
  if (fragment) {
    out.push('#', goog.Uri.encodeSpecialChars_(
        fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join('');
};


/**
 * Resolves the given relative URI (a goog.Uri object), using the URI
 * represented by this instance as the base URI.
 *
 * There are several kinds of relative URIs:<br>
 * 1. foo - replaces the last part of the path, the whole query and fragment<br>
 * 2. /foo - replaces the the path, the query and fragment<br>
 * 3. //foo - replaces everything from the domain on.  foo is a domain name<br>
 * 4. ?foo - replace the query and fragment<br>
 * 5. #foo - replace the fragment only
 *
 * Additionally, if relative URI has a non-empty path, all ".." and "."
 * segments will be resolved, as described in RFC 3986.
 *
 * @param {goog.Uri} relativeUri The relative URI to resolve.
 * @return {!goog.Uri} The resolved URI.
 */
goog.Uri.prototype.resolve = function(relativeUri) {

  var absoluteUri = this.clone();

  // we satisfy these conditions by looking for the first part of relativeUri
  // that is not blank and applying defaults to the rest

  var overridden = relativeUri.hasScheme();

  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }

  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }

  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }

  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      // resolve path properly
      if (path.charAt(0) != '/') {
        // path is relative
        if (this.hasDomain() && !this.hasPath()) {
          // RFC 3986, section 5.2.3, case 1
          path = '/' + path;
        } else {
          // RFC 3986, section 5.2.3, case 2
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf('/');
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }

  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }

  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }

  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }

  return absoluteUri;
};


/**
 * Clones the URI instance.
 * @return {!goog.Uri} New instance of the URI object.
 */
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};


/**
 * @return {string} The encoded scheme/protocol for the URI.
 */
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};


/**
 * Sets the scheme/protocol.
 * @param {string} newScheme New scheme value.
 * @param {boolean=} opt_decode Optional param for whether to decode new value.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) :
      newScheme;

  // remove an : at the end of the scheme so somebody can pass in
  // window.location.protocol
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, '');
  }
  return this;
};


/**
 * @return {boolean} Whether the scheme has been set.
 */
goog.Uri.prototype.hasScheme = function() {
  return !!this.scheme_;
};


/**
 * @return {string} The decoded user info.
 */
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};


/**
 * Sets the userInfo.
 * @param {string} newUserInfo New userInfo value.
 * @param {boolean=} opt_decode Optional param for whether to decode new value.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) :
                   newUserInfo;
  return this;
};


/**
 * @return {boolean} Whether the user info has been set.
 */
goog.Uri.prototype.hasUserInfo = function() {
  return !!this.userInfo_;
};


/**
 * @return {string} The decoded domain.
 */
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};


/**
 * Sets the domain.
 * @param {string} newDomain New domain value.
 * @param {boolean=} opt_decode Optional param for whether to decode new value.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) :
      newDomain;
  return this;
};


/**
 * @return {boolean} Whether the domain has been set.
 */
goog.Uri.prototype.hasDomain = function() {
  return !!this.domain_;
};


/**
 * @return {?number} The port number.
 */
goog.Uri.prototype.getPort = function() {
  return this.port_;
};


/**
 * Sets the port number.
 * @param {*} newPort Port number. Will be explicitly casted to a number.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();

  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error('Bad port number ' + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }

  return this;
};


/**
 * @return {boolean} Whether the port has been set.
 */
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};


/**
  * @return {string} The decoded path.
 */
goog.Uri.prototype.getPath = function() {
  return this.path_;
};


/**
 * Sets the path.
 * @param {string} newPath New path value.
 * @param {boolean=} opt_decode Optional param for whether to decode new value.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;
  return this;
};


/**
 * @return {boolean} Whether the path has been set.
 */
goog.Uri.prototype.hasPath = function() {
  return !!this.path_;
};


/**
 * @return {boolean} Whether the query string has been set.
 */
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== '';
};


/**
 * Sets the query data.
 * @param {goog.Uri.QueryData|string|undefined} queryData QueryData object.
 * @param {boolean=} opt_decode Optional param for whether to decode new value.
 *     Applies only if queryData is a string.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();

  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      // QueryData accepts encoded query string, so encode it if
      // opt_decode flag is not true.
      queryData = goog.Uri.encodeSpecialChars_(queryData,
                                               goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }

  return this;
};


/**
 * Sets the URI query.
 * @param {string} newQuery New query value.
 * @param {boolean=} opt_decode Optional param for whether to decode new value.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};


/**
 * @return {string} The encoded URI query, not including the ?.
 */
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};


/**
 * @return {string} The decoded URI query, not including the ?.
 */
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};


/**
 * Returns the query data.
 * @return {!goog.Uri.QueryData} QueryData object.
 */
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};


/**
 * @return {string} The encoded URI query, not including the ?.
 *
 * Warning: This method, unlike other getter methods, returns encoded
 * value, instead of decoded one.
 */
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};


/**
 * Sets the value of the named query parameters, clearing previous values for
 * that key.
 *
 * @param {string} key The parameter to set.
 * @param {*} value The new value.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};


/**
 * Sets the values of the named query parameters, clearing previous values for
 * that key.  Not new values will currently be moved to the end of the query
 * string.
 *
 * So, <code>goog.Uri.parse('foo?a=b&c=d&e=f').setParameterValues('c', ['new'])
 * </code> yields <tt>foo?a=b&e=f&c=new</tt>.</p>
 *
 * @param {string} key The parameter to set.
 * @param {*} values The new values. If values is a single
 *     string then it will be treated as the sole value.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();

  if (!goog.isArray(values)) {
    values = [String(values)];
  }

  this.queryData_.setValues(key, values);

  return this;
};


/**
 * Returns the value<b>s</b> for a given cgi parameter as a list of decoded
 * query parameter values.
 * @param {string} name The parameter to get values for.
 * @return {!Array.<?>} The values for a given cgi parameter as a list of
 *     decoded query parameter values.
 */
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};


/**
 * Returns the first value for a given cgi parameter or undefined if the given
 * parameter name does not appear in the query string.
 * @param {string} paramName Unescaped parameter name.
 * @return {string|undefined} The first value for a given cgi parameter or
 *     undefined if the given parameter name does not appear in the query
 *     string.
 */
goog.Uri.prototype.getParameterValue = function(paramName) {
  // NOTE(nicksantos): This type-cast is a lie when
  // preserveParameterTypesCompatibilityFlag is set to true.
  // But this should only be set to true in tests.
  return /** @type {string|undefined} */ (this.queryData_.get(paramName));
};


/**
 * @return {string} The URI fragment, not including the #.
 */
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};


/**
 * Sets the URI fragment.
 * @param {string} newFragment New fragment value.
 * @param {boolean=} opt_decode Optional param for whether to decode new value.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) :
                   newFragment;
  return this;
};


/**
 * @return {boolean} Whether the URI has a fragment set.
 */
goog.Uri.prototype.hasFragment = function() {
  return !!this.fragment_;
};


/**
 * Returns true if this has the same domain as that of uri2.
 * @param {goog.Uri} uri2 The URI object to compare to.
 * @return {boolean} true if same domain; false otherwise.
 */
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return ((!this.hasDomain() && !uri2.hasDomain()) ||
          this.getDomain() == uri2.getDomain()) &&
      ((!this.hasPort() && !uri2.hasPort()) ||
          this.getPort() == uri2.getPort());
};


/**
 * Adds a random parameter to the Uri.
 * @return {!goog.Uri} Reference to this Uri object.
 */
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());

  return this;
};


/**
 * Removes the named query parameter.
 *
 * @param {string} key The parameter to remove.
 * @return {!goog.Uri} Reference to this URI object.
 */
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};


/**
 * Sets whether Uri is read only. If this goog.Uri is read-only,
 * enforceReadOnly_ will be called at the start of any function that may modify
 * this Uri.
 * @param {boolean} isReadOnly whether this goog.Uri should be read only.
 * @return {!goog.Uri} Reference to this Uri object.
 */
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};


/**
 * @return {boolean} Whether the URI is read only.
 */
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};


/**
 * Checks if this Uri has been marked as read only, and if so, throws an error.
 * This should be called whenever any modifying function is called.
 */
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error('Tried to modify a read-only Uri');
  }
};


/**
 * Sets whether to ignore case.
 * NOTE: If there are already key/value pairs in the QueryData, and
 * ignoreCase_ is set to false, the keys will all be lower-cased.
 * @param {boolean} ignoreCase whether this goog.Uri should ignore case.
 * @return {!goog.Uri} Reference to this Uri object.
 */
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};


/**
 * @return {boolean} Whether to ignore case.
 */
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};


//==============================================================================
// Static members
//==============================================================================


/**
 * Creates a uri from the string form.  Basically an alias of new goog.Uri().
 * If a Uri object is passed to parse then it will return a clone of the object.
 *
 * @param {*} uri Raw URI string or instance of Uri
 *     object.
 * @param {boolean=} opt_ignoreCase Whether to ignore the case of parameter
 * names in #getParameterValue.
 * @return {!goog.Uri} The new URI object.
 */
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ?
         uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};


/**
 * Creates a new goog.Uri object from unencoded parts.
 *
 * @param {?string=} opt_scheme Scheme/protocol or full URI to parse.
 * @param {?string=} opt_userInfo username:password.
 * @param {?string=} opt_domain www.google.com.
 * @param {?number=} opt_port 9830.
 * @param {?string=} opt_path /some/path/to/a/file.html.
 * @param {string|goog.Uri.QueryData=} opt_query a=1&b=2.
 * @param {?string=} opt_fragment The fragment without the #.
 * @param {boolean=} opt_ignoreCase Whether to ignore parameter name case in
 *     #getParameterValue.
 *
 * @return {!goog.Uri} The new URI object.
 */
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port,
                           opt_path, opt_query, opt_fragment, opt_ignoreCase) {

  var uri = new goog.Uri(null, opt_ignoreCase);

  // Only set the parts if they are defined and not empty strings.
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);

  return uri;
};


/**
 * Resolves a relative Uri against a base Uri, accepting both strings and
 * Uri objects.
 *
 * @param {*} base Base Uri.
 * @param {*} rel Relative Uri.
 * @return {!goog.Uri} Resolved uri.
 */
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }

  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }

  return base.resolve(rel);
};


/**
 * Removes dot segments in given path component, as described in
 * RFC 3986, section 5.2.4.
 *
 * @param {string} path A non-empty path component.
 * @return {string} Path component with removed dot segments.
 */
goog.Uri.removeDotSegments = function(path) {
  if (path == '..' || path == '.') {
    return '';

  } else if (!goog.string.contains(path, './') &&
             !goog.string.contains(path, '/.')) {
    // This optimization detects uris which do not contain dot-segments,
    // and as a consequence do not require any processing.
    return path;

  } else {
    var leadingSlash = goog.string.startsWith(path, '/');
    var segments = path.split('/');
    var out = [];

    for (var pos = 0; pos < segments.length; ) {
      var segment = segments[pos++];

      if (segment == '.') {
        if (leadingSlash && pos == segments.length) {
          out.push('');
        }
      } else if (segment == '..') {
        if (out.length > 1 || out.length == 1 && out[0] != '') {
          out.pop();
        }
        if (leadingSlash && pos == segments.length) {
          out.push('');
        }
      } else {
        out.push(segment);
        leadingSlash = true;
      }
    }

    return out.join('/');
  }
};


/**
 * Decodes a value or returns the empty string if it isn't defined or empty.
 * @param {string|undefined} val Value to decode.
 * @param {boolean=} opt_preserveReserved If true, restricted characters will
 *     not be decoded.
 * @return {string} Decoded value.
 * @private
 */
goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
  // Don't use UrlDecode() here because val is not a query parameter.
  if (!val) {
    return '';
  }

  return opt_preserveReserved ? decodeURI(val) : decodeURIComponent(val);
};


/**
 * If unescapedPart is non null, then escapes any characters in it that aren't
 * valid characters in a url and also escapes any special characters that
 * appear in extra.
 *
 * @param {*} unescapedPart The string to encode.
 * @param {RegExp} extra A character set of characters in [\01-\177].
 * @param {boolean=} opt_removeDoubleEncoding If true, remove double percent
 *     encoding.
 * @return {?string} null iff unescapedPart == null.
 * @private
 */
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra,
    opt_removeDoubleEncoding) {
  if (goog.isString(unescapedPart)) {
    var encoded = encodeURI(unescapedPart).
        replace(extra, goog.Uri.encodeChar_);
    if (opt_removeDoubleEncoding) {
      // encodeURI double-escapes %XX sequences used to represent restricted
      // characters in some URI components, remove the double escaping here.
      encoded = goog.Uri.removeDoubleEncoding_(encoded);
    }
    return encoded;
  }
  return null;
};


/**
 * Converts a character in [\01-\177] to its unicode character equivalent.
 * @param {string} ch One character string.
 * @return {string} Encoded string.
 * @private
 */
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return '%' + ((n >> 4) & 0xf).toString(16) + (n & 0xf).toString(16);
};


/**
 * Removes double percent-encoding from a string.
 * @param  {string} doubleEncodedString String
 * @return {string} String with double encoding removed.
 * @private
 */
goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, '%$1');
};


/**
 * Regular expression for characters that are disallowed in the scheme or
 * userInfo part of the URI.
 * @type {RegExp}
 * @private
 */
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;


/**
 * Regular expression for characters that are disallowed in a relative path.
 * Colon is included due to RFC 3986 3.3.
 * @type {RegExp}
 * @private
 */
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;


/**
 * Regular expression for characters that are disallowed in an absolute path.
 * @type {RegExp}
 * @private
 */
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;


/**
 * Regular expression for characters that are disallowed in the query.
 * @type {RegExp}
 * @private
 */
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;


/**
 * Regular expression for characters that are disallowed in the fragment.
 * @type {RegExp}
 * @private
 */
goog.Uri.reDisallowedInFragment_ = /#/g;


/**
 * Checks whether two URIs have the same domain.
 * @param {string} uri1String First URI string.
 * @param {string} uri2String Second URI string.
 * @return {boolean} true if the two URIs have the same domain; false otherwise.
 */
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  // Differs from goog.uri.utils.haveSameDomain, since this ignores scheme.
  // TODO(gboyer): Have this just call goog.uri.util.haveSameDomain.
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] ==
             pieces2[goog.uri.utils.ComponentIndex.DOMAIN] &&
         pieces1[goog.uri.utils.ComponentIndex.PORT] ==
             pieces2[goog.uri.utils.ComponentIndex.PORT];
};



/**
 * Class used to represent URI query parameters.  It is essentially a hash of
 * name-value pairs, though a name can be present more than once.
 *
 * Has the same interface as the collections in goog.structs.
 *
 * @param {?string=} opt_query Optional encoded query string to parse into
 *     the object.
 * @param {goog.Uri=} opt_uri Optional uri object that should have its
 *     cache invalidated when this object updates. Deprecated -- this
 *     is no longer required.
 * @param {boolean=} opt_ignoreCase If true, ignore the case of the parameter
 *     name in #get.
 * @constructor
 * @final
 */
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  /**
   * Encoded query string, or null if it requires computing from the key map.
   * @type {?string}
   * @private
   */
  this.encodedQuery_ = opt_query || null;

  /**
   * If true, ignore the case of the parameter name in #get.
   * @type {boolean}
   * @private
   */
  this.ignoreCase_ = !!opt_ignoreCase;
};


/**
 * If the underlying key map is not yet initialized, it parses the
 * query string and fills the map with parsed data.
 * @private
 */
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map();
    this.count_ = 0;

    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split('&');
      for (var i = 0; i < pairs.length; i++) {
        var indexOfEquals = pairs[i].indexOf('=');
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : '');
      }
    }
  }
};


/**
 * Creates a new query data instance from a map of names and values.
 *
 * @param {!goog.structs.Map|!Object} map Map of string parameter
 *     names to parameter value. If parameter value is an array, it is
 *     treated as if the key maps to each individual value in the
 *     array.
 * @param {goog.Uri=} opt_uri URI object that should have its cache
 *     invalidated when this object updates.
 * @param {boolean=} opt_ignoreCase If true, ignore the case of the parameter
 *     name in #get.
 * @return {!goog.Uri.QueryData} The populated query data instance.
 */
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == 'undefined') {
    throw Error('Keys are undefined');
  }

  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};


/**
 * Creates a new query data instance from parallel arrays of parameter names
 * and values. Allows for duplicate parameter names. Throws an error if the
 * lengths of the arrays differ.
 *
 * @param {Array.<string>} keys Parameter names.
 * @param {Array.<?>} values Parameter values.
 * @param {goog.Uri=} opt_uri URI object that should have its cache
 *     invalidated when this object updates.
 * @param {boolean=} opt_ignoreCase If true, ignore the case of the parameter
 *     name in #get.
 * @return {!goog.Uri.QueryData} The populated query data instance.
 */
goog.Uri.QueryData.createFromKeysValues = function(
    keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error('Mismatched lengths for keys/values');
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0; i < keys.length; i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};


/**
 * The map containing name/value or name/array-of-values pairs.
 * May be null if it requires parsing from the query string.
 *
 * We need to use a Map because we cannot guarantee that the key names will
 * not be problematic for IE.
 *
 * @type {goog.structs.Map.<string, Array.<*>>}
 * @private
 */
goog.Uri.QueryData.prototype.keyMap_ = null;


/**
 * The number of params, or null if it requires computing.
 * @type {?number}
 * @private
 */
goog.Uri.QueryData.prototype.count_ = null;


/**
 * @return {?number} The number of parameters.
 */
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};


/**
 * Adds a key value pair.
 * @param {string} key Name.
 * @param {*} value Value.
 * @return {!goog.Uri.QueryData} Instance of this object.
 */
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();

  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, (values = []));
  }
  values.push(value);
  this.count_++;
  return this;
};


/**
 * Removes all the params with the given key.
 * @param {string} key Name.
 * @return {boolean} Whether any parameter was removed.
 */
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();

  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();

    // Decrement parameter count.
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};


/**
 * Clears the parameters.
 */
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};


/**
 * @return {boolean} Whether we have any parameters.
 */
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};


/**
 * Whether there is a parameter with the given name
 * @param {string} key The parameter name to check for.
 * @return {boolean} Whether there is a parameter with the given name.
 */
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};


/**
 * Whether there is a parameter with the given value.
 * @param {*} value The value to check for.
 * @return {boolean} Whether there is a parameter with the given value.
 */
goog.Uri.QueryData.prototype.containsValue = function(value) {
  // NOTE(arv): This solution goes through all the params even if it was the
  // first param. We can get around this by not reusing code or by switching to
  // iterators.
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};


/**
 * Returns all the keys of the parameters. If a key is used multiple times
 * it will be included multiple times in the returned array
 * @return {!Array.<string>} All the keys of the parameters.
 */
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  // We need to get the values to know how many keys to add.
  var vals = /** @type {Array.<*>} */ (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0; i < keys.length; i++) {
    var val = vals[i];
    for (var j = 0; j < val.length; j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};


/**
 * Returns all the values of the parameters with the given name. If the query
 * data has no such key this will return an empty array. If no key is given
 * all values wil be returned.
 * @param {string=} opt_key The name of the parameter to get the values for.
 * @return {!Array.<?>} All the values of the parameters with the given name.
 */
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    // Return all values.
    var values = this.keyMap_.getValues();
    for (var i = 0; i < values.length; i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};


/**
 * Sets a key value pair and removes all other keys with the same value.
 *
 * @param {string} key Name.
 * @param {*} value Value.
 * @return {!goog.Uri.QueryData} Instance of this object.
 */
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();

  // TODO(chrishenry): This could be better written as
  // this.remove(key), this.add(key, value), but that would reorder
  // the key (since the key is first removed and then added at the
  // end) and we would have to fix unit tests that depend on key
  // ordering.
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};


/**
 * Returns the first value associated with the key. If the query data has no
 * such key this will return undefined or the optional default.
 * @param {string} key The name of the parameter to get the value for.
 * @param {*=} opt_default The default value to return if the query data
 *     has no such key.
 * @return {*} The first string value associated with the key, or opt_default
 *     if there's no value.
 */
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};


/**
 * Sets the values for a key. If the key already exists, this will
 * override all of the existing values that correspond to the key.
 * @param {string} key The key to set values for.
 * @param {Array.<?>} values The values to set.
 */
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);

  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};


/**
 * @return {string} Encoded query string.
 * @override
 */
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }

  if (!this.keyMap_) {
    return '';
  }

  var sb = [];

  // In the past, we use this.getKeys() and this.getVals(), but that
  // generates a lot of allocations as compared to simply iterating
  // over the keys.
  var keys = this.keyMap_.getKeys();
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0; j < val.length; j++) {
      var param = encodedKey;
      // Ensure that null and undefined are encoded into the url as
      // literal strings.
      if (val[j] !== '') {
        param += '=' + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }

  return this.encodedQuery_ = sb.join('&');
};


/**
 * @return {string} Decoded query string.
 */
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};


/**
 * Invalidate the cache.
 * @private
 */
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};


/**
 * Removes all keys that are not in the provided list. (Modifies this object.)
 * @param {Array.<string>} keys The desired keys.
 * @return {!goog.Uri.QueryData} a reference to this object.
 */
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(
      function(value, key) {
        if (!goog.array.contains(keys, key)) {
          this.remove(key);
        }
      }, this);
  return this;
};


/**
 * Clone the query data instance.
 * @return {!goog.Uri.QueryData} New instance of the QueryData object.
 */
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData();
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};


/**
 * Helper function to get the key name from a JavaScript object. Converts
 * the object to a string, and to lower case if necessary.
 * @private
 * @param {*} arg The object to get a key name from.
 * @return {string} valid key name which can be looked up in #keyMap_.
 */
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};


/**
 * Ignore case in parameter names.
 * NOTE: If there are already key/value pairs in the QueryData, and
 * ignoreCase_ is set to false, the keys will all be lower-cased.
 * @param {boolean} ignoreCase whether this goog.Uri should ignore case.
 */
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(
        function(value, key) {
          var lowerCase = key.toLowerCase();
          if (key != lowerCase) {
            this.remove(key);
            this.setValues(lowerCase, value);
          }
        }, this);
  }
  this.ignoreCase_ = ignoreCase;
};


/**
 * Extends a query data object with another query data or map like object. This
 * operates 'in-place', it does not create a new QueryData object.
 *
 * @param {...(goog.Uri.QueryData|goog.structs.Map|Object)} var_args The object
 *     from which key value pairs will be copied.
 */
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0; i < arguments.length; i++) {
    var data = arguments[i];
    goog.structs.forEach(data,
        /** @this {goog.Uri.QueryData} */
        function(value, key) {
          this.add(key, value);
        }, this);
  }
};

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Definition of the disposable interface.  A disposable object
 * has a dispose method to to clean up references and resources.
 * @author nnaze@google.com (Nathan Naze)
 */


goog.provide('goog.disposable.IDisposable');



/**
 * Interface for a disposable object.  If a instance requires cleanup
 * (references COM objects, DOM notes, or other disposable objects), it should
 * implement this interface (it may subclass goog.Disposable).
 * @interface
 */
goog.disposable.IDisposable = function() {};


/**
 * Disposes of the object and its resources.
 * @return {void} Nothing.
 */
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;


/**
 * @return {boolean} Whether the object has been disposed of.
 */
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implements the disposable interface. The dispose method is used
 * to clean up references and resources.
 * @author arv@google.com (Erik Arvidsson)
 */


goog.provide('goog.Disposable');
/** @suppress {extraProvide} */
goog.provide('goog.dispose');
/** @suppress {extraProvide} */
goog.provide('goog.disposeAll');

goog.require('goog.disposable.IDisposable');



/**
 * Class that provides the basic implementation for disposable objects. If your
 * class holds one or more references to COM objects, DOM nodes, or other
 * disposable objects, it should extend this class or implement the disposable
 * interface (defined in goog.disposable.IDisposable).
 * @constructor
 * @implements {goog.disposable.IDisposable}
 */
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = new Error().stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  // Support sealing
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};


/**
 * @enum {number} Different monitoring modes for Disposable.
 */
goog.Disposable.MonitoringMode = {
  /**
   * No monitoring.
   */
  OFF: 0,
  /**
   * Creating and disposing the goog.Disposable instances is monitored. All
   * disposable objects need to call the {@code goog.Disposable} base
   * constructor. The PERMANENT mode must be switched on before creating any
   * goog.Disposable instances.
   */
  PERMANENT: 1,
  /**
   * INTERACTIVE mode can be switched on and off on the fly without producing
   * errors. It also doesn't warn if the disposable objects don't call the
   * {@code goog.Disposable} base constructor.
   */
  INTERACTIVE: 2
};


/**
 * @define {number} The monitoring mode of the goog.Disposable
 *     instances. Default is OFF. Switching on the monitoring is only
 *     recommended for debugging because it has a significant impact on
 *     performance and memory usage. If switched off, the monitoring code
 *     compiles down to 0 bytes.
 */
goog.define('goog.Disposable.MONITORING_MODE', 0);


/**
 * @define {boolean} Whether to attach creation stack to each created disposable
 *     instance; This is only relevant for when MonitoringMode != OFF.
 */
goog.define('goog.Disposable.INCLUDE_STACK_ON_CREATION', true);


/**
 * Maps the unique ID of every undisposed {@code goog.Disposable} object to
 * the object itself.
 * @type {!Object.<number, !goog.Disposable>}
 * @private
 */
goog.Disposable.instances_ = {};


/**
 * @return {!Array.<!goog.Disposable>} All {@code goog.Disposable} objects that
 *     haven't been disposed of.
 */
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};


/**
 * Clears the registry of undisposed objects but doesn't dispose of them.
 */
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};


/**
 * Whether the object has been disposed of.
 * @type {boolean}
 * @private
 */
goog.Disposable.prototype.disposed_ = false;


/**
 * Callbacks to invoke when this object is disposed.
 * @type {Array.<!Function>}
 * @private
 */
goog.Disposable.prototype.onDisposeCallbacks_;


/**
 * If monitoring the goog.Disposable instances is enabled, stores the creation
 * stack trace of the Disposable instance.
 * @const {string}
 */
goog.Disposable.prototype.creationStack;


/**
 * @return {boolean} Whether the object has been disposed of.
 * @override
 */
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};


/**
 * @return {boolean} Whether the object has been disposed of.
 * @deprecated Use {@link #isDisposed} instead.
 */
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;


/**
 * Disposes of the object. If the object hasn't already been disposed of, calls
 * {@link #disposeInternal}. Classes that extend {@code goog.Disposable} should
 * override {@link #disposeInternal} in order to delete references to COM
 * objects, DOM nodes, and other disposable objects. Reentrant.
 *
 * @return {void} Nothing.
 * @override
 */
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    // Set disposed_ to true first, in case during the chain of disposal this
    // gets disposed recursively.
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE ==
          goog.Disposable.MonitoringMode.PERMANENT &&
          !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + ' did not call the goog.Disposable base ' +
            'constructor or was disposed of after a clearUndisposedObjects ' +
            'call');
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};


/**
 * Associates a disposable object with this object so that they will be disposed
 * together.
 * @param {goog.disposable.IDisposable} disposable that will be disposed when
 *     this object is disposed.
 */
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};


/**
 * Invokes a callback function when this object is disposed. Callbacks are
 * invoked in the order in which they were added.
 * @param {function(this:T):?} callback The callback function.
 * @param {T=} opt_scope An optional scope to call the callback in.
 * @template T
 */
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }

  this.onDisposeCallbacks_.push(
      goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};


/**
 * Deletes or nulls out any references to COM objects, DOM nodes, or other
 * disposable objects. Classes that extend {@code goog.Disposable} should
 * override this method.
 * Not reentrant. To avoid calling it twice, it must only be called from the
 * subclass' {@code disposeInternal} method. Everywhere else the public
 * {@code dispose} method must be used.
 * For example:
 * <pre>
 *   mypackage.MyClass = function() {
 *     mypackage.MyClass.base(this, 'constructor');
 *     // Constructor logic specific to MyClass.
 *     ...
 *   };
 *   goog.inherits(mypackage.MyClass, goog.Disposable);
 *
 *   mypackage.MyClass.prototype.disposeInternal = function() {
 *     // Dispose logic specific to MyClass.
 *     ...
 *     // Call superclass's disposeInternal at the end of the subclass's, like
 *     // in C++, to avoid hard-to-catch issues.
 *     mypackage.MyClass.base(this, 'disposeInternal');
 *   };
 * </pre>
 * @protected
 */
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};


/**
 * Returns True if we can verify the object is disposed.
 * Calls {@code isDisposed} on the argument if it supports it.  If obj
 * is not an object with an isDisposed() method, return false.
 * @param {*} obj The object to investigate.
 * @return {boolean} True if we can verify the object is disposed.
 */
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == 'function') {
    return obj.isDisposed();
  }
  return false;
};


/**
 * Calls {@code dispose} on the argument if it supports it. If obj is not an
 *     object with a dispose() method, this is a no-op.
 * @param {*} obj The object to dispose of.
 */
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == 'function') {
    obj.dispose();
  }
};


/**
 * Calls {@code dispose} on each member of the list that supports it. (If the
 * member is an ArrayLike, then {@code goog.disposeAll()} will be called
 * recursively on each of its members.) If the member is not an object with a
 * {@code dispose()} method, then it is ignored.
 * @param {...*} var_args The list.
 */
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length; i < len; ++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.events.EventId');



/**
 * A templated class that is used when registering for events. Typical usage:
 * <code>
 *   /** @type {goog.events.EventId.<MyEventObj>}
 *   var myEventId = new goog.events.EventId(
 *       goog.events.getUniqueId(('someEvent'));
 *
 *   // No need to cast or declare here since the compiler knows the correct
 *   // type of 'evt' (MyEventObj).
 *   something.listen(myEventId, function(evt) {});
 * </code>
 *
 * @param {string} eventId
 * @template T
 * @constructor
 * @struct
 * @final
 */
goog.events.EventId = function(eventId) {
  /** @const */ this.id = eventId;
};


/**
 * @override
 */
goog.events.EventId.prototype.toString = function() {
  return this.id;
};

// Copyright 2012 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview An interface for a listenable JavaScript object.
 * @author chrishenry@google.com (Chris Henry)
 */

goog.provide('goog.events.Listenable');
goog.provide('goog.events.ListenableKey');

/** @suppress {extraRequire} */
goog.require('goog.events.EventId');



/**
 * A listenable interface. A listenable is an object with the ability
 * to dispatch/broadcast events to "event listeners" registered via
 * listen/listenOnce.
 *
 * The interface allows for an event propagation mechanism similar
 * to one offered by native browser event targets, such as
 * capture/bubble mechanism, stopping propagation, and preventing
 * default actions. Capture/bubble mechanism depends on the ancestor
 * tree constructed via {@code #getParentEventTarget}; this tree
 * must be directed acyclic graph. The meaning of default action(s)
 * in preventDefault is specific to a particular use case.
 *
 * Implementations that do not support capture/bubble or can not have
 * a parent listenable can simply not implement any ability to set the
 * parent listenable (and have {@code #getParentEventTarget} return
 * null).
 *
 * Implementation of this class can be used with or independently from
 * goog.events.
 *
 * Implementation must call {@code #addImplementation(implClass)}.
 *
 * @interface
 * @see goog.events
 * @see http://www.w3.org/TR/DOM-Level-2-Events/events.html
 */
goog.events.Listenable = function() {};


/**
 * An expando property to indicate that an object implements
 * goog.events.Listenable.
 *
 * See addImplementation/isImplementedBy.
 *
 * @type {string}
 * @const
 */
goog.events.Listenable.IMPLEMENTED_BY_PROP =
    'closure_listenable_' + ((Math.random() * 1e6) | 0);


/**
 * Marks a given class (constructor) as an implementation of
 * Listenable, do that we can query that fact at runtime. The class
 * must have already implemented the interface.
 * @param {!Function} cls The class constructor. The corresponding
 *     class must have already implemented the interface.
 */
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};


/**
 * @param {Object} obj The object to check.
 * @return {boolean} Whether a given instance implements Listenable. The
 *     class/superclass of the instance must call addImplementation.
 */
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};


/**
 * Adds an event listener. A listener can only be added once to an
 * object and if it is added again the key for the listener is
 * returned. Note that if the existing listener is a one-off listener
 * (registered via listenOnce), it will no longer be a one-off
 * listener after a call to listen().
 *
 * @param {string|!goog.events.EventId.<EVENTOBJ>} type The event type id.
 * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback
 *     method.
 * @param {boolean=} opt_useCapture Whether to fire in capture phase
 *     (defaults to false).
 * @param {SCOPE=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} Unique key for the listener.
 * @template SCOPE,EVENTOBJ
 */
goog.events.Listenable.prototype.listen;


/**
 * Adds an event listener that is removed automatically after the
 * listener fired once.
 *
 * If an existing listener already exists, listenOnce will do
 * nothing. In particular, if the listener was previously registered
 * via listen(), listenOnce() will not turn the listener into a
 * one-off listener. Similarly, if there is already an existing
 * one-off listener, listenOnce does not modify the listeners (it is
 * still a once listener).
 *
 * @param {string|!goog.events.EventId.<EVENTOBJ>} type The event type id.
 * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback
 *     method.
 * @param {boolean=} opt_useCapture Whether to fire in capture phase
 *     (defaults to false).
 * @param {SCOPE=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} Unique key for the listener.
 * @template SCOPE,EVENTOBJ
 */
goog.events.Listenable.prototype.listenOnce;


/**
 * Removes an event listener which was added with listen() or listenOnce().
 *
 * @param {string|!goog.events.EventId.<EVENTOBJ>} type The event type id.
 * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback
 *     method.
 * @param {boolean=} opt_useCapture Whether to fire in capture phase
 *     (defaults to false).
 * @param {SCOPE=} opt_listenerScope Object in whose scope to call
 *     the listener.
 * @return {boolean} Whether any listener was removed.
 * @template SCOPE,EVENTOBJ
 */
goog.events.Listenable.prototype.unlisten;


/**
 * Removes an event listener which was added with listen() by the key
 * returned by listen().
 *
 * @param {goog.events.ListenableKey} key The key returned by
 *     listen() or listenOnce().
 * @return {boolean} Whether any listener was removed.
 */
goog.events.Listenable.prototype.unlistenByKey;


/**
 * Dispatches an event (or event like object) and calls all listeners
 * listening for events of this type. The type of the event is decided by the
 * type property on the event object.
 *
 * If any of the listeners returns false OR calls preventDefault then this
 * function will return false.  If one of the capture listeners calls
 * stopPropagation, then the bubble listeners won't fire.
 *
 * @param {goog.events.EventLike} e Event object.
 * @return {boolean} If anyone called preventDefault on the event object (or
 *     if any of the listeners returns false) this will also return false.
 */
goog.events.Listenable.prototype.dispatchEvent;


/**
 * Removes all listeners from this listenable. If type is specified,
 * it will only remove listeners of the particular type. otherwise all
 * registered listeners will be removed.
 *
 * @param {string=} opt_type Type of event to remove, default is to
 *     remove all types.
 * @return {number} Number of listeners removed.
 */
goog.events.Listenable.prototype.removeAllListeners;


/**
 * Returns the parent of this event target to use for capture/bubble
 * mechanism.
 *
 * NOTE(chrishenry): The name reflects the original implementation of
 * custom event target ({@code goog.events.EventTarget}). We decided
 * that changing the name is not worth it.
 *
 * @return {goog.events.Listenable} The parent EventTarget or null if
 *     there is no parent.
 */
goog.events.Listenable.prototype.getParentEventTarget;


/**
 * Fires all registered listeners in this listenable for the given
 * type and capture mode, passing them the given eventObject. This
 * does not perform actual capture/bubble. Only implementors of the
 * interface should be using this.
 *
 * @param {string|!goog.events.EventId.<EVENTOBJ>} type The type of the
 *     listeners to fire.
 * @param {boolean} capture The capture mode of the listeners to fire.
 * @param {EVENTOBJ} eventObject The event object to fire.
 * @return {boolean} Whether all listeners succeeded without
 *     attempting to prevent default behavior. If any listener returns
 *     false or called goog.events.Event#preventDefault, this returns
 *     false.
 * @template EVENTOBJ
 */
goog.events.Listenable.prototype.fireListeners;


/**
 * Gets all listeners in this listenable for the given type and
 * capture mode.
 *
 * @param {string|!goog.events.EventId} type The type of the listeners to fire.
 * @param {boolean} capture The capture mode of the listeners to fire.
 * @return {!Array.<goog.events.ListenableKey>} An array of registered
 *     listeners.
 * @template EVENTOBJ
 */
goog.events.Listenable.prototype.getListeners;


/**
 * Gets the goog.events.ListenableKey for the event or null if no such
 * listener is in use.
 *
 * @param {string|!goog.events.EventId.<EVENTOBJ>} type The name of the event
 *     without the 'on' prefix.
 * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener The
 *     listener function to get.
 * @param {boolean} capture Whether the listener is a capturing listener.
 * @param {SCOPE=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} the found listener or null if not found.
 * @template SCOPE,EVENTOBJ
 */
goog.events.Listenable.prototype.getListener;


/**
 * Whether there is any active listeners matching the specified
 * signature. If either the type or capture parameters are
 * unspecified, the function will match on the remaining criteria.
 *
 * @param {string|!goog.events.EventId.<EVENTOBJ>=} opt_type Event type.
 * @param {boolean=} opt_capture Whether to check for capture or bubble
 *     listeners.
 * @return {boolean} Whether there is any active listeners matching
 *     the requested type and/or capture phase.
 * @template EVENTOBJ
 */
goog.events.Listenable.prototype.hasListener;



/**
 * An interface that describes a single registered listener.
 * @interface
 */
goog.events.ListenableKey = function() {};


/**
 * Counter used to create a unique key
 * @type {number}
 * @private
 */
goog.events.ListenableKey.counter_ = 0;


/**
 * Reserves a key to be used for ListenableKey#key field.
 * @return {number} A number to be used to fill ListenableKey#key
 *     field.
 */
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};


/**
 * The source event target.
 * @type {!(Object|goog.events.Listenable|goog.events.EventTarget)}
 */
goog.events.ListenableKey.prototype.src;


/**
 * The event type the listener is listening to.
 * @type {string}
 */
goog.events.ListenableKey.prototype.type;


/**
 * The listener function.
 * @type {function(?):?|{handleEvent:function(?):?}|null}
 */
goog.events.ListenableKey.prototype.listener;


/**
 * Whether the listener works on capture phase.
 * @type {boolean}
 */
goog.events.ListenableKey.prototype.capture;


/**
 * The 'this' object for the listener function's scope.
 * @type {Object}
 */
goog.events.ListenableKey.prototype.handler;


/**
 * A globally unique number to identify the key.
 * @type {number}
 */
goog.events.ListenableKey.prototype.key;

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Listener object.
 * @see ../demos/events.html
 */

goog.provide('goog.events.Listener');

goog.require('goog.events.ListenableKey');



/**
 * Simple class that stores information about a listener
 * @param {!Function} listener Callback function.
 * @param {Function} proxy Wrapper for the listener that patches the event.
 * @param {EventTarget|goog.events.Listenable} src Source object for
 *     the event.
 * @param {string} type Event type.
 * @param {boolean} capture Whether in capture or bubble phase.
 * @param {Object=} opt_handler Object in whose context to execute the callback.
 * @implements {goog.events.ListenableKey}
 * @constructor
 */
goog.events.Listener = function(
    listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = new Error().stack;
  }

  /**
   * Callback function.
   * @type {Function}
   */
  this.listener = listener;

  /**
   * A wrapper over the original listener. This is used solely to
   * handle native browser events (it is used to simulate the capture
   * phase and to patch the event object).
   * @type {Function}
   */
  this.proxy = proxy;

  /**
   * Object or node that callback is listening to
   * @type {EventTarget|goog.events.Listenable}
   */
  this.src = src;

  /**
   * The event type.
   * @const {string}
   */
  this.type = type;

  /**
   * Whether the listener is being called in the capture or bubble phase
   * @const {boolean}
   */
  this.capture = !!capture;

  /**
   * Optional object whose context to execute the listener in
   * @type {Object|undefined}
   */
  this.handler = opt_handler;

  /**
   * The key of the listener.
   * @const {number}
   * @override
   */
  this.key = goog.events.ListenableKey.reserveKey();

  /**
   * Whether to remove the listener after it has been called.
   * @type {boolean}
   */
  this.callOnce = false;

  /**
   * Whether the listener has been removed.
   * @type {boolean}
   */
  this.removed = false;
};


/**
 * @define {boolean} Whether to enable the monitoring of the
 *     goog.events.Listener instances. Switching on the monitoring is only
 *     recommended for debugging because it has a significant impact on
 *     performance and memory usage. If switched off, the monitoring code
 *     compiles down to 0 bytes.
 */
goog.define('goog.events.Listener.ENABLE_MONITORING', false);


/**
 * If monitoring the goog.events.Listener instances is enabled, stores the
 * creation stack trace of the Disposable instance.
 * @type {string}
 */
goog.events.Listener.prototype.creationStack;


/**
 * Marks this listener as removed. This also remove references held by
 * this listener object (such as listener and event source).
 */
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A map of listeners that provides utility functions to
 * deal with listeners on an event target. Used by
 * {@code goog.events.EventTarget}.
 *
 * WARNING: Do not use this class from outside goog.events package.
 *
 * @visibility {//closure/goog/bin/sizetests:__pkg__}
 * @visibility {//closure/goog/events:__pkg__}
 * @visibility {//closure/goog/labs/events:__pkg__}
 */

goog.provide('goog.events.ListenerMap');

goog.require('goog.array');
goog.require('goog.events.Listener');
goog.require('goog.object');



/**
 * Creates a new listener map.
 * @param {EventTarget|goog.events.Listenable} src The src object.
 * @constructor
 * @final
 */
goog.events.ListenerMap = function(src) {
  /** @type {EventTarget|goog.events.Listenable} */
  this.src = src;

  /**
   * Maps of event type to an array of listeners.
   * @type {Object.<string, !Array.<!goog.events.Listener>>}
   */
  this.listeners = {};

  /**
   * The count of types in this map that have registered listeners.
   * @private {number}
   */
  this.typeCount_ = 0;
};


/**
 * @return {number} The count of event types in this map that actually
 *     have registered listeners.
 */
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};


/**
 * @return {number} Total number of registered listeners.
 */
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};


/**
 * Adds an event listener. A listener can only be added once to an
 * object and if it is added again the key for the listener is
 * returned.
 *
 * Note that a one-off listener will not change an existing listener,
 * if any. On the other hand a normal listener will change existing
 * one-off listener to become a normal listener.
 *
 * @param {string|!goog.events.EventId} type The listener event type.
 * @param {!Function} listener This listener callback method.
 * @param {boolean} callOnce Whether the listener is a one-off
 *     listener.
 * @param {boolean=} opt_useCapture The capture mode of the listener.
 * @param {Object=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} Unique key for the listener.
 */
goog.events.ListenerMap.prototype.add = function(
    type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }

  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(
      listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      // Ensure that, if there is an existing callOnce listener, it is no
      // longer a callOnce listener.
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(
        listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};


/**
 * Removes a matching listener.
 * @param {string|!goog.events.EventId} type The listener event type.
 * @param {!Function} listener This listener callback method.
 * @param {boolean=} opt_useCapture The capture mode of the listener.
 * @param {Object=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {boolean} Whether any listener was removed.
 */
goog.events.ListenerMap.prototype.remove = function(
    type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }

  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(
      listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};


/**
 * Removes the given listener object.
 * @param {goog.events.ListenableKey} listener The listener to remove.
 * @return {boolean} Whether the listener is removed.
 */
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }

  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};


/**
 * Removes all listeners from this map. If opt_type is provided, only
 * listeners that match the given type are removed.
 * @param {string|!goog.events.EventId=} opt_type Type of event to remove.
 * @return {number} Number of listeners removed.
 */
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0; i < listenerArray.length; i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};


/**
 * Gets all listeners that match the given type and capture mode. The
 * returned array is a copy (but the listener objects are not).
 * @param {string|!goog.events.EventId} type The type of the listeners
 *     to retrieve.
 * @param {boolean} capture The capture mode of the listeners to retrieve.
 * @return {!Array.<goog.events.ListenableKey>} An array of matching
 *     listeners.
 */
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0; i < listenerArray.length; ++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};


/**
 * Gets the goog.events.ListenableKey for the event or null if no such
 * listener is in use.
 *
 * @param {string|!goog.events.EventId} type The type of the listener
 *     to retrieve.
 * @param {!Function} listener The listener function to get.
 * @param {boolean} capture Whether the listener is a capturing listener.
 * @param {Object=} opt_listenerScope Object in whose scope to call the
 *     listener.
 * @return {goog.events.ListenableKey} the found listener or null if not found.
 */
goog.events.ListenerMap.prototype.getListener = function(
    type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(
        listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};


/**
 * Whether there is a matching listener. If either the type or capture
 * parameters are unspecified, the function will match on the
 * remaining criteria.
 *
 * @param {string|!goog.events.EventId=} opt_type The type of the listener.
 * @param {boolean=} opt_capture The capture mode of the listener.
 * @return {boolean} Whether there is an active listener matching
 *     the requested type and/or capture phase.
 */
goog.events.ListenerMap.prototype.hasListener = function(
    opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : '';
  var hasCapture = goog.isDef(opt_capture);

  return goog.object.some(
      this.listeners, function(listenerArray, type) {
        for (var i = 0; i < listenerArray.length; ++i) {
          if ((!hasType || listenerArray[i].type == typeStr) &&
              (!hasCapture || listenerArray[i].capture == opt_capture)) {
            return true;
          }
        }

        return false;
      });
};


/**
 * Finds the index of a matching goog.events.Listener in the given
 * listenerArray.
 * @param {!Array.<!goog.events.Listener>} listenerArray Array of listener.
 * @param {!Function} listener The listener function.
 * @param {boolean=} opt_useCapture The capture flag for the listener.
 * @param {Object=} opt_listenerScope The listener scope.
 * @return {number} The index of the matching listener within the
 *     listenerArray.
 * @private
 */
goog.events.ListenerMap.findListenerIndex_ = function(
    listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0; i < listenerArray.length; ++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed &&
        listenerObj.listener == listener &&
        listenerObj.capture == !!opt_useCapture &&
        listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A base class for event objects.
 *
 */


goog.provide('goog.events.Event');
goog.provide('goog.events.EventLike');

/**
 * goog.events.Event no longer depends on goog.Disposable. Keep requiring
 * goog.Disposable here to not break projects which assume this dependency.
 * @suppress {extraRequire}
 */
goog.require('goog.Disposable');
goog.require('goog.events.EventId');


/**
 * A typedef for event like objects that are dispatchable via the
 * goog.events.dispatchEvent function. strings are treated as the type for a
 * goog.events.Event. Objects are treated as an extension of a new
 * goog.events.Event with the type property of the object being used as the type
 * of the Event.
 * @typedef {string|Object|goog.events.Event|goog.events.EventId}
 */
goog.events.EventLike;



/**
 * A base class for event objects, so that they can support preventDefault and
 * stopPropagation.
 *
 * @param {string|!goog.events.EventId} type Event Type.
 * @param {Object=} opt_target Reference to the object that is the target of
 *     this event. It has to implement the {@code EventTarget} interface
 *     declared at {@link http://developer.mozilla.org/en/DOM/EventTarget}.
 * @constructor
 */
goog.events.Event = function(type, opt_target) {
  /**
   * Event type.
   * @type {string}
   */
  this.type = type instanceof goog.events.EventId ? String(type) : type;

  /**
   * TODO(tbreisacher): The type should probably be
   * EventTarget|goog.events.EventTarget.
   *
   * Target of the event.
   * @type {Object|undefined}
   */
  this.target = opt_target;

  /**
   * Object that had the listener attached.
   * @type {Object|undefined}
   */
  this.currentTarget = this.target;

  /**
   * Whether to cancel the event in internal capture/bubble processing for IE.
   * @type {boolean}
   * @public
   * @suppress {underscore|visibility} Technically public, but referencing this
   *     outside this package is strongly discouraged.
   */
  this.propagationStopped_ = false;

  /**
   * Whether the default action has been prevented.
   * This is a property to match the W3C specification at
   * {@link http://www.w3.org/TR/DOM-Level-3-Events/
   * #events-event-type-defaultPrevented}.
   * Must be treated as read-only outside the class.
   * @type {boolean}
   */
  this.defaultPrevented = false;

  /**
   * Return value for in internal capture/bubble processing for IE.
   * @type {boolean}
   * @public
   * @suppress {underscore|visibility} Technically public, but referencing this
   *     outside this package is strongly discouraged.
   */
  this.returnValue_ = true;
};


/**
 * For backwards compatibility (goog.events.Event used to inherit
 * goog.Disposable).
 * @deprecated Events don't need to be disposed.
 */
goog.events.Event.prototype.disposeInternal = function() {
};


/**
 * For backwards compatibility (goog.events.Event used to inherit
 * goog.Disposable).
 * @deprecated Events don't need to be disposed.
 */
goog.events.Event.prototype.dispose = function() {
};


/**
 * Stops event propagation.
 */
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};


/**
 * Prevents the default action, for example a link redirecting to a url.
 */
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};


/**
 * Stops the propagation of the event. It is equivalent to
 * {@code e.stopPropagation()}, but can be used as the callback argument of
 * {@link goog.events.listen} without declaring another function.
 * @param {!goog.events.Event} e An event.
 */
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};


/**
 * Prevents the default action. It is equivalent to
 * {@code e.preventDefault()}, but can be used as the callback argument of
 * {@link goog.events.listen} without declaring another function.
 * @param {!goog.events.Event} e An event.
 */
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Browser capability checks for the events package.
 *
 */


goog.provide('goog.events.BrowserFeature');

goog.require('goog.userAgent');


/**
 * Enum of browser capabilities.
 * @enum {boolean}
 */
goog.events.BrowserFeature = {
  /**
   * Whether the button attribute of the event is W3C compliant.  False in
   * Internet Explorer prior to version 9; document-version dependent.
   */
  HAS_W3C_BUTTON: !goog.userAgent.IE ||
      goog.userAgent.isDocumentModeOrHigher(9),

  /**
   * Whether the browser supports full W3C event model.
   */
  HAS_W3C_EVENT_SUPPORT: !goog.userAgent.IE ||
      goog.userAgent.isDocumentModeOrHigher(9),

  /**
   * To prevent default in IE7-8 for certain keydown events we need set the
   * keyCode to -1.
   */
  SET_KEY_CODE_TO_PREVENT_DEFAULT: goog.userAgent.IE &&
      !goog.userAgent.isVersionOrHigher('9'),

  /**
   * Whether the {@code navigator.onLine} property is supported.
   */
  HAS_NAVIGATOR_ONLINE_PROPERTY: !goog.userAgent.WEBKIT ||
      goog.userAgent.isVersionOrHigher('528'),

  /**
   * Whether HTML5 network online/offline events are supported.
   */
  HAS_HTML5_NETWORK_EVENT_SUPPORT:
      goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher('1.9b') ||
      goog.userAgent.IE && goog.userAgent.isVersionOrHigher('8') ||
      goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher('9.5') ||
      goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher('528'),

  /**
   * Whether HTML5 network events fire on document.body, or otherwise the
   * window.
   */
  HTML5_NETWORK_EVENTS_FIRE_ON_BODY:
      goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher('8') ||
      goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9'),

  /**
   * Whether touch is enabled in the browser.
   */
  TOUCH_ENABLED:
      ('ontouchstart' in goog.global ||
          !!(goog.global['document'] &&
             document.documentElement &&
             'ontouchstart' in document.documentElement) ||
          // IE10 uses non-standard touch events, so it has a different check.
          !!(goog.global['navigator'] &&
              goog.global['navigator']['msMaxTouchPoints']))
};

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Event Types.
 *
 * @author arv@google.com (Erik Arvidsson)
 */


goog.provide('goog.events.EventType');

goog.require('goog.userAgent');


/**
 * Returns a prefixed event name for the current browser.
 * @param {string} eventName The name of the event.
 * @return {string} The prefixed event name.
 * @suppress {missingRequire|missingProvide}
 * @private
 */
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? 'webkit' + eventName :
      (goog.userAgent.OPERA ? 'o' + eventName.toLowerCase() :
          eventName.toLowerCase());
};


/**
 * Constants for event names.
 * @enum {string}
 */
goog.events.EventType = {
  // Mouse events
  CLICK: 'click',
  RIGHTCLICK: 'rightclick',
  DBLCLICK: 'dblclick',
  MOUSEDOWN: 'mousedown',
  MOUSEUP: 'mouseup',
  MOUSEOVER: 'mouseover',
  MOUSEOUT: 'mouseout',
  MOUSEMOVE: 'mousemove',
  MOUSEENTER: 'mouseenter',
  MOUSELEAVE: 'mouseleave',
  MOUSEWHEEL: goog.userAgent.GECKO ? 'DOMMouseScroll' : 'mousewheel',
  // Select start is non-standard.
  // See http://msdn.microsoft.com/en-us/library/ie/ms536969(v=vs.85).aspx.
  SELECTSTART: 'selectstart', // IE, Safari, Chrome

  // Wheel events
  // http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
  WHEEL: 'wheel',

  // Key events
  KEYPRESS: 'keypress',
  KEYDOWN: 'keydown',
  KEYUP: 'keyup',

  // Focus
  BLUR: 'blur',
  FOCUS: 'focus',
  DEACTIVATE: 'deactivate', // IE only
  // NOTE: The following two events are not stable in cross-browser usage.
  //     WebKit and Opera implement DOMFocusIn/Out.
  //     IE implements focusin/out.
  //     Gecko implements neither see bug at
  //     https://bugzilla.mozilla.org/show_bug.cgi?id=396927.
  // The DOM Events Level 3 Draft deprecates DOMFocusIn in favor of focusin:
  //     http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html
  // You can use FOCUS in Capture phase until implementations converge.
  FOCUSIN: goog.userAgent.IE ? 'focusin' : 'DOMFocusIn',
  FOCUSOUT: goog.userAgent.IE ? 'focusout' : 'DOMFocusOut',

  // Forms
  CHANGE: 'change',
  SELECT: 'select',
  SUBMIT: 'submit',
  INPUT: 'input',
  PROPERTYCHANGE: 'propertychange', // IE only

  // Drag and drop
  DRAGSTART: 'dragstart',
  DRAG: 'drag',
  DRAGENTER: 'dragenter',
  DRAGOVER: 'dragover',
  DRAGLEAVE: 'dragleave',
  DROP: 'drop',
  DRAGEND: 'dragend',

  // Touch events
  // Note that other touch events exist, but we should follow the W3C list here.
  // http://www.w3.org/TR/touch-events/#list-of-touchevent-types
  TOUCHSTART: 'touchstart',
  TOUCHMOVE: 'touchmove',
  TOUCHEND: 'touchend',
  TOUCHCANCEL: 'touchcancel',

  // Misc
  BEFOREUNLOAD: 'beforeunload',
  CONSOLEMESSAGE: 'consolemessage',
  CONTEXTMENU: 'contextmenu',
  DOMCONTENTLOADED: 'DOMContentLoaded',
  ERROR: 'error',
  HELP: 'help',
  LOAD: 'load',
  LOSECAPTURE: 'losecapture',
  ORIENTATIONCHANGE: 'orientationchange',
  READYSTATECHANGE: 'readystatechange',
  RESIZE: 'resize',
  SCROLL: 'scroll',
  UNLOAD: 'unload',

  // HTML 5 History events
  // See http://www.w3.org/TR/html5/history.html#event-definitions
  HASHCHANGE: 'hashchange',
  PAGEHIDE: 'pagehide',
  PAGESHOW: 'pageshow',
  POPSTATE: 'popstate',

  // Copy and Paste
  // Support is limited. Make sure it works on your favorite browser
  // before using.
  // http://www.quirksmode.org/dom/events/cutcopypaste.html
  COPY: 'copy',
  PASTE: 'paste',
  CUT: 'cut',
  BEFORECOPY: 'beforecopy',
  BEFORECUT: 'beforecut',
  BEFOREPASTE: 'beforepaste',

  // HTML5 online/offline events.
  // http://www.w3.org/TR/offline-webapps/#related
  ONLINE: 'online',
  OFFLINE: 'offline',

  // HTML 5 worker events
  MESSAGE: 'message',
  CONNECT: 'connect',

  // CSS animation events.
  /** @suppress {missingRequire} */
  ANIMATIONSTART: goog.events.getVendorPrefixedName_('AnimationStart'),
  /** @suppress {missingRequire} */
  ANIMATIONEND: goog.events.getVendorPrefixedName_('AnimationEnd'),
  /** @suppress {missingRequire} */
  ANIMATIONITERATION: goog.events.getVendorPrefixedName_('AnimationIteration'),

  // CSS transition events. Based on the browser support described at:
  // https://developer.mozilla.org/en/css/css_transitions#Browser_compatibility
  /** @suppress {missingRequire} */
  TRANSITIONEND: goog.events.getVendorPrefixedName_('TransitionEnd'),

  // W3C Pointer Events
  // http://www.w3.org/TR/pointerevents/
  POINTERDOWN: 'pointerdown',
  POINTERUP: 'pointerup',
  POINTERCANCEL: 'pointercancel',
  POINTERMOVE: 'pointermove',
  POINTEROVER: 'pointerover',
  POINTEROUT: 'pointerout',
  POINTERENTER: 'pointerenter',
  POINTERLEAVE: 'pointerleave',
  GOTPOINTERCAPTURE: 'gotpointercapture',
  LOSTPOINTERCAPTURE: 'lostpointercapture',

  // IE specific events.
  // See http://msdn.microsoft.com/en-us/library/ie/hh772103(v=vs.85).aspx
  // Note: these events will be supplanted in IE11.
  MSGESTURECHANGE: 'MSGestureChange',
  MSGESTUREEND: 'MSGestureEnd',
  MSGESTUREHOLD: 'MSGestureHold',
  MSGESTURESTART: 'MSGestureStart',
  MSGESTURETAP: 'MSGestureTap',
  MSGOTPOINTERCAPTURE: 'MSGotPointerCapture',
  MSINERTIASTART: 'MSInertiaStart',
  MSLOSTPOINTERCAPTURE: 'MSLostPointerCapture',
  MSPOINTERCANCEL: 'MSPointerCancel',
  MSPOINTERDOWN: 'MSPointerDown',
  MSPOINTERENTER: 'MSPointerEnter',
  MSPOINTERHOVER: 'MSPointerHover',
  MSPOINTERLEAVE: 'MSPointerLeave',
  MSPOINTERMOVE: 'MSPointerMove',
  MSPOINTEROUT: 'MSPointerOut',
  MSPOINTEROVER: 'MSPointerOver',
  MSPOINTERUP: 'MSPointerUp',

  // Native IMEs/input tools events.
  TEXTINPUT: 'textinput',
  COMPOSITIONSTART: 'compositionstart',
  COMPOSITIONUPDATE: 'compositionupdate',
  COMPOSITIONEND: 'compositionend',

  // Webview tag events
  // See http://developer.chrome.com/dev/apps/webview_tag.html
  EXIT: 'exit',
  LOADABORT: 'loadabort',
  LOADCOMMIT: 'loadcommit',
  LOADREDIRECT: 'loadredirect',
  LOADSTART: 'loadstart',
  LOADSTOP: 'loadstop',
  RESPONSIVE: 'responsive',
  SIZECHANGED: 'sizechanged',
  UNRESPONSIVE: 'unresponsive',

  // HTML5 Page Visibility API.  See details at
  // {@code goog.labs.dom.PageVisibilityMonitor}.
  VISIBILITYCHANGE: 'visibilitychange',

  // LocalStorage event.
  STORAGE: 'storage',

  // DOM Level 2 mutation events (deprecated).
  DOMSUBTREEMODIFIED: 'DOMSubtreeModified',
  DOMNODEINSERTED: 'DOMNodeInserted',
  DOMNODEREMOVED: 'DOMNodeRemoved',
  DOMNODEREMOVEDFROMDOCUMENT: 'DOMNodeRemovedFromDocument',
  DOMNODEINSERTEDINTODOCUMENT: 'DOMNodeInsertedIntoDocument',
  DOMATTRMODIFIED: 'DOMAttrModified',
  DOMCHARACTERDATAMODIFIED: 'DOMCharacterDataModified'
};

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Useful compiler idioms.
 *
 * @author johnlenz@google.com (John Lenz)
 */

goog.provide('goog.reflect');


/**
 * Syntax for object literal casts.
 * @see http://go/jscompiler-renaming
 * @see http://code.google.com/p/closure-compiler/wiki/
 *      ExperimentalTypeBasedPropertyRenaming
 *
 * Use this if you have an object literal whose keys need to have the same names
 * as the properties of some class even after they are renamed by the compiler.
 *
 * @param {!Function} type Type to cast to.
 * @param {Object} object Object literal to cast.
 * @return {Object} The object literal.
 */
goog.reflect.object = function(type, object) {
  return object;
};


/**
 * To assert to the compiler that an operation is needed when it would
 * otherwise be stripped. For example:
 * <code>
 *     // Force a layout
 *     goog.reflect.sinkValue(dialog.offsetHeight);
 * </code>
 * @type {!Function}
 */
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[' '](x);
  return x;
};


/**
 * The compiler should optimize this function away iff no one ever uses
 * goog.reflect.sinkValue.
 */
goog.reflect.sinkValue[' '] = goog.nullFunction;


/**
 * Check if a property can be accessed without throwing an exception.
 * @param {Object} obj The owner of the property.
 * @param {string} prop The property name.
 * @return {boolean} Whether the property is accessible. Will also return true
 *     if obj is null.
 */
goog.reflect.canAccessProperty = function(obj, prop) {
  /** @preserveTry */
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {}
  return false;
};

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A patched, standardized event object for browser events.
 *
 * <pre>
 * The patched event object contains the following members:
 * - type           {string}    Event type, e.g. 'click'
 * - target         {Object}    The element that actually triggered the event
 * - currentTarget  {Object}    The element the listener is attached to
 * - relatedTarget  {Object}    For mouseover and mouseout, the previous object
 * - offsetX        {number}    X-coordinate relative to target
 * - offsetY        {number}    Y-coordinate relative to target
 * - clientX        {number}    X-coordinate relative to viewport
 * - clientY        {number}    Y-coordinate relative to viewport
 * - screenX        {number}    X-coordinate relative to the edge of the screen
 * - screenY        {number}    Y-coordinate relative to the edge of the screen
 * - button         {number}    Mouse button. Use isButton() to test.
 * - keyCode        {number}    Key-code
 * - ctrlKey        {boolean}   Was ctrl key depressed
 * - altKey         {boolean}   Was alt key depressed
 * - shiftKey       {boolean}   Was shift key depressed
 * - metaKey        {boolean}   Was meta key depressed
 * - defaultPrevented {boolean} Whether the default action has been prevented
 * - state          {Object}    History state object
 *
 * NOTE: The keyCode member contains the raw browser keyCode. For normalized
 * key and character code use {@link goog.events.KeyHandler}.
 * </pre>
 *
 * @author arv@google.com (Erik Arvidsson)
 */

goog.provide('goog.events.BrowserEvent');
goog.provide('goog.events.BrowserEvent.MouseButton');

goog.require('goog.events.BrowserFeature');
goog.require('goog.events.Event');
goog.require('goog.events.EventType');
goog.require('goog.reflect');
goog.require('goog.userAgent');



/**
 * Accepts a browser event object and creates a patched, cross browser event
 * object.
 * The content of this object will not be initialized if no event object is
 * provided. If this is the case, init() needs to be invoked separately.
 * @param {Event=} opt_e Browser event object.
 * @param {EventTarget=} opt_currentTarget Current target for event.
 * @constructor
 * @extends {goog.events.Event}
 */
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, 'constructor', opt_e ? opt_e.type : '');

  /**
   * Target that fired the event.
   * @override
   * @type {Node}
   */
  this.target = null;

  /**
   * Node that had the listener attached.
   * @override
   * @type {Node|undefined}
   */
  this.currentTarget = null;

  /**
   * For mouseover and mouseout events, the related object for the event.
   * @type {Node}
   */
  this.relatedTarget = null;

  /**
   * X-coordinate relative to target.
   * @type {number}
   */
  this.offsetX = 0;

  /**
   * Y-coordinate relative to target.
   * @type {number}
   */
  this.offsetY = 0;

  /**
   * X-coordinate relative to the window.
   * @type {number}
   */
  this.clientX = 0;

  /**
   * Y-coordinate relative to the window.
   * @type {number}
   */
  this.clientY = 0;

  /**
   * X-coordinate relative to the monitor.
   * @type {number}
   */
  this.screenX = 0;

  /**
   * Y-coordinate relative to the monitor.
   * @type {number}
   */
  this.screenY = 0;

  /**
   * Which mouse button was pressed.
   * @type {number}
   */
  this.button = 0;

  /**
   * Keycode of key press.
   * @type {number}
   */
  this.keyCode = 0;

  /**
   * Keycode of key press.
   * @type {number}
   */
  this.charCode = 0;

  /**
   * Whether control was pressed at time of event.
   * @type {boolean}
   */
  this.ctrlKey = false;

  /**
   * Whether alt was pressed at time of event.
   * @type {boolean}
   */
  this.altKey = false;

  /**
   * Whether shift was pressed at time of event.
   * @type {boolean}
   */
  this.shiftKey = false;

  /**
   * Whether the meta key was pressed at time of event.
   * @type {boolean}
   */
  this.metaKey = false;

  /**
   * History state object, only set for PopState events where it's a copy of the
   * state object provided to pushState or replaceState.
   * @type {Object}
   */
  this.state = null;

  /**
   * Whether the default platform modifier key was pressed at time of event.
   * (This is control for all platforms except Mac, where it's Meta.)
   * @type {boolean}
   */
  this.platformModifierKey = false;

  /**
   * The browser event object.
   * @private {Event}
   */
  this.event_ = null;

  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);


/**
 * Normalized button constants for the mouse.
 * @enum {number}
 */
goog.events.BrowserEvent.MouseButton = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2
};


/**
 * Static data for mapping mouse buttons.
 * @type {!Array.<number>}
 */
goog.events.BrowserEvent.IEButtonMap = [
  1, // LEFT
  4, // MIDDLE
  2  // RIGHT
];


/**
 * Accepts a browser event object and creates a patched, cross browser event
 * object.
 * @param {Event} e Browser event object.
 * @param {EventTarget=} opt_currentTarget Current target for event.
 */
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;

  // TODO(nicksantos): Change this.target to type EventTarget.
  this.target = /** @type {Node} */ (e.target) || e.srcElement;

  // TODO(nicksantos): Change this.currentTarget to type EventTarget.
  this.currentTarget = /** @type {Node} */ (opt_currentTarget);

  var relatedTarget = /** @type {Node} */ (e.relatedTarget);
  if (relatedTarget) {
    // There's a bug in FireFox where sometimes, relatedTarget will be a
    // chrome element, and accessing any property of it will get a permission
    // denied exception. See:
    // https://bugzilla.mozilla.org/show_bug.cgi?id=497780
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, 'nodeName')) {
        relatedTarget = null;
      }
    }
    // TODO(arv): Use goog.events.EventType when it has been refactored into its
    // own file.
  } else if (type == goog.events.EventType.MOUSEOVER) {
    relatedTarget = e.fromElement;
  } else if (type == goog.events.EventType.MOUSEOUT) {
    relatedTarget = e.toElement;
  }

  this.relatedTarget = relatedTarget;

  // Webkit emits a lame warning whenever layerX/layerY is accessed.
  // http://code.google.com/p/chromium/issues/detail?id=101733
  this.offsetX = (goog.userAgent.WEBKIT || e.offsetX !== undefined) ?
      e.offsetX : e.layerX;
  this.offsetY = (goog.userAgent.WEBKIT || e.offsetY !== undefined) ?
      e.offsetY : e.layerY;

  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;

  this.button = e.button;

  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == 'keypress' ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};


/**
 * Tests to see which button was pressed during the event. This is really only
 * useful in IE and Gecko browsers. And in IE, it's only useful for
 * mousedown/mouseup events, because click only fires for the left mouse button.
 *
 * Safari 2 only reports the left button being clicked, and uses the value '1'
 * instead of 0. Opera only reports a mousedown event for the middle button, and
 * no mouse events for the right button. Opera has default behavior for left and
 * middle click that can only be overridden via a configuration setting.
 *
 * There's a nice table of this mess at http://www.unixpapa.com/js/mouse.html.
 *
 * @param {goog.events.BrowserEvent.MouseButton} button The button
 *     to test for.
 * @return {boolean} True if button was pressed.
 */
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == 'click') {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button &
          goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};


/**
 * Whether this has an "action"-producing mouse button.
 *
 * By definition, this includes left-click on windows/linux, and left-click
 * without the ctrl key on Macs.
 *
 * @return {boolean} The result.
 */
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  // Webkit does not ctrl+click to be a right-click, so we
  // normalize it to behave like Gecko and Opera.
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) &&
      !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};


/**
 * @override
 */
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};


/**
 * @override
 */
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      /** @preserveTry */
      try {
        // Most keys can be prevented using returnValue. Some special keys
        // require setting the keyCode to -1 as well:
        //
        // In IE7:
        // F3, F5, F10, F11, Ctrl+P, Crtl+O, Ctrl+F (these are taken from IE6)
        //
        // In IE8:
        // Ctrl+P, Crtl+O, Ctrl+F (F1-F12 cannot be stopped through the event)
        //
        // We therefore do this for all function keys as well as when Ctrl key
        // is pressed.
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
        // IE throws an 'access denied' exception when trying to change
        // keyCode in some situations (e.g. srcElement is input[type=file],
        // or srcElement is an anchor tag rewritten by parent's innerHTML).
        // Do nothing in this case.
      }
    }
  } else {
    be.preventDefault();
  }
};


/**
 * @return {Event} The underlying browser event object.
 */
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};


/** @override */
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview An event manager for both native browser event
 * targets and custom JavaScript event targets
 * ({@code goog.events.Listenable}). This provides an abstraction
 * over browsers' event systems.
 *
 * It also provides a simulation of W3C event model's capture phase in
 * Internet Explorer (IE 8 and below). Caveat: the simulation does not
 * interact well with listeners registered directly on the elements
 * (bypassing goog.events) or even with listeners registered via
 * goog.events in a separate JS binary. In these cases, we provide
 * no ordering guarantees.
 *
 * The listeners will receive a "patched" event object. Such event object
 * contains normalized values for certain event properties that differs in
 * different browsers.
 *
 * Example usage:
 * <pre>
 * goog.events.listen(myNode, 'click', function(e) { alert('woo') });
 * goog.events.listen(myNode, 'mouseover', mouseHandler, true);
 * goog.events.unlisten(myNode, 'mouseover', mouseHandler, true);
 * goog.events.removeAll(myNode);
 * </pre>
 *
 *                                            in IE and event object patching]
 * @author arv@google.com (Erik Arvidsson)
 *
 * @see ../demos/events.html
 * @see ../demos/event-propagation.html
 * @see ../demos/stopevent.html
 */

// IMPLEMENTATION NOTES:
// goog.events stores an auxiliary data structure on each EventTarget
// source being listened on. This allows us to take advantage of GC,
// having the data structure GC'd when the EventTarget is GC'd. This
// GC behavior is equivalent to using W3C DOM Events directly.

goog.provide('goog.events');
goog.provide('goog.events.CaptureSimulationMode');
goog.provide('goog.events.Key');
goog.provide('goog.events.ListenableType');

goog.require('goog.asserts');
goog.require('goog.debug.entryPointRegistry');
goog.require('goog.events.BrowserEvent');
goog.require('goog.events.BrowserFeature');
goog.require('goog.events.Listenable');
goog.require('goog.events.ListenerMap');

goog.forwardDeclare('goog.debug.ErrorHandler');
goog.forwardDeclare('goog.events.EventWrapper');


/**
 * @typedef {number|goog.events.ListenableKey}
 */
goog.events.Key;


/**
 * @typedef {EventTarget|goog.events.Listenable}
 */
goog.events.ListenableType;


/**
 * Property name on a native event target for the listener map
 * associated with the event target.
 * @private @const {string}
 */
goog.events.LISTENER_MAP_PROP_ = 'closure_lm_' + ((Math.random() * 1e6) | 0);


/**
 * String used to prepend to IE event types.
 * @const
 * @private
 */
goog.events.onString_ = 'on';


/**
 * Map of computed "on<eventname>" strings for IE event types. Caching
 * this removes an extra object allocation in goog.events.listen which
 * improves IE6 performance.
 * @const
 * @dict
 * @private
 */
goog.events.onStringMap_ = {};


/**
 * @enum {number} Different capture simulation mode for IE8-.
 */
goog.events.CaptureSimulationMode = {
  /**
   * Does not perform capture simulation. Will asserts in IE8- when you
   * add capture listeners.
   */
  OFF_AND_FAIL: 0,

  /**
   * Does not perform capture simulation, silently ignore capture
   * listeners.
   */
  OFF_AND_SILENT: 1,

  /**
   * Performs capture simulation.
   */
  ON: 2
};


/**
 * @define {number} The capture simulation mode for IE8-. By default,
 *     this is ON.
 */
goog.define('goog.events.CAPTURE_SIMULATION_MODE', 2);


/**
 * Estimated count of total native listeners.
 * @private {number}
 */
goog.events.listenerCountEstimate_ = 0;


/**
 * Adds an event listener for a specific event on a native event
 * target (such as a DOM element) or an object that has implemented
 * {@link goog.events.Listenable}. A listener can only be added once
 * to an object and if it is added again the key for the listener is
 * returned. Note that if the existing listener is a one-off listener
 * (registered via listenOnce), it will no longer be a one-off
 * listener after a call to listen().
 *
 * @param {EventTarget|goog.events.Listenable} src The node to listen
 *     to events on.
 * @param {string|Array.<string>|
 *     !goog.events.EventId.<EVENTOBJ>|!Array.<!goog.events.EventId.<EVENTOBJ>>}
 *     type Event type or array of event types.
 * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(?):?}|null}
 *     listener Callback method, or an object with a handleEvent function.
 *     WARNING: passing an Object is now softly deprecated.
 * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to
 *     false).
 * @param {T=} opt_handler Element in whose scope to call the listener.
 * @return {goog.events.Key} Unique key for the listener.
 * @template T,EVENTOBJ
 */
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }

  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen(
        /** @type {string|!goog.events.EventId} */ (type),
        listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_(
        /** @type {EventTarget} */ (src),
        /** @type {string|!goog.events.EventId} */ (type),
        listener, /* callOnce */ false, opt_capt, opt_handler);
  }
};


/**
 * Adds an event listener for a specific event on a native event
 * target. A listener can only be added once to an object and if it
 * is added again the key for the listener is returned.
 *
 * Note that a one-off listener will not change an existing listener,
 * if any. On the other hand a normal listener will change existing
 * one-off listener to become a normal listener.
 *
 * @param {EventTarget} src The node to listen to events on.
 * @param {string|!goog.events.EventId} type Event type.
 * @param {!Function} listener Callback function.
 * @param {boolean} callOnce Whether the listener is a one-off
 *     listener or otherwise.
 * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to
 *     false).
 * @param {Object=} opt_handler Element in whose scope to call the listener.
 * @return {goog.events.ListenableKey} Unique key for the listener.
 * @private
 */
goog.events.listen_ = function(
    src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error('Invalid event type');
  }

  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE ==
        goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail('Can not register capture listener in IE8-.');
      return null;
    } else if (goog.events.CAPTURE_SIMULATION_MODE ==
        goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
      return null;
    }
  }

  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap =
        new goog.events.ListenerMap(src);
  }

  var listenerObj = listenerMap.add(
      type, listener, callOnce, opt_capt, opt_handler);

  // If the listenerObj already has a proxy, it has been set up
  // previously. We simply return.
  if (listenerObj.proxy) {
    return listenerObj;
  }

  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;

  proxy.src = src;
  proxy.listener = listenerObj;

  // Attach the proxy through the browser's API
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    // The else above used to be else if (src.attachEvent) and then there was
    // another else statement that threw an exception warning the developer
    // they made a mistake. This resulted in an extra object allocation in IE6
    // due to a wrapper object that had to be implemented around the element
    // and so was removed.
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }

  goog.events.listenerCountEstimate_++;
  return listenerObj;
};


/**
 * Helper function for returning a proxy function.
 * @return {!Function} A new or reused function object.
 */
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  // Use a local var f to prevent one allocation.
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ?
      function(eventObject) {
        return proxyCallbackFunction.call(f.src, f.listener, eventObject);
      } :
      function(eventObject) {
        var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
        // NOTE(chrishenry): In IE, we hack in a capture phase. However, if
        // there is inline event handler which tries to prevent default (for
        // example <a href="..." onclick="return false">...</a>) in a
        // descendant element, the prevent default will be overridden
        // by this listener if this listener were to return true. Hence, we
        // return undefined.
        if (!v) return v;
      };
  return f;
};


/**
 * Adds an event listener for a specific event on a native event
 * target (such as a DOM element) or an object that has implemented
 * {@link goog.events.Listenable}. After the event has fired the event
 * listener is removed from the target.
 *
 * If an existing listener already exists, listenOnce will do
 * nothing. In particular, if the listener was previously registered
 * via listen(), listenOnce() will not turn the listener into a
 * one-off listener. Similarly, if there is already an existing
 * one-off listener, listenOnce does not modify the listeners (it is
 * still a once listener).
 *
 * @param {EventTarget|goog.events.Listenable} src The node to listen
 *     to events on.
 * @param {string|Array.<string>|
 *     !goog.events.EventId.<EVENTOBJ>|!Array.<!goog.events.EventId.<EVENTOBJ>>}
 *     type Event type or array of event types.
 * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(?):?}|null}
 *     listener Callback method.
 * @param {boolean=} opt_capt Fire in capture phase?.
 * @param {T=} opt_handler Element in whose scope to call the listener.
 * @return {goog.events.Key} Unique key for the listener.
 * @template T,EVENTOBJ
 */
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }

  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce(
        /** @type {string|!goog.events.EventId} */ (type),
        listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_(
        /** @type {EventTarget} */ (src),
        /** @type {string|!goog.events.EventId} */ (type),
        listener, /* callOnce */ true, opt_capt, opt_handler);
  }
};


/**
 * Adds an event listener with a specific event wrapper on a DOM Node or an
 * object that has implemented {@link goog.events.Listenable}. A listener can
 * only be added once to an object.
 *
 * @param {EventTarget|goog.events.Listenable} src The target to
 *     listen to events on.
 * @param {goog.events.EventWrapper} wrapper Event wrapper to use.
 * @param {function(this:T, ?):?|{handleEvent:function(?):?}|null} listener
 *     Callback method, or an object with a handleEvent function.
 * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to
 *     false).
 * @param {T=} opt_handler Element in whose scope to call the listener.
 * @template T
 */
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt,
    opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};


/**
 * Removes an event listener which was added with listen().
 *
 * @param {EventTarget|goog.events.Listenable} src The target to stop
 *     listening to events on.
 * @param {string|Array.<string>|
 *     !goog.events.EventId.<EVENTOBJ>|!Array.<!goog.events.EventId.<EVENTOBJ>>}
 *     type Event type or array of event types to unlisten to.
 * @param {function(?):?|{handleEvent:function(?):?}|null} listener The
 *     listener function to remove.
 * @param {boolean=} opt_capt In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase of the
 *     event.
 * @param {Object=} opt_handler Element in whose scope to call the listener.
 * @return {?boolean} indicating whether the listener was there to remove.
 * @template EVENTOBJ
 */
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0; i < type.length; i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }

  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten(
        /** @type {string|!goog.events.EventId} */ (type),
        listener, opt_capt, opt_handler);
  }

  if (!src) {
    // TODO(chrishenry): We should tighten the API to only accept
    // non-null objects, or add an assertion here.
    return false;
  }

  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_(
      /** @type {EventTarget} */ (src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener(
        /** @type {string|!goog.events.EventId} */ (type),
        listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }

  return false;
};


/**
 * Removes an event listener which was added with listen() by the key
 * returned by listen().
 *
 * @param {goog.events.Key} key The key returned by listen() for this
 *     event listener.
 * @return {boolean} indicating whether the listener was there to remove.
 */
goog.events.unlistenByKey = function(key) {
  // TODO(chrishenry): Remove this check when tests that rely on this
  // are fixed.
  if (goog.isNumber(key)) {
    return false;
  }

  var listener = /** @type {goog.events.ListenableKey} */ (key);
  if (!listener || listener.removed) {
    return false;
  }

  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }

  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else if (src.detachEvent) {
    src.detachEvent(goog.events.getOnString_(type), proxy);
  }
  goog.events.listenerCountEstimate_--;

  var listenerMap = goog.events.getListenerMap_(
      /** @type {EventTarget} */ (src));
  // TODO(chrishenry): Try to remove this conditional and execute the
  // first branch always. This should be safe.
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      // Null the src, just because this is simple to do (and useful
      // for IE <= 7).
      listenerMap.src = null;
      // We don't use delete here because IE does not allow delete
      // on a window object.
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }

  return true;
};


/**
 * Removes an event listener which was added with listenWithWrapper().
 *
 * @param {EventTarget|goog.events.Listenable} src The target to stop
 *     listening to events on.
 * @param {goog.events.EventWrapper} wrapper Event wrapper to use.
 * @param {function(?):?|{handleEvent:function(?):?}|null} listener The
 *     listener function to remove.
 * @param {boolean=} opt_capt In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase of the
 *     event.
 * @param {Object=} opt_handler Element in whose scope to call the listener.
 */
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt,
    opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};


/**
 * Removes all listeners from an object. You can also optionally
 * remove listeners of a particular type.
 *
 * @param {Object|undefined} obj Object to remove listeners from. Must be an
 *     EventTarget or a goog.events.Listenable.
 * @param {string|!goog.events.EventId=} opt_type Type of event to remove.
 *     Default is all types.
 * @return {number} Number of listeners removed.
 */
goog.events.removeAll = function(obj, opt_type) {
  // TODO(chrishenry): Change the type of obj to
  // (!EventTarget|!goog.events.Listenable).

  if (!obj) {
    return 0;
  }

  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }

  var listenerMap = goog.events.getListenerMap_(
      /** @type {EventTarget} */ (obj));
  if (!listenerMap) {
    return 0;
  }

  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      // Clone so that we don't need to worry about unlistenByKey
      // changing the content of the ListenerMap.
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0; i < listeners.length; ++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};


/**
 * Removes all native listeners registered via goog.events. Native
 * listeners are listeners on native browser objects (such as DOM
 * elements). In particular, goog.events.Listenable and
 * goog.events.EventTarget listeners will NOT be removed.
 * @return {number} Number of listeners removed.
 * @deprecated This doesn't do anything, now that Closure no longer
 * stores a central listener registry.
 */
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};


/**
 * Gets the listeners for a given object, type and capture phase.
 *
 * @param {Object} obj Object to get listeners for.
 * @param {string|!goog.events.EventId} type Event type.
 * @param {boolean} capture Capture phase?.
 * @return {Array.<goog.events.Listener>} Array of listener objects.
 */
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      // TODO(chrishenry): We should tighten the API to accept
      // !EventTarget|goog.events.Listenable, and add an assertion here.
      return [];
    }

    var listenerMap = goog.events.getListenerMap_(
        /** @type {EventTarget} */ (obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};


/**
 * Gets the goog.events.Listener for the event or null if no such listener is
 * in use.
 *
 * @param {EventTarget|goog.events.Listenable} src The target from
 *     which to get listeners.
 * @param {?string|!goog.events.EventId.<EVENTOBJ>} type The type of the event.
 * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null} listener The
 *     listener function to get.
 * @param {boolean=} opt_capt In DOM-compliant browsers, this determines
 *                            whether the listener is fired during the
 *                            capture or bubble phase of the event.
 * @param {Object=} opt_handler Element in whose scope to call the listener.
 * @return {goog.events.ListenableKey} the found listener or null if not found.
 * @template EVENTOBJ
 */
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  // TODO(chrishenry): Change type from ?string to string, or add assertion.
  type = /** @type {string} */ (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }

  if (!src) {
    // TODO(chrishenry): We should tighten the API to only accept
    // non-null objects, or add an assertion here.
    return null;
  }

  var listenerMap = goog.events.getListenerMap_(
      /** @type {EventTarget} */ (src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};


/**
 * Returns whether an event target has any active listeners matching the
 * specified signature. If either the type or capture parameters are
 * unspecified, the function will match on the remaining criteria.
 *
 * @param {EventTarget|goog.events.Listenable} obj Target to get
 *     listeners for.
 * @param {string|!goog.events.EventId=} opt_type Event type.
 * @param {boolean=} opt_capture Whether to check for capture or bubble-phase
 *     listeners.
 * @return {boolean} Whether an event target has one or more listeners matching
 *     the requested type and/or capture phase.
 */
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }

  var listenerMap = goog.events.getListenerMap_(
      /** @type {EventTarget} */ (obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};


/**
 * Provides a nice string showing the normalized event objects public members
 * @param {Object} e Event Object.
 * @return {string} String of the public members of the normalized event object.
 */
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + ' = ' + e[key] + ' (' + e[key].id + ')');
    } else {
      str.push(key + ' = ' + e[key]);
    }
  }
  return str.join('\n');
};


/**
 * Returns a string with on prepended to the specified type. This is used for IE
 * which expects "on" to be prepended. This function caches the string in order
 * to avoid extra allocations in steady state.
 * @param {string} type Event type.
 * @return {string} The type string with 'on' prepended.
 * @private
 */
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};


/**
 * Fires an object's listeners of a particular type and phase
 *
 * @param {Object} obj Object whose listeners to call.
 * @param {string|!goog.events.EventId} type Event type.
 * @param {boolean} capture Which event phase.
 * @param {Object} eventObject Event object to be passed to listener.
 * @return {boolean} True if all listeners returned true else false.
 */
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }

  return goog.events.fireListeners_(obj, type, capture, eventObject);
};


/**
 * Fires an object's listeners of a particular type and phase.
 * @param {Object} obj Object whose listeners to call.
 * @param {string|!goog.events.EventId} type Event type.
 * @param {boolean} capture Which event phase.
 * @param {Object} eventObject Event object to be passed to listener.
 * @return {boolean} True if all listeners returned true else false.
 * @private
 */
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;

  var listenerMap = goog.events.getListenerMap_(
      /** @type {EventTarget} */ (obj));
  if (listenerMap) {
    // TODO(chrishenry): Original code avoids array creation when there
    // is no listener, so we do the same. If this optimization turns
    // out to be not required, we can replace this with
    // listenerMap.getListeners(type, capture) instead, which is simpler.
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0; i < listenerArray.length; i++) {
        var listener = listenerArray[i];
        // We might not have a listener if the listener was removed.
        if (listener && listener.capture == capture && !listener.removed) {
          retval &=
              goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};


/**
 * Fires a listener with a set of arguments
 *
 * @param {goog.events.Listener} listener The listener object to call.
 * @param {Object} eventObject The event object to pass to the listener.
 * @return {boolean} Result of listener.
 */
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;

  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};


/**
 * Gets the total number of listeners currently in the system.
 * @return {number} Number of listeners.
 * @deprecated This returns estimated count, now that Closure no longer
 * stores a central listener registry. We still return an estimation
 * to keep existing listener-related tests passing. In the near future,
 * this function will be removed.
 */
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};


/**
 * Dispatches an event (or event like object) and calls all listeners
 * listening for events of this type. The type of the event is decided by the
 * type property on the event object.
 *
 * If any of the listeners returns false OR calls preventDefault then this
 * function will return false.  If one of the capture listeners calls
 * stopPropagation, then the bubble listeners won't fire.
 *
 * @param {goog.events.Listenable} src The event target.
 * @param {goog.events.EventLike} e Event object.
 * @return {boolean} If anyone called preventDefault on the event object (or
 *     if any of the handlers returns false) this will also return false.
 *     If there are no handlers, or if all handlers return true, this returns
 *     true.
 */
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(
      goog.events.Listenable.isImplementedBy(src),
      'Can not use goog.events.dispatchEvent with ' +
      'non-goog.events.Listenable instance.');
  return src.dispatchEvent(e);
};


/**
 * Installs exception protection for the browser event entry point using the
 * given error handler.
 *
 * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to
 *     protect the entry point.
 */
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(
      goog.events.handleBrowserEvent_);
};


/**
 * Handles an event and dispatches it to the correct listeners. This
 * function is a proxy for the real listener the user specified.
 *
 * @param {goog.events.Listener} listener The listener object.
 * @param {Event=} opt_evt Optional event object that gets passed in via the
 *     native event handlers.
 * @return {boolean} Result of the event handler.
 * @this {EventTarget} The object or Element that fired the event.
 * @private
 */
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }

  // Synthesize event propagation if the browser does not support W3C
  // event model.
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt ||
        /** @type {Event} */ (goog.getObjectByName('window.event'));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;

    if (goog.events.CAPTURE_SIMULATION_MODE ==
            goog.events.CaptureSimulationMode.ON) {
      // If we have not marked this event yet, we should perform capture
      // simulation.
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);

        var ancestors = [];
        for (var parent = evt.currentTarget; parent;
             parent = parent.parentNode) {
          ancestors.push(parent);
        }

        // Fire capture listeners.
        var type = listener.type;
        for (var i = ancestors.length - 1; !evt.propagationStopped_ && i >= 0;
             i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }

        // Fire bubble listeners.
        //
        // We can technically rely on IE to perform bubble event
        // propagation. However, it turns out that IE fires events in
        // opposite order of attachEvent registration, which broke
        // some code and tests that rely on the order. (While W3C DOM
        // Level 2 Events TR leaves the event ordering unspecified,
        // modern browsers and W3C DOM Level 3 Events Working Draft
        // actually specify the order as the registration order.)
        for (var i = 0; !evt.propagationStopped_ && i < ancestors.length; i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }

  // Otherwise, simply fire the listener.
  return goog.events.fireListener(
      listener, new goog.events.BrowserEvent(opt_evt, this));
};


/**
 * This is used to mark the IE event object so we do not do the Closure pass
 * twice for a bubbling event.
 * @param {Event} e The IE browser event.
 * @private
 */
goog.events.markIeEvent_ = function(e) {
  // Only the keyCode and the returnValue can be changed. We use keyCode for
  // non keyboard events.
  // event.returnValue is a bit more tricky. It is undefined by default. A
  // boolean false prevents the default action. In a window.onbeforeunload and
  // the returnValue is non undefined it will be alerted. However, we will only
  // modify the returnValue for keyboard events. We can get a problem if non
  // closure events sets the keyCode or the returnValue

  var useReturnValue = false;

  if (e.keyCode == 0) {
    // We cannot change the keyCode in case that srcElement is input[type=file].
    // We could test that that is the case but that would allocate 3 objects.
    // If we use try/catch we will only allocate extra objects in the case of a
    // failure.
    /** @preserveTry */
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }

  if (useReturnValue ||
      /** @type {boolean|undefined} */ (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};


/**
 * This is used to check if an IE event has already been handled by the Closure
 * system so we do not do the Closure pass twice for a bubbling event.
 * @param {Event} e  The IE browser event.
 * @return {boolean} True if the event object has been marked.
 * @private
 */
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};


/**
 * Counter to create unique event ids.
 * @private {number}
 */
goog.events.uniqueIdCounter_ = 0;


/**
 * Creates a unique event id.
 *
 * @param {string} identifier The identifier.
 * @return {string} A unique identifier.
 * @idGenerator
 */
goog.events.getUniqueId = function(identifier) {
  return identifier + '_' + goog.events.uniqueIdCounter_++;
};


/**
 * @param {EventTarget} src The source object.
 * @return {goog.events.ListenerMap} A listener map for the given
 *     source object, or null if none exists.
 * @private
 */
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  // IE serializes the property as well (e.g. when serializing outer
  // HTML). So we must check that the value is of the correct type.
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};


/**
 * Expando property for listener function wrapper for Object with
 * handleEvent.
 * @private @const {string}
 */
goog.events.LISTENER_WRAPPER_PROP_ = '__closure_events_fn_' +
    ((Math.random() * 1e9) >>> 0);


/**
 * @param {Object|Function} listener The listener function or an
 *     object that contains handleEvent method.
 * @return {!Function} Either the original function or a function that
 *     calls obj.handleEvent. If the same listener is passed to this
 *     function more than once, the same function is guaranteed to be
 *     returned.
 */
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, 'Listener can not be null.');

  if (goog.isFunction(listener)) {
    return listener;
  }

  goog.asserts.assert(
      listener.handleEvent, 'An object listener must have handleEvent method.');
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] =
        function(e) { return listener.handleEvent(e); };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};


// Register the browser event handler as an entry point, so that
// it can be monitored for exception handling, etc.
goog.debug.entryPointRegistry.register(
    /**
     * @param {function(!Function): !Function} transformer The transforming
     *     function.
     */
    function(transformer) {
      goog.events.handleBrowserEvent_ = transformer(
          goog.events.handleBrowserEvent_);
    });

// Copyright 2005 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A disposable implementation of a custom
 * listenable/event target. See also: documentation for
 * {@code goog.events.Listenable}.
 *
 * @author arv@google.com (Erik Arvidsson) [Original implementation]
 * @see ../demos/eventtarget.html
 * @see goog.events.Listenable
 */

goog.provide('goog.events.EventTarget');

goog.require('goog.Disposable');
goog.require('goog.asserts');
goog.require('goog.events');
goog.require('goog.events.Event');
goog.require('goog.events.Listenable');
goog.require('goog.events.ListenerMap');
goog.require('goog.object');



/**
 * An implementation of {@code goog.events.Listenable} with full W3C
 * EventTarget-like support (capture/bubble mechanism, stopping event
 * propagation, preventing default actions).
 *
 * You may subclass this class to turn your class into a Listenable.
 *
 * Unless propagation is stopped, an event dispatched by an
 * EventTarget will bubble to the parent returned by
 * {@code getParentEventTarget}. To set the parent, call
 * {@code setParentEventTarget}. Subclasses that don't support
 * changing the parent can override the setter to throw an error.
 *
 * Example usage:
 * <pre>
 *   var source = new goog.events.EventTarget();
 *   function handleEvent(e) {
 *     alert('Type: ' + e.type + '; Target: ' + e.target);
 *   }
 *   source.listen('foo', handleEvent);
 *   // Or: goog.events.listen(source, 'foo', handleEvent);
 *   ...
 *   source.dispatchEvent('foo');  // will call handleEvent
 *   ...
 *   source.unlisten('foo', handleEvent);
 *   // Or: goog.events.unlisten(source, 'foo', handleEvent);
 * </pre>
 *
 * @constructor
 * @extends {goog.Disposable}
 * @implements {goog.events.Listenable}
 */
goog.events.EventTarget = function() {
  goog.Disposable.call(this);

  /**
   * Maps of event type to an array of listeners.
   * @private {!goog.events.ListenerMap}
   */
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);

  /**
   * The object to use for event.target. Useful when mixing in an
   * EventTarget to another object.
   * @private {!Object}
   */
  this.actualEventTarget_ = this;

  /**
   * Parent event target, used during event bubbling.
   *
   * TODO(chrishenry): Change this to goog.events.Listenable. This
   * currently breaks people who expect getParentEventTarget to return
   * goog.events.EventTarget.
   *
   * @private {goog.events.EventTarget}
   */
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);


/**
 * An artificial cap on the number of ancestors you can have. This is mainly
 * for loop detection.
 * @const {number}
 * @private
 */
goog.events.EventTarget.MAX_ANCESTORS_ = 1000;


/**
 * Returns the parent of this event target to use for bubbling.
 *
 * @return {goog.events.EventTarget} The parent EventTarget or null if
 *     there is no parent.
 * @override
 */
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};


/**
 * Sets the parent of this event target to use for capture/bubble
 * mechanism.
 * @param {goog.events.EventTarget} parent Parent listenable (null if none).
 */
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};


/**
 * Adds an event listener to the event target. The same handler can only be
 * added once per the type. Even if you add the same handler multiple times
 * using the same type then it will only be called once when the event is
 * dispatched.
 *
 * @param {string} type The type of the event to listen for.
 * @param {function(?):?|{handleEvent:function(?):?}|null} handler The function
 *     to handle the event. The handler can also be an object that implements
 *     the handleEvent method which takes the event object as argument.
 * @param {boolean=} opt_capture In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase
 *     of the event.
 * @param {Object=} opt_handlerScope Object in whose scope to call
 *     the listener.
 * @deprecated Use {@code #listen} instead, when possible. Otherwise, use
 *     {@code goog.events.listen} if you are passing Object
 *     (instead of Function) as handler.
 */
goog.events.EventTarget.prototype.addEventListener = function(
    type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};


/**
 * Removes an event listener from the event target. The handler must be the
 * same object as the one added. If the handler has not been added then
 * nothing is done.
 *
 * @param {string} type The type of the event to listen for.
 * @param {function(?):?|{handleEvent:function(?):?}|null} handler The function
 *     to handle the event. The handler can also be an object that implements
 *     the handleEvent method which takes the event object as argument.
 * @param {boolean=} opt_capture In DOM-compliant browsers, this determines
 *     whether the listener is fired during the capture or bubble phase
 *     of the event.
 * @param {Object=} opt_handlerScope Object in whose scope to call
 *     the listener.
 * @deprecated Use {@code #unlisten} instead, when possible. Otherwise, use
 *     {@code goog.events.unlisten} if you are passing Object
 *     (instead of Function) as handler.
 */
goog.events.EventTarget.prototype.removeEventListener = function(
    type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};


/** @override */
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();

  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (; ancestor; ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(
          (++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_),
          'infinite loop');
    }
  }

  return goog.events.EventTarget.dispatchEventInternal_(
      this.actualEventTarget_, e, ancestorsTree);
};


/**
 * Removes listeners from this object.  Classes that extend EventTarget may
 * need to override this method in order to remove references to DOM Elements
 * and additional listeners.
 * @override
 */
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);

  this.removeAllListeners();
  this.parentEventTarget_ = null;
};


/** @override */
goog.events.EventTarget.prototype.listen = function(
    type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(
      String(type), listener, false /* callOnce */, opt_useCapture,
      opt_listenerScope);
};


/** @override */
goog.events.EventTarget.prototype.listenOnce = function(
    type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(
      String(type), listener, true /* callOnce */, opt_useCapture,
      opt_listenerScope);
};


/** @override */
goog.events.EventTarget.prototype.unlisten = function(
    type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(
      String(type), listener, opt_useCapture, opt_listenerScope);
};


/** @override */
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};


/** @override */
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  // TODO(chrishenry): Previously, removeAllListeners can be called on
  // uninitialized EventTarget, so we preserve that behavior. We
  // should remove this when usages that rely on that fact are purged.
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};


/** @override */
goog.events.EventTarget.prototype.fireListeners = function(
    type, capture, eventObject) {
  // TODO(chrishenry): Original code avoids array creation when there
  // is no listener, so we do the same. If this optimization turns
  // out to be not required, we can replace this with
  // getListeners(type, capture) instead, which is simpler.
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();

  var rv = true;
  for (var i = 0; i < listenerArray.length; ++i) {
    var listener = listenerArray[i];
    // We might not have a listener if the listener was removed.
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;

      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }

  return rv && eventObject.returnValue_ != false;
};


/** @override */
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};


/** @override */
goog.events.EventTarget.prototype.getListener = function(
    type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(
      String(type), listener, capture, opt_listenerScope);
};


/** @override */
goog.events.EventTarget.prototype.hasListener = function(
    opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};


/**
 * Sets the target to be used for {@code event.target} when firing
 * event. Mainly used for testing. For example, see
 * {@code goog.testing.events.mixinListenable}.
 * @param {!Object} target The target.
 */
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};


/**
 * Asserts that the event target instance is initialized properly.
 * @private
 */
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(
      this.eventTargetListeners_,
      'Event target is not initialized. Did you call the superclass ' +
      '(goog.events.EventTarget) constructor?');
};


/**
 * Dispatches the given event on the ancestorsTree.
 *
 * @param {!Object} target The target to dispatch on.
 * @param {goog.events.Event|Object|string} e The event object.
 * @param {Array.<goog.events.Listenable>=} opt_ancestorsTree The ancestors
 *     tree of the target, in reverse order from the closest ancestor
 *     to the root event target. May be null if the target has no ancestor.
 * @return {boolean} If anyone called preventDefault on the event object (or
 *     if any of the listeners returns false) this will also return false.
 * @private
 */
goog.events.EventTarget.dispatchEventInternal_ = function(
    target, e, opt_ancestorsTree) {
  var type = e.type || /** @type {string} */ (e);

  // If accepting a string or object, create a custom event object so that
  // preventDefault and stopPropagation work with the event.
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else if (!(e instanceof goog.events.Event)) {
    var oldEvent = e;
    e = new goog.events.Event(type, target);
    goog.object.extend(e, oldEvent);
  } else {
    e.target = e.target || target;
  }

  var rv = true, currentTarget;

  // Executes all capture listeners on the ancestors, if any.
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1; !e.propagationStopped_ && i >= 0;
         i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }

  // Executes capture and bubble listeners on the target.
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }

  // Executes all bubble listeners on the ancestors, if any.
  if (opt_ancestorsTree) {
    for (i = 0; !e.propagationStopped_ && i < opt_ancestorsTree.length; i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }

  return rv;
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A timer class to which other classes and objects can
 * listen on.  This is only an abstraction above setInterval.
 *
 * @see ../demos/timers.html
 */

goog.provide('goog.Timer');

goog.require('goog.Promise');
goog.require('goog.events.EventTarget');



/**
 * Class for handling timing events.
 *
 * @param {number=} opt_interval Number of ms between ticks (Default: 1ms).
 * @param {Object=} opt_timerObject  An object that has setTimeout, setInterval,
 *     clearTimeout and clearInterval (eg Window).
 * @constructor
 * @extends {goog.events.EventTarget}
 */
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);

  /**
   * Number of ms between ticks
   * @type {number}
   * @private
   */
  this.interval_ = opt_interval || 1;

  /**
   * An object that implements setTimeout, setInterval, clearTimeout and
   * clearInterval. We default to the window object. Changing this on
   * goog.Timer.prototype changes the object for all timer instances which can
   * be useful if your environment has some other implementation of timers than
   * the window object.
   * @type {Object}
   * @private
   */
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;

  /**
   * Cached tick_ bound to the object for later use in the timer.
   * @type {Function}
   * @private
   */
  this.boundTick_ = goog.bind(this.tick_, this);

  /**
   * Firefox browser often fires the timer event sooner
   * (sometimes MUCH sooner) than the requested timeout. So we
   * compare the time to when the event was last fired, and
   * reschedule if appropriate. See also goog.Timer.intervalScale
   * @type {number}
   * @private
   */
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);


/**
 * Maximum timeout value.
 *
 * Timeout values too big to fit into a signed 32-bit integer may cause
 * overflow in FF, Safari, and Chrome, resulting in the timeout being
 * scheduled immediately.  It makes more sense simply not to schedule these
 * timeouts, since 24.8 days is beyond a reasonable expectation for the
 * browser to stay open.
 *
 * @type {number}
 * @private
 */
goog.Timer.MAX_TIMEOUT_ = 2147483647;


/**
 * A timer ID that cannot be returned by any known implmentation of
 * Window.setTimeout.  Passing this value to window.clearTimeout should
 * therefore be a no-op.
 *
 * @const {number}
 * @private
 */
goog.Timer.INVALID_TIMEOUT_ID_ = -1;


/**
 * Whether this timer is enabled
 * @type {boolean}
 */
goog.Timer.prototype.enabled = false;


/**
 * An object that implements setTimout, setInterval, clearTimeout and
 * clearInterval. We default to the global object. Changing
 * goog.Timer.defaultTimerObject changes the object for all timer instances
 * which can be useful if your environment has some other implementation of
 * timers you'd like to use.
 * @type {Object}
 */
goog.Timer.defaultTimerObject = goog.global;


/**
 * A variable that controls the timer error correction. If the
 * timer is called before the requested interval times
 * intervalScale, which often happens on mozilla, the timer is
 * rescheduled. See also this.last_
 * @type {number}
 */
goog.Timer.intervalScale = 0.8;


/**
 * Variable for storing the result of setInterval
 * @type {?number}
 * @private
 */
goog.Timer.prototype.timer_ = null;


/**
 * Gets the interval of the timer.
 * @return {number} interval Number of ms between ticks.
 */
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};


/**
 * Sets the interval of the timer.
 * @param {number} interval Number of ms between ticks.
 */
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    // Stop and then start the timer to reset the interval.
    this.stop();
    this.start();
  } else if (this.timer_) {
    this.stop();
  }
};


/**
 * Callback for the setTimeout used by the timer
 * @private
 */
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 &&
        elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_,
          this.interval_ - elapsed);
      return;
    }

    // Prevents setInterval from registering a duplicate timeout when called
    // in the timer event handler.
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }

    this.dispatchTick();
    // The timer could be stopped in the timer event handler.
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_,
          this.interval_);
      this.last_ = goog.now();
    }
  }
};


/**
 * Dispatches the TICK event. This is its own method so subclasses can override.
 */
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};


/**
 * Starts the timer.
 */
goog.Timer.prototype.start = function() {
  this.enabled = true;

  // If there is no interval already registered, start it now
  if (!this.timer_) {
    // IMPORTANT!
    // window.setInterval in FireFox has a bug - it fires based on
    // absolute time, rather than on relative time. What this means
    // is that if a computer is sleeping/hibernating for 24 hours
    // and the timer interval was configured to fire every 1000ms,
    // then after the PC wakes up the timer will fire, in rapid
    // succession, 3600*24 times.
    // This bug is described here and is already fixed, but it will
    // take time to propagate, so for now I am switching this over
    // to setTimeout logic.
    //     https://bugzilla.mozilla.org/show_bug.cgi?id=376643
    //
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_,
        this.interval_);
    this.last_ = goog.now();
  }
};


/**
 * Stops the timer.
 */
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};


/** @override */
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};


/**
 * Constant for the timer's event type
 * @type {string}
 */
goog.Timer.TICK = 'tick';


/**
 * Calls the given function once, after the optional pause.
 *
 * The function is always called asynchronously, even if the delay is 0. This
 * is a common trick to schedule a function to run after a batch of browser
 * event processing.
 *
 * @param {function(this:SCOPE)|{handleEvent:function()}|null} listener Function
 *     or object that has a handleEvent method.
 * @param {number=} opt_delay Milliseconds to wait; default is 0.
 * @param {SCOPE=} opt_handler Object in whose scope to call the listener.
 * @return {number} A handle to the timer ID.
 * @template SCOPE
 */
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else if (listener && typeof listener.handleEvent == 'function') {
    // using typeof to prevent strict js warning
    listener = goog.bind(listener.handleEvent, listener);
  } else {
    throw Error('Invalid listener argument');
  }

  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    // Timeouts greater than MAX_INT return immediately due to integer
    // overflow in many browsers.  Since MAX_INT is 24.8 days, just don't
    // schedule anything at all.
    return goog.Timer.INVALID_TIMEOUT_ID_;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(
        listener, opt_delay || 0);
  }
};


/**
 * Clears a timeout initiated by callOnce
 * @param {?number} timerId a timer ID.
 */
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};


/**
 * @param {number} delay Milliseconds to wait.
 * @param {(RESULT|goog.Thenable.<RESULT>|Thenable)=} opt_result The value
 *     with which the promise will be resolved.
 * @return {!goog.Promise.<RESULT>} A promise that will be resolved after
 *     the specified delay, unless it is canceled first.
 * @template RESULT
 */
goog.Timer.promise = function(delay, opt_result) {
  var timerKey = null;
  return new goog.Promise(function(resolve, reject) {
    timerKey = goog.Timer.callOnce(function() {
      resolve(opt_result);
    }, delay);
    if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
      reject(new Error('Failed to schedule timer.'));
    }
  }).thenCatch(function(error) {
    // Clear the timer. The most likely reason is "cancel" signal.
    goog.Timer.clear(timerKey);
    throw error;
  });
};

// Copyright 2007 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Error codes shared between goog.net.IframeIo and
 * goog.net.XhrIo.
 */

goog.provide('goog.net.ErrorCode');


/**
 * Error codes
 * @enum {number}
 */
goog.net.ErrorCode = {

  /**
   * There is no error condition.
   */
  NO_ERROR: 0,

  /**
   * The most common error from iframeio, unfortunately, is that the browser
   * responded with an error page that is classed as a different domain. The
   * situations, are when a browser error page  is shown -- 404, access denied,
   * DNS failure, connection reset etc.)
   *
   */
  ACCESS_DENIED: 1,

  /**
   * Currently the only case where file not found will be caused is when the
   * code is running on the local file system and a non-IE browser makes a
   * request to a file that doesn't exist.
   */
  FILE_NOT_FOUND: 2,

  /**
   * If Firefox shows a browser error page, such as a connection reset by
   * server or access denied, then it will fail silently without the error or
   * load handlers firing.
   */
  FF_SILENT_ERROR: 3,

  /**
   * Custom error provided by the client through the error check hook.
   */
  CUSTOM_ERROR: 4,

  /**
   * Exception was thrown while processing the request.
   */
  EXCEPTION: 5,

  /**
   * The Http response returned a non-successful http status code.
   */
  HTTP_ERROR: 6,

  /**
   * The request was aborted.
   */
  ABORT: 7,

  /**
   * The request timed out.
   */
  TIMEOUT: 8,

  /**
   * The resource is not available offline.
   */
  OFFLINE: 9
};


/**
 * Returns a friendly error message for an error code. These messages are for
 * debugging and are not localized.
 * @param {goog.net.ErrorCode} errorCode An error code.
 * @return {string} A message for debugging.
 */
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch (errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return 'No Error';

    case goog.net.ErrorCode.ACCESS_DENIED:
      return 'Access denied to content document';

    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return 'File not found';

    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return 'Firefox silently errored';

    case goog.net.ErrorCode.CUSTOM_ERROR:
      return 'Application custom error';

    case goog.net.ErrorCode.EXCEPTION:
      return 'An exception occurred';

    case goog.net.ErrorCode.HTTP_ERROR:
      return 'Http response at 400 or 500 level';

    case goog.net.ErrorCode.ABORT:
      return 'Request was aborted';

    case goog.net.ErrorCode.TIMEOUT:
      return 'Request timed out';

    case goog.net.ErrorCode.OFFLINE:
      return 'The resource is not available offline';

    default:
      return 'Unrecognized error code';
  }
};

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Constants for HTTP status codes.
 */

goog.provide('goog.net.HttpStatus');


/**
 * HTTP Status Codes defined in RFC 2616 and RFC 6585.
 * @see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
 * @see http://tools.ietf.org/html/rfc6585
 * @enum {number}
 */
goog.net.HttpStatus = {
  // Informational 1xx
  CONTINUE: 100,
  SWITCHING_PROTOCOLS: 101,

  // Successful 2xx
  OK: 200,
  CREATED: 201,
  ACCEPTED: 202,
  NON_AUTHORITATIVE_INFORMATION: 203,
  NO_CONTENT: 204,
  RESET_CONTENT: 205,
  PARTIAL_CONTENT: 206,

  // Redirection 3xx
  MULTIPLE_CHOICES: 300,
  MOVED_PERMANENTLY: 301,
  FOUND: 302,
  SEE_OTHER: 303,
  NOT_MODIFIED: 304,
  USE_PROXY: 305,
  TEMPORARY_REDIRECT: 307,

  // Client Error 4xx
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  PAYMENT_REQUIRED: 402,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  METHOD_NOT_ALLOWED: 405,
  NOT_ACCEPTABLE: 406,
  PROXY_AUTHENTICATION_REQUIRED: 407,
  REQUEST_TIMEOUT: 408,
  CONFLICT: 409,
  GONE: 410,
  LENGTH_REQUIRED: 411,
  PRECONDITION_FAILED: 412,
  REQUEST_ENTITY_TOO_LARGE: 413,
  REQUEST_URI_TOO_LONG: 414,
  UNSUPPORTED_MEDIA_TYPE: 415,
  REQUEST_RANGE_NOT_SATISFIABLE: 416,
  EXPECTATION_FAILED: 417,
  PRECONDITION_REQUIRED: 428,
  TOO_MANY_REQUESTS: 429,
  REQUEST_HEADER_FIELDS_TOO_LARGE: 431,

  // Server Error 5xx
  INTERNAL_SERVER_ERROR: 500,
  NOT_IMPLEMENTED: 501,
  BAD_GATEWAY: 502,
  SERVICE_UNAVAILABLE: 503,
  GATEWAY_TIMEOUT: 504,
  HTTP_VERSION_NOT_SUPPORTED: 505,
  NETWORK_AUTHENTICATION_REQUIRED: 511,

  /*
   * IE returns this code for 204 due to its use of URLMon, which returns this
   * code for 'Operation Aborted'. The status text is 'Unknown', the response
   * headers are ''. Known to occur on IE 6 on XP through IE9 on Win7.
   */
  QUIRK_IE_NO_CONTENT: 1223
};


/**
 * Returns whether the given status should be considered successful.
 *
 * Successful codes are OK (200), CREATED (201), ACCEPTED (202),
 * NO CONTENT (204), PARTIAL CONTENT (206), NOT MODIFIED (304),
 * and IE's no content code (1223).
 *
 * @param {number} status The status code to test.
 * @return {boolean} Whether the status code should be considered successful.
 */
goog.net.HttpStatus.isSuccess = function(status) {
  switch (status) {
    case goog.net.HttpStatus.OK:
    case goog.net.HttpStatus.CREATED:
    case goog.net.HttpStatus.ACCEPTED:
    case goog.net.HttpStatus.NO_CONTENT:
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    case goog.net.HttpStatus.NOT_MODIFIED:
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;

    default:
      return false;
  }
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview JSON utility functions.
 * @author arv@google.com (Erik Arvidsson)
 */


goog.provide('goog.json');
goog.provide('goog.json.Replacer');
goog.provide('goog.json.Reviver');
goog.provide('goog.json.Serializer');


/**
 * @define {boolean} If true, use the native JSON parsing API.
 * NOTE(ruilopes): EXPERIMENTAL, handle with care.  Setting this to true might
 * break your code.  The default {@code goog.json.parse} implementation is able
 * to handle invalid JSON, such as JSPB.
 */
goog.define('goog.json.USE_NATIVE_JSON', false);


/**
 * Tests if a string is an invalid JSON string. This only ensures that we are
 * not using any invalid characters
 * @param {string} s The string to test.
 * @return {boolean} True if the input is a valid JSON string.
 */
goog.json.isValid = function(s) {
  // All empty whitespace is not valid.
  if (/^\s*$/.test(s)) {
    return false;
  }

  // This is taken from http://www.json.org/json2.js which is released to the
  // public domain.
  // Changes: We dissallow \u2028 Line separator and \u2029 Paragraph separator
  // inside strings.  We also treat \u2028 and \u2029 as whitespace which they
  // are in the RFC but IE and Safari does not match \s to these so we need to
  // include them in the reg exps in all places where whitespace is allowed.
  // We allowed \x7f inside strings because some tools don't escape it,
  // e.g. http://www.json.org/java/org/json/JSONObject.java

  // Parsing happens in three stages. In the first stage, we run the text
  // against regular expressions that look for non-JSON patterns. We are
  // especially concerned with '()' and 'new' because they can cause invocation,
  // and '=' because it can cause mutation. But just to be safe, we want to
  // reject all unexpected forms.

  // We split the first stage into 4 regexp operations in order to work around
  // crippling inefficiencies in IE's and Safari's regexp engines. First we
  // replace all backslash pairs with '@' (a non-JSON character). Second, we
  // replace all simple value tokens with ']' characters. Third, we delete all
  // open brackets that follow a colon or comma or that begin the text. Finally,
  // we look to see that the remaining characters are only whitespace or ']' or
  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

  // Don't make these static since they have the global flag.
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe =
      /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;

  return remainderRe.test(s.replace(backslashesRe, '@').
      replace(simpleValuesRe, ']').
      replace(openBracketsRe, ''));
};


/**
 * Parses a JSON string and returns the result. This throws an exception if
 * the string is an invalid JSON string.
 *
 * Note that this is very slow on large strings. If you trust the source of
 * the string then you should use unsafeParse instead.
 *
 * @param {*} s The JSON string to parse.
 * @throws Error if s is invalid JSON.
 * @return {Object} The object generated from the JSON string, or null.
 */
goog.json.parse = goog.json.USE_NATIVE_JSON ?
    /** @type {function(*):Object} */ (goog.global['JSON']['parse']) :
    function(s) {
      var o = String(s);
      if (goog.json.isValid(o)) {
        /** @preserveTry */
        try {
          return /** @type {Object} */ (eval('(' + o + ')'));
        } catch (ex) {
        }
      }
      throw Error('Invalid JSON string: ' + o);
    };


/**
 * Parses a JSON string and returns the result. This uses eval so it is open
 * to security issues and it should only be used if you trust the source.
 *
 * @param {string} s The JSON string to parse.
 * @return {Object} The object generated from the JSON string.
 */
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ?
    /** @type {function(string):Object} */ (goog.global['JSON']['parse']) :
    function(s) {
      return /** @type {Object} */ (eval('(' + s + ')'));
    };


/**
 * JSON replacer, as defined in Section 15.12.3 of the ES5 spec.
 * @see http://ecma-international.org/ecma-262/5.1/#sec-15.12.3
 *
 * TODO(nicksantos): Array should also be a valid replacer.
 *
 * @typedef {function(this:Object, string, *): *}
 */
goog.json.Replacer;


/**
 * JSON reviver, as defined in Section 15.12.2 of the ES5 spec.
 * @see http://ecma-international.org/ecma-262/5.1/#sec-15.12.3
 *
 * @typedef {function(this:Object, string, *): *}
 */
goog.json.Reviver;


/**
 * Serializes an object or a value to a JSON string.
 *
 * @param {*} object The object to serialize.
 * @param {?goog.json.Replacer=} opt_replacer A replacer function
 *     called for each (key, value) pair that determines how the value
 *     should be serialized. By defult, this just returns the value
 *     and allows default serialization to kick in.
 * @throws Error if there are loops in the object graph.
 * @return {string} A JSON string representation of the input.
 */
goog.json.serialize = goog.json.USE_NATIVE_JSON ?
    /** @type {function(*, ?goog.json.Replacer=):string} */
    (goog.global['JSON']['stringify']) :
    function(object, opt_replacer) {
      // NOTE(nicksantos): Currently, we never use JSON.stringify.
      //
      // The last time I evaluated this, JSON.stringify had subtle bugs and
      // behavior differences on all browsers, and the performance win was not
      // large enough to justify all the issues. This may change in the future
      // as browser implementations get better.
      //
      // assertSerialize in json_test contains if branches for the cases
      // that fail.
      return new goog.json.Serializer(opt_replacer).serialize(object);
    };



/**
 * Class that is used to serialize JSON objects to a string.
 * @param {?goog.json.Replacer=} opt_replacer Replacer.
 * @constructor
 */
goog.json.Serializer = function(opt_replacer) {
  /**
   * @type {goog.json.Replacer|null|undefined}
   * @private
   */
  this.replacer_ = opt_replacer;
};


/**
 * Serializes an object or a value to a JSON string.
 *
 * @param {*} object The object to serialize.
 * @throws Error if there are loops in the object graph.
 * @return {string} A JSON string representation of the input.
 */
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join('');
};


/**
 * Serializes a generic value to a JSON string
 * @protected
 * @param {*} object The object to serialize.
 * @param {Array.<string>} sb Array used as a string builder.
 * @throws Error if there are loops in the object graph.
 */
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch (typeof object) {
    case 'string':
      this.serializeString_(/** @type {string} */ (object), sb);
      break;
    case 'number':
      this.serializeNumber_(/** @type {number} */ (object), sb);
      break;
    case 'boolean':
      sb.push(object);
      break;
    case 'undefined':
      sb.push('null');
      break;
    case 'object':
      if (object == null) {
        sb.push('null');
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray(/** @type {!Array.<?>} */ (object), sb);
        break;
      }
      // should we allow new String, new Number and new Boolean to be treated
      // as string, number and boolean? Most implementations do not and the
      // need is not very big
      this.serializeObject_(/** @type {Object} */ (object), sb);
      break;
    case 'function':
      // Skip functions.
      // TODO(user) Should we return something here?
      break;
    default:
      throw Error('Unknown type: ' + typeof object);
  }
};


/**
 * Character mappings used internally for goog.string.quote
 * @private
 * @type {!Object}
 */
goog.json.Serializer.charToJsonCharCache_ = {
  '\"': '\\"',
  '\\': '\\\\',
  '/': '\\/',
  '\b': '\\b',
  '\f': '\\f',
  '\n': '\\n',
  '\r': '\\r',
  '\t': '\\t',

  '\x0B': '\\u000b' // '\v' is not supported in JScript
};


/**
 * Regular expression used to match characters that need to be replaced.
 * The S60 browser has a bug where unicode characters are not matched by
 * regular expressions. The condition below detects such behaviour and
 * adjusts the regular expression accordingly.
 * @private
 * @type {!RegExp}
 */
goog.json.Serializer.charsToReplace_ = /\uffff/.test('\uffff') ?
    /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;


/**
 * Serializes a string to a JSON string
 * @private
 * @param {string} s The string to serialize.
 * @param {Array.<string>} sb Array used as a string builder.
 */
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  // The official JSON implementation does not work with international
  // characters.
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    // caching the result improves performance by a factor 2-3
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }

    var cc = c.charCodeAt(0);
    var rv = '\\u';
    if (cc < 16) {
      rv += '000';
    } else if (cc < 256) {
      rv += '00';
    } else if (cc < 4096) { // \u1000
      rv += '0';
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};


/**
 * Serializes a number to a JSON string
 * @private
 * @param {number} n The number to serialize.
 * @param {Array.<string>} sb Array used as a string builder.
 */
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : 'null');
};


/**
 * Serializes an array to a JSON string
 * @param {Array.<string>} arr The array to serialize.
 * @param {Array.<string>} sb Array used as a string builder.
 * @protected
 */
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push('[');
  var sep = '';
  for (var i = 0; i < l; i++) {
    sb.push(sep);

    var value = arr[i];
    this.serializeInternal(
        this.replacer_ ? this.replacer_.call(arr, String(i), value) : value,
        sb);

    sep = ',';
  }
  sb.push(']');
};


/**
 * Serializes an object to a JSON string
 * @private
 * @param {Object} obj The object to serialize.
 * @param {Array.<string>} sb Array used as a string builder.
 */
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push('{');
  var sep = '';
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      // Skip functions.
      // TODO(ptucker) Should we return something for function properties?
      if (typeof value != 'function') {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(':');

        this.serializeInternal(
            this.replacer_ ? this.replacer_.call(obj, key, value) : value,
            sb);

        sep = ',';
      }
    }
  }
  sb.push('}');
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('goog.net.XhrLike');



/**
 * Interface for the common parts of XMLHttpRequest.
 *
 * Mostly copied from externs/w3c_xml.js.
 *
 * @interface
 * @see http://www.w3.org/TR/XMLHttpRequest/
 */
goog.net.XhrLike = function() {};


/**
 * Typedef that refers to either native or custom-implemented XHR objects.
 * @typedef {!goog.net.XhrLike|!XMLHttpRequest}
 */
goog.net.XhrLike.OrNative;


/**
 * @type {function()|null|undefined}
 * @see http://www.w3.org/TR/XMLHttpRequest/#handler-xhr-onreadystatechange
 */
goog.net.XhrLike.prototype.onreadystatechange;


/**
 * @type {string}
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute
 */
goog.net.XhrLike.prototype.responseText;


/**
 * @type {Document}
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-responsexml-attribute
 */
goog.net.XhrLike.prototype.responseXML;


/**
 * @type {number}
 * @see http://www.w3.org/TR/XMLHttpRequest/#readystate
 */
goog.net.XhrLike.prototype.readyState;


/**
 * @type {number}
 * @see http://www.w3.org/TR/XMLHttpRequest/#status
 */
goog.net.XhrLike.prototype.status;


/**
 * @type {string}
 * @see http://www.w3.org/TR/XMLHttpRequest/#statustext
 */
goog.net.XhrLike.prototype.statusText;


/**
 * @param {string} method
 * @param {string} url
 * @param {?boolean=} opt_async
 * @param {?string=} opt_user
 * @param {?string=} opt_password
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-open()-method
 */
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user,
    opt_password) {};


/**
 * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=} opt_data
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-send()-method
 */
goog.net.XhrLike.prototype.send = function(opt_data) {};


/**
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method
 */
goog.net.XhrLike.prototype.abort = function() {};


/**
 * @param {string} header
 * @param {string} value
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method
 */
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {};


/**
 * @param {string} header
 * @return {string}
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
 */
goog.net.XhrLike.prototype.getResponseHeader = function(header) {};


/**
 * @return {string}
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method
 */
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {};

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Interface for a factory for creating XMLHttpRequest objects
 * and metadata about them.
 * @author dbk@google.com (David Barrett-Kahn)
 */

goog.provide('goog.net.XmlHttpFactory');

/** @suppress {extraRequire} Typedef. */
goog.require('goog.net.XhrLike');



/**
 * Abstract base class for an XmlHttpRequest factory.
 * @constructor
 */
goog.net.XmlHttpFactory = function() {
};


/**
 * Cache of options - we only actually call internalGetOptions once.
 * @type {Object}
 * @private
 */
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;


/**
 * @return {!goog.net.XhrLike.OrNative} A new XhrLike instance.
 */
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;


/**
 * @return {Object} Options describing how xhr objects obtained from this
 *     factory should be used.
 */
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ ||
      (this.cachedOptions_ = this.internalGetOptions());
};


/**
 * Override this method in subclasses to preserve the caching offered by
 * getOptions().
 * @return {Object} Options describing how xhr objects obtained from this
 *     factory should be used.
 * @protected
 */
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;

// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implementation of XmlHttpFactory which allows construction from
 * simple factory methods.
 * @author dbk@google.com (David Barrett-Kahn)
 */

goog.provide('goog.net.WrapperXmlHttpFactory');

/** @suppress {extraRequire} Typedef. */
goog.require('goog.net.XhrLike');
goog.require('goog.net.XmlHttpFactory');



/**
 * An xhr factory subclass which can be constructed using two factory methods.
 * This exists partly to allow the preservation of goog.net.XmlHttp.setFactory()
 * with an unchanged signature.
 * @param {function():!goog.net.XhrLike.OrNative} xhrFactory
 *     A function which returns a new XHR object.
 * @param {function():!Object} optionsFactory A function which returns the
 *     options associated with xhr objects from this factory.
 * @extends {goog.net.XmlHttpFactory}
 * @constructor
 * @final
 */
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);

  /**
   * XHR factory method.
   * @type {function() : !goog.net.XhrLike.OrNative}
   * @private
   */
  this.xhrFactory_ = xhrFactory;

  /**
   * Options factory method.
   * @type {function() : !Object}
   * @private
   */
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);


/** @override */
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};


/** @override */
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};


// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Low level handling of XMLHttpRequest.
 * @author arv@google.com (Erik Arvidsson)
 * @author dbk@google.com (David Barrett-Kahn)
 */

goog.provide('goog.net.DefaultXmlHttpFactory');
goog.provide('goog.net.XmlHttp');
goog.provide('goog.net.XmlHttp.OptionType');
goog.provide('goog.net.XmlHttp.ReadyState');
goog.provide('goog.net.XmlHttpDefines');

goog.require('goog.asserts');
goog.require('goog.net.WrapperXmlHttpFactory');
goog.require('goog.net.XmlHttpFactory');


/**
 * Static class for creating XMLHttpRequest objects.
 * @return {!goog.net.XhrLike.OrNative} A new XMLHttpRequest object.
 */
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};


/**
 * @define {boolean} Whether to assume XMLHttpRequest exists. Setting this to
 *     true bypasses the ActiveX probing code.
 * NOTE(ruilopes): Due to the way JSCompiler works, this define *will not* strip
 * out the ActiveX probing code from binaries.  To achieve this, use
 * {@code goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR} instead.
 * TODO(ruilopes): Collapse both defines.
 */
goog.define('goog.net.XmlHttp.ASSUME_NATIVE_XHR', false);


/** @const */
goog.net.XmlHttpDefines = {};


/**
 * @define {boolean} Whether to assume XMLHttpRequest exists. Setting this to
 *     true eliminates the ActiveX probing code.
 */
goog.define('goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR', false);


/**
 * Gets the options to use with the XMLHttpRequest objects obtained using
 * the static methods.
 * @return {Object} The options.
 */
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};


/**
 * Type of options that an XmlHttp object can have.
 * @enum {number}
 */
goog.net.XmlHttp.OptionType = {
  /**
   * Whether a goog.nullFunction should be used to clear the onreadystatechange
   * handler instead of null.
   */
  USE_NULL_FUNCTION: 0,

  /**
   * NOTE(user): In IE if send() errors on a *local* request the readystate
   * is still changed to COMPLETE.  We need to ignore it and allow the
   * try/catch around send() to pick up the error.
   */
  LOCAL_REQUEST_ERROR: 1
};


/**
 * Status constants for XMLHTTP, matches:
 * http://msdn.microsoft.com/library/default.asp?url=/library/
 *   en-us/xmlsdk/html/0e6a34e4-f90c-489d-acff-cb44242fafc6.asp
 * @enum {number}
 */
goog.net.XmlHttp.ReadyState = {
  /**
   * Constant for when xmlhttprequest.readyState is uninitialized
   */
  UNINITIALIZED: 0,

  /**
   * Constant for when xmlhttprequest.readyState is loading.
   */
  LOADING: 1,

  /**
   * Constant for when xmlhttprequest.readyState is loaded.
   */
  LOADED: 2,

  /**
   * Constant for when xmlhttprequest.readyState is in an interactive state.
   */
  INTERACTIVE: 3,

  /**
   * Constant for when xmlhttprequest.readyState is completed
   */
  COMPLETE: 4
};


/**
 * The global factory instance for creating XMLHttpRequest objects.
 * @type {goog.net.XmlHttpFactory}
 * @private
 */
goog.net.XmlHttp.factory_;


/**
 * Sets the factories for creating XMLHttpRequest objects and their options.
 * @param {Function} factory The factory for XMLHttpRequest objects.
 * @param {Function} optionsFactory The factory for options.
 * @deprecated Use setGlobalFactory instead.
 */
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(
      goog.asserts.assert(factory),
      goog.asserts.assert(optionsFactory)));
};


/**
 * Sets the global factory object.
 * @param {!goog.net.XmlHttpFactory} factory New global factory object.
 */
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};



/**
 * Default factory to use when creating xhr objects.  You probably shouldn't be
 * instantiating this directly, but rather using it via goog.net.XmlHttp.
 * @extends {goog.net.XmlHttpFactory}
 * @constructor
 */
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);


/** @override */
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest();
  }
};


/** @override */
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};


/**
 * The ActiveX PROG ID string to use to create xhr's in IE. Lazily initialized.
 * @type {string|undefined}
 * @private
 */
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;


/**
 * Initialize the private state used by other functions.
 * @return {string} The ActiveX PROG ID string to use to create xhr's in IE.
 * @private
 */
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR ||
      goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return '';
  }

  // The following blog post describes what PROG IDs to use to create the
  // XMLHTTP object in Internet Explorer:
  // http://blogs.msdn.com/xmlteam/archive/2006/10/23/using-the-right-version-of-msxml-in-internet-explorer.aspx
  // However we do not (yet) fully trust that this will be OK for old versions
  // of IE on Win9x so we therefore keep the last 2.
  if (!this.ieProgId_ && typeof XMLHttpRequest == 'undefined' &&
      typeof ActiveXObject != 'undefined') {
    // Candidate Active X types.
    var ACTIVE_X_IDENTS = ['MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.3.0',
                           'MSXML2.XMLHTTP', 'Microsoft.XMLHTTP'];
    for (var i = 0; i < ACTIVE_X_IDENTS.length; i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      /** @preserveTry */
      try {
        new ActiveXObject(candidate);
        // NOTE(user): cannot assign progid and return candidate in one line
        // because JSCompiler complaings: BUG 658126
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
        // do nothing; try next choice
      }
    }

    // couldn't find any matches
    throw Error('Could not create ActiveXObject. ActiveX might be disabled,' +
                ' or MSXML might not be installed');
  }

  return /** @type {string} */ (this.ieProgId_);
};


//Set the global factory to an instance of the default factory.
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory());

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Common events for the network classes.
 */


goog.provide('goog.net.EventType');


/**
 * Event names for network events
 * @enum {string}
 */
goog.net.EventType = {
  COMPLETE: 'complete',
  SUCCESS: 'success',
  ERROR: 'error',
  ABORT: 'abort',
  READY: 'ready',
  READY_STATE_CHANGE: 'readystatechange',
  TIMEOUT: 'timeout',
  INCREMENTAL_DATA: 'incrementaldata',
  PROGRESS: 'progress'
};

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines the collection interface.
 *
 * @author nnaze@google.com (Nathan Naze)
 */

goog.provide('goog.structs.Collection');



/**
 * An interface for a collection of values.
 * @interface
 * @template T
 */
goog.structs.Collection = function() {};


/**
 * @param {T} value Value to add to the collection.
 */
goog.structs.Collection.prototype.add;


/**
 * @param {T} value Value to remove from the collection.
 */
goog.structs.Collection.prototype.remove;


/**
 * @param {T} value Value to find in the collection.
 * @return {boolean} Whether the collection contains the specified value.
 */
goog.structs.Collection.prototype.contains;


/**
 * @return {number} The number of values stored in the collection.
 */
goog.structs.Collection.prototype.getCount;


// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Datastructure: Set.
 *
 * @author arv@google.com (Erik Arvidsson)
 *
 * This class implements a set data structure. Adding and removing is O(1). It
 * supports both object and primitive values. Be careful because you can add
 * both 1 and new Number(1), because these are not the same. You can even add
 * multiple new Number(1) because these are not equal.
 */


goog.provide('goog.structs.Set');

goog.require('goog.structs');
goog.require('goog.structs.Collection');
goog.require('goog.structs.Map');



/**
 * A set that can contain both primitives and objects.  Adding and removing
 * elements is O(1).  Primitives are treated as identical if they have the same
 * type and convert to the same string.  Objects are treated as identical only
 * if they are references to the same object.  WARNING: A goog.structs.Set can
 * contain both 1 and (new Number(1)), because they are not the same.  WARNING:
 * Adding (new Number(1)) twice will yield two distinct elements, because they
 * are two different objects.  WARNING: Any object that is added to a
 * goog.structs.Set will be modified!  Because goog.getUid() is used to
 * identify objects, every object in the set will be mutated.
 * @param {Array.<T>|Object.<?,T>=} opt_values Initial values to start with.
 * @constructor
 * @implements {goog.structs.Collection.<T>}
 * @final
 * @template T
 */
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};


/**
 * Obtains a unique key for an element of the set.  Primitives will yield the
 * same key if they have the same type and convert to the same string.  Object
 * references will yield the same key only if they refer to the same object.
 * @param {*} val Object or primitive value to get a key for.
 * @return {string} A unique key for this value/object.
 * @private
 */
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == 'object' && val || type == 'function') {
    return 'o' + goog.getUid(/** @type {Object} */ (val));
  } else {
    return type.substr(0, 1) + val;
  }
};


/**
 * @return {number} The number of elements in the set.
 * @override
 */
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};


/**
 * Add a primitive or an object to the set.
 * @param {T} element The primitive or object to add.
 * @override
 */
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};


/**
 * Adds all the values in the given collection to this set.
 * @param {Array.<T>|goog.structs.Collection.<T>|Object.<?,T>} col A collection
 *     containing the elements to add.
 */
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0; i < l; i++) {
    this.add(values[i]);
  }
};


/**
 * Removes all values in the given collection from this set.
 * @param {Array.<T>|goog.structs.Collection.<T>|Object.<?,T>} col A collection
 *     containing the elements to remove.
 */
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0; i < l; i++) {
    this.remove(values[i]);
  }
};


/**
 * Removes the given element from this set.
 * @param {T} element The primitive or object to remove.
 * @return {boolean} Whether the element was found and removed.
 * @override
 */
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};


/**
 * Removes all elements from this set.
 */
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};


/**
 * Tests whether this set is empty.
 * @return {boolean} True if there are no elements in this set.
 */
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};


/**
 * Tests whether this set contains the given element.
 * @param {T} element The primitive or object to test for.
 * @return {boolean} True if this set contains the given element.
 * @override
 */
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};


/**
 * Tests whether this set contains all the values in a given collection.
 * Repeated elements in the collection are ignored, e.g.  (new
 * goog.structs.Set([1, 2])).containsAll([1, 1]) is True.
 * @param {goog.structs.Collection.<T>|Object} col A collection-like object.
 * @return {boolean} True if the set contains all elements.
 */
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};


/**
 * Finds all values that are present in both this set and the given collection.
 * @param {Array.<S>|Object.<?,S>} col A collection.
 * @return {!goog.structs.Set.<T|S>} A new set containing all the values
 *     (primitives or objects) present in both this set and the given
 *     collection.
 * @template S
 */
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set();

  var values = goog.structs.getValues(col);
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }

  return result;
};


/**
 * Finds all values that are present in this set and not in the given
 * collection.
 * @param {Array.<T>|goog.structs.Collection.<T>|Object.<?,T>} col A collection.
 * @return {!goog.structs.Set} A new set containing all the values
 *     (primitives or objects) present in this set but not in the given
 *     collection.
 */
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};


/**
 * Returns an array containing all the elements in this set.
 * @return {!Array.<T>} An array containing all the elements in this set.
 */
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};


/**
 * Creates a shallow clone of this set.
 * @return {!goog.structs.Set.<T>} A new set containing all the same elements as
 *     this set.
 */
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};


/**
 * Tests whether the given collection consists of the same elements as this set,
 * regardless of order, without repetition.  Primitives are treated as equal if
 * they have the same type and convert to the same string; objects are treated
 * as equal if they are references to the same object.  This operation is O(n).
 * @param {goog.structs.Collection.<T>|Object} col A collection.
 * @return {boolean} True if the given collection consists of the same elements
 *     as this set, regardless of order, without repetition.
 */
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};


/**
 * Tests whether the given collection contains all the elements in this set.
 * Primitives are treated as equal if they have the same type and convert to the
 * same string; objects are treated as equal if they are references to the same
 * object.  This operation is O(n).
 * @param {goog.structs.Collection.<T>|Object} col A collection.
 * @return {boolean} True if this set is a subset of the given collection.
 */
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  // TODO(user) Find the minimal collection size where the conversion makes
  // the contains() method faster.
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    // Convert to a goog.structs.Set so that goog.structs.contains runs in
    // O(1) time instead of O(n) time.
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};


/**
 * Returns an iterator that iterates over the elements in this set.
 * @param {boolean=} opt_keys This argument is ignored.
 * @return {!goog.iter.Iterator} An iterator over the elements in this set.
 */
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Logging and debugging utilities.
 *
 * @see ../demos/debug.html
 */

goog.provide('goog.debug');

goog.require('goog.array');
goog.require('goog.string');
goog.require('goog.structs.Set');
goog.require('goog.userAgent');


/** @define {boolean} Whether logging should be enabled. */
goog.define('goog.debug.LOGGING_ENABLED', goog.DEBUG);


/**
 * Catches onerror events fired by windows and similar objects.
 * @param {function(Object)} logFunc The function to call with the error
 *    information.
 * @param {boolean=} opt_cancel Whether to stop the error from reaching the
 *    browser.
 * @param {Object=} opt_target Object that fires onerror events.
 */
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;

  // Chrome interprets onerror return value backwards (http://crbug.com/92062)
  // until it was fixed in webkit revision r94061 (Webkit 535.3). This
  // workaround still needs to be skipped in Safari after the webkit change
  // gets pushed out in Safari.
  // See https://bugs.webkit.org/show_bug.cgi?id=67119
  if (goog.userAgent.WEBKIT &&
      !goog.userAgent.isVersionOrHigher('535.3')) {
    retVal = !retVal;
  }

  /**
   * New onerror handler for this target. This onerror handler follows the spec
   * according to
   * http://www.whatwg.org/specs/web-apps/current-work/#runtime-script-errors
   * The spec was changed in August 2013 to support receiving column information
   * and an error object for all scripts on the same origin or cross origin
   * scripts with the proper headers. See
   * https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror
   *
   * @param {string} message The error message. For cross-origin errors, this
   *     will be scrubbed to just "Script error.". For new browsers that have
   *     updated to follow the latest spec, errors that come from origins that
   *     have proper cross origin headers will not be scrubbed.
   * @param {string} url The URL of the script that caused the error. The URL
   *     will be scrubbed to "" for cross origin scripts unless the script has
   *     proper cross origin headers and the browser has updated to the latest
   *     spec.
   * @param {number} line The line number in the script that the error
   *     occurred on.
   * @param {number=} opt_col The optional column number that the error
   *     occurred on. Only browsers that have updated to the latest spec will
   *     include this.
   * @param {Error=} opt_error The optional actual error object for this
   *     error that should include the stack. Only browsers that have updated
   *     to the latest spec will inlude this parameter.
   * @return {boolean} Whether to prevent the error from reaching the browser.
   */
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({
      message: message,
      fileName: url,
      line: line,
      col: opt_col,
      error: opt_error
    });
    return retVal;
  };
};


/**
 * Creates a string representing an object and all its properties.
 * @param {Object|null|undefined} obj Object to expose.
 * @param {boolean=} opt_showFn Show the functions as well as the properties,
 *     default is false.
 * @return {string} The string representation of {@code obj}.
 */
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == 'undefined') {
    return 'undefined';
  }
  if (obj == null) {
    return 'NULL';
  }
  var str = [];

  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + ' = ';
    /** @preserveTry */
    try {
      s += obj[x];
    } catch (e) {
      s += '*** ' + e + ' ***';
    }
    str.push(s);
  }
  return str.join('\n');
};


/**
 * Creates a string representing a given primitive or object, and for an
 * object, all its properties and nested objects.  WARNING: If an object is
 * given, it and all its nested objects will be modified.  To detect reference
 * cycles, this method identifies objects using goog.getUid() which mutates the
 * object.
 * @param {*} obj Object to expose.
 * @param {boolean=} opt_showFn Also show properties that are functions (by
 *     default, functions are omitted).
 * @return {string} A string representation of {@code obj}.
 */
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];

  var helper = function(obj, space, parentSeen) {
    var nestspace = space + '  ';
    var seen = new goog.structs.Set(parentSeen);

    var indentMultiline = function(str) {
      return str.replace(/\n/g, '\n' + space);
    };

    /** @preserveTry */
    try {
      if (!goog.isDef(obj)) {
        str.push('undefined');
      } else if (goog.isNull(obj)) {
        str.push('NULL');
      } else if (goog.isString(obj)) {
        str.push('"' + indentMultiline(obj) + '"');
      } else if (goog.isFunction(obj)) {
        str.push(indentMultiline(String(obj)));
      } else if (goog.isObject(obj)) {
        if (seen.contains(obj)) {
          str.push('*** reference loop detected ***');
        } else {
          seen.add(obj);
          str.push('{');
          for (var x in obj) {
            if (!opt_showFn && goog.isFunction(obj[x])) {
              continue;
            }
            str.push('\n');
            str.push(nestspace);
            str.push(x + ' = ');
            helper(obj[x], nestspace, seen);
          }
          str.push('\n' + space + '}');
        }
      } else {
        str.push(obj);
      }
    } catch (e) {
      str.push('*** ' + e + ' ***');
    }
  };

  helper(obj, '', new goog.structs.Set());
  return str.join('');
};


/**
 * Recursively outputs a nested array as a string.
 * @param {Array.<?>} arr The array.
 * @return {string} String representing nested array.
 */
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0; i < arr.length; i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return '[ ' + str.join(', ') + ' ]';
};


/**
 * Exposes an exception that has been caught by a try...catch and outputs the
 * error with a stack trace.
 * @param {Object} err Error object or string.
 * @param {Function=} opt_fn Optional function to start stack trace from.
 * @return {string} Details of exception.
 */
goog.debug.exposeException = function(err, opt_fn) {
  /** @preserveTry */
  try {
    var e = goog.debug.normalizeErrorObject(err);

    // Create the error message
    var error = 'Message: ' + goog.string.htmlEscape(e.message) +
        '\nUrl: <a href="view-source:' + e.fileName + '" target="_new">' +
        e.fileName + '</a>\nLine: ' + e.lineNumber + '\n\nBrowser stack:\n' +
        goog.string.htmlEscape(e.stack + '-> ') +
        '[end]\n\nJS stack traversal:\n' + goog.string.htmlEscape(
            goog.debug.getStacktrace(opt_fn) + '-> ');
    return error;
  } catch (e2) {
    return 'Exception trying to expose exception! You win, we lose. ' + e2;
  }
};


/**
 * Normalizes the error/exception object between browsers.
 * @param {Object} err Raw error object.
 * @return {!Object} Normalized error object.
 */
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName('window.location.href');
  if (goog.isString(err)) {
    return {
      'message': err,
      'name': 'Unknown error',
      'lineNumber': 'Not available',
      'fileName': href,
      'stack': 'Not available'
    };
  }

  var lineNumber, fileName;
  var threwError = false;

  try {
    lineNumber = err.lineNumber || err.line || 'Not available';
  } catch (e) {
    // Firefox 2 sometimes throws an error when accessing 'lineNumber':
    // Message: Permission denied to get property UnnamedClass.lineNumber
    lineNumber = 'Not available';
    threwError = true;
  }

  try {
    fileName = err.fileName || err.filename || err.sourceURL ||
        // $googDebugFname may be set before a call to eval to set the filename
        // that the eval is supposed to present.
        goog.global['$googDebugFname'] || href;
  } catch (e) {
    // Firefox 2 may also throw an error when accessing 'filename'.
    fileName = 'Not available';
    threwError = true;
  }

  // The IE Error object contains only the name and the message.
  // The Safari Error object uses the line and sourceURL fields.
  if (threwError || !err.lineNumber || !err.fileName || !err.stack ||
      !err.message || !err.name) {
    return {
      'message': err.message || 'Not available',
      'name': err.name || 'UnknownError',
      'lineNumber': lineNumber,
      'fileName': fileName,
      'stack': err.stack || 'Not available'
    };
  }

  // Standards error object
  return err;
};


/**
 * Converts an object to an Error if it's a String,
 * adds a stacktrace if there isn't one,
 * and optionally adds an extra message.
 * @param {Error|string} err  the original thrown object or string.
 * @param {string=} opt_message  optional additional message to add to the
 *     error.
 * @return {!Error} If err is a string, it is used to create a new Error,
 *     which is enhanced and returned.  Otherwise err itself is enhanced
 *     and returned.
 */
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == 'string') {
    error = Error(err);
    if (Error.captureStackTrace) {
      // Trim this function off the call stack, if we can.
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }

  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    // find the first unoccupied 'messageX' property
    var x = 0;
    while (error['message' + x]) {
      ++x;
    }
    error['message' + x] = String(opt_message);
  }
  return error;
};


/**
 * Gets the current stack trace. Simple and iterative - doesn't worry about
 * catching circular references or getting the args.
 * @param {number=} opt_depth Optional maximum depth to trace back to.
 * @return {string} A string with the function names of all functions in the
 *     stack, separated by \n.
 * @suppress {es5Strict}
 */
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
    // NOTE: browsers that have strict mode support also have native "stack"
    // properties.  Fall-through for legacy browser support.
  }

  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;

  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push('()\n');
    /** @preserveTry */
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push('[exception trying to get caller]\n');
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push('[...long stack...]');
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push('[...reached max depth limit...]');
  } else {
    sb.push('[end]');
  }

  return sb.join('');
};


/**
 * Max length of stack to try and output
 * @type {number}
 */
goog.debug.MAX_STACK_DEPTH = 50;


/**
 * @param {Function} fn The function to start getting the trace from.
 * @return {?string}
 * @private
 */
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error();
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    // IE10, only adds stack traces when an exception is thrown.
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};


/**
 * Gets the current stack trace, either starting from the caller or starting
 * from a specified function that's currently on the call stack.
 * @param {Function=} opt_fn Optional function to start getting the trace from.
 *     If not provided, defaults to the function that called this.
 * @return {string} Stack trace.
 * @suppress {es5Strict}
 */
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    // Try to get the stack trace from the environment if it is available.
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    // NOTE: browsers that have strict mode support also have native "stack"
    // properties. This function will throw in strict mode.
    stack = goog.debug.getStacktraceHelper_(
        opt_fn || arguments.callee.caller, []);
  }
  return stack;
};


/**
 * Private helper for getStacktrace().
 * @param {Function} fn Function to start getting the trace from.
 * @param {Array.<!Function>} visited List of functions visited so far.
 * @return {string} Stack trace starting from function fn.
 * @suppress {es5Strict}
 * @private
 */
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];

  // Circular reference, certain functions like bind seem to cause a recursive
  // loop so we need to catch circular references
  if (goog.array.contains(visited, fn)) {
    sb.push('[...circular reference...]');

  // Traverse the call stack until function not found or max depth is reached
  } else if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
    sb.push(goog.debug.getFunctionName(fn) + '(');
    var args = fn.arguments;
    // Args may be null for some special functions such as host objects or eval.
    for (var i = 0; args && i < args.length; i++) {
      if (i > 0) {
        sb.push(', ');
      }
      var argDesc;
      var arg = args[i];
      switch (typeof arg) {
        case 'object':
          argDesc = arg ? 'object' : 'null';
          break;

        case 'string':
          argDesc = arg;
          break;

        case 'number':
          argDesc = String(arg);
          break;

        case 'boolean':
          argDesc = arg ? 'true' : 'false';
          break;

        case 'function':
          argDesc = goog.debug.getFunctionName(arg);
          argDesc = argDesc ? argDesc : '[fn]';
          break;

        case 'undefined':
        default:
          argDesc = typeof arg;
          break;
      }

      if (argDesc.length > 40) {
        argDesc = argDesc.substr(0, 40) + '...';
      }
      sb.push(argDesc);
    }
    visited.push(fn);
    sb.push(')\n');
    /** @preserveTry */
    try {
      sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
    } catch (e) {
      sb.push('[exception trying to get caller]\n');
    }

  } else if (fn) {
    sb.push('[...long stack...]');
  } else {
    sb.push('[end]');
  }
  return sb.join('');
};


/**
 * Set a custom function name resolver.
 * @param {function(Function): string} resolver Resolves functions to their
 *     names.
 */
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};


/**
 * Gets a function name
 * @param {Function} fn Function to get name of.
 * @return {string} Function's name.
 */
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }

  // Heuristically determine function name based on code.
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = '[Anonymous]';
    }
  }

  return goog.debug.fnNameCache_[functionSource];
};


/**
 * Makes whitespace visible by replacing it with printable characters.
 * This is useful in finding diffrences between the expected and the actual
 * output strings of a testcase.
 * @param {string} string whose whitespace needs to be made visible.
 * @return {string} string whose whitespace is made visible.
 */
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, '[_]')
      .replace(/\f/g, '[f]')
      .replace(/\n/g, '[n]\n')
      .replace(/\r/g, '[r]')
      .replace(/\t/g, '[t]');
};


/**
 * Hash map for storing function names that have already been looked up.
 * @type {Object}
 * @private
 */
goog.debug.fnNameCache_ = {};


/**
 * Resolves functions to their names.  Resolved function names will be cached.
 * @type {function(Function):string}
 * @private
 */
goog.debug.fnNameResolver_;

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Definition of the LogRecord class. Please minimize
 * dependencies this file has on other closure classes as any dependency it
 * takes won't be able to use the logging infrastructure.
 *
 */

goog.provide('goog.debug.LogRecord');



/**
 * LogRecord objects are used to pass logging requests between
 * the logging framework and individual log Handlers.
 * @constructor
 * @param {goog.debug.Logger.Level} level One of the level identifiers.
 * @param {string} msg The string message.
 * @param {string} loggerName The name of the source logger.
 * @param {number=} opt_time Time this log record was created if other than now.
 *     If 0, we use #goog.now.
 * @param {number=} opt_sequenceNumber Sequence number of this log record. This
 *     should only be passed in when restoring a log record from persistence.
 */
goog.debug.LogRecord = function(level, msg, loggerName,
    opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};


/**
 * Time the LogRecord was created.
 * @type {number}
 * @private
 */
goog.debug.LogRecord.prototype.time_;


/**
 * Level of the LogRecord
 * @type {goog.debug.Logger.Level}
 * @private
 */
goog.debug.LogRecord.prototype.level_;


/**
 * Message associated with the record
 * @type {string}
 * @private
 */
goog.debug.LogRecord.prototype.msg_;


/**
 * Name of the logger that created the record.
 * @type {string}
 * @private
 */
goog.debug.LogRecord.prototype.loggerName_;


/**
 * Sequence number for the LogRecord. Each record has a unique sequence number
 * that is greater than all log records created before it.
 * @type {number}
 * @private
 */
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;


/**
 * Exception associated with the record
 * @type {Object}
 * @private
 */
goog.debug.LogRecord.prototype.exception_ = null;


/**
 * Exception text associated with the record
 * @type {?string}
 * @private
 */
goog.debug.LogRecord.prototype.exceptionText_ = null;


/**
 * @define {boolean} Whether to enable log sequence numbers.
 */
goog.define('goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS', true);


/**
 * A sequence counter for assigning increasing sequence numbers to LogRecord
 * objects.
 * @type {number}
 * @private
 */
goog.debug.LogRecord.nextSequenceNumber_ = 0;


/**
 * Sets all fields of the log record.
 * @param {goog.debug.Logger.Level} level One of the level identifiers.
 * @param {string} msg The string message.
 * @param {string} loggerName The name of the source logger.
 * @param {number=} opt_time Time this log record was created if other than now.
 *     If 0, we use #goog.now.
 * @param {number=} opt_sequenceNumber Sequence number of this log record. This
 *     should only be passed in when restoring a log record from persistence.
 */
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName,
    opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == 'number' ?
        opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }

  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};


/**
 * Get the source Logger's name.
 *
 * @return {string} source logger name (may be null).
 */
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};


/**
 * Get the exception that is part of the log record.
 *
 * @return {Object} the exception.
 */
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};


/**
 * Set the exception that is part of the log record.
 *
 * @param {Object} exception the exception.
 */
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};


/**
 * Get the exception text that is part of the log record.
 *
 * @return {?string} Exception text.
 */
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};


/**
 * Set the exception text that is part of the log record.
 *
 * @param {string} text The exception text.
 */
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};


/**
 * Get the source Logger's name.
 *
 * @param {string} loggerName source logger name (may be null).
 */
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};


/**
 * Get the logging message level, for example Level.SEVERE.
 * @return {goog.debug.Logger.Level} the logging message level.
 */
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};


/**
 * Set the logging message level, for example Level.SEVERE.
 * @param {goog.debug.Logger.Level} level the logging message level.
 */
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};


/**
 * Get the "raw" log message, before localization or formatting.
 *
 * @return {string} the raw message string.
 */
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};


/**
 * Set the "raw" log message, before localization or formatting.
 *
 * @param {string} msg the raw message string.
 */
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};


/**
 * Get event time in milliseconds since 1970.
 *
 * @return {number} event time in millis since 1970.
 */
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};


/**
 * Set event time in milliseconds since 1970.
 *
 * @param {number} time event time in millis since 1970.
 */
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};


/**
 * Get the sequence number.
 * <p>
 * Sequence numbers are normally assigned in the LogRecord
 * constructor, which assigns unique sequence numbers to
 * each new LogRecord in increasing order.
 * @return {number} the sequence number.
 */
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};


// Copyright 2010 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A buffer for log records. The purpose of this is to improve
 * logging performance by re-using old objects when the buffer becomes full and
 * to eliminate the need for each app to implement their own log buffer. The
 * disadvantage to doing this is that log handlers cannot maintain references to
 * log records and expect that they are not overwriten at a later point.
 *
 * @author agrieve@google.com (Andrew Grieve)
 */

goog.provide('goog.debug.LogBuffer');

goog.require('goog.asserts');
goog.require('goog.debug.LogRecord');



/**
 * Creates the log buffer.
 * @constructor
 * @final
 */
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(),
      'Cannot use goog.debug.LogBuffer without defining ' +
      'goog.debug.LogBuffer.CAPACITY.');
  this.clear();
};


/**
 * A static method that always returns the same instance of LogBuffer.
 * @return {!goog.debug.LogBuffer} The LogBuffer singleton instance.
 */
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    // This function is written with the return statement after the assignment
    // to avoid the jscompiler StripCode bug described in http://b/2608064.
    // After that bug is fixed this can be refactored.
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer();
  }
  return goog.debug.LogBuffer.instance_;
};


/**
 * @define {number} The number of log records to buffer. 0 means disable
 * buffering.
 */
goog.define('goog.debug.LogBuffer.CAPACITY', 0);


/**
 * The array to store the records.
 * @type {!Array.<!goog.debug.LogRecord|undefined>}
 * @private
 */
goog.debug.LogBuffer.prototype.buffer_;


/**
 * The index of the most recently added record or -1 if there are no records.
 * @type {number}
 * @private
 */
goog.debug.LogBuffer.prototype.curIndex_;


/**
 * Whether the buffer is at capacity.
 * @type {boolean}
 * @private
 */
goog.debug.LogBuffer.prototype.isFull_;


/**
 * Adds a log record to the buffer, possibly overwriting the oldest record.
 * @param {goog.debug.Logger.Level} level One of the level identifiers.
 * @param {string} msg The string message.
 * @param {string} loggerName The name of the source logger.
 * @return {!goog.debug.LogRecord} The log record.
 */
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] =
      new goog.debug.LogRecord(level, msg, loggerName);
};


/**
 * @return {boolean} Whether the log buffer is enabled.
 */
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};


/**
 * Removes all buffered log records.
 */
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};


/**
 * Calls the given function for each buffered log record, starting with the
 * oldest one.
 * @param {function(!goog.debug.LogRecord)} func The function to call.
 */
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  // Corner case: no records.
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func(/** @type {!goog.debug.LogRecord} */ (buffer[i]));
  } while (i != curIndex);
};


// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Definition of the Logger class. Please minimize dependencies
 * this file has on other closure classes as any dependency it takes won't be
 * able to use the logging infrastructure.
 *
 * @see ../demos/debug.html
 */

goog.provide('goog.debug.LogManager');
goog.provide('goog.debug.Loggable');
goog.provide('goog.debug.Logger');
goog.provide('goog.debug.Logger.Level');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.debug');
goog.require('goog.debug.LogBuffer');
goog.require('goog.debug.LogRecord');


/**
 * A message value that can be handled by a Logger.
 *
 * Functions are treated like callbacks, but are only called when the event's
 * log level is enabled. This is useful for logging messages that are expensive
 * to construct.
 *
 * @typedef {string|function(): string}
 */
goog.debug.Loggable;



/**
 * The Logger is an object used for logging debug messages. Loggers are
 * normally named, using a hierarchical dot-separated namespace. Logger names
 * can be arbitrary strings, but they should normally be based on the package
 * name or class name of the logged component, such as goog.net.BrowserChannel.
 *
 * The Logger object is loosely based on the java class
 * java.util.logging.Logger. It supports different levels of filtering for
 * different loggers.
 *
 * The logger object should never be instantiated by application code. It
 * should always use the goog.debug.Logger.getLogger function.
 *
 * @constructor
 * @param {string} name The name of the Logger.
 * @final
 */
goog.debug.Logger = function(name) {
  /**
   * Name of the Logger. Generally a dot-separated namespace
   * @private {string}
   */
  this.name_ = name;

  /**
   * Parent Logger.
   * @private {goog.debug.Logger}
   */
  this.parent_ = null;

  /**
   * Level that this logger only filters above. Null indicates it should
   * inherit from the parent.
   * @private {goog.debug.Logger.Level}
   */
  this.level_ = null;

  /**
   * Map of children loggers. The keys are the leaf names of the children and
   * the values are the child loggers.
   * @private {Object}
   */
  this.children_ = null;

  /**
   * Handlers that are listening to this logger.
   * @private {Array.<Function>}
   */
  this.handlers_ = null;
};


/** @const */
goog.debug.Logger.ROOT_LOGGER_NAME = '';


/**
 * @define {boolean} Toggles whether loggers other than the root logger can have
 *     log handlers attached to them and whether they can have their log level
 *     set. Logging is a bit faster when this is set to false.
 */
goog.define('goog.debug.Logger.ENABLE_HIERARCHY', true);


if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  /**
   * @type {!Array.<Function>}
   * @private
   */
  goog.debug.Logger.rootHandlers_ = [];


  /**
   * @type {goog.debug.Logger.Level}
   * @private
   */
  goog.debug.Logger.rootLevel_;
}



/**
 * The Level class defines a set of standard logging levels that
 * can be used to control logging output.  The logging Level objects
 * are ordered and are specified by ordered integers.  Enabling logging
 * at a given level also enables logging at all higher levels.
 * <p>
 * Clients should normally use the predefined Level constants such
 * as Level.SEVERE.
 * <p>
 * The levels in descending order are:
 * <ul>
 * <li>SEVERE (highest value)
 * <li>WARNING
 * <li>INFO
 * <li>CONFIG
 * <li>FINE
 * <li>FINER
 * <li>FINEST  (lowest value)
 * </ul>
 * In addition there is a level OFF that can be used to turn
 * off logging, and a level ALL that can be used to enable
 * logging of all messages.
 *
 * @param {string} name The name of the level.
 * @param {number} value The numeric value of the level.
 * @constructor
 * @final
 */
goog.debug.Logger.Level = function(name, value) {
  /**
   * The name of the level
   * @type {string}
   */
  this.name = name;

  /**
   * The numeric value of the level
   * @type {number}
   */
  this.value = value;
};


/**
 * @return {string} String representation of the logger level.
 * @override
 */
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};


/**
 * OFF is a special level that can be used to turn off logging.
 * This level is initialized to <CODE>Infinity</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.OFF =
    new goog.debug.Logger.Level('OFF', Infinity);


/**
 * SHOUT is a message level for extra debugging loudness.
 * This level is initialized to <CODE>1200</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level('SHOUT', 1200);


/**
 * SEVERE is a message level indicating a serious failure.
 * This level is initialized to <CODE>1000</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level('SEVERE', 1000);


/**
 * WARNING is a message level indicating a potential problem.
 * This level is initialized to <CODE>900</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level('WARNING', 900);


/**
 * INFO is a message level for informational messages.
 * This level is initialized to <CODE>800</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level('INFO', 800);


/**
 * CONFIG is a message level for static configuration messages.
 * This level is initialized to <CODE>700</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level('CONFIG', 700);


/**
 * FINE is a message level providing tracing information.
 * This level is initialized to <CODE>500</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level('FINE', 500);


/**
 * FINER indicates a fairly detailed tracing message.
 * This level is initialized to <CODE>400</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level('FINER', 400);

/**
 * FINEST indicates a highly detailed tracing message.
 * This level is initialized to <CODE>300</CODE>.
 * @type {!goog.debug.Logger.Level}
 */

goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level('FINEST', 300);


/**
 * ALL indicates that all messages should be logged.
 * This level is initialized to <CODE>0</CODE>.
 * @type {!goog.debug.Logger.Level}
 */
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level('ALL', 0);


/**
 * The predefined levels.
 * @type {!Array.<!goog.debug.Logger.Level>}
 * @final
 */
goog.debug.Logger.Level.PREDEFINED_LEVELS = [
  goog.debug.Logger.Level.OFF,
  goog.debug.Logger.Level.SHOUT,
  goog.debug.Logger.Level.SEVERE,
  goog.debug.Logger.Level.WARNING,
  goog.debug.Logger.Level.INFO,
  goog.debug.Logger.Level.CONFIG,
  goog.debug.Logger.Level.FINE,
  goog.debug.Logger.Level.FINER,
  goog.debug.Logger.Level.FINEST,
  goog.debug.Logger.Level.ALL];


/**
 * A lookup map used to find the level object based on the name or value of
 * the level object.
 * @type {Object}
 * @private
 */
goog.debug.Logger.Level.predefinedLevelsCache_ = null;


/**
 * Creates the predefined levels cache and populates it.
 * @private
 */
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level; level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
       i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};


/**
 * Gets the predefined level with the given name.
 * @param {string} name The name of the level.
 * @return {goog.debug.Logger.Level} The level, or null if none found.
 */
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }

  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};


/**
 * Gets the highest predefined level <= #value.
 * @param {number} value Level value.
 * @return {goog.debug.Logger.Level} The level, or null if none found.
 */
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }

  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }

  for (var i = 0; i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};


/**
 * Finds or creates a logger for a named subsystem. If a logger has already been
 * created with the given name it is returned. Otherwise a new logger is
 * created. If a new logger is created its log level will be configured based
 * on the LogManager configuration and it will configured to also send logging
 * output to its parent's handlers. It will be registered in the LogManager
 * global namespace.
 *
 * @param {string} name A name for the logger. This should be a dot-separated
 * name and should normally be based on the package name or class name of the
 * subsystem, such as goog.net.BrowserChannel.
 * @return {!goog.debug.Logger} The named logger.
 * @deprecated use goog.log instead. http://go/goog-debug-logger-deprecated
 */
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};


/**
 * Logs a message to profiling tools, if available.
 * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}
 * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}
 * @param {string} msg The message to log.
 */
goog.debug.Logger.logToProfilers = function(msg) {
  // Using goog.global, as loggers might be used in window-less contexts.
  if (goog.global['console']) {
    if (goog.global['console']['timeStamp']) {
      // Logs a message to Firebug, Web Inspector, SpeedTracer, etc.
      goog.global['console']['timeStamp'](msg);
    } else if (goog.global['console']['markTimeline']) {
      // TODO(user): markTimeline is deprecated. Drop this else clause entirely
      // after Chrome M14 hits stable.
      goog.global['console']['markTimeline'](msg);
    }
  }

  if (goog.global['msWriteProfilerMark']) {
    // Logs a message to the Microsoft profiler
    goog.global['msWriteProfilerMark'](msg);
  }
};


/**
 * Gets the name of this logger.
 * @return {string} The name of this logger.
 */
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};


/**
 * Adds a handler to the logger. This doesn't use the event system because
 * we want to be able to add logging to the event system.
 * @param {Function} handler Handler function to add.
 */
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_,
          'Cannot call addHandler on a non-root logger when ' +
          'goog.debug.Logger.ENABLE_HIERARCHY is false.');
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};


/**
 * Removes a handler from the logger. This doesn't use the event system because
 * we want to be able to add logging to the event system.
 * @param {Function} handler Handler function to remove.
 * @return {boolean} Whether the handler was removed.
 */
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ :
        goog.debug.Logger.rootHandlers_;
    return !!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};


/**
 * Returns the parent of this logger.
 * @return {goog.debug.Logger} The parent logger or null if this is the root.
 */
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};


/**
 * Returns the children of this logger as a map of the child name to the logger.
 * @return {!Object} The map where the keys are the child leaf names and the
 *     values are the Logger objects.
 */
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};


/**
 * Set the log level specifying which message levels will be logged by this
 * logger. Message levels lower than this value will be discarded.
 * The level value Level.OFF can be used to turn off logging. If the new level
 * is null, it means that this node should inherit its level from its nearest
 * ancestor with a specific (non-null) level value.
 *
 * @param {goog.debug.Logger.Level} level The new level.
 */
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_,
          'Cannot call setLevel() on a non-root logger when ' +
          'goog.debug.Logger.ENABLE_HIERARCHY is false.');
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};


/**
 * Gets the log level specifying which message levels will be logged by this
 * logger. Message levels lower than this value will be discarded.
 * The level value Level.OFF can be used to turn off logging. If the level
 * is null, it means that this node should inherit its level from its nearest
 * ancestor with a specific (non-null) level value.
 *
 * @return {goog.debug.Logger.Level} The level.
 */
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ?
      this.level_ : goog.debug.Logger.Level.OFF;
};


/**
 * Returns the effective level of the logger based on its ancestors' levels.
 * @return {goog.debug.Logger.Level} The level.
 */
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }

  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail('Root logger has no level set.');
  return null;
};


/**
 * Checks if a message of the given level would actually be logged by this
 * logger. This check is based on the Loggers effective level, which may be
 * inherited from its parent.
 * @param {goog.debug.Logger.Level} level The level to check.
 * @return {boolean} Whether the message would be logged.
 */
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED &&
      level.value >= this.getEffectiveLevel().value;
};


/**
 * Logs a message. If the logger is currently enabled for the
 * given message level then the given message is forwarded to all the
 * registered output Handler objects.
 * @param {goog.debug.Logger.Level} level One of the level identifiers.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error|Object=} opt_exception An exception associated with the
 *     message.
 */
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  // java caches the effective level, not sure it's necessary here
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    // Message callbacks can be useful when a log message is expensive to build.
    if (goog.isFunction(msg)) {
      msg = msg();
    }

    this.doLogRecord_(this.getLogRecord(
        level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};


/**
 * Creates a new log record and adds the exception (if present) to it.
 * @param {goog.debug.Logger.Level} level One of the level identifiers.
 * @param {string} msg The string message.
 * @param {Error|Object=} opt_exception An exception associated with the
 *     message.
 * @param {Function=} opt_fnStackContext A function to use as the base
 *     of the stack trace used in the log record.
 * @return {!goog.debug.LogRecord} A log record.
 * @suppress {es5Strict}
 */
goog.debug.Logger.prototype.getLogRecord = function(
    level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord =
        goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }

    logRecord.setException(opt_exception);
    logRecord.setExceptionText(
        goog.debug.exposeException(opt_exception,
            opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};


/**
 * Logs a message at the Logger.Level.SHOUT level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};


/**
 * Logs a message at the Logger.Level.SEVERE level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};


/**
 * Logs a message at the Logger.Level.WARNING level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};


/**
 * Logs a message at the Logger.Level.INFO level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};


/**
 * Logs a message at the Logger.Level.CONFIG level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};


/**
 * Logs a message at the Logger.Level.FINE level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};


/**
 * Logs a message at the Logger.Level.FINER level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};


/**
 * Logs a message at the Logger.Level.FINEST level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};


/**
 * Logs a LogRecord. If the logger is currently enabled for the
 * given message level then the given message is forwarded to all the
 * registered output Handler objects.
 * @param {goog.debug.LogRecord} logRecord A log record to log.
 */
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};


/**
 * Logs a LogRecord.
 * @param {goog.debug.LogRecord} logRecord A log record to log.
 * @private
 */
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers('log:' + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler; handler = goog.debug.Logger.rootHandlers_[i++]; ) {
      handler(logRecord);
    }
  }
};


/**
 * Calls the handlers for publish.
 * @param {goog.debug.LogRecord} logRecord The log record to publish.
 * @private
 */
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler; handler = this.handlers_[i]; i++) {
      handler(logRecord);
    }
  }
};


/**
 * Sets the parent of this logger. This is used for setting up the logger tree.
 * @param {goog.debug.Logger} parent The parent logger.
 * @private
 */
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};


/**
 * Adds a child to this logger. This is used for setting up the logger tree.
 * @param {string} name The leaf name of the child.
 * @param {goog.debug.Logger} logger The child logger.
 * @private
 */
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};


/**
 * There is a single global LogManager object that is used to maintain a set of
 * shared state about Loggers and log services. This is loosely based on the
 * java class java.util.logging.LogManager.
 */
goog.debug.LogManager = {};


/**
 * Map of logger names to logger objects.
 *
 * @type {!Object.<string, !goog.debug.Logger>}
 * @private
 */
goog.debug.LogManager.loggers_ = {};


/**
 * The root logger which is the root of the logger tree.
 * @type {goog.debug.Logger}
 * @private
 */
goog.debug.LogManager.rootLogger_ = null;


/**
 * Initializes the LogManager if not already initialized.
 */
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(
        goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] =
        goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};


/**
 * Returns all the loggers.
 * @return {!Object.<string, !goog.debug.Logger>} Map of logger names to logger
 *     objects.
 */
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};


/**
 * Returns the root of the logger tree namespace, the logger with the empty
 * string as its name.
 *
 * @return {!goog.debug.Logger} The root logger.
 */
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return /** @type {!goog.debug.Logger} */ (goog.debug.LogManager.rootLogger_);
};


/**
 * Finds a named logger.
 *
 * @param {string} name A name for the logger. This should be a dot-separated
 * name and should normally be based on the package name or class name of the
 * subsystem, such as goog.net.BrowserChannel.
 * @return {!goog.debug.Logger} The named logger.
 */
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};


/**
 * Creates a function that can be passed to goog.debug.catchErrors. The function
 * will log all reported errors using the given logger.
 * @param {goog.debug.Logger=} opt_logger The logger to log the errors to.
 *     Defaults to the root logger.
 * @return {function(Object)} The created function.
 */
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe('Error: ' + info.message + ' (' + info.fileName +
                  ' @ Line: ' + info.line + ')');
  };
};


/**
 * Creates the named logger. Will also create the parents of the named logger
 * if they don't yet exist.
 * @param {string} name The name of the logger.
 * @return {!goog.debug.Logger} The named logger.
 * @private
 */
goog.debug.LogManager.createLogger_ = function(name) {
  // find parent logger
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf('.');
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);

    // tell the parent about the child and the child about the parent
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }

  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};

// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Basic strippable logging definitions.
 * @see http://go/closurelogging
 *
 * @author johnlenz@google.com (John Lenz)
 */

goog.provide('goog.log');
goog.provide('goog.log.Level');
goog.provide('goog.log.LogRecord');
goog.provide('goog.log.Logger');

goog.require('goog.debug');
goog.require('goog.debug.LogManager');
goog.require('goog.debug.LogRecord');
goog.require('goog.debug.Logger');


/** @define {boolean} Whether logging is enabled. */
goog.define('goog.log.ENABLED', goog.debug.LOGGING_ENABLED);


/** @const */
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;



/**
 * @constructor
 * @final
 */
goog.log.Logger = goog.debug.Logger;



/**
 * @constructor
 * @final
 */
goog.log.Level = goog.debug.Logger.Level;



/**
 * @constructor
 * @final
 */
goog.log.LogRecord = goog.debug.LogRecord;


/**
 * Finds or creates a logger for a named subsystem. If a logger has already been
 * created with the given name it is returned. Otherwise a new logger is
 * created. If a new logger is created its log level will be configured based
 * on the goog.debug.LogManager configuration and it will configured to also
 * send logging output to its parent's handlers.
 * @see goog.debug.LogManager
 *
 * @param {string} name A name for the logger. This should be a dot-separated
 *     name and should normally be based on the package name or class name of
 *     the subsystem, such as goog.net.BrowserChannel.
 * @param {goog.log.Level=} opt_level If provided, override the
 *     default logging level with the provided level.
 * @return {goog.log.Logger} The named logger or null if logging is disabled.
 */
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};


// TODO(johnlenz): try to tighten the types to these functions.
/**
 * Adds a handler to the logger. This doesn't use the event system because
 * we want to be able to add logging to the event system.
 * @param {goog.log.Logger} logger
 * @param {Function} handler Handler function to add.
 */
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};


/**
 * Removes a handler from the logger. This doesn't use the event system because
 * we want to be able to add logging to the event system.
 * @param {goog.log.Logger} logger
 * @param {Function} handler Handler function to remove.
 * @return {boolean} Whether the handler was removed.
 */
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};


/**
 * Logs a message. If the logger is currently enabled for the
 * given message level then the given message is forwarded to all the
 * registered output Handler objects.
 * @param {goog.log.Logger} logger
 * @param {goog.log.Level} level One of the level identifiers.
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error|Object=} opt_exception An exception associated with the
 *     message.
 */
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};


/**
 * Logs a message at the Level.SEVERE level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.log.Logger} logger
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};


/**
 * Logs a message at the Level.WARNING level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.log.Logger} logger
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};


/**
 * Logs a message at the Level.INFO level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.log.Logger} logger
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};


/**
 * Logs a message at the Level.Fine level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {goog.log.Logger} logger
 * @param {goog.debug.Loggable} msg The message to log.
 * @param {Error=} opt_exception An exception associated with the message.
 */
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};

// Copyright 2006 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Wrapper class for handling XmlHttpRequests.
 *
 * One off requests can be sent through goog.net.XhrIo.send() or an
 * instance can be created to send multiple requests.  Each request uses its
 * own XmlHttpRequest object and handles clearing of the event callback to
 * ensure no leaks.
 *
 * XhrIo is event based, it dispatches events when a request finishes, fails or
 * succeeds or when the ready-state changes. The ready-state or timeout event
 * fires first, followed by a generic completed event. Then the abort, error,
 * or success event is fired as appropriate. Lastly, the ready event will fire
 * to indicate that the object may be used to make another request.
 *
 * The error event may also be called before completed and
 * ready-state-change if the XmlHttpRequest.open() or .send() methods throw.
 *
 * This class does not support multiple requests, queuing, or prioritization.
 *
 * Tested = IE6, FF1.5, Safari, Opera 8.5
 *
 * TODO(user): Error cases aren't playing nicely in Safari.
 *
 */


goog.provide('goog.net.XhrIo');
goog.provide('goog.net.XhrIo.ResponseType');

goog.require('goog.Timer');
goog.require('goog.array');
goog.require('goog.debug.entryPointRegistry');
goog.require('goog.events.EventTarget');
goog.require('goog.json');
goog.require('goog.log');
goog.require('goog.net.ErrorCode');
goog.require('goog.net.EventType');
goog.require('goog.net.HttpStatus');
goog.require('goog.net.XmlHttp');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.structs');
goog.require('goog.structs.Map');
goog.require('goog.uri.utils');
goog.require('goog.userAgent');

goog.forwardDeclare('goog.Uri');



/**
 * Basic class for handling XMLHttpRequests.
 * @param {goog.net.XmlHttpFactory=} opt_xmlHttpFactory Factory to use when
 *     creating XMLHttpRequest objects.
 * @constructor
 * @extends {goog.events.EventTarget}
 */
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, 'constructor');

  /**
   * Map of default headers to add to every request, use:
   * XhrIo.headers.set(name, value)
   * @type {!goog.structs.Map}
   */
  this.headers = new goog.structs.Map();

  /**
   * Optional XmlHttpFactory
   * @private {goog.net.XmlHttpFactory}
   */
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;

  /**
   * Whether XMLHttpRequest is active.  A request is active from the time send()
   * is called until onReadyStateChange() is complete, or error() or abort()
   * is called.
   * @private {boolean}
   */
  this.active_ = false;

  /**
   * The XMLHttpRequest object that is being used for the transfer.
   * @private {?goog.net.XhrLike.OrNative}
   */
  this.xhr_ = null;

  /**
   * The options to use with the current XMLHttpRequest object.
   * @private {Object}
   */
  this.xhrOptions_ = null;

  /**
   * Last URL that was requested.
   * @private {string|goog.Uri}
   */
  this.lastUri_ = '';

  /**
   * Method for the last request.
   * @private {string}
   */
  this.lastMethod_ = '';

  /**
   * Last error code.
   * @private {!goog.net.ErrorCode}
   */
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;

  /**
   * Last error message.
   * @private {Error|string}
   */
  this.lastError_ = '';

  /**
   * Used to ensure that we don't dispatch an multiple ERROR events. This can
   * happen in IE when it does a synchronous load and one error is handled in
   * the ready statte change and one is handled due to send() throwing an
   * exception.
   * @private {boolean}
   */
  this.errorDispatched_ = false;

  /**
   * Used to make sure we don't fire the complete event from inside a send call.
   * @private {boolean}
   */
  this.inSend_ = false;

  /**
   * Used in determining if a call to {@link #onReadyStateChange_} is from
   * within a call to this.xhr_.open.
   * @private {boolean}
   */
  this.inOpen_ = false;

  /**
   * Used in determining if a call to {@link #onReadyStateChange_} is from
   * within a call to this.xhr_.abort.
   * @private {boolean}
   */
  this.inAbort_ = false;

  /**
   * Number of milliseconds after which an incomplete request will be aborted
   * and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no timeout
   * is set.
   * @private {number}
   */
  this.timeoutInterval_ = 0;

  /**
   * Timer to track request timeout.
   * @private {?number}
   */
  this.timeoutId_ = null;

  /**
   * The requested type for the response. The empty string means use the default
   * XHR behavior.
   * @private {goog.net.XhrIo.ResponseType}
   */
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;

  /**
   * Whether a "credentialed" request is to be sent (one that is aware of
   * cookies and authentication). This is applicable only for cross-domain
   * requests and more recent browsers that support this part of the HTTP Access
   * Control standard.
   *
   * @see http://www.w3.org/TR/XMLHttpRequest/#the-withcredentials-attribute
   *
   * @private {boolean}
   */
  this.withCredentials_ = false;

  /**
   * True if we can use XMLHttpRequest's timeout directly.
   * @private {boolean}
   */
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);


/**
 * Response types that may be requested for XMLHttpRequests.
 * @enum {string}
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute
 */
goog.net.XhrIo.ResponseType = {
  DEFAULT: '',
  TEXT: 'text',
  DOCUMENT: 'document',
  // Not supported as of Chrome 10.0.612.1 dev
  BLOB: 'blob',
  ARRAY_BUFFER: 'arraybuffer'
};


/**
 * A reference to the XhrIo logger
 * @private {goog.debug.Logger}
 * @const
 */
goog.net.XhrIo.prototype.logger_ =
    goog.log.getLogger('goog.net.XhrIo');


/**
 * The Content-Type HTTP header name
 * @type {string}
 */
goog.net.XhrIo.CONTENT_TYPE_HEADER = 'Content-Type';


/**
 * The pattern matching the 'http' and 'https' URI schemes
 * @type {!RegExp}
 */
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;


/**
 * The methods that typically come along with form data.  We set different
 * headers depending on whether the HTTP action is one of these.
 */
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ['POST', 'PUT'];


/**
 * The Content-Type HTTP header value for a url-encoded form
 * @type {string}
 */
goog.net.XhrIo.FORM_CONTENT_TYPE =
    'application/x-www-form-urlencoded;charset=utf-8';


/**
 * The XMLHttpRequest Level two timeout delay ms property name.
 *
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute
 *
 * @private {string}
 * @const
 */
goog.net.XhrIo.XHR2_TIMEOUT_ = 'timeout';


/**
 * The XMLHttpRequest Level two ontimeout handler property name.
 *
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute
 *
 * @private {string}
 * @const
 */
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = 'ontimeout';


/**
 * All non-disposed instances of goog.net.XhrIo created
 * by {@link goog.net.XhrIo.send} are in this Array.
 * @see goog.net.XhrIo.cleanup
 * @private {!Array.<!goog.net.XhrIo>}
 */
goog.net.XhrIo.sendInstances_ = [];


/**
 * Static send that creates a short lived instance of XhrIo to send the
 * request.
 * @see goog.net.XhrIo.cleanup
 * @param {string|goog.Uri} url Uri to make request to.
 * @param {Function=} opt_callback Callback function for when request is
 *     complete.
 * @param {string=} opt_method Send method, default: GET.
 * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=}
 *     opt_content Body data.
 * @param {Object|goog.structs.Map=} opt_headers Map of headers to add to the
 *     request.
 * @param {number=} opt_timeoutInterval Number of milliseconds after which an
 *     incomplete request will be aborted; 0 means no timeout is set.
 * @param {boolean=} opt_withCredentials Whether to send credentials with the
 *     request. Default to false. See {@link goog.net.XhrIo#setWithCredentials}.
 * @return {!goog.net.XhrIo} The sent XhrIo.
 */
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content,
                               opt_headers, opt_timeoutInterval,
                               opt_withCredentials) {
  var x = new goog.net.XhrIo();
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};


/**
 * Disposes all non-disposed instances of goog.net.XhrIo created by
 * {@link goog.net.XhrIo.send}.
 * {@link goog.net.XhrIo.send} cleans up the goog.net.XhrIo instance
 * it creates when the request completes or fails.  However, if
 * the request never completes, then the goog.net.XhrIo is not disposed.
 * This can occur if the window is unloaded before the request completes.
 * We could have {@link goog.net.XhrIo.send} return the goog.net.XhrIo
 * it creates and make the client of {@link goog.net.XhrIo.send} be
 * responsible for disposing it in this case.  However, this makes things
 * significantly more complicated for the client, and the whole point
 * of {@link goog.net.XhrIo.send} is that it's simple and easy to use.
 * Clients of {@link goog.net.XhrIo.send} should call
 * {@link goog.net.XhrIo.cleanup} when doing final
 * cleanup on window unload.
 */
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};


/**
 * Installs exception protection for all entry point introduced by
 * goog.net.XhrIo instances which are not protected by
 * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},
 * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or
 * {@link goog.events.protectBrowserEventEntryPoint}.
 *
 * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to
 *     protect the entry point(s).
 */
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ =
      errorHandler.protectEntryPoint(
          goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};


/**
 * Disposes of the specified goog.net.XhrIo created by
 * {@link goog.net.XhrIo.send} and removes it from
 * {@link goog.net.XhrIo.pendingStaticSendInstances_}.
 * @private
 */
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};


/**
 * Returns the number of milliseconds after which an incomplete request will be
 * aborted, or 0 if no timeout is set.
 * @return {number} Timeout interval in milliseconds.
 */
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};


/**
 * Sets the number of milliseconds after which an incomplete request will be
 * aborted and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no
 * timeout is set.
 * @param {number} ms Timeout interval in milliseconds; 0 means none.
 */
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};


/**
 * Sets the desired type for the response. At time of writing, this is only
 * supported in very recent versions of WebKit (10.0.612.1 dev and later).
 *
 * If this is used, the response may only be accessed via {@link #getResponse}.
 *
 * @param {goog.net.XhrIo.ResponseType} type The desired type for the response.
 */
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};


/**
 * Gets the desired type for the response.
 * @return {goog.net.XhrIo.ResponseType} The desired type for the response.
 */
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};


/**
 * Sets whether a "credentialed" request that is aware of cookie and
 * authentication information should be made. This option is only supported by
 * browsers that support HTTP Access Control. As of this writing, this option
 * is not supported in IE.
 *
 * @param {boolean} withCredentials Whether this should be a "credentialed"
 *     request.
 */
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};


/**
 * Gets whether a "credentialed" request is to be sent.
 * @return {boolean} The desired type for the response.
 */
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};


/**
 * Instance send that actually uses XMLHttpRequest to make a server call.
 * @param {string|goog.Uri} url Uri to make request to.
 * @param {string=} opt_method Send method, default: GET.
 * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string=}
 *     opt_content Body data.
 * @param {Object|goog.structs.Map=} opt_headers Map of headers to add to the
 *     request.
 */
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content,
                                         opt_headers) {
  if (this.xhr_) {
    throw Error('[goog.net.XhrIo] Object is active with another request=' +
        this.lastUri_ + '; newUri=' + url);
  }

  var method = opt_method ? opt_method.toUpperCase() : 'GET';

  this.lastUri_ = url;
  this.lastError_ = '';
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;

  // Use the factory to create the XHR object and options
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ?
      this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();

  // Set up the onreadystatechange callback
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);

  /**
   * Try to open the XMLHttpRequest (always async), if an error occurs here it
   * is generally permission denied
   * @preserveTry
   */
  try {
    goog.log.fine(this.logger_, this.formatMsg_('Opening Xhr'));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);  // Always async!
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_,
        this.formatMsg_('Error opening Xhr: ' + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }

  // We can't use null since this won't allow requests with form data to have a
  // content length specified which will cause some proxies to return a 411
  // error.
  var content = opt_content || '';

  var headers = this.headers.clone();

  // Add headers specific to this request
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }

  // Find whether a content type header is set, ignoring case.
  // HTTP header names are case-insensitive.  See:
  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2
  var contentTypeKey = goog.array.find(headers.getKeys(),
      goog.net.XhrIo.isContentTypeHeader_);

  var contentIsFormData = (goog.global['FormData'] &&
      (content instanceof goog.global['FormData']));
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) &&
      !contentTypeKey && !contentIsFormData) {
    // For requests typically with form data, default to the url-encoded form
    // content type unless this is a FormData request.  For FormData,
    // the browser will automatically add a multipart/form-data content type
    // with an appropriate multipart boundary.
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER,
                goog.net.XhrIo.FORM_CONTENT_TYPE);
  }

  // Add the headers to the Xhr object
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);

  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }

  if (goog.object.containsKey(this.xhr_, 'withCredentials')) {
    this.xhr_.withCredentials = this.withCredentials_;
  }

  /**
   * Try to send the request, or other wise report an error (404 not found).
   * @preserveTry
   */
  try {
    this.cleanUpTimeoutTimer_(); // Paranoid, should never be running.
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_('Will abort after ' +
          this.timeoutInterval_ + 'ms if incomplete, xhr2 ' +
          this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] =
            goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_,
            this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_('Sending request'));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;

  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_('Send error: ' + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};


/**
 * Determines if the argument is an XMLHttpRequest that supports the level 2
 * timeout value and event.
 *
 * Currently, FF 21.0 OS X has the fields but won't actually call the timeout
 * handler.  Perhaps the confusion in the bug referenced below hasn't
 * entirely been resolved.
 *
 * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=525816
 *
 * @param {!goog.net.XhrLike.OrNative} xhr The request.
 * @return {boolean} True if the request supports level 2 timeout.
 * @private
 */
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE &&
      goog.userAgent.isVersionOrHigher(9) &&
      goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) &&
      goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};


/**
 * @param {string} header An HTTP header key.
 * @return {boolean} Whether the key is a content type header (ignoring
 *     case.
 * @private
 */
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(
      goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};


/**
 * Creates a new XHR object.
 * @return {!goog.net.XhrLike.OrNative} The newly created XHR object.
 * @protected
 */
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ?
      this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};


/**
 * The request didn't complete after {@link goog.net.XhrIo#timeoutInterval_}
 * milliseconds; raises a {@link goog.net.EventType.TIMEOUT} event and aborts
 * the request.
 * @private
 */
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == 'undefined') {
    // If goog is undefined then the callback has occurred as the application
    // is unloading and will error.  Thus we let it silently fail.
  } else if (this.xhr_) {
    this.lastError_ = 'Timed out after ' + this.timeoutInterval_ +
                      'ms, aborting';
    this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
    goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
    this.dispatchEvent(goog.net.EventType.TIMEOUT);
    this.abort(goog.net.ErrorCode.TIMEOUT);
  }
};


/**
 * Something errorred, so inactivate, fire error callback and clean up
 * @param {goog.net.ErrorCode} errorCode The error code.
 * @param {Error} err The error object.
 * @private
 */
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();  // Ensures XHR isn't hung (FF)
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};


/**
 * Dispatches COMPLETE and ERROR in case of an error. This ensures that we do
 * not dispatch multiple error events.
 * @private
 */
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};


/**
 * Abort the current XMLHttpRequest
 * @param {goog.net.ErrorCode=} opt_failureCode Optional error code to use -
 *     defaults to ABORT.
 */
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_('Aborting'));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};


/**
 * Nullifies all callbacks to reduce risks of leaks.
 * @override
 * @protected
 */
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    // We explicitly do not call xhr_.abort() unless active_ is still true.
    // This is to avoid unnecessarily aborting a successful request when
    // dispose() is called in a callback triggered by a complete response, but
    // in which browser cleanup has not yet finished.
    // (See http://b/issue?id=1684217.)
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }

  goog.net.XhrIo.base(this, 'disposeInternal');
};


/**
 * Internal handler for the XHR object's readystatechange event.  This method
 * checks the status and the readystate and fires the correct callbacks.
 * If the request has ended, the handlers are cleaned up and the XHR object is
 * nullified.
 * @private
 */
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    // This method is the target of an untracked goog.Timer.callOnce().
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    // Were not being called from within a call to this.xhr_.send
    // this.xhr_.abort, or this.xhr_.open, so this is an entry point
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};


/**
 * Used to protect the onreadystatechange handler entry point.  Necessary
 * as {#onReadyStateChange_} maybe called from within send or abort, this
 * method is only called when {#onReadyStateChange_} is called as an
 * entry point.
 * {@see #protectEntryPoints}
 * @private
 */
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};


/**
 * Helper for {@link #onReadyStateChange_}.  This is used so that
 * entry point calls to {@link #onReadyStateChange_} can be routed through
 * {@link #onReadyStateChangeEntryPoint_}.
 * @private
 */
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    // can get called inside abort call
    return;
  }

  if (typeof goog == 'undefined') {
    // NOTE(user): If goog is undefined then the callback has occurred as the
    // application is unloading and will error.  Thus we let it silently fail.

  } else if (
      this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] &&
      this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE &&
      this.getStatus() == 2) {
    // NOTE(user): In IE if send() errors on a *local* request the readystate
    // is still changed to COMPLETE.  We need to ignore it and allow the
    // try/catch around send() to pick up the error.
    goog.log.fine(this.logger_, this.formatMsg_(
        'Local request error detected and ignored'));

  } else {

    // In IE when the response has been cached we sometimes get the callback
    // from inside the send call and this usually breaks code that assumes that
    // XhrIo is asynchronous.  If that is the case we delay the callback
    // using a timer.
    if (this.inSend_ &&
        this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
      goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
      return;
    }

    this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);

    // readyState indicates the transfer has finished
    if (this.isComplete()) {
      goog.log.fine(this.logger_, this.formatMsg_('Request complete'));

      this.active_ = false;

      try {
        // Call the specific callbacks for success or failure. Only call the
        // success if the status is 200 (HTTP_OK) or 304 (HTTP_CACHED)
        if (this.isSuccess()) {
          this.dispatchEvent(goog.net.EventType.COMPLETE);
          this.dispatchEvent(goog.net.EventType.SUCCESS);
        } else {
          this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
          this.lastError_ =
              this.getStatusText() + ' [' + this.getStatus() + ']';
          this.dispatchErrors_();
        }
      } finally {
        this.cleanUpXhr_();
      }
    }
  }
};


/**
 * Remove the listener to protect against leaks, and nullify the XMLHttpRequest
 * object.
 * @param {boolean=} opt_fromDispose If this is from the dispose (don't want to
 *     fire any events).
 * @private
 */
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    // Cancel any pending timeout event handler.
    this.cleanUpTimeoutTimer_();

    // Save reference so we can mark it as closed after the READY event.  The
    // READY event may trigger another request, thus we must nullify this.xhr_
    var xhr = this.xhr_;
    var clearedOnReadyStateChange =
        this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ?
            goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;

    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }

    try {
      // NOTE(user): Not nullifying in FireFox can still leak if the callbacks
      // are defined in the same scope as the instance of XhrIo. But, IE doesn't
      // allow you to set the onreadystatechange to NULL so nullFunction is
      // used.
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      // This seems to occur with a Gears HTTP request. Delayed the setting of
      // this onreadystatechange until after READY is sent out and catching the
      // error to see if we can track down the problem.
      goog.log.error(this.logger_,
          'Problem encountered resetting onreadystatechange: ' + e.message);
    }
  }
};


/**
 * Make sure the timeout timer isn't running.
 * @private
 */
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};


/**
 * @return {boolean} Whether there is an active request.
 */
goog.net.XhrIo.prototype.isActive = function() {
  return !!this.xhr_;
};


/**
 * @return {boolean} Whether the request has completed.
 */
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};


/**
 * @return {boolean} Whether the request completed with a success.
 */
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  // A zero status code is considered successful for local files.
  return goog.net.HttpStatus.isSuccess(status) ||
      status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};


/**
 * @return {boolean} whether the effective scheme of the last URI that was
 *     fetched was 'http' or 'https'.
 * @private
 */
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};


/**
 * Get the readystate from the Xhr object
 * Will only return correct result when called from the context of a callback
 * @return {goog.net.XmlHttp.ReadyState} goog.net.XmlHttp.ReadyState.*.
 */
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ?
      /** @type {goog.net.XmlHttp.ReadyState} */ (this.xhr_.readyState) :
      goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};


/**
 * Get the status from the Xhr object
 * Will only return correct result when called from the context of a callback
 * @return {number} Http status.
 */
goog.net.XhrIo.prototype.getStatus = function() {
  /**
   * IE doesn't like you checking status until the readystate is greater than 2
   * (i.e. it is receiving or complete).  The try/catch is used for when the
   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.
   * @preserveTry
   */
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ?
        this.xhr_.status : -1;
  } catch (e) {
    return -1;
  }
};


/**
 * Get the status text from the Xhr object
 * Will only return correct result when called from the context of a callback
 * @return {string} Status text.
 */
goog.net.XhrIo.prototype.getStatusText = function() {
  /**
   * IE doesn't like you checking status until the readystate is greater than 2
   * (i.e. it is recieving or complete).  The try/catch is used for when the
   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.
   * @preserveTry
   */
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ?
        this.xhr_.statusText : '';
  } catch (e) {
    goog.log.fine(this.logger_, 'Can not get status: ' + e.message);
    return '';
  }
};


/**
 * Get the last Uri that was requested
 * @return {string} Last Uri.
 */
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};


/**
 * Get the response text from the Xhr object
 * Will only return correct result when called from the context of a callback.
 * @return {string} Result from the server, or '' if no result available.
 */
goog.net.XhrIo.prototype.getResponseText = function() {
  /** @preserveTry */
  try {
    return this.xhr_ ? this.xhr_.responseText : '';
  } catch (e) {
    // http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute
    // states that responseText should return '' (and responseXML null)
    // when the state is not LOADING or DONE. Instead, IE can
    // throw unexpected exceptions, for example when a request is aborted
    // or no data is available yet.
    goog.log.fine(this.logger_, 'Can not get responseText: ' + e.message);
    return '';
  }
};


/**
 * Get the response body from the Xhr object. This property is only available
 * in IE since version 7 according to MSDN:
 * http://msdn.microsoft.com/en-us/library/ie/ms534368(v=vs.85).aspx
 * Will only return correct result when called from the context of a callback.
 *
 * One option is to construct a VBArray from the returned object and convert
 * it to a JavaScript array using the toArray method:
 * {@code (new window['VBArray'](xhrIo.getResponseBody())).toArray()}
 * This will result in an array of numbers in the range of [0..255]
 *
 * Another option is to use the VBScript CStr method to convert it into a
 * string as outlined in http://stackoverflow.com/questions/1919972
 *
 * @return {Object} Binary result from the server or null if not available.
 */
goog.net.XhrIo.prototype.getResponseBody = function() {
  /** @preserveTry */
  try {
    if (this.xhr_ && 'responseBody' in this.xhr_) {
      return this.xhr_['responseBody'];
    }
  } catch (e) {
    // IE can throw unexpected exceptions, for example when a request is aborted
    // or no data is yet available.
    goog.log.fine(this.logger_, 'Can not get responseBody: ' + e.message);
  }
  return null;
};


/**
 * Get the response XML from the Xhr object
 * Will only return correct result when called from the context of a callback.
 * @return {Document} The DOM Document representing the XML file, or null
 * if no result available.
 */
goog.net.XhrIo.prototype.getResponseXml = function() {
  /** @preserveTry */
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, 'Can not get responseXML: ' + e.message);
    return null;
  }
};


/**
 * Get the response and evaluates it as JSON from the Xhr object
 * Will only return correct result when called from the context of a callback
 * @param {string=} opt_xssiPrefix Optional XSSI prefix string to use for
 *     stripping of the response before parsing. This needs to be set only if
 *     your backend server prepends the same prefix string to the JSON response.
 * @return {Object|undefined} JavaScript object.
 */
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }

  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }

  return goog.json.parse(responseText);
};


/**
 * Get the response as the type specificed by {@link #setResponseType}. At time
 * of writing, this is only directly supported in very recent versions of WebKit
 * (10.0.612.1 dev and later). If the field is not supported directly, we will
 * try to emulate it.
 *
 * Emulating the response means following the rules laid out at
 * http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute
 *
 * On browsers with no support for this (Chrome < 10, Firefox < 4, etc), only
 * response types of DEFAULT or TEXT may be used, and the response returned will
 * be the text response.
 *
 * On browsers with Mozilla's draft support for array buffers (Firefox 4, 5),
 * only response types of DEFAULT, TEXT, and ARRAY_BUFFER may be used, and the
 * response returned will be either the text response or the Mozilla
 * implementation of the array buffer response.
 *
 * On browsers will full support, any valid response type supported by the
 * browser may be used, and the response provided by the browser will be
 * returned.
 *
 * @return {*} The response.
 */
goog.net.XhrIo.prototype.getResponse = function() {
  /** @preserveTry */
  try {
    if (!this.xhr_) {
      return null;
    }
    if ('response' in this.xhr_) {
      return this.xhr_.response;
    }
    switch (this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
        // DOCUMENT and BLOB don't need to be handled here because they are
        // introduced in the same spec that adds the .response field, and would
        // have been caught above.
        // ARRAY_BUFFER needs an implementation for Firefox 4, where it was
        // implemented using a draft spec rather than the final spec.
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ('mozResponseArrayBuffer' in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
    }
    // Fell through to a response type that is not supported on this browser.
    goog.log.error(this.logger_,
        'Response type ' + this.responseType_ + ' is not ' +
        'supported on this browser');
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, 'Can not get response: ' + e.message);
    return null;
  }
};


/**
 * Get the value of the response-header with the given name from the Xhr object
 * Will only return correct result when called from the context of a callback
 * and the request has completed
 * @param {string} key The name of the response-header to retrieve.
 * @return {string|undefined} The value of the response-header named key.
 */
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ?
      this.xhr_.getResponseHeader(key) : undefined;
};


/**
 * Gets the text of all the headers in the response.
 * Will only return correct result when called from the context of a callback
 * and the request has completed.
 * @return {string} The value of the response headers or empty string.
 */
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ?
      this.xhr_.getAllResponseHeaders() : '';
};


/**
 * Returns all response headers as a key-value map.
 * Multiple values for the same header key can be combined into one,
 * separated by a comma and a space.
 * Note that the native getResponseHeader method for retrieving a single header
 * does a case insensitive match on the header name. This method does not
 * include any case normalization logic, it will just return a key-value
 * representation of the headers.
 * See: http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
 * @return {!Object.<string, string>} An object with the header keys as keys
 *     and header values as values.
 */
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split('\r\n');
  for (var i = 0; i < headersArray.length; i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ': ', 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ', ' + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};


/**
 * Get the last error message
 * @return {goog.net.ErrorCode} Last error code.
 */
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};


/**
 * Get the last error message
 * @return {string} Last error message.
 */
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ :
      String(this.lastError_);
};


/**
 * Adds the last method, status and URI to the message.  This is used to add
 * this information to the logging calls.
 * @param {string} msg The message text that we want to add the extra text to.
 * @return {string} The message with the extra text appended.
 * @private
 */
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + ' [' + this.lastMethod_ + ' ' + this.lastUri_ + ' ' +
      this.getStatus() + ']';
};


// Register the xhr handler as an entry point, so that
// it can be monitored for exception handling, etc.
goog.debug.entryPointRegistry.register(
    /**
     * @param {function(!Function): !Function} transformer The transforming
     *     function.
     */
    function(transformer) {
      goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ =
          transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
    });

// Copyright 2014 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implements a key client that searches, imports and verifies
 *    keys from/to http key server.
 * @author quannguyen@google.com (Quan Nguyen)
 */
goog.provide('e2e.openpgp.KeyClient');

goog.require('e2e.async.Result');
goog.require('e2e.openpgp.asciiArmor');
goog.require('e2e.openpgp.block.TransferablePublicKey');
goog.require('e2e.openpgp.block.factory');
goog.require('e2e.random');
goog.require('goog.Uri');
goog.require('goog.crypt');
goog.require('goog.net.XhrIo');

/**
 * Implements a key client that searches, imports and verifies keys from/to http
 *    key server. This class implements the client side according to the
 *    following RFC: http://tools.ietf.org/html/draft-shaw-openpgp-hkp-00.
 *    Furthermore, it also verifies the consistency of the blob key's proof
 *    from the http key server, using blob transparency architecture.
 * @param {string} keyServerUrl The url of http key server.
 * @constructor
 */
e2e.openpgp.KeyClient = function(keyServerUrl) {
  this.keyServerUrl_ = keyServerUrl;
};

/**
 * The url of http key server.
 * @type {string}
 * @private
 */
e2e.openpgp.KeyClient.prototype.keyServerUrl_;

/**
 * The relative path of key search request.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.SEARCH_REL_PATH_ = '/pks/lookup';

/**
 * The relative path of key import request.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.ADD_REL_PATH_ = '/pks/add';

/**
 * The relative path of user registration.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.REGISTER_REL_PATH_ = '/userauth';

/**
 * The ASCII armored key text parameter.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.KEY_TEXT_PARAM_ = 'keytext';

/**
 * The URL where the Identity Provider sent the user to.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.REQUEST_URI_PARAM_ = 'requestUri';

/**
 * The POST body included in the Identity Provider response.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.POST_BODY_PARAM_ = 'postBody';

/**
 * The operation parameter.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.OP_PARAM_ = 'op';

/**
 * The 'get' operation to search for keys associated with an email.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.GET_OP_PARAM_ = 'get';

/**
 * The email parameter to search for keys with the 'get' operation.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.X_EMAIL_PARAM_ = 'x-email';

/**
 * The user id parameter during key import. The key server will extract the
 * email from it.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.X_USER_ID_PARAM_ = 'x-userid';

/**
 * A random nonce to identify the key being uploaded.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.NONCE_PARAM_ = 'nonce';

/**
 * The origin parameter to identify the extension.
 * @type {string}
 * @const
 * @private
 */
e2e.openpgp.KeyClient.ORIGIN_PARAM_ = 'origin';

/**
 * Imports a public key to the key server.
 * @param {!e2e.openpgp.block.TransferablePublicKey} key The ASCII
 *    armored or {e2e.openpgp.block.TransferablePublicKey} key to import.
 * @return {!e2e.async.Result.<boolean>} True if importing key is succeeded.
 */
e2e.openpgp.KeyClient.prototype.importPublicKey = function(key) {
  var uids = key.getUserIds();
  if (uids.length != 1) {
    throw new Error('Invalid user ID for key import.');
  }
  var nonce = goog.crypt.byteArrayToHex(e2e.random.getRandomBytes(16));
  var serializedKey = e2e.openpgp.asciiArmor.encode(
    'PUBLIC KEY BLOCK', key.serialize());
  return this.getOpenIdCredentials_(uids[0], nonce).addCallback(
      goog.bind(this.importKeyWithCredentials_, this, nonce, serializedKey));
};

/**
 * Obtains the OpenID credentials for the given email address and a nonce.
 * @param {string} email The email address.
 * @param {string} nonce The random nonce.
 * @return {!e2e.async.Result.<{port: MessagePort, credentials: {
 *     requestUri: string, postBody: string}}>} The port and credentials.
 * @private
 */
e2e.openpgp.KeyClient.prototype.getOpenIdCredentials_ = function(
    email, nonce) {
  var result = new e2e.async.Result();
  var doc = goog.global.document;
  if (goog.isDef(doc)) {
    var url = this.getRegistrationUrl_(email, nonce);
    var iframe = doc.createElement('iframe');
    doc.documentElement.appendChild(iframe);
    iframe.src = url;
    var win = iframe.contentWindow;
    goog.global.addEventListener('message', goog.bind(function(e) {
      if (e.source == win && e.origin == this.keyServerUrl_ && e.ports[0]) {
        var port = e.ports[0];
        port.onmessage = function(e) {
          result.callback({
            credentials: e.data,
            port: port
          });
        };
      }
    }, this));
  } else {
    result.errback('Document not available.');
  }
  return result;
};

/**
 * Obtains the URL to register the user.
 * @param {string} userid The user id.
 * @param {string} nonce The random nonce.
 * @return {string} the URL.
 * @private
 */
e2e.openpgp.KeyClient.prototype.getRegistrationUrl_ = function(
    userid, nonce) {
  var data = new goog.Uri.QueryData();
  data.add(e2e.openpgp.KeyClient.X_USER_ID_PARAM_, userid);
  data.add(e2e.openpgp.KeyClient.NONCE_PARAM_, nonce);
  data.add(e2e.openpgp.KeyClient.ORIGIN_PARAM_, goog.global.location.origin);
  return (
      this.keyServerUrl_ +
      e2e.openpgp.KeyClient.REGISTER_REL_PATH_ +
      '?' + data);
};

/**
 * Imports the given key with the provided credentials.
 * @param {string} nonce The random nonce.
 * @param {string} serializedKey The serialized OpenPGP public key.
 * @param {{port: MessagePort, credentials: {requestUri: string,
 *     postBody: string}}} response The response object from the call.
 * @return {!e2e.async.Result.<boolean>} True if importing key is succeeded.
 * @private
 */
e2e.openpgp.KeyClient.prototype.importKeyWithCredentials_ = function(
    nonce, serializedKey, response) {
  var result = new e2e.async.Result();
  var data = new goog.Uri.QueryData();
  data.add(e2e.openpgp.KeyClient.KEY_TEXT_PARAM_, serializedKey);
  data.add(e2e.openpgp.KeyClient.NONCE_PARAM_, nonce);
  data.add(
      e2e.openpgp.KeyClient.REQUEST_URI_PARAM_,
      response.credentials.requestUri);
  data.add(
      e2e.openpgp.KeyClient.POST_BODY_PARAM_,
      response.credentials.postBody);
  goog.net.XhrIo.send(
      this.keyServerUrl_ + e2e.openpgp.KeyClient.ADD_REL_PATH_,
      function(e) {
        var status = e.target.getStatus();
        if (status == 200) {
          response.port.close();
          result.callback(true);
        } else if (status == 500) {
          response.port.close();
          result.callback(false);
        }
      },
      'POST', data.toString(), undefined, undefined, true);
  return result;
};

/**
 * Searches a public key based on an email.
 * @param {string} email The email which is used to search for the
 *    corresponding public keys.
 * @return {!e2e.async.Result.<!Array.<!e2e.openpgp.block.TransferableKey>>}
 *    The public keys correspond to the email or [] if not found.
 */
e2e.openpgp.KeyClient.prototype.searchPublicKey = function(email) {
  var resultPubKeys = new e2e.async.Result();
  var data = new goog.Uri.QueryData();
  data.add(e2e.openpgp.KeyClient.OP_PARAM_,
      e2e.openpgp.KeyClient.GET_OP_PARAM_);
  data.add(e2e.openpgp.KeyClient.X_EMAIL_PARAM_, email);
  goog.net.XhrIo.send(this.keyServerUrl_ +
      e2e.openpgp.KeyClient.SEARCH_REL_PATH_ + '?' + data.toString(),
      goog.bind(function(e) {
        if (e.target.getStatus() == 200) {
          try {
            var receivedPubKeys = e2e.openpgp.block.factory.parseAsciiMulti(
                e.target.getResponseText());
            // TODO(user): Get the public key blob's proof and verify the
            // consistency of the proof.
            resultPubKeys.callback(receivedPubKeys);
          } catch (error) {
            resultPubKeys.callback([]);
          }
        } else {
          resultPubKeys.callback([]);
        }
      }, this), 'GET', undefined, undefined, undefined, true);
  return resultPubKeys;
};

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Abstract interface for storing and retrieving data using
 * some persistence mechanism.
 *
 */

goog.provide('goog.storage.mechanism.Mechanism');



/**
 * Basic interface for all storage mechanisms.
 *
 * @constructor
 */
goog.storage.mechanism.Mechanism = function() {};


/**
 * Set a value for a key.
 *
 * @param {string} key The key to set.
 * @param {string} value The string to save.
 */
goog.storage.mechanism.Mechanism.prototype.set = goog.abstractMethod;


/**
 * Get the value stored under a key.
 *
 * @param {string} key The key to get.
 * @return {?string} The corresponding value, null if not found.
 */
goog.storage.mechanism.Mechanism.prototype.get = goog.abstractMethod;


/**
 * Remove a key and its value.
 *
 * @param {string} key The key to remove.
 */
goog.storage.mechanism.Mechanism.prototype.remove = goog.abstractMethod;

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Interface for storing, retieving and scanning data using some
 * persistence mechanism.
 *
 */

goog.provide('goog.storage.mechanism.IterableMechanism');

goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.iter');
goog.require('goog.iter.Iterator');
goog.require('goog.storage.mechanism.Mechanism');



/**
 * Interface for all iterable storage mechanisms.
 *
 * @constructor
 * @extends {goog.storage.mechanism.Mechanism}
 */
goog.storage.mechanism.IterableMechanism = function() {
  goog.storage.mechanism.IterableMechanism.base(this, 'constructor');
};
goog.inherits(goog.storage.mechanism.IterableMechanism,
              goog.storage.mechanism.Mechanism);


/**
 * Get the number of stored key-value pairs.
 *
 * Could be overridden in a subclass, as the default implementation is not very
 * efficient - it iterates over all keys.
 *
 * @return {number} Number of stored elements.
 */
goog.storage.mechanism.IterableMechanism.prototype.getCount = function() {
  var count = 0;
  goog.iter.forEach(this.__iterator__(true), function(key) {
    goog.asserts.assertString(key);
    count++;
  });
  return count;
};


/**
 * Returns an iterator that iterates over the elements in the storage. Will
 * throw goog.iter.StopIteration after the last element.
 *
 * @param {boolean=} opt_keys True to iterate over the keys. False to iterate
 *     over the values.  The default value is false.
 * @return {!goog.iter.Iterator} The iterator.
 */
goog.storage.mechanism.IterableMechanism.prototype.__iterator__ =
    goog.abstractMethod;


/**
 * Remove all key-value pairs.
 *
 * Could be overridden in a subclass, as the default implementation is not very
 * efficient - it iterates over all keys.
 */
goog.storage.mechanism.IterableMechanism.prototype.clear = function() {
  var keys = goog.iter.toArray(this.__iterator__(true));
  var selfObj = this;
  goog.array.forEach(keys, function(key) {
    selfObj.remove(key);
  });
};

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines error codes to be thrown by storage mechanisms.
 *
 */

goog.provide('goog.storage.mechanism.ErrorCode');


/**
 * Errors thrown by storage mechanisms.
 * @enum {string}
 */
goog.storage.mechanism.ErrorCode = {
  INVALID_VALUE: 'Storage mechanism: Invalid value was encountered',
  QUOTA_EXCEEDED: 'Storage mechanism: Quota exceeded',
  STORAGE_DISABLED: 'Storage mechanism: Storage disabled'
};

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Base class that implements functionality common
 * across both session and local web storage mechanisms.
 *
 */

goog.provide('goog.storage.mechanism.HTML5WebStorage');

goog.require('goog.asserts');
goog.require('goog.iter.Iterator');
goog.require('goog.iter.StopIteration');
goog.require('goog.storage.mechanism.ErrorCode');
goog.require('goog.storage.mechanism.IterableMechanism');



/**
 * Provides a storage mechanism that uses HTML5 Web storage.
 *
 * @param {Storage} storage The Web storage object.
 * @constructor
 * @extends {goog.storage.mechanism.IterableMechanism}
 */
goog.storage.mechanism.HTML5WebStorage = function(storage) {
  goog.storage.mechanism.HTML5WebStorage.base(this, 'constructor');

  /**
   * The web storage object (window.localStorage or window.sessionStorage).
   * @private {Storage}
   */
  this.storage_ = storage;
};
goog.inherits(goog.storage.mechanism.HTML5WebStorage,
              goog.storage.mechanism.IterableMechanism);


/**
 * The key used to check if the storage instance is available.
 * @private {string}
 * @const
 */
goog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_ = '__sak';


/**
 * Determines whether or not the mechanism is available.
 * It works only if the provided web storage object exists and is enabled.
 *
 * @return {boolean} True if the mechanism is available.
 */
goog.storage.mechanism.HTML5WebStorage.prototype.isAvailable = function() {
  if (!this.storage_) {
    return false;
  }
  /** @preserveTry */
  try {
    // setItem will throw an exception if we cannot access WebStorage (e.g.,
    // Safari in private mode).
    this.storage_.setItem(
        goog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_, '1');
    this.storage_.removeItem(
        goog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_);
    return true;
  } catch (e) {
    return false;
  }
};


/** @override */
goog.storage.mechanism.HTML5WebStorage.prototype.set = function(key, value) {
  /** @preserveTry */
  try {
    // May throw an exception if storage quota is exceeded.
    this.storage_.setItem(key, value);
  } catch (e) {
    // In Safari Private mode, conforming to the W3C spec, invoking
    // Storage.prototype.setItem will allways throw a QUOTA_EXCEEDED_ERR
    // exception.  Since it's impossible to verify if we're in private browsing
    // mode, we throw a different exception if the storage is empty.
    if (this.storage_.length == 0) {
      throw goog.storage.mechanism.ErrorCode.STORAGE_DISABLED;
    } else {
      throw goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED;
    }
  }
};


/** @override */
goog.storage.mechanism.HTML5WebStorage.prototype.get = function(key) {
  // According to W3C specs, values can be of any type. Since we only save
  // strings, any other type is a storage error. If we returned nulls for
  // such keys, i.e., treated them as non-existent, this would lead to a
  // paradox where a key exists, but it does not when it is retrieved.
  // http://www.w3.org/TR/2009/WD-webstorage-20091029/#the-storage-interface
  var value = this.storage_.getItem(key);
  if (!goog.isString(value) && !goog.isNull(value)) {
    throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;
  }
  return value;
};


/** @override */
goog.storage.mechanism.HTML5WebStorage.prototype.remove = function(key) {
  this.storage_.removeItem(key);
};


/** @override */
goog.storage.mechanism.HTML5WebStorage.prototype.getCount = function() {
  return this.storage_.length;
};


/** @override */
goog.storage.mechanism.HTML5WebStorage.prototype.__iterator__ = function(
    opt_keys) {
  var i = 0;
  var storage = this.storage_;
  var newIter = new goog.iter.Iterator();
  newIter.next = function() {
    if (i >= storage.length) {
      throw goog.iter.StopIteration;
    }
    var key = goog.asserts.assertString(storage.key(i++));
    if (opt_keys) {
      return key;
    }
    var value = storage.getItem(key);
    // The value must exist and be a string, otherwise it is a storage error.
    if (!goog.isString(value)) {
      throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;
    }
    return value;
  };
  return newIter;
};


/** @override */
goog.storage.mechanism.HTML5WebStorage.prototype.clear = function() {
  this.storage_.clear();
};


/**
 * Gets the key for a given key index. If an index outside of
 * [0..this.getCount()) is specified, this function returns null.
 * @param {number} index A key index.
 * @return {?string} A storage key, or null if the specified index is out of
 *     range.
 */
goog.storage.mechanism.HTML5WebStorage.prototype.key = function(index) {
  return this.storage_.key(index);
};

// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Provides data persistence using HTML5 local storage
 * mechanism. Local storage must be available under window.localStorage,
 * see: http://www.w3.org/TR/webstorage/#the-localstorage-attribute.
 *
 */

goog.provide('goog.storage.mechanism.HTML5LocalStorage');

goog.require('goog.storage.mechanism.HTML5WebStorage');



/**
 * Provides a storage mechanism that uses HTML5 local storage.
 *
 * @constructor
 * @extends {goog.storage.mechanism.HTML5WebStorage}
 */
goog.storage.mechanism.HTML5LocalStorage = function() {
  var storage = null;
  /** @preserveTry */
  try {
    // May throw an exception in cases where the local storage object
    // is visible but access to it is disabled.
    storage = window.localStorage || null;
  } catch (e) {}
  goog.storage.mechanism.HTML5LocalStorage.base(this, 'constructor', storage);
};
goog.inherits(goog.storage.mechanism.HTML5LocalStorage,
              goog.storage.mechanism.HTML5WebStorage);

// Copyright 2013 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Implements RFC 5869 HMAC-based Key Derivation Function (HKDF).
 * @author quannguyen@google.com (Quan Nguyen)
 */
goog.provide('e2e.Hkdf');

goog.require('e2e.hash.Algorithm');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.crypt.Hmac');
goog.require('goog.structs');



/**
 * @param {e2e.hash.Hash} hash An instance of hash to use.
 * @constructor
 */
e2e.Hkdf = function(hash) {
  goog.asserts.assert(goog.structs.contains(
      e2e.hash.Algorithm, hash.algorithm), 'Invalid hash function.');
  this.hash_ = hash;
};


/**
 * @const {number} Hmac block length. We use 64 as the client and the server
 *     must use the same value.
 * @private
 */
e2e.Hkdf.HMAC_BLOCK_LENGTH_ = 64;


/**
 * List of hash's digest length in octets.
 * @enum {number}
 */
e2e.Hkdf.HashLength = {
  'MD5': 128 / 8,
  'SHA1': 160 / 8,
  'SHA224': 224 / 8,
  'SHA256': 256 / 8
};


/**
 * Implements HKDF function which follows the extract-then-expand paradigm,
 * where key derivation function (KDF) logically consists of two modules. The
 * 1st stage takes the input keying material and extracts from it a fixed-length
 * pseudorandom key prk. The 2nd stage expands the key prk into serveral
 * additional pseudorandom keys.
 * @param {!e2e.ByteArray} ikm Input keying material.
 * @param {!e2e.ByteArray} info Context and application specific
 *     information (can be a zero-length array).
 * @param {number} extract_len Length of extracted output keying material in
 *     octets. The maximum size of extracted keys is 255 * hashLength.
 * @param {!e2e.ByteArray=} opt_salt Salt value (a non-secret random
 *     value). If not provided, it is set to a string of hash length zeros.
 * @return {!e2e.ByteArray}  Output keying material (okm).
 */
e2e.Hkdf.prototype.getHKDF = function(ikm, info, extract_len,
    opt_salt) {
  goog.asserts.assertObject(this.hash_, 'Hash function must be specified.');
  var hashLength = e2e.Hkdf.HashLength[this.hash_.algorithm];
  var i;

  goog.asserts.assert(0 < extract_len && extract_len <= hashLength * 255,
                      'Invalid extract len.');
  // Extract
  var salt = opt_salt;
  if (!goog.isDefAndNotNull(opt_salt) || salt === undefined) {
    salt = goog.array.repeat(0x00, hashLength);
  }
  var hmacer = new goog.crypt.Hmac(this.hash_, salt,
                                   e2e.Hkdf.HMAC_BLOCK_LENGTH_);
  var prk = hmacer.getHmac(ikm); // Pseudorandom Key

  // Expand
  var n = Math.ceil(extract_len / hashLength);
  var t = new Array(n + 1);
  var okm = new Array(); // Output Keying Material
  hmacer = new goog.crypt.Hmac(this.hash_, prk,
                               e2e.Hkdf.HMAC_BLOCK_LENGTH_);
  t[0] = new Array(0);

  for (i = 1; i <= n; ++i) {
    t[i] = hmacer.getHmac(t[i - 1].concat(info).concat([i]));
    okm = okm.concat(t[i]);
  }
  return okm.slice(0, extract_len);
};

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Key generator. End-To-End supports generating only ECC keys.
 */

goog.provide('e2e.openpgp.keygenerator');

goog.require('e2e.cipher.Algorithm');
goog.require('e2e.cipher.Ecdh');
goog.require('e2e.ecc.PrimeCurve');
goog.require('e2e.ecc.Protocol');
goog.require('e2e.signer.Algorithm');
goog.require('e2e.signer.Ecdsa');



/**
 * Generates a key pair on the default curve and uses it to construct
 * an ECDSA object.
 * @param {!e2e.ByteArray=} opt_privateKey  An optional already known
 *     private key. If not given, a random key will be created.
 * @return {!e2e.signer.Ecdsa}
 */
e2e.openpgp.keygenerator.newEcdsaWithP256 = function(
    opt_privateKey) {
  var key = e2e.ecc.Protocol.generateKeyPair(
      e2e.ecc.PrimeCurve.P_256, opt_privateKey);
  return new e2e.signer.Ecdsa(e2e.signer.Algorithm.ECDSA, key);
};


/**
 * Generates a key pair on the default curve and uses it to construct
 * an ECDH object.
 * @param {!e2e.ByteArray=} opt_privateKey  An optional already known
 *     private key. If not given, a random key will be created.
 * @return {!e2e.cipher.Ecdh}
 */
e2e.openpgp.keygenerator.newEcdhWithP256 = function(
    opt_privateKey) {
  var key = e2e.ecc.Protocol.generateKeyPair(
      e2e.ecc.PrimeCurve.P_256, opt_privateKey);
  key['kdfInfo'] = [
      0x3, 0x1, 0x8 /* SHA256 Algo ID*/, 0x7 /* AES-128 Algo ID */];
  return new e2e.cipher.Ecdh(e2e.cipher.Algorithm.ECDH, key);
};


/**
 * @param {number} keyLength  Length of the key. Should be 4096 or 8192.
 * @return {!e2e.async.Result.<Array.<e2e.Algorithm>>}
 */
e2e.openpgp.keygenerator.newWebCryptoRsaKeys = function(keyLength) {
  if (!('crypto' in goog.global && 'subtle' in goog.global.crypto)) {
    throw new e2e.openpgp.error.UnsupportedError('No WebCrypto support!');
  }
  // Disable typechecking until crypto.subtle is available in stable chrome.
  var crypto = /** @type {{generateKey: function(...): *,
                exportKey: function(...): *}} */ (goog.global.crypto['subtle']);

  var aid = {'name': 'RSASSA-PKCS1-v1_5',
             'modulusLength': keyLength,
             'publicExponent': new Uint8Array([1, 0, 1]),
             'hash': {'name': 'SHA-256'}};

  var result = new e2e.async.Result;
  var rsaSigner;
  var rsaCipher;
  crypto.generateKey(aid, false, ['sign', 'verify']).catch (
      function(e) {
        result.errback(e);
      }).then(function(sigKeyPair) {
        crypto.exportKey('jwk', sigKeyPair.publicKey).then(
          function(sigPubStr) {
            var sigPubKey = JSON.parse(String.fromCharCode.apply(null,
                new Uint8Array(sigPubStr)));
            var sigRSAKey = e2e.openpgp.keygenerator.jwkToNative_(sigPubKey);
            rsaSigner = new e2e.cipher.Rsa(e2e.signer.Algorithm.RSA, sigRSAKey);
            rsaSigner.setWebCryptoKey(sigKeyPair);

            aid.name = 'RSAES-PKCS1-v1_5';
            crypto.generateKey(aid, false, ['encrypt', 'decrypt']).catch (
              function(e) {
                result.errback(e);
              }).then(function(encKeyPair) {
                crypto.exportKey('jwk', encKeyPair.publicKey).then(
                  function(encPubStr) {
                    var encPubKey = JSON.parse(String.fromCharCode.apply(
                        null, new Uint8Array(encPubStr)));
                    var encRSAKey = e2e.openpgp.keygenerator.jwkToNative_(
                      encPubKey);
                    rsaCipher = new e2e.cipher.Rsa(e2e.cipher.Algorithm.RSA,
                      encRSAKey);
                    rsaCipher.setWebCryptoKey(encKeyPair);

                    result.callback([rsaSigner, rsaCipher]);
                  }).catch (function(e) { result.errback(e); });
              });
          }).catch (function(e) { result.errback(e); });
      });
  return result;
};

/**
 * Given a JWK-formatted RSA key, return a key in the format that we want.
 * @param {*} jwkKey
 * @return {e2e.cipher.key.Rsa}
 * @private
 */
e2e.openpgp.keygenerator.jwkToNative_ = function(jwkKey) {
  return {
    'n': goog.crypt.base64.decodeStringToByteArray(jwkKey.n),
    'e': goog.crypt.base64.decodeStringToByteArray(jwkKey.e),
    'loc': e2e.algorithm.KeyLocations.WEB_CRYPTO
  };
};


// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Implements a key ring that exposes basic key management
 *    features such as generating, searching, importing, exporting keys, etc.
 *    The key ring shall be stored in Chrome's local storage, and shall be
 *    encrypted if the user provides a passphrase.
 */

goog.provide('e2e.openpgp.KeyRing');

goog.require('e2e');
goog.require('e2e.Hkdf');
goog.require('e2e.async.Result');
goog.require('e2e.cipher.Aes');
goog.require('e2e.cipher.Algorithm');
goog.require('e2e.ciphermode.Cfb');
goog.require('e2e.error.InvalidArgumentsError');
goog.require('e2e.hash.Sha1');
goog.require('e2e.hash.Sha256');
goog.require('e2e.openpgp');
goog.require('e2e.openpgp.EncryptedCipher');
goog.require('e2e.openpgp.IteratedS2K');
goog.require('e2e.openpgp.KeyClient');
goog.require('e2e.openpgp.Mpi');
goog.require('e2e.openpgp.block.TransferablePublicKey');
goog.require('e2e.openpgp.block.TransferableSecretKey');
goog.require('e2e.openpgp.block.factory');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.error.SerializationError');
goog.require('e2e.openpgp.error.UnsupportedError');
goog.require('e2e.openpgp.keygenerator');
goog.require('e2e.openpgp.packet.PublicKey');
goog.require('e2e.openpgp.packet.PublicSubkey');
goog.require('e2e.openpgp.packet.SecretKey');
goog.require('e2e.openpgp.packet.SecretSubkey');
goog.require('e2e.openpgp.packet.Signature');
goog.require('e2e.openpgp.packet.UserId');
goog.require('e2e.random');
goog.require('e2e.signer.Algorithm');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.crypt.Hmac');
goog.require('goog.crypt.Sha256');
goog.require('goog.crypt.base64');
goog.require('goog.iter');
goog.require('goog.object');
goog.require('goog.storage.mechanism.HTML5LocalStorage');
goog.require('goog.structs.Map');

/**
 * Implements a key ring that exposes basic key management features such as
 * generating, searching, importing, exporting keys, etc. The key ring shall
 * be stored in browser's local storage, and shall be encrypted if the user
 * provides a passphrase.
 * @param {string} passphrase The passphrase used to encrypt the keyring.
 * @param {string} opt_keyServerUrl The optional http key server url. If not
 *    specified then only support key operation locally.
 * @constructor
 */
e2e.openpgp.KeyRing = function(passphrase, opt_keyServerUrl) {
  this.localStorage_ = new goog.storage.mechanism.HTML5LocalStorage();
  if (goog.isDefAndNotNull(opt_keyServerUrl)) {
    this.keyClient_ = new e2e.openpgp.KeyClient(opt_keyServerUrl);
  }
  this.pubKeyRing_ = new goog.structs.Map();
  this.privKeyRing_ = new goog.structs.Map();
  this.passphrase_ = passphrase;
  this.readKeyData_();
};


/**
 * The local storage to persist key data.
 * @type {goog.storage.mechanism.HTML5LocalStorage}
 * @private
 */
e2e.openpgp.KeyRing.prototype.localStorage_;


/**
 * The public key ring. It's a map keyed by email. The values are lists of
 * block.TransferablePublicKey objects associated with this email.
 * @type {!e2e.openpgp.KeyRingType}
 * @private
 */
e2e.openpgp.KeyRing.prototype.pubKeyRing_;


/**
 * The private key ring. It's a map keyed by email. The values are lists of
 * block.TransferableSecretKey objects associated with this email.
 * @type {!e2e.openpgp.KeyRingType}
 * @private
 */
e2e.openpgp.KeyRing.prototype.privKeyRing_;


/**
 * Cached passphrase. Null means not populated. '' means no encryption.
 * @type {?string}
 * @private
 */
e2e.openpgp.KeyRing.prototype.passphrase_ = null;


/**
 * The key client instance that searches for and adds public keys to/from
 *    the http key server.
 * @type {e2e.openpgp.KeyClient}
 * @private
 */
e2e.openpgp.KeyRing.prototype.keyClient_ = null;


/**
 * ECC key generation seed
 * @type {e2e.ByteArray}
 * @private
 */
e2e.openpgp.KeyRing.prototype.eccSeed_;


/**
 * number of keys generated from ECC generation seed
 * @type {number}
 * @private
 */
e2e.openpgp.KeyRing.prototype.eccCount_;


/**
 * The local storage's key under which the user key ring is stored.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.USER_KEY_RING_ = 'UserKeyRing';


/**
 * The version of the KeyRing format in local storage.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.VERSION_ = 1;


/**
 * Indicator that the keyring is stored unencrypted.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.UNENCRYPTED_ = 'U';


/**
 * Indicator that the keyring is stored encrypted.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.ENCRYPTED_ = 'E';


/**
 * Size in bytes of the HMAC output.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.HMAC_SIZE_ = 32;


/**
 * Size in bytes of the block size for the Hash function used in the HMAC.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.HASH_BLOCK_SIZE_ = 64;


/**
 * Size in bytes for the HMAC key. Must be <= HASH_BLOCK_SIZE_.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.HMAC_KEY_SIZE_ = 16;


/**
 * The local storage's key under which the salt is stored base64 encoded.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.SALT_ = 'Salt';


/**
 * Size in bytes for the s2k salt.
 * @const
 * @private
 */
e2e.openpgp.KeyRing.SALT_SIZE_ = 8;


/**
 * Size in bytes for the ECC key generation seed.
 * @const
 */
e2e.openpgp.KeyRing.ECC_SEED_SIZE = 16;


/**
 * @param {string} passphrase Change the passphrase for encrypting the KeyRing
 *     when stored locally. Empty string for unencrypted.
 */
e2e.openpgp.KeyRing.prototype.changePassphrase = function(passphrase) {
  this.passphrase_ = passphrase;
  this.persist_();
};


/**
 * Imports a key block to the key ring.
 * @param {!e2e.openpgp.block.TransferableKey} keyBlock The key block to
 *     import.
 * @param {!e2e.ByteArray=} opt_passphrase The passphrase to use to
 *     import the key.
 * @return {boolean} If the key import was succesful.
 */
e2e.openpgp.KeyRing.prototype.importKey = function(
    keyBlock, opt_passphrase) {
  var keys = [keyBlock.keyPacket].concat(keyBlock.subKeys);
  var keyRing;
  if (keyBlock instanceof e2e.openpgp.block.TransferablePublicKey) {
    keyRing = this.pubKeyRing_;
  } else if (keyBlock instanceof e2e.openpgp.block.TransferableSecretKey) {
      keyRing = this.privKeyRing_;
  } else {
    return false;
  }
  keyBlock.processSignatures();
  var uids = keyBlock.getUserIds();
  goog.array.removeDuplicates(uids);
  var importedKeys = goog.array.map(uids, function(uid) {
    return this.importKey_(uid, keyBlock, keyRing, opt_passphrase);
  }, this);
  // Return false if any key failed to import.
  return importedKeys.indexOf(false) > -1;
};


/**
 * Generates and imports to the key ring a master ECDSA key pair and a
 * subordinate ECDH key pair.
 * @param {string} email The email to associate the key to.
 * @return {e2e.async.Result.<!Array.<!e2e.openpgp.block.TransferableKey>>}
 * The generated public key and secret key in an array.
 */
e2e.openpgp.KeyRing.prototype.generateECKey = function(email) {
  return this.generateKey(email, e2e.signer.Algorithm.ECDSA, 256,
      e2e.cipher.Algorithm.ECDH, 256);
};


/**
 * Generates the next key in the sequence based on the ECC generation seed
 * @param {number} keyLength Length in bits of the key.
 * @private
 * @return {!e2e.ByteArray} Deterministic privKey based on ECC seed.
 */
e2e.openpgp.KeyRing.prototype.getNextKey_ = function(keyLength) {
  if (!this.eccSeed_) {
    this.eccSeed_ = e2e.random.getRandomBytes(
        e2e.openpgp.KeyRing.ECC_SEED_SIZE);
    this.eccCount_ = 0;
  }

  if (++this.eccCount_ > 0x7F) {
    throw new e2e.openpgp.error.UnsupportedError('Too many ECC keys generated');
  }

  if (keyLength % 8) {
    throw new e2e.openpgp.error.UnsupportedError(
        'Key length is not a multiple of 8');
  }

  return new e2e.Hkdf(new e2e.hash.Sha256()).getHKDF(this.eccSeed_,
      e2e.dwordArrayToByteArray([this.eccCount_]), keyLength / 8);

};


/**
 * Generates and imports to the key ring a master signing key and a subordinate
 * encryption key.
 * @param {string} email The email to associate the key with.
 * @param {!e2e.signer.Algorithm} keyAlgo Algorithm of the master key.
 *     It must be one of the digital signature algorithms.
 * @param {number} keyLength Length in bits of the master key.
 * @param {e2e.cipher.Algorithm} subkeyAlgo Algorithm of the subkey.
 *     It must be one of the cipher algorithms.
 * @param {number} subkeyLength Length in bits of the subkey.
 * @param {!e2e.algorithm.KeyLocations=} opt_keyLocation Where should the key be
 *     stored? (default to JS)
 * @return {e2e.async.Result.<!Array.<!e2e.openpgp.block.TransferableKey>>}
 * The generated public key and secret key in an array.
 */
e2e.openpgp.KeyRing.prototype.generateKey = function(email,
                                                     keyAlgo,
                                                     keyLength,
                                                     subkeyAlgo,
                                                     subkeyLength,
                                                     opt_keyLocation) {
  var keyData = {
    'pubKey': new Array(),
    'privKey': new Array()
  };
  if (!goog.isDef(opt_keyLocation)) {
    opt_keyLocation = e2e.algorithm.KeyLocations.JAVASCRIPT;
  }

  if (opt_keyLocation == e2e.algorithm.KeyLocations.JAVASCRIPT) {
    var fingerprint;
    if (keyAlgo == e2e.signer.Algorithm.ECDSA &&
        keyLength == 256) {
      var ecdsa = e2e.openpgp.keygenerator.newEcdsaWithP256(
          this.getNextKey_(keyLength));
      this.extractKeyData_(keyData, ecdsa);
      fingerprint = keyData.pubKey[0].fingerprint;
    }
    if (subkeyAlgo == e2e.cipher.Algorithm.ECDH &&
        subkeyLength == 256) {
      var ecdh = e2e.openpgp.keygenerator.newEcdhWithP256(
          this.getNextKey_(subkeyLength));
      this.extractKeyData_(keyData, ecdh, true);
    }
    return e2e.async.Result.toResult(this.certifyKeys_(email, keyData));
  } else if (opt_keyLocation == e2e.algorithm.KeyLocations.WEB_CRYPTO) {
    if (keyAlgo == e2e.signer.Algorithm.RSA) {
      if ((keyLength != 4096 && keyLength != 8192) ||
          subkeyAlgo != e2e.cipher.Algorithm.RSA || subkeyLength != keyLength) {
            throw new e2e.openpgp.error.UnsupportedError(
                'WebCrypto RSA keyLength must be 4096 or 8192');
      }
      return e2e.openpgp.keygenerator.newWebCryptoRsaKeys(
          keyLength).addCallback(
          function(ciphers) {
        this.extractKeyData_(keyData, ciphers[0]);
        this.extractKeyData_(keyData, ciphers[1]);
        return this.certifyKeys_(email, keyData);
      });
    }
  } else if (opt_keyLocation == e2e.algorithm.KeyLocations.HARDWARE) {
    // TODO(user): https://code.google.com/p/end-to-end/issues/detail?id=130
    throw new e2e.openpgp.error.UnsupportedError(
        'Hardware keygen not supported yet');
  }
  // Should never happen.
  throw new e2e.openpgp.error.UnsupportedError(
      'Unsupported key type or length.');
};

/**
 * @param {string} email The email to associate the key with.
 * @param {{privKey: (Array|null), pubKey: (Array|null)}} keyData
 * @return {!Array.<!e2e.openpgp.block.TransferableKey>}
 * @private
 */
e2e.openpgp.KeyRing.prototype.certifyKeys_ = function(email, keyData) {
  if (keyData['pubKey'].length == 2 && keyData['privKey'].length == 2) {
    // TODO(user): Move this code to a .construct.
    var primaryKey = keyData['privKey'][0];
    var uid = new e2e.openpgp.packet.UserId(email);
    uid.certifyBy(primaryKey);
    keyData['privKey'][1].bindTo(
        primaryKey, e2e.openpgp.packet.Signature.SignatureType.SUBKEY);
    keyData['pubKey'][1].bindTo(
        primaryKey, e2e.openpgp.packet.Signature.SignatureType.SUBKEY);

    var privKeyBlock = new e2e.openpgp.block.TransferableSecretKey();
    privKeyBlock.keyPacket = primaryKey;
    privKeyBlock.subKeys.push(keyData['privKey'][1]);
    privKeyBlock.userIds.push(uid);

    var pubKeyBlock = new e2e.openpgp.block.TransferablePublicKey();
    pubKeyBlock.keyPacket = keyData['pubKey'][0];
    pubKeyBlock.subKeys.push(keyData['pubKey'][1]);
    pubKeyBlock.userIds.push(uid);

    this.importKey_(email, pubKeyBlock, this.pubKeyRing_);
    this.importKey_(email, privKeyBlock, this.privKeyRing_);

    // Imports the generated public key to the key server.
    if (this.keyClient_ != null) {
      this.keyClient_.importPublicKey(pubKeyBlock);
    }
    return [pubKeyBlock, privKeyBlock];
  }
  // Should never happen.
  throw new e2e.openpgp.error.UnsupportedError(
      'Unsupported key type or length.');
};

/**
 * Obtains the key with a given keyId.
 * @param {!e2e.ByteArray} keyId The key id to search for.
 * @return {?e2e.openpgp.packet.PublicKey} The key packet with that key id or
 *     null.
 */
e2e.openpgp.KeyRing.prototype.getPublicKey = function(keyId) {
  return /** @type {e2e.openpgp.packet.PublicKey} */ (this.getKey_(keyId));
};


/**
 * Obtains a secret key with a given keyId.
 * @param {!e2e.ByteArray} keyId The key id to search for.
 * @return {?e2e.openpgp.packet.SecretKey} The secret key with that key id or
 *     null.
 */
e2e.openpgp.KeyRing.prototype.getSecretKey = function(keyId) {
  return /** @type {e2e.openpgp.packet.SecretKey} */ (this.getKey_(
      keyId, true));
};


/**
 * Obtains the key with a given keyId. If opt_secret is set, it only returns
 * secret keys.
 * @param {!e2e.ByteArray} keyId The key id to search for.
 * @param {boolean=} opt_secret Whether to search the private key ring.
 * @return {?e2e.openpgp.packet.Key} The key packet with that key id or null.
 * @private
 */
e2e.openpgp.KeyRing.prototype.getKey_ = function(keyId, opt_secret) {
  var keyRing = opt_secret ? this.privKeyRing_ : this.pubKeyRing_;
  var result;
  // Using goog.array.find to break on first match.
  goog.array.find(goog.array.flatten(keyRing.getValues()), function(key) {
    if (goog.array.equals(keyId, key.keyPacket.keyId)) {
      result = key.keyPacket;
      return true;
    }
    return Boolean(goog.array.find(key.subKeys, function(subKey) {
      if (goog.array.equals(keyId, subKey.keyId)) {
        result = subKey;
        return true;
      }
      return false;
    }));
  });
  return result || null;
};


/**
 * Obtains a key block corresponding to the given key object or null.
 * @param {!e2e.openpgp.Key} keyObject
 * @return {?e2e.openpgp.block.TransferableKey}
 */
e2e.openpgp.KeyRing.prototype.getKeyBlock = function(keyObject) {
  var fingerprint = keyObject.key.fingerprint;
  var secret = keyObject.key.secret;
  var keyRing = secret ? this.privKeyRing_ : this.pubKeyRing_;
  var ret = goog.array.find(
      goog.array.flatten(keyRing.getValues()),
      function(keyBlock) {
        return goog.array.equals(keyBlock.keyPacket.fingerprint, fingerprint);
      });
  return this.lockSecretKey_(ret);
};


/**
 * Locks a TransferableSecretKey with keyring passphrase. Used to prevent
 * exporting unencrypted secret keys. Operates on a copy of key argument.
 * @param {!e2e.openpgp.block.TransferableKey} key
 * @return {?e2e.openpgp.block.TransferableKey}
 * @private
 */
e2e.openpgp.KeyRing.prototype.lockSecretKey_ = function(key) {
  if (!key) {
    return key;
  }
  // Only let SecretKeys out if they are encrypted.
  if (key instanceof e2e.openpgp.block.TransferableSecretKey) {
    var serialized = key.serialize();
    var parsed = /** @type {!e2e.openpgp.block.TransferableSecretKey} */ (
        e2e.openpgp.block.factory.parseByteArray(serialized));
    parsed.unlock();
    var success = false;
    if (this.passphrase_) {
      success = parsed.lock(e2e.stringToByteArray(this.passphrase_));
    } else {
      success = parsed.lock();
    }
    return success ? parsed : null;
  }
  return key;
};


/**
 * Obtains a key block having a key with the given key ID or null.
 * @param {!e2e.ByteArray} keyId
 * @param {boolean=} opt_secret Whether to search the private key ring.
 * @return {e2e.openpgp.block.TransferableKey}
 */
e2e.openpgp.KeyRing.prototype.getKeyBlockById = function(keyId,
    opt_secret) {
  var keyRing = opt_secret ? this.privKeyRing_ : this.pubKeyRing_;
  var ret = goog.array.find(
      goog.array.flatten(keyRing.getValues()),
      function(keyBlock) {
        return keyBlock.hasKeyById(keyId);
      }) || null;
  return this.lockSecretKey_(ret);
};


/**
 * Defines the status of a state machine to decode EME encoded messages.
 * @enum {number}
 */
e2e.openpgp.KeyRing.Type = {
  'PUBLIC': 0,
  'PRIVATE': 1,
  'ALL': 2
};


/**
 * Searches a public or private key from an email.
 * @param {string} email The email to search for, or empty to search all.
 * @param {e2e.openpgp.KeyRing.Type=} opt_type Key type to search for.
 * @return {?Array.<!e2e.openpgp.block.TransferableKey>} An array of keys for
 *     the given email or null if not found.
 */
e2e.openpgp.KeyRing.prototype.searchKey = function(email, opt_type) {
  if (!opt_type || opt_type == e2e.openpgp.KeyRing.Type.PUBLIC) {
    return this.searchKey_(this.pubKeyRing_, email);
  }
  if (opt_type == e2e.openpgp.KeyRing.Type.PRIVATE) {
    return this.searchKey_(this.privKeyRing_, email);
  }
  if (opt_type == e2e.openpgp.KeyRing.Type.ALL) {
    var keys = [];
    var priv = this.searchKey_(this.privKeyRing_, email);
    if (priv) {  // Do this to avoid having a null element.
      goog.array.extend(keys, priv);
    }
    var pub = this.searchKey_(this.pubKeyRing_, email);
    if (pub) {
      goog.array.extend(keys, pub);
    }
    return keys;
  }
  return null;
};


/**
 * Searches a public or private key from email asynchronously. The search is
 *    first performed locally. If the key is not found locally and we're
 *    searching for public key, then searches the public key in the http key
 *    server and imports the the found key to keyring.
 * @param {string} email The email to search for, or empty to search all.
 * @param {e2e.openpgp.KeyRing.Type=} opt_type Key type to search for.
 * @return {!e2e.async.Result.<!Array.<!e2e.openpgp.block.TransferableKey>>}
 *    An array of keys for the given email or [] if not found.
 */
e2e.openpgp.KeyRing.prototype.searchKeyLocalAndRemote = function(email,
    opt_type) {
  var resultKeys = new e2e.async.Result();
  var localKeys = this.searchKey(email, opt_type);
  if (localKeys != null) {
    resultKeys.callback(localKeys);
  } else if (opt_type == e2e.openpgp.KeyRing.Type.PUBLIC) {
    this.searchPublicKeyRemote_(email).addCallback(function(pubKeys) {
      resultKeys.callback(pubKeys);
    });
  } else {
    resultKeys.callback([]);
  }
  return resultKeys;
};

/**
 * Gets all of the keys in the keyring.
 * @param {boolean} opt_priv If true, fetch only private keys.
 * @return {!e2e.openpgp.KeyRingType} A clone of the key ring maps.
 */
e2e.openpgp.KeyRing.prototype.getAllKeys = function(opt_priv) {
  if (opt_priv) {
    return this.privKeyRing_.clone();
  }
  var keys = this.pubKeyRing_.clone();
  var ids = this.privKeyRing_.getKeys();
  var values = this.privKeyRing_.getValues();
  for (var i = 0; i < ids.length; i++) {
    keys.set(ids[i], goog.array.concat(values[i], keys.get(ids[i], [])));
  }
  return keys;
};


/**
 * Deletes all keys for an email address.
 * @param {string} email The email to delete keys for.
 */
e2e.openpgp.KeyRing.prototype.deleteKey = function(email) {
  this.privKeyRing_.remove(email);
  this.pubKeyRing_.remove(email);
  this.persist_();
};


/**
 * Deletes public key for an email address.
 * @param {string} email The email to delete public key for.
 */
e2e.openpgp.KeyRing.prototype.deletePublicKey = function(email){
  this.pubKeyRing_.remove(email);
  this.persist_();
};

/**
 * @return {boolean} True if there is a correct keyring passphrase set.
 */
e2e.openpgp.KeyRing.prototype.hasPassphrase = function() {
  return (this.passphrase_ != null);
};


/**
 * @return {boolean} True if the keyring is encrypted in LocalStorage.
 */
e2e.openpgp.KeyRing.prototype.isEncrypted = function() {
  return (this.passphrase_ != null && this.passphrase_ != '');
};


/**
 * Resets the key ring. Use with care, as this shall delete all keys.
 */
e2e.openpgp.KeyRing.prototype.reset = function() {
  this.localStorage_.remove(e2e.openpgp.KeyRing.USER_KEY_RING_);
  this.localStorage_.remove(e2e.openpgp.KeyRing.SALT_);
  this.pubKeyRing_ = new goog.structs.Map();
  this.privKeyRing_ = new goog.structs.Map();
  this.passphrase_ = null;
};


/**
 * Searches a key in a key ring from an email.
 * @param {!e2e.openpgp.KeyRingType} keyRing The key ring to search.
 * @param {string} email The email to search for.
 * @return {Array.<!e2e.openpgp.block.TransferableKey>} An array of keys for
 *     that user id or null.
 * @private
 */
e2e.openpgp.KeyRing.prototype.searchKey_ = function(keyRing, email) {
  return keyRing.get(email) ?
      goog.array.clone(keyRing.get(email)) : null;
};

/**
  * Searches a public key remotely by email.
  * @param {string} email The email to search for.
  * @return {!e2e.async.Result.<!Array.<!e2e.openpgp.block.TransferableKey>>}
  *     An array of public keys for that email or [] if not found.
  * @private
  */
e2e.openpgp.KeyRing.prototype.searchPublicKeyRemote_ = function(email) {
  var resultPubKeys = new e2e.async.Result();
  if (this.keyClient_ == null) {
    resultPubKeys.callback([]);
  } else {
    this.keyClient_.searchPublicKey(email).addCallback(function(pubKeys) {
      resultPubKeys.callback(pubKeys);

      // Imports the public keys into local keyring. The key client should have
      // verified the public key's consistency proof.
      if (pubKeys.length != 0) {
        goog.array.forEach(pubKeys, function(pubKey) {
          this.importKey(pubKey);
        }, this);
      }
    }, this);
  }
  return resultPubKeys;
};


/**
 * Imports a new key associated with an email to the key ring. Does not add the
 * key if there is already a matching key ID.
 * @param {string} email The email associated with the key.
 * @param {!e2e.openpgp.block.TransferableKey} keyBlock The key to import.
 * @param {!e2e.openpgp.KeyRingType} keyRing The keyring to add the keys to.
 * @param {!e2e.ByteArray=} opt_passphrase The passphrase used to
 *     protect the key.
 * @return {boolean} If the key import was succesful.
 * @private
 */
e2e.openpgp.KeyRing.prototype.importKey_ = function(
    email, keyBlock, keyRing, opt_passphrase) {
  var emailKeyBlocks = [], addKey = false;
  var keys = [keyBlock.keyPacket].concat(keyBlock.subKeys);
  goog.array.forEach(keys, function(key) {
    if (key instanceof e2e.openpgp.packet.SecretKey) {
      key.cipher.unlockKey(opt_passphrase);
      // Re-lock the key in plaintext.
      key.cipher.lockKey();
    }
  });
  if (keyRing.containsKey(email)) {
    emailKeyBlocks = keyRing.get(email);
    addKey = !goog.array.some(emailKeyBlocks, function(emailKeyBlock) {
      return goog.isDef(keyBlock.keyPacket.keyId) && goog.array.equals(
          emailKeyBlock.keyPacket.keyId, keyBlock.keyPacket.keyId);
    });
    // TODO(user): Merge information when the key block is already in keyring.
  } else {
    addKey = true;
  }
  if (addKey) {
    keyRing.set(email, emailKeyBlocks.concat([keyBlock]));
    this.persist_();
  }
  return addKey;
};


/**
 * Perists key data to local storage.
 * @private
 */
e2e.openpgp.KeyRing.prototype.persist_ = function() {
  var serialized = this.serialize_();
  if (this.passphrase_) {
    var encrypted = this.encrypt_(serialized);
    this.localStorage_.set(e2e.openpgp.KeyRing.USER_KEY_RING_,
        e2e.openpgp.KeyRing.ENCRYPTED_ + encrypted);
  } else if (this.passphrase_ == '') {
    this.localStorage_.set(e2e.openpgp.KeyRing.USER_KEY_RING_,
        e2e.openpgp.KeyRing.UNENCRYPTED_ + serialized);
  } else {  // this.passphrase_ == null
    throw new Error('keyring not unlocked');
  }
};


/**
 * Serializes the public and private key ring to a string.
 * @return {string}
 * @private
 */
e2e.openpgp.KeyRing.prototype.serialize_ = function() {
  var obj = {
    'pubKey': this.keyRingToObject_(this.pubKeyRing_),
    'privKey': this.keyRingToObject_(this.privKeyRing_),
    'eccSeed': this.eccSeed_,
    'eccCount': this.eccCount_
  };
  return JSON.stringify(obj);
};


/**
 * Encrypts a string with a passphrase.
 * @param {string} plaintext String to encrypt.
 * @return {string}
 * @private
 */
e2e.openpgp.KeyRing.prototype.encrypt_ = function(plaintext) {
  goog.asserts.assert(this.passphrase_, 'passphrase not set');
  // TODO(user) Cache the s2k result instead of the passphrase.
  var salt = this.getOrCreateSalt_();
  var s2k = new e2e.openpgp.IteratedS2K(
      new e2e.hash.Sha1, salt, 96);  // 96 is 65536 iterations.
  var aes = new e2e.cipher.Aes(e2e.cipher.Algorithm.AES128);
  var doubleKey = s2k.getKey(
      e2e.stringToByteArray(this.passphrase_),
      (aes.keySize + e2e.openpgp.KeyRing.HMAC_KEY_SIZE_));
  var key = {};
  key.key = doubleKey.splice(0, aes.keySize);
  var hmacKey = doubleKey;  // Remaining bytes in doubleKey are the hmacKey.
  aes.setKey(key);
  var aescfb = new e2e.ciphermode.Cfb(aes);
  var iv = e2e.random.getRandomBytes(aes.blockSize);
  var ciphertext = e2e.async.Result.getValue(aescfb.encrypt(
      e2e.stringToByteArray(plaintext), iv));
  var formatted = goog.array.concat(
      e2e.openpgp.KeyRing.VERSION_,
      iv,
      ciphertext);
  var hmac = new goog.crypt.Hmac(
      new goog.crypt.Sha256(),
      hmacKey,
      e2e.openpgp.KeyRing.HASH_BLOCK_SIZE_);
  var digest = hmac.getHmac(formatted);
  formatted = goog.array.concat(digest, formatted);
  return goog.crypt.base64.encodeByteArray(formatted);
};


/**
 * Gets current Salt or generates one if needed.
 * @return {!e2e.ByteArray}
 * @private
 */
e2e.openpgp.KeyRing.prototype.getOrCreateSalt_ = function() {
  var serialized = this.localStorage_.get(e2e.openpgp.KeyRing.SALT_);
  var salt;
  if (serialized) {
    salt = goog.crypt.base64.decodeStringToByteArray(serialized);
  } else {
    salt = e2e.random.getRandomBytes(
        e2e.openpgp.KeyRing.SALT_SIZE_);
    serialized = goog.crypt.base64.encodeByteArray(salt);
    this.localStorage_.set(e2e.openpgp.KeyRing.SALT_, serialized);
  }
  return salt;
};


/**
 * Serializes a key ring to an object.
 * @param {!e2e.openpgp.KeyRingType} keyRing The key ring to be serialized.
 * @return {!Object}
 * @private
 */
e2e.openpgp.KeyRing.prototype.keyRingToObject_ = function(keyRing) {
  var obj = {};
  goog.iter.forEach(keyRing.getKeys(), function(k) {
    var v = goog.array.map(keyRing.get(k), function(e) {
      // each element is an instance of e2e.openpgp.block.TransferableKey.
      return goog.crypt.base64.encodeByteArray(e.serialize());
    });
    obj[k] = v;
  });
  return obj;
};


/**
 * Reads key data from local storage to memory.
 * Only called by constructor.
 * @private
 */
e2e.openpgp.KeyRing.prototype.readKeyData_ = function() {
  var serialized = this.localStorage_.get(
      e2e.openpgp.KeyRing.USER_KEY_RING_);
  if (serialized) {
    var isEncrypted =
        (serialized.charAt(0) == e2e.openpgp.KeyRing.ENCRYPTED_);
    serialized = serialized.substr(1);
    var hasPassphrase = Boolean(this.passphrase_);
    if (isEncrypted) {
      if (hasPassphrase) { //Decrypt only if passphrase was given.
        serialized = this.decrypt_(serialized);
        this.deserialize_(serialized);
      } else {
        throw new Error('No passphrase was given to decrypt the KeyRing.');
      }
    } else {
      // TODO(user) Inform user that the keyring was not encrypted.
      this.deserialize_(serialized);
    }
  } else {  // No data stored yet.
    this.persist_();
  }
};


/**
 * Deserializes private and public key ring from a string.
 * @param {string} s The serialized key ring.
 * @private
 */
e2e.openpgp.KeyRing.prototype.deserialize_ = function(s) {
  try {
    var obj = JSON.parse(s);
    this.pubKeyRing_ = this.objectToPubKeyRing_(obj['pubKey']);
    this.privKeyRing_ = this.objectToPrivKeyRing_(obj['privKey']);
    this.eccSeed_ = obj.eccSeed;
    this.eccCount_ = obj.eccCount;
  } catch (ex) {
    throw new e2e.openpgp.error.SerializationError(
        'Invalid key ring: ' + ex.message);
    // TODO(user) Should we treat JSON errors differently so we don't leak
    // any keyring data in the Exception message?
  }
};


/**
 * Decrypts a string with a passphrase.
 * @param {string} ciphertext String to decrypt.
 * @return {string}
 * @private
 */
e2e.openpgp.KeyRing.prototype.decrypt_ = function(ciphertext) {
  var decoded = goog.crypt.base64.decodeStringToByteArray(ciphertext);
  var digestSaved = decoded.splice(0, e2e.openpgp.KeyRing.HMAC_SIZE_);
  goog.asserts.assert(this.passphrase_, 'passphrase not set');
  var salt = this.getOrCreateSalt_();
  var s2k = new e2e.openpgp.IteratedS2K(
      new e2e.hash.Sha1, salt, 96);
  var aes = new e2e.cipher.Aes(e2e.cipher.Algorithm.AES128);
  var doubleKey = s2k.getKey(
      e2e.stringToByteArray(this.passphrase_),
      (aes.keySize + e2e.openpgp.KeyRing.HMAC_KEY_SIZE_));
  var key = {};
  key.key = doubleKey.splice(0, aes.keySize);
  var hmacKey = doubleKey;
  aes.setKey(key);
  var aescfb = new e2e.ciphermode.Cfb(aes);
  var hmac = new goog.crypt.Hmac(
      new goog.crypt.Sha256(),
      hmacKey,
      e2e.openpgp.KeyRing.HASH_BLOCK_SIZE_);
  var digest = hmac.getHmac(decoded);
  if (!e2e.compareByteArray(digest, digestSaved)) {
    throw new Error('HMAC does not match! LocalStorage modified?');
  }
  var version = decoded.shift();
  if (version != e2e.openpgp.KeyRing.VERSION_) {
    throw new Error('Unknown keyring version');
  }
  var iv = decoded.splice(0, aes.blockSize);
  var plaintext = e2e.async.Result.getValue(aescfb.decrypt(decoded, iv));
  return e2e.byteArrayToString(plaintext);
};


/**
 * Deserializes a private key ring from an object.
 * @param {!e2e.openpgp.SerializedKeyRing} s The serialized key ring.
 * @return {!e2e.openpgp.KeyRingType}
 * @private
 */
e2e.openpgp.KeyRing.prototype.objectToPrivKeyRing_ = function(s) {
  var obj = goog.object.map(s, function(keys, uid) {
    return goog.array.map(keys, function(key) {
      var block;
      try {
        block = e2e.openpgp.block.factory.parseByteArray(
            goog.crypt.base64.decodeStringToByteArray(key));
      } catch (e) {
        if (e instanceof e2e.openpgp.error.ParseError) {
          // Perhaps the user used has and old-format packet keyring.
          var keyPacket = e2e.openpgp.packet.SecretKey.parse(
              goog.crypt.base64.decodeStringToByteArray(key));
          var uidPacket = new e2e.openpgp.packet.UserId(uid);
          var serialized = [].concat(
              keyPacket.serialize()).concat(uidPacket.serialize());
          block = e2e.openpgp.block.factory.parseByteArray(serialized);
        }
      }
      if (!(block instanceof e2e.openpgp.block.TransferableSecretKey)) {
        throw new Error('Unexpected block in keyring.');
      }
      block.unlock();
      return block;
    });
  });
  return new goog.structs.Map(obj);
};


/**
 * Deserializes a public key ring from an object.
 * @param {!e2e.openpgp.SerializedKeyRing} s The serialized key ring.
 * @return {!e2e.openpgp.KeyRingType}
 * @private
 */
e2e.openpgp.KeyRing.prototype.objectToPubKeyRing_ = function(s) {
  var obj = goog.object.map(s, function(keys, uid) {
    return goog.array.map(keys, function(key) {
      var block;
      try {
        block = e2e.openpgp.block.factory.parseByteArray(
            goog.crypt.base64.decodeStringToByteArray(key));
      } catch (e) {
        // TODO(user): Delete this code before launch.
        if (e instanceof e2e.openpgp.error.ParseError) {
          // Perhaps the user used has and old-format packet keyring.
          var keyPacket = e2e.openpgp.packet.PublicKey.parse(
              goog.crypt.base64.decodeStringToByteArray(key));
          var uidPacket = new e2e.openpgp.packet.UserId(uid);
          var serialized = [].concat(
              keyPacket.serialize()).concat(uidPacket.serialize());
          block = e2e.openpgp.block.factory.parseByteArray(serialized);
        }
      }
      if (!(block instanceof e2e.openpgp.block.TransferablePublicKey)) {
        throw new Error('Unexpected block in keyring.');
      }
      return block;
    });
  });
  return new goog.structs.Map(obj);
};


/**
 * Backs up the ECC key generation seed and key count
 * @return {e2e.openpgp.KeyringBackupInfo}
 */
e2e.openpgp.KeyRing.prototype.getKeyringBackupData = function() {
  return {
    seed: this.eccSeed_,
    count: this.eccCount_
  };
};


/**
 * Restores serialized data from ECC key backup
 * @param {e2e.openpgp.KeyringBackupInfo} data
 *     serialized data to restore
 * @param {string} email The email to associate with restored keys.
 */
e2e.openpgp.KeyRing.prototype.restoreKeyring = function(data, email) {
  this.eccSeed_ = data.seed;
  this.eccCount_ = 0;

  if (data.count % 2) {
    throw new e2e.error.InvalidArgumentsError('Keys must be restored in pairs');
  }

  for (var i = 0; i < data.count / 2; i++) {
    this.generateECKey(email);
  }
};


/**
 * Extracts serialized key data contained in a crypto object.
 * @param {{privKey: (Array|null), pubKey: (Array|null)}} keyData The map
 *     to store the extracted data.
 * @param {!e2e.cipher.Cipher|!e2e.signer.Signer} cryptor
 *     The crypto object to extract key material.
 * @param {boolean=} opt_subKey Whether the key is a subkey. Defaults to false.
 * @param {boolean=} opt_isJS Whether the key material is stored in JS.
 *                            Default to true.
 * @private
 */
e2e.openpgp.KeyRing.prototype.extractKeyData_ = function(
    keyData, cryptor, opt_subKey, opt_isJS) {
  var version = 0x04;
  var timestamp = 0;
  var publicConstructor = opt_subKey ?
      e2e.openpgp.packet.PublicSubkey : e2e.openpgp.packet.PublicKey;
  var secretConstructor = opt_subKey ?
      e2e.openpgp.packet.SecretSubkey : e2e.openpgp.packet.SecretKey;
  var pubKey = new publicConstructor(
      version, timestamp, cryptor);
  var serializedPubKey = pubKey.serializePacketBody();

  if (!goog.isDef(opt_isJS)) {
    opt_isJS = true;
  }
  var serializedPrivKey;
  if (opt_isJS) {
    // privKey is MPI, needs to serialize to get the right byte array.
    var privKey = new e2e.openpgp.Mpi(
        cryptor.getKey()['privKey']).serialize();
    serializedPrivKey = goog.array.flatten(
        serializedPubKey,
        /* key is not encrypted individually. */
        e2e.openpgp.EncryptedCipher.KeyDerivationType.PLAINTEXT,
        privKey,
        e2e.openpgp.calculateNumericChecksum(privKey));
  } else {
    // Use dummy s2k
    var s2k = new e2e.openpgp.DummyS2k(new e2e.hash.Sha256,
        [0x45, 0x32, 0x45],
        e2e.openpgp.DummyS2k.E2E_modes.WEB_CRYPTO);
    serializedPrivKey = goog.array.flatten(
        serializedPubKey,
        e2e.openpgp.EncryptedCipher.KeyDerivationType.S2K_CHECKSUM,
        s2k.serialize(), [0], [0]);
  }

  privKey = secretConstructor.parse(serializedPrivKey);
  privKey.cipher.unlockKey();
  keyData['privKey'].push(privKey);
  keyData['pubKey'].push(
      publicConstructor.parse(serializedPubKey));
};

// Copyright 2013 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Internal implementation of Context.
 */

goog.provide('e2e.openpgp.ContextImpl');

goog.require('e2e');
goog.require('e2e.async.Result');
/** @suppress {extraRequire} force loading of all ciphers */
goog.require('e2e.cipher.all');
/** @suppress {extraRequire} force loading of all compression methods */
goog.require('e2e.compression.all');
/** @suppress {extraRequire} force loading of all hash functions */
goog.require('e2e.hash.all');
goog.require('e2e.openpgp.ClearSignMessage');
goog.require('e2e.openpgp.Context');
goog.require('e2e.openpgp.KeyRing');
goog.require('e2e.openpgp.asciiArmor');
goog.require('e2e.openpgp.block.EncryptedMessage');
goog.require('e2e.openpgp.block.LiteralMessage');
goog.require('e2e.openpgp.block.Message');
goog.require('e2e.openpgp.block.TransferableKey');
goog.require('e2e.openpgp.block.factory');
goog.require('e2e.openpgp.error.ParseError');
goog.require('e2e.openpgp.error.PassphraseError');
/** @suppress {extraRequire} force loading of all signers */
goog.require('e2e.signer.all');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.async.DeferredList');
goog.require('goog.structs');
goog.require('goog.structs.Map');


/**
 * Implements a "context". Provides a high level API for encryption and signing
 *     services. This context is used by external code, such as the extension's
 *     user interface, to call the base OpenPGP library.
 * @constructor
 * @implements {e2e.openpgp.Context}
 */
e2e.openpgp.ContextImpl = function() {
  /**
   * List of headers to add to armored messages (Version, Comment, etc).
   * @type {!Object.<string>}
   * @private
   */
  this.armorHeaders_ = {};

  this.keyServerUrl = e2e.openpgp.ContextImpl.KEY_SERVER_URL || undefined;
};


/**
 * @define {string} The URL of the key server.
 */
e2e.openpgp.ContextImpl.KEY_SERVER_URL = '';


/** @override */
e2e.openpgp.ContextImpl.prototype.armorOutput = true;


/** @override */
e2e.openpgp.ContextImpl.prototype.keyServerUrl;


/** @override */
e2e.openpgp.ContextImpl.prototype.setArmorHeader = function(name, value) {
  this.armorHeaders_[name] = value;
};


/**
 * KeyRing used to store all of the user's keys.
 * @type {e2e.openpgp.KeyRing}
 * @private
 */
e2e.openpgp.ContextImpl.prototype.keyRing_ = null;


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.setKeyRingPassphrase = function(
    passphrase) {
  this.keyRing_ = new e2e.openpgp.KeyRing(passphrase, this.keyServerUrl);
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.changeKeyRingPassphrase = function(
    passphrase) {
  this.keyRing_.changePassphrase(passphrase);
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.hasPassphrase = function() {
  return goog.isDefAndNotNull(this.keyRing_) && this.keyRing_.hasPassphrase();
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.isKeyRingEncrypted = function() {
  return this.keyRing_.isEncrypted();
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.getKeyDescription = function(key) {
  try {
    if (typeof key == 'string') {
      key = e2e.openpgp.asciiArmor.parse(key).data;
    }
    var blocks = e2e.openpgp.block.factory.parseByteArrayMulti(key);
    return e2e.async.Result.toResult(
        e2e.openpgp.block.factory.extractKeys(blocks));
  } catch (e) {
    return e2e.async.Result.toError(e);
  }
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.importKey = function(
    passphraseCallback, key, opt_passphrase) {
  if (typeof key == 'string') {
    key = e2e.openpgp.asciiArmor.parse(key).data;
  }
  var blocks = e2e.openpgp.block.factory.parseByteArrayMulti(key);
  var importedBlocksResult = goog.array.map(blocks, function(block) {
    goog.asserts.assertInstanceof(block, e2e.openpgp.block.TransferableKey);
      if(goog.isDef(opt_passphrase)){
          return this.tryToImportKey_(passphraseCallback, block, null, opt_passphrase);
      }
      return this.tryToImportKey_(passphraseCallback, block);
  }, this);
  var allResults =
      /** @type {!goog.async.Deferred.<!Array.<!string>>} */ (
          goog.async.DeferredList.gatherResults(importedBlocksResult)
              .addCallback(function(importedBlocks) {
        return goog.array.flatten(goog.array.map(importedBlocks,
            function(block) {
              return block ? block.getUserIds() : [];
            }));
      }));
  return allResults;
};


/**
 * Attempts to decrypt and import the key with the given passphrase.
 * @param {function(string, function(string))} callback
 * @param {!e2e.openpgp.block.TransferableKey} block
 * @param {e2e.async.Result.<!Array.<string>>=} opt_result
 * @param {string=} opt_passphrase
 * @return {!e2e.async.Result.<!Array.<string>>} Result with all imported uids.
 * @private
 */
e2e.openpgp.ContextImpl.prototype.tryToImportKey_ = function(
    callback, block, opt_result, opt_passphrase) {
  var result = opt_result || new e2e.async.Result();
  try {
    var passphrase = goog.isDef(opt_passphrase) ?
        e2e.stringToByteArray(opt_passphrase) : undefined;
    this.keyRing_.importKey(block, passphrase);
    result.callback(block);
  } catch (e) {
    if (e instanceof e2e.openpgp.error.PassphraseError) {
      if (opt_passphrase == '') {
        // Allow the user to bail out.
        result.callback(null);
      } else {
        callback(
            block.getUserIds().join('\n'),
            goog.bind(this.tryToImportKey_, this, callback, block, result));
      }
    } else {
      result.errback(e);
    }
  }
  return result;
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.generateKey = function(
    keyAlgo, keyLength, subkeyAlgo, subkeyLength,
    name, comment, email, expirationDate) {
  var description = name || '';
  if (email) {
    if (description.length > 0) {
      description += ' ';
    }
    description += '<' + email + '>';
  }
  return this.keyRing_.generateKey(
      description, keyAlgo, keyLength, subkeyAlgo, subkeyLength).addCallback(
      function(res) {
        return goog.array.map(res, function(keyBlock) {
          return keyBlock.toKeyObject();
        });
      });
};


/**
 * Verifies a clearsign message signatures.
 * @param  {string|!e2e.openpgp.ClearSignMessage} clearSignMessage Message to
 *     verify.
 * @return {!e2e.openpgp.VerifyDecryptResult} verification result
 * @private
 */
e2e.openpgp.ContextImpl.prototype.verifyClearSign_ = function(
    clearSignMessage) {
  try {
    if (typeof clearSignMessage == 'string') {
      clearSignMessage = e2e.openpgp.asciiArmor.parseClearSign(
          clearSignMessage);
    }
    return this.processLiteralMessage_(clearSignMessage.toLiteralMessage());
  } catch (e) {
    return e2e.async.Result.toError(e);
  }
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.verifyDecrypt = function(
    passphraseCallback, encryptedMessage) {
  var encryptedData, charset;
  if (typeof encryptedMessage == 'string') {
    if (e2e.openpgp.asciiArmor.isClearSign(encryptedMessage)) {
      return this.verifyClearSign_(encryptedMessage);
    }
    var armoredMessage = e2e.openpgp.asciiArmor.parse(encryptedMessage);
    charset = armoredMessage.charset;
    encryptedData = armoredMessage.data;
  } else {
    encryptedData = encryptedMessage;
  }
  return this.verifyDecryptInternal(
      passphraseCallback, encryptedData, charset);
};


/**
 * Internal implementation of the verification/decryption operation.
 * @param {function(string, function(string))} passphraseCallback This callback
 *     is used for requesting an action-specific passphrase from the user.
 * @param {!e2e.ByteArray} encryptedMessage The encrypted data.
 * @param {string=} opt_charset The (optional) charset to decrypt with.
 * @protected
 * @return {!e2e.openpgp.VerifyDecryptResult}
 */
e2e.openpgp.ContextImpl.prototype.verifyDecryptInternal = function(
    passphraseCallback, encryptedMessage, opt_charset) {
  try {
    var block = e2e.openpgp.block.factory.parseByteArray(
        encryptedMessage, opt_charset);
    if (block instanceof e2e.openpgp.block.EncryptedMessage) {
      var keyCallback = goog.bind(this.keyRing_.getSecretKey, this.keyRing_);
      return block.decrypt(keyCallback, passphraseCallback).addCallback(
          this.processLiteralMessage_, this);
    } else {
      if (block instanceof e2e.openpgp.block.Message) {
        return this.processLiteralMessage_(block);
      } else {
        throw new e2e.openpgp.error.ParseError('Invalid message block.');
      }
    }
  } catch (e) {
    return e2e.async.Result.toError(e);
  }
};


/**
 * Processes a literal message and returns the result of verification.
 * @param {e2e.openpgp.block.Message} block
 * @return {!e2e.openpgp.VerifyDecryptResult}
 * @private
 */
e2e.openpgp.ContextImpl.prototype.processLiteralMessage_ = function(block) {
  var literalBlock = block.getLiteralMessage();
  var verifyResult = null;
  if (literalBlock.signatures) {
    verifyResult = this.verifyMessage_(literalBlock);
  }
  /** @type {!e2e.openpgp.VerifiedDecrypt} */
  var result = {
    'decrypt': {
      'data': literalBlock.getData(),
      'options': {
        'charset': literalBlock.getCharset(),
        'creationTime': literalBlock.getTimestamp(),
        'filename': literalBlock.getFilename()
      }
    },
    'verify': verifyResult
  };
  return e2e.async.Result.toResult(result);
};


/**
 * Verifies signatures places on a LiteralMessage
 * @param  {!e2e.openpgp.block.LiteralMessage} message Block to verify
 * @return {!e2e.openpgp.VerifyResult} Verification result.
 * @private
 */
e2e.openpgp.ContextImpl.prototype.verifyMessage_ = function(
    message) {
  // Get keys matching key IDs declared in signatures.
  var keyBlocks = goog.array.map(message.getSignatureKeyIds(), goog.bind(
      function(keyId) {
        return this.keyRing_.getKeyBlockById(keyId);
      }, this));
  // Verify not empty key blocks only
  var verifyResult = message.verify(goog.array.filter(keyBlocks,
      function(block) {
        return !goog.isNull(block);
      }));
  return {
    success: goog.array.map(verifyResult.success, function(key) {
      return key.toKeyObject();
    }),
    failure: goog.array.map(verifyResult.failure, function(key) {
      return key.toKeyObject();
    })
  };
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.encryptSign = function(
    plaintext, options, encryptionKeys, passphrases, opt_signatureKey) {
  var signatureKeyBlock;
  if (opt_signatureKey) {
    signatureKeyBlock = this.keyRing_.getKeyBlock(opt_signatureKey);
  }
  if (encryptionKeys.length == 0 && passphrases.length == 0 &&
      signatureKeyBlock) {
    return this.clearSignInternal(plaintext, signatureKeyBlock);
  }
  // De-duplicate keys.
  var keyMap = new goog.structs.Map();
  goog.array.forEach(encryptionKeys, function(key) {
    keyMap.set(key.key.fingerprintHex, key);
  });
  var encryptSignResult = this.encryptSignInternal(
      plaintext,
      options,
      goog.array.map(keyMap.getValues(), this.keyRing_.getKeyBlock,
                     this.keyRing_),
      passphrases,
      signatureKeyBlock);
  if (this.armorOutput) {
    return encryptSignResult.addCallback(function(data) {
      return e2e.openpgp.asciiArmor.encode(
          'MESSAGE', goog.asserts.assertArray(data), this.armorHeaders_);
    }, this);
  } else {
    return encryptSignResult;
  }
};


/**
 * Internal implementation of the encrypt/sign operation.
 * @param {string} plaintext The plaintext.
 * @param {!e2e.openpgp.block.TransferableKey} key The key to sign the
 *     message with.
 * @protected
 * @return {!e2e.openpgp.EncryptSignResult}
 */
e2e.openpgp.ContextImpl.prototype.clearSignInternal = function(
    plaintext, key) {
  var messageRes = e2e.openpgp.ClearSignMessage.construct(plaintext, key);
  return messageRes.addCallback(function(message) {
    return e2e.openpgp.asciiArmor.encodeClearSign(message, this.armorHeaders_);
  });
};


/**
 * Internal implementation of the encrypt/sign operation.
 * @param {string} plaintext The plaintext.
 * @param {!e2e.openpgp.EncryptOptions} options Metadata to add.
 * @param {!Array.<!e2e.openpgp.block.TransferableKey>} encryptionKeys The
 *     keys to encrypt the message with.
 * @param {!Array.<string>} passphrases Passphrases to use for symmetric
 *     key encryption of the message.
 * @param {e2e.openpgp.block.TransferableKey=} opt_signatureKey The key to
 *     sign the message with.
 * @protected
 * @return {!e2e.openpgp.EncryptSignResult}
 */
e2e.openpgp.ContextImpl.prototype.encryptSignInternal = function(
    plaintext, options, encryptionKeys, passphrases, opt_signatureKey) {
  try {
    var literal = e2e.openpgp.block.LiteralMessage.fromText(plaintext);
    var blockResult = e2e.openpgp.block.EncryptedMessage.construct(
        literal,
        encryptionKeys,
        passphrases,
        opt_signatureKey);
    var serializedBlock = blockResult.addCallback(function(block) {
      return block.serialize();
    }, this);
    return serializedBlock;
  } catch (e) {
    /** @type {!e2e.openpgp.EncryptSignResult} */
    var errorResult = new e2e.async.Result();
    errorResult.errback(e);
    return errorResult;
  }
};


/**
 * Searches a key (either public, private, or both) in the keyring.
 * @param {string} uid The user id.
 * @param {!e2e.openpgp.KeyRing.Type} type Type of key to search for.
 * @private
 * @return {!e2e.openpgp.KeyResult} The result of the search.
 */
e2e.openpgp.ContextImpl.prototype.searchKey_ = function(uid, type) {
  return this.keyRing_.searchKeyLocalAndRemote(uid, type).addCallback(
      function(keyBlocks) {
        return /** @type {!e2e.openpgp.Keys} */ (goog.array.map(keyBlocks,
            function(keyBlock) {
              return keyBlock.toKeyObject();
            }));
      });
};


/** @override */
e2e.openpgp.ContextImpl.prototype.searchPublicKey = function(uid) {
  return this.searchKey_(uid, e2e.openpgp.KeyRing.Type.PUBLIC);
};


/** @override */
e2e.openpgp.ContextImpl.prototype.searchPrivateKey = function(uid) {
    console.log(uid);
  return this.searchKey_(uid, e2e.openpgp.KeyRing.Type.PRIVATE);
};


/** @override */
e2e.openpgp.ContextImpl.prototype.searchKey = function(uid) {
  return this.searchKey_(uid, e2e.openpgp.KeyRing.Type.ALL);
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.getAllKeys = function(opt_priv) {
  var keyMap = this.keyRing_.getAllKeys(opt_priv);
  var result = /** @type {!e2e.openpgp.KeyRingMap} */ (
      goog.structs.map(keyMap, function(keyList) {
        return goog.array.map(keyList, function(keyBlock) {
          return keyBlock.toKeyObject();
        });
      }));
  return e2e.async.Result.toResult(result);
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.deleteKey = function(uid) {
  this.keyRing_.deleteKey(uid);
};

/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.deletePublicKey = function(uid) {
    this.keyRing_.deletePublicKey(uid);
};


/**
 * Obtains a passphrase from the user.
 * @param {function(string, function(string))} passphraseCallback This callback
 *     is used for requesting an action-specific passphrase from the user.
 * @param {string} message A message to display to the user.
 * @return {!e2e.async.Result.<!e2e.ByteArray>} A result with the passphrase.
 * @private
 */
e2e.openpgp.ContextImpl.prototype.getPassphrase_ =
    function(passphraseCallback, message) {
  /**
   * Obtains a passphrase from the user.
   * @type {!e2e.async.Result.<!e2e.ByteArray>}
   */
  var passphraseResult = new e2e.async.Result();
  passphraseCallback(message, function(passphrase) {
    passphraseResult.callback(e2e.stringToByteArray(passphrase));
  });
  return passphraseResult;
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.exportKeyring = function(armored) {
  return this.getAllKeys().addCallback(
      function(keys) {
        keys = new goog.structs.Map(keys);
        var serialized = goog.array.flatten(goog.array.map(
            goog.array.flatten(keys.getValues()),
            function(keyInfo) {
              return this.keyRing_.getKeyBlock(keyInfo).serialize();
            }, this));
        if (armored) {
          return e2e.openpgp.asciiArmor.encode(
              'PRIVATE KEY BLOCK', serialized, this.armorHeaders_);
        }
        return serialized;
      }, this);
};


/** @inheritDoc */
e2e.openpgp.ContextImpl.prototype.getKeyringBackupData = function() {
  return e2e.async.Result.toResult(this.keyRing_.getKeyringBackupData());
};


/** @inheritDoc */
/* TODO(user): Remove email when we can use keyserver for lookups */
e2e.openpgp.ContextImpl.prototype.restoreKeyring = function(data, email) {
  return e2e.async.Result.toResult(this.keyRing_.restoreKeyring(data, email));
};

